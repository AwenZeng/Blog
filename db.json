{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":1,"renderable":1},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/avatar.ico","path":"assets/img/avatar.ico","modified":1,"renderable":0},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_build_headfile.png","path":"assets/img/ndk_build_headfile.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_build_so.png","path":"assets/img/ndk_build_so.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_ndk_build_so.png","path":"assets/img/ndk_ndk_build_so.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_config.png","path":"assets/img/ndk_config.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_gradle_config.png","path":"assets/img/ndk_gradle_config.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_tool_javah.png","path":"assets/img/ndk_tool_javah.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_tool_ndk_build.png","path":"assets/img/ndk_tool_ndk_build.png","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_tools.png","path":"assets/img/ndk_tools.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_app_start_chart.png","path":"assets/img/tech_android_app_start_chart.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_basic_point_img01.png","path":"assets/img/tech_android_basic_point_img01.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_binder_ipc.png","path":"assets/img/tech_android_binder_ipc.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_ipc_aidl.png","path":"assets/img/tech_android_ipc_aidl.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_ipc_regist.png","path":"assets/img/tech_android_ipc_regist.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_window.png","path":"assets/img/tech_android_window.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_breakpoint_flowchart.png","path":"assets/img/tech_breakpoint_flowchart.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/assets/img/as_gradle_first.jpg","path":"assets/img/as_gradle_first.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/daxue.jpg","path":"assets/img/daxue.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/ndk_tool_gen_headfile.png","path":"assets/img/ndk_tool_gen_headfile.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_activity_start_flow.png","path":"assets/img/tech_activity_start_flow.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_activity_start_launcher_flow.png","path":"assets/img/tech_activity_start_launcher_flow.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_binder_data.png","path":"assets/img/tech_android_binder_data.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_binder_struct.png","path":"assets/img/tech_android_binder_struct.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_dispatch_event_flow.png","path":"assets/img/tech_android_dispatch_event_flow.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_draw_flow.png","path":"assets/img/tech_android_draw_flow.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_android_system_start_chart.png","path":"assets/img/tech_android_system_start_chart.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_loger_framwork.png","path":"assets/img/tech_loger_framwork.png","modified":1,"renderable":0},{"_id":"source/assets/img/tech_logger_output.png","path":"assets/img/tech_logger_output.png","modified":1,"renderable":0},{"_id":"source/assets/img/think_body_and_soul.jpg","path":"assets/img/think_body_and_soul.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/think_history_01.png","path":"assets/img/think_history_01.png","modified":1,"renderable":0},{"_id":"source/assets/img/think_history_04.png","path":"assets/img/think_history_04.png","modified":1,"renderable":0},{"_id":"source/assets/img/think_life_meaningful.jpg","path":"assets/img/think_life_meaningful.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/wechat_pay.jpg","path":"assets/img/wechat_pay.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/think_history_02.png","path":"assets/img/think_history_02.png","modified":1,"renderable":0},{"_id":"source/assets/img/think_guochuan_article.jpg","path":"assets/img/think_guochuan_article.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/think_history_03.png","path":"assets/img/think_history_03.png","modified":1,"renderable":0},{"_id":"source/assets/img/think_iam_because_of_you.jpeg","path":"assets/img/think_iam_because_of_you.jpeg","modified":1,"renderable":0},{"_id":"source/assets/img/as_gradle_fourth.jpg","path":"assets/img/as_gradle_fourth.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/tech_create_blog_record_img01.png","path":"assets/img/tech_create_blog_record_img01.png","modified":1,"renderable":0},{"_id":"source/assets/img/as_gradle_finish.jpg","path":"assets/img/as_gradle_finish.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/as_gradle_fifth.jpg","path":"assets/img/as_gradle_fifth.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/as_gradle_sixth.jpg","path":"assets/img/as_gradle_sixth.jpg","modified":1,"renderable":0},{"_id":"source/assets/img/think_poem_loushiming.jpg","path":"assets/img/think_poem_loushiming.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1561623315459},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1561623315460},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1561623315462},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1561623315465},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1561623315466},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1561623315468},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1561623315469},{"_id":"themes/yilia/_config.yml","hash":"9edb06c12633ba65b72e9661a40d93f8440d4c94","modified":1561623315471},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1561623315642},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1561623315776},{"_id":"source/_posts/tech-android-act-start-mode.md","hash":"7e045a4f9768843b5ba4249f8ab1a8c51554e3d9","modified":1561623315295},{"_id":"source/_posts/tech-android-basic-point.md","hash":"9e6c734e0211933a9e1aeba49c876f33f5e6cc4c","modified":1561623315297},{"_id":"source/_posts/tech_android_annontation.md","hash":"fa37d68ff2df6cfba0d729caa94394fd5b9c9b1d","modified":1561623315299},{"_id":"source/_posts/tech_android_camera.md","hash":"2f93cdd19ad78178a5e758ae31266d840bc1f359","modified":1561623315300},{"_id":"source/_posts/tech_android_encrypt_and_decode.md","hash":"193b832fd32c94c32f1b49afc1bc9f0b796c73db","modified":1561623315302},{"_id":"source/_posts/tech_android_framework_activity_decorview.md","hash":"90b8fbb1e31d2293baf7867ad0d8c079c8bc349e","modified":1561623315303},{"_id":"source/_posts/tech_android_framework_activity_loadLayout_I.md","hash":"9556ad084215be920384a18ac8581d7906aad531","modified":1561623315305},{"_id":"source/_posts/tech_android_framework_activity_loadLayout_II.md","hash":"74655c4f614e580d76779490082854fe8621dbd5","modified":1561623315307},{"_id":"source/_posts/tech_android_framework_activity_loadLayout_III.md","hash":"6bb2085de32dafa8cb975ac4decddb8de90f71e0","modified":1561687782051},{"_id":"source/_posts/tech_android_framework_appstart.md","hash":"b088b40dafc43f31a97f602cd503336763b81fe6","modified":1561623315308},{"_id":"source/_posts/tech_android_framework_binder.md","hash":"e311ffd1bc5658d8110c520328200c9cae0dd3fb","modified":1561623315310},{"_id":"source/_posts/tech_android_framework_handler.md","hash":"b6569388eea108d79802b2ef449be0c8c529e4bd","modified":1561623315313},{"_id":"source/_posts/tech_android_framework_ipc.md","hash":"adc731789ea19901bd8d086480329c9f96fed5c7","modified":1561623315314},{"_id":"source/_posts/tech_android_framework_dispatch_event.md","hash":"81d10b7fc6bb3dfb24696ad6a2faeed491e64e12","modified":1561623315311},{"_id":"source/_posts/tech_android_framework_startactivity.md","hash":"c8f9cba20fb254666850fd70f0292dbdd13dcc84","modified":1561623315316},{"_id":"source/_posts/tech_android_framework_startactivity_launcher.md","hash":"06b1a057b29e6586c58ea5a4cdd82e34043571f6","modified":1561623315317},{"_id":"source/_posts/tech_android_framework_surface_draw.md","hash":"e43a67a0e85710be2787e573d894be85707864c3","modified":1561623315320},{"_id":"source/_posts/tech_android_framework_view_draw.md","hash":"454606688c48f2b6c8f684e8d4a4f377c97c8f1d","modified":1561623315321},{"_id":"source/_posts/tech_android_framework_window.md","hash":"a8d585e096013b3c7f2f791197311b32ce947b41","modified":1561623315323},{"_id":"source/_posts/tech_android_mvp.md","hash":"0fd27078c3e67134c5771ddade94aebdb4acd411","modified":1561623315324},{"_id":"source/_posts/tech_android_ndk.md","hash":"3404042b822fe3bb433fbca4d52c3b38c232740a","modified":1561623315326},{"_id":"source/_posts/tech_android_studio_config_optimize.md","hash":"a9a61e7ee6a4b79b382505cc25234ed059eb1d54","modified":1561623315329},{"_id":"source/_posts/tech_android_opensource_libs.md","hash":"8215137448e9536e5fb0b4ed09aa3f9985d1f0c8","modified":1561623315327},{"_id":"source/_posts/tech_butterknife.md","hash":"54a104aba293e0111f20fc37046bd815815c90a4","modified":1561623315330},{"_id":"source/_posts/tech_create_blog_record.md","hash":"b415c2d39afb35c25b37a3cbfb90c2924e579a6e","modified":1561623315332},{"_id":"source/_posts/tech_design_pattern.md","hash":"d055931719c223c4e37c067daa78026a4bc4fcb6","modified":1561623315333},{"_id":"source/_posts/tech_fragment.md","hash":"aaee8fe3cf8efbc7d2e2c87aa03ec9340c9e1420","modified":1561623315335},{"_id":"source/_posts/tech_java_collections.md","hash":"61a6bafea1b0dd3cc9c4c24f200137190c876641","modified":1561623315338},{"_id":"source/_posts/tech_java_date_format.md","hash":"46bbd253986c9da0cce8e61b2b6b0f554a394921","modified":1561623315340},{"_id":"source/_posts/tech_http_breakpoint.md","hash":"57fa1902fa834de97c177c4e703ffd789b3d1042","modified":1561623315336},{"_id":"source/_posts/tech_logger.md","hash":"05cec45beef4ac0c8dbefde1ddf135fcd2cb42e2","modified":1561623315342},{"_id":"source/_posts/tech_leakcanary.md","hash":"10a7bc99d93bcfeaecb0e94fb293b133962d1df2","modified":1561623315341},{"_id":"source/_posts/tech_rxjava_basic.md","hash":"301f9d0e07756d5169dd95308263dc769cec9ab3","modified":1561623315343},{"_id":"source/_posts/tech_study_website.md","hash":"28e3e12acaab46e8890b696d882de0b2cb8771b0","modified":1561623315344},{"_id":"source/_posts/think_body_and_soul.md","hash":"19658c6c8491977c4cc6776a1c5865b2de92c621","modified":1561623315345},{"_id":"source/_posts/think_body_and_soul_3.md","hash":"55eb571dd3ab7feec01152afd75552d12e33fe44","modified":1561623315347},{"_id":"source/_posts/think_body_and_soul_2.md","hash":"e312b1f99f44e901c11240bf6f9af32d2fd64fd1","modified":1561623315346},{"_id":"source/_posts/think_body_and_soul_4.md","hash":"3f73989b9b23a501dddedee539ac302a9fe9fca5","modified":1561623315349},{"_id":"source/_posts/think_china_history_map.md","hash":"9402db2537c49edefc10d25f41e3e28a9bb8c9e1","modified":1561623315349},{"_id":"source/_posts/think_guochuan_article.md","hash":"41413a2d8afa7f5bf6323e1134c20638ac47bead","modified":1561623315351},{"_id":"source/_posts/think_iam_because_of_you.md","hash":"9c58d40bd5c0d6f630b8f68131132627c9febf46","modified":1561623315352},{"_id":"source/_posts/think_life_meaningful.md","hash":"5cc06873f18a865d6ce4a3457bca03d306778dbe","modified":1561623315354},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1561623315473},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1561623315476},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1561623315475},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1561623315478},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1561623315480},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1561623315482},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1561623315484},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1561623315628},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1561623315629},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1561623315631},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1561623315632},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561623315634},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561623315639},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1561623315640},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1561623315767},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"25e34d09ead8cabd34d777997c4b1f073918f6cf","modified":1561623315774},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1561623315644},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1561623315749},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561623315623},{"_id":"themes/yilia/source/main.266c1c.js","hash":"42f38b932426a0bd24a41343a75f8517ca00e8eb","modified":1561623315769},{"_id":"themes/yilia/source/mobile.906508.js","hash":"60329066ec16a2f264b438b94c9d1cc44a551f88","modified":1561623315772},{"_id":"source/assets/img/alipay.jpg","hash":"57969619aef137f74f304132efbff53fd76520f9","modified":1561623315357},{"_id":"source/assets/img/avatar.ico","hash":"424b445f3d6099d55ff185558c606fb829c64d17","modified":1561623315375},{"_id":"source/assets/img/avatar.jpg","hash":"758951c8dc8b33fa2153970effaf45d70621c7a1","modified":1561623315377},{"_id":"source/assets/img/ndk_build_headfile.png","hash":"7880b9057ef36bb044e29fed34f5ca78be94b32d","modified":1561623315380},{"_id":"source/assets/img/ndk_build_so.png","hash":"6431d901a46ab870114a6d95813dbe11b4a9b5d5","modified":1561623315382},{"_id":"source/assets/img/ndk_ndk_build_so.png","hash":"e42d318c26877d2287756d417abbdaf33924925b","modified":1561623315387},{"_id":"source/assets/img/ndk_config.png","hash":"5c616d1b660f1ef916aa857562f2d4e38b352a2d","modified":1561623315383},{"_id":"source/assets/img/ndk_gradle_config.png","hash":"9d8d7608f9fdc080f6b48516813ec6bf5ea37a44","modified":1561623315385},{"_id":"source/assets/img/ndk_tool_javah.png","hash":"c62846295445070e9a279d0aac528bf876f9e8c1","modified":1561623315390},{"_id":"source/assets/img/ndk_tool_ndk_build.png","hash":"9dfb93360006c39cbcd018853ce011d69c41c6d3","modified":1561623315392},{"_id":"source/assets/img/ndk_tools.png","hash":"2b2e008d22873c3934952c2f1c2d1600c9544ae0","modified":1561623315394},{"_id":"source/assets/img/tech_android_app_start_chart.png","hash":"cf403ec7c16e2852574d45444de55895b6ae3e73","modified":1561623315400},{"_id":"source/assets/img/tech_android_basic_point_img01.png","hash":"cb517fb7c8e3edcb24a4e1c08843fd1896371447","modified":1561623315402},{"_id":"source/assets/img/tech_android_binder_ipc.png","hash":"213e592431de3082648a306e2ff42f4938a4f53f","modified":1561623315405},{"_id":"source/assets/img/tech_android_ipc_aidl.png","hash":"e0534cc8b7eef73645b657db7107a03ae4dad08c","modified":1561623315413},{"_id":"source/assets/img/tech_android_ipc_regist.png","hash":"ba99eef84daabfaa5f39187ebe6758f124802243","modified":1561623315415},{"_id":"source/assets/img/tech_android_window.png","hash":"b81665289b6c4c7ee007e7afbb978ba64bcedd44","modified":1561623315418},{"_id":"source/assets/img/tech_breakpoint_flowchart.png","hash":"060d2be94507ded9da3aa3ec7753a2d2b95ba03e","modified":1561623315420},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1561623315487},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1561623315489},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1561623315490},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"dff6e1f3b5e82495ec776baa24d9e6bbaad883df","modified":1561623315492},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1561623315590},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1561623315592},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1561623315593},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1561623315595},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1561623315596},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1561623315598},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1561623315599},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1561623315602},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1561623315601},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1561623315604},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1561623315626},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1561623315625},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1561623315752},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561623315753},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561623315757},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1561623315755},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561623315759},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561623315760},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1561623315762},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1561623315764},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561623315765},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1561623315646},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1561623315648},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1561623315649},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1561623315665},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1561623315667},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1561623315668},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1561623315670},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1561623315673},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1561623315684},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1561623315693},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1561623315695},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1561623315697},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1561623315698},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1561623315705},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1561623315706},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1561623315708},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1561623315712},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1561623315671},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1561623315714},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1561623315716},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1561623315717},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1561623315719},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1561623315720},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1561623315722},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1561623315723},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1561623315724},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1561623315726},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1561623315728},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1561623315730},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1561623315732},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1561623315734},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d12df875d3b587354ce59fb7c431ecece53560e3","modified":1561623315736},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1561623315737},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1561623315740},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1561623315741},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1561623315743},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1561623315745},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1561623315746},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1561623315748},{"_id":"source/assets/img/as_gradle_first.jpg","hash":"fc9370b0091ecd7591c217acbcdd1a444053c343","modified":1561623315366},{"_id":"source/assets/img/daxue.jpg","hash":"9b6b9cf92bd32cd0d8ef94dc32fac68262bdc909","modified":1561623315378},{"_id":"source/assets/img/ndk_tool_gen_headfile.png","hash":"f686fdc86621885de536350e94519230fbe0f738","modified":1561623315389},{"_id":"source/assets/img/tech_activity_start_flow.png","hash":"baabea79ff9211fdb8a41ef08b9541a1a0d2006e","modified":1561623315396},{"_id":"source/assets/img/tech_activity_start_launcher_flow.png","hash":"fd8780e0e0a17f44b72b2fda783c54dc233bf0d9","modified":1561623315398},{"_id":"source/assets/img/tech_android_binder_data.png","hash":"3b52324289e60612ade0df9ac31b62df0ec7567d","modified":1561623315404},{"_id":"source/assets/img/tech_android_binder_struct.png","hash":"9a135d4ede575f2c78f9a48f19f8f72c69976f89","modified":1561623315407},{"_id":"source/assets/img/tech_android_dispatch_event_flow.png","hash":"c82946ca2d954be44d5ef9e3a561eca8dfa09202","modified":1561623315409},{"_id":"source/assets/img/tech_android_draw_flow.png","hash":"60d640f95c78c247502c445dc78502528672690d","modified":1561623315411},{"_id":"source/assets/img/tech_android_system_start_chart.png","hash":"70c7e46544c81cf2c0155bb809919ea57cb033fd","modified":1561623315417},{"_id":"source/assets/img/tech_loger_framwork.png","hash":"a745e1142787b3c46692b40dc05477d4f0b9aefe","modified":1561623315424},{"_id":"source/assets/img/tech_logger_output.png","hash":"f333ab87f49c93089bae95dacd24d0102db02acf","modified":1561623315426},{"_id":"source/assets/img/think_body_and_soul.jpg","hash":"f6ed8884447bdcc8e5ff394d41cce682c98b5571","modified":1561623315428},{"_id":"source/assets/img/think_history_01.png","hash":"5a5841ca104ffc5c68964973951a62efcd0e227f","modified":1561623315434},{"_id":"source/assets/img/think_history_04.png","hash":"932915e205e6ac9336f28f9ae4f7dc992cc35c7b","modified":1561623315440},{"_id":"source/assets/img/think_life_meaningful.jpg","hash":"19557b80148e64041a4b04efabb61ce59397f6d7","modified":1561623315444},{"_id":"source/assets/img/wechat_pay.jpg","hash":"68db0b45cc128145776978d7da942b33c492c0c1","modified":1561623315456},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"c71c3e704e844df3676f4a1b82d9cd8286f0b06b","modified":1561623315622},{"_id":"source/assets/img/think_history_02.png","hash":"a5bb13cb525b14f3900867fc291febe2cee0daa3","modified":1561623315436},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1561623315606},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"cc384aeaed9ffde92efdf192c26db4da3fe5858f","modified":1561623315608},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1561623315609},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1561623315611},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1561623315613},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1561623315614},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1561623315617},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1561623315619},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1561623315620},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1561623315675},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1561623315676},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1561623315678},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1561623315683},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1561623315681},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561623315686},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561623315690},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561623315692},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1561623315700},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561623315702},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561623315703},{"_id":"source/assets/img/think_guochuan_article.jpg","hash":"c788f0f61e21c6af9177cfe24d398a2178cab09d","modified":1561623315431},{"_id":"source/assets/img/think_history_03.png","hash":"4a369fce006f63ddfc7227deb2a75b14902cb15a","modified":1561623315438},{"_id":"source/assets/img/think_iam_because_of_you.jpeg","hash":"3b0acd64a8883b58af47d5a6bbb380a24a75585c","modified":1561623315442},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1561623315688},{"_id":"source/assets/img/as_gradle_fourth.jpg","hash":"d48f9338d033bd2fdaf4ce5c1fe744f0bb599c5a","modified":1561623315370},{"_id":"source/assets/img/tech_create_blog_record_img01.png","hash":"bf120707b14bc1695ca16b5e692159f673859b6d","modified":1561623315422},{"_id":"source/assets/img/as_gradle_finish.jpg","hash":"255a996938f0650914a3af92538698b4660eedb9","modified":1561623315365},{"_id":"source/assets/img/as_gradle_fifth.jpg","hash":"42858c8116a5fb0d3c53a544dc21cc20d16640cb","modified":1561623315361},{"_id":"source/assets/img/as_gradle_sixth.jpg","hash":"b6c8fe0ca1015db63bbef505d88e2949e8bb4785","modified":1561623315373},{"_id":"source/assets/img/think_poem_loushiming.jpg","hash":"bd0dc61706e8586a3205b53fdf8d49567d9db069","modified":1561623315454},{"_id":"public/baidusitemap.xml","hash":"855634423ac195999ada61bab8a97797f7eff4c4","modified":1561692327183},{"_id":"public/content.json","hash":"713c1b96105f169dedf030f9aa8b0799355efb5d","modified":1561692327607},{"_id":"public/sitemap.xml","hash":"5cbec7f2b33912f1f539651e523f5cd33da6d5de","modified":1561692327697},{"_id":"public/2019/06/28/tech_android_framework_activity_loadLayout_III/index.html","hash":"ae52b87bb823857d3589edb5be8d1f1c5df7a347","modified":1561692327705},{"_id":"public/2018/03/05/tech_android_framework_surface_draw/index.html","hash":"94d6b6a777c16284935e01e7ba60ee222ce5f968","modified":1561692327705},{"_id":"public/2018/01/09/tech_android_framework_dispatch_event/index.html","hash":"94745c1d928f5adacb5cbd947cb5fcdbee192f43","modified":1561692327705},{"_id":"public/2018/01/08/tech_android_framework_view_draw/index.html","hash":"c300eb4816754b60e930c1ab476366181830d861","modified":1561692327705},{"_id":"public/2018/01/05/tech_android_framework_activity_decorview/index.html","hash":"cb93db4d83f819e1dee4280f03a9f5582948a85c","modified":1561692327705},{"_id":"public/2018/01/03/tech_android_framework_activity_loadLayout_II/index.html","hash":"8d5292a2934c8c867959fb1debd6524f8f7b0540","modified":1561692327705},{"_id":"public/2017/12/29/tech_android_framework_activity_loadLayout_I/index.html","hash":"39c6152767c669d2bb4608f817e37dc35d0ebbe3","modified":1561692327706},{"_id":"public/2017/12/27/tech_android_framework_startactivity_launcher/index.html","hash":"85a081ea8772071060762dcadf40ca96ba6e3c8a","modified":1561692327706},{"_id":"public/2017/12/26/tech_android_framework_startactivity/index.html","hash":"b4e72707edc452cfcd39b0a365479cc463f03443","modified":1561692327706},{"_id":"public/2017/12/15/tech_android_framework_ipc/index.html","hash":"1fef9e4e10fdc5a607cd167bd50733017d99e7bf","modified":1561692327706},{"_id":"public/2017/12/14/tech_android_framework_binder/index.html","hash":"003a73651262a851c5a41ffa6cc1e796c6c9b4c3","modified":1561692327706},{"_id":"public/2017/12/13/tech_design_pattern/index.html","hash":"755b3066b9cace760d7923cd753669d023a47da9","modified":1561692327706},{"_id":"public/2017/11/30/tech_logger/index.html","hash":"4bf9d66c29737b149b13aef4cd0335f0a489b75d","modified":1561692327706},{"_id":"public/2017/11/23/tech_android_framework_appstart/index.html","hash":"e3b7bab670ede4fdbde22e64c54fc631278150a8","modified":1561692327706},{"_id":"public/2017/11/21/tech_android_framework_handler/index.html","hash":"2c631caab4f41ade591aae11ca8d89ea7657f8e0","modified":1561692327706},{"_id":"public/2017/11/17/tech_butterknife/index.html","hash":"99ee28f1f5189087af9f1fb631137e0a2093541e","modified":1561692327707},{"_id":"public/2017/11/16/tech_leakcanary/index.html","hash":"cb5130f86d6f46d4029bf7283e984c35492ff365","modified":1561692327707},{"_id":"public/2017/11/10/tech_fragment/index.html","hash":"7416e0e765764ea9d555a0ad4255f575583a7e85","modified":1561692327707},{"_id":"public/2017/10/17/tech_android_framework_window/index.html","hash":"fbae1b59fd4de18157e1d2beb33329582b422d96","modified":1561692327707},{"_id":"public/2017/10/16/think_body_and_soul_4/index.html","hash":"663a2a596d50ef4de39b915ffcb4b8e1bec69895","modified":1561692327707},{"_id":"public/2017/09/22/tech_java_collections/index.html","hash":"261a396ec1e33122fa28775091a568f6eac482ad","modified":1561692327707},{"_id":"public/2017/09/08/tech_http_breakpoint/index.html","hash":"f236a1c60e58995df6121547a663d1c3d559e48f","modified":1561692327707},{"_id":"public/2017/09/04/think_body_and_soul_3/index.html","hash":"9cb60313bb3fb91daff21fdb5dd95bee8442d53a","modified":1561692327707},{"_id":"public/2017/08/21/tech_android_camera/index.html","hash":"5b1d220247ecb9b8bda2a3e13da5cb7b97d8f532","modified":1561692327707},{"_id":"public/2017/08/21/think_body_and_soul_2/index.html","hash":"3430602cf21d891a4ee4d0d8fe86e62041752dbd","modified":1561692327707},{"_id":"public/2017/08/11/think_guochuan_article/index.html","hash":"2ce66df4b96d94ee68cf95f880a8fc8c1ed6828c","modified":1561692327707},{"_id":"public/2017/08/08/tech_android_studio_config_optimize/index.html","hash":"badc5dec7f3643f5089ed72e4bdbe5df0d9563a5","modified":1561692327708},{"_id":"public/2017/08/01/tech_android_annontation/index.html","hash":"db634e31960d73e9d0733093fa92728176464d48","modified":1561692327708},{"_id":"public/2017/07/19/think_iam_because_of_you/index.html","hash":"b09b27060db1cf44e8053e2e70afcdd7267294d4","modified":1561692327708},{"_id":"public/2017/06/30/tech_android_ndk/index.html","hash":"9a97f5911ca4a8ed2010df7e09a2dca28cb5898b","modified":1561692327708},{"_id":"public/2017/05/24/think_body_and_soul/index.html","hash":"0abdb9f339f30e4190c8755946fa82ebd1846323","modified":1561692327708},{"_id":"public/2017/05/17/tech_java_date_format/index.html","hash":"006b81c88140f2219d672ad7e2bd8bc5daa07c0f","modified":1561692327708},{"_id":"public/2017/05/10/tech_android_encrypt_and_decode/index.html","hash":"40ba4e4275a017399f79e4b1a8d443c9d2ab4622","modified":1561692327708},{"_id":"public/2017/05/10/think_china_history_map/index.html","hash":"9e54e3ab1032cb27f38dcd4c555dba7ba715ad8a","modified":1561692327708},{"_id":"public/2017/05/10/think_life_meaningful/index.html","hash":"77706f1e5b223a29a352240943482049fac7c653","modified":1561692327708},{"_id":"public/2017/05/03/tech_android_opensource_libs/index.html","hash":"dfe804eaf8b4243d49dfdb1dbc8536be46d1744f","modified":1561692327708},{"_id":"public/2017/04/11/tech_android_mvp/index.html","hash":"e8142d73fd5471a46c49ecce4be598ff18bac325","modified":1561692327709},{"_id":"public/2017/04/11/tech-android-basic-point/index.html","hash":"f50610c8b9098b87f0655484e7fdd13674ab5569","modified":1561692327709},{"_id":"public/2017/03/25/tech-android-act-start-mode/index.html","hash":"293c972284f1e2810ffc410565326fd02c8a6f89","modified":1561692327709},{"_id":"public/2017/03/17/tech_study_website/index.html","hash":"ef45313e8e8081aa3498323fa184aa74efe2438c","modified":1561692327709},{"_id":"public/2017/03/16/tech_rxjava_basic/index.html","hash":"ceaa6f9cf5503de533573a9c2cadabde86eada3d","modified":1561692327709},{"_id":"public/2017/03/12/tech_create_blog_record/index.html","hash":"bff5b08e0190011bd7b32b5652c0aa9887c84b79","modified":1561692327709},{"_id":"public/archives/index.html","hash":"c62eccc3aeed56842c4f72aef26a8d01a451be63","modified":1561692327709},{"_id":"public/archives/2017/index.html","hash":"944de1cb005328ca5de35163f8bedaccc14ec408","modified":1561692327709},{"_id":"public/archives/2017/03/index.html","hash":"61dcca8f2ebfb5e88600506fb85262b9a0a3380f","modified":1561692327709},{"_id":"public/archives/2017/04/index.html","hash":"f0cca00ebc79892b62de0a92e585cb0754f8bbd7","modified":1561692327709},{"_id":"public/archives/2017/05/index.html","hash":"a55714ffe6ea12f0db85095f599a7b11194f1e03","modified":1561692327709},{"_id":"public/archives/2017/06/index.html","hash":"e7587b746b4e2350f6b0eb520a99cd8739d5c139","modified":1561692327710},{"_id":"public/archives/2017/07/index.html","hash":"7c8cd53476a6a6f665fb4adc69589a15cadafdcf","modified":1561692327710},{"_id":"public/archives/2017/08/index.html","hash":"b09b56efd07c1370f5166d17eb357d981df4702a","modified":1561692327710},{"_id":"public/archives/2017/09/index.html","hash":"9e72192911ac8e350a7ed9ae1803a87dcc27b9a9","modified":1561692327710},{"_id":"public/archives/2017/10/index.html","hash":"e898642935c01e44e6f829ee847635f5384bb0f4","modified":1561692327710},{"_id":"public/archives/2017/11/index.html","hash":"c1f4640159e5711842917f31f6780b504d3e2cbe","modified":1561692327710},{"_id":"public/archives/2017/12/index.html","hash":"c0364240f051ad418cb52974a5f4c7f3f581f341","modified":1561692327710},{"_id":"public/archives/2018/index.html","hash":"d7c3c0e79e9aaf93254b025630b91e89cb28193b","modified":1561692327710},{"_id":"public/archives/2018/01/index.html","hash":"354dceadbfdf9d29c16acf86aa63ef51079d7d31","modified":1561692327710},{"_id":"public/archives/2018/03/index.html","hash":"b59ed2add404e4883a7946a206dca24bf04eb8e9","modified":1561692327710},{"_id":"public/archives/2019/index.html","hash":"40608732de7b90d4df10055add1edbe3376cbda2","modified":1561692327710},{"_id":"public/archives/2019/06/index.html","hash":"49affe4b589e62d093eccdb1118c527d964c6893","modified":1561692327711},{"_id":"public/index.html","hash":"0211bb55c82ee12cd8759a6395a418d7f236340f","modified":1561692327711},{"_id":"public/page/2/index.html","hash":"7b640eb8d8692c05602deb2cba3c0761b81b2a7d","modified":1561692327711},{"_id":"public/page/3/index.html","hash":"63c9edc9a14113127c72dc386872eb0b18e86fdb","modified":1561692327711},{"_id":"public/page/4/index.html","hash":"3fdffbb17e4ced2506affce91c2cfd3e267c88f2","modified":1561692327711},{"_id":"public/page/5/index.html","hash":"8debd94cb8a488946110d60c5009d6a8424e5a81","modified":1561692327711},{"_id":"public/tags/技术/index.html","hash":"3c32106d9afb2d5692d5178e09fac42f961d805b","modified":1561692327711},{"_id":"public/tags/技术/page/2/index.html","hash":"303b4f0b141bf16cf0731d1c61a27cb8ceb7b45e","modified":1561692327711},{"_id":"public/tags/技术/page/3/index.html","hash":"86f6a69d1230be874f190a60d2b44bdcb153391b","modified":1561692327711},{"_id":"public/tags/技术/page/4/index.html","hash":"d3e03fc274175a7d205eb8122e211567ac004dbb","modified":1561692327711},{"_id":"public/tags/Android/index.html","hash":"ed74d10a5084f0c82b7d696b88d350d1c06f0b11","modified":1561692327711},{"_id":"public/tags/Android/page/2/index.html","hash":"86dd50717980ccc8d89277db35b24c3d7a881056","modified":1561692327712},{"_id":"public/tags/Android/page/3/index.html","hash":"ffd36affde90099a0381c1db9174391e209a8663","modified":1561692327712},{"_id":"public/tags/Activity的启动模式/index.html","hash":"29ddfe3e8ce876b83eb212bb0695724fc82d8ae1","modified":1561692327712},{"_id":"public/tags/Android注解/index.html","hash":"0fa03ede9ba1315f9ad918b446153ffda242ceac","modified":1561692327712},{"_id":"public/tags/Java反射机制/index.html","hash":"391fbabad62fb943631773a0a119eacdbdb20dcd","modified":1561692327712},{"_id":"public/tags/Java动态代理/index.html","hash":"864395ed4920990729882d06ac239031e110f0e2","modified":1561692327712},{"_id":"public/tags/NDK/index.html","hash":"7aeffcfa2bba43da65d823f3109f148895544fda","modified":1561692327712},{"_id":"public/tags/JNI-C-C/index.html","hash":"89621f3da0f2e5829591bad76c3c8d6ccb31ec5c","modified":1561692327712},{"_id":"public/tags/Android基础/index.html","hash":"5e93c1a6a15219c96919096cdd6caf3fcf1c3400","modified":1561692327712},{"_id":"public/tags/MVP/index.html","hash":"7bb3ff8db0a22a0180f85c922e1d5b8541aed995","modified":1561692327712},{"_id":"public/tags/开源框架/index.html","hash":"6c305ac7c528efd5a7d37355e31ae864593d178d","modified":1561692327712},{"_id":"public/tags/AS-Gradle优化/index.html","hash":"6d9f4722bfce7ac8adf3689494d775468fa09310","modified":1561692327713},{"_id":"public/tags/设计模式/index.html","hash":"97ea3e1722fb910ea24e03a2c9677d95ca8bd7c5","modified":1561692327713},{"_id":"public/tags/Fragment/index.html","hash":"b38b6e7de0b878ac96a72bbe06165006f3864876","modified":1561692327713},{"_id":"public/tags/博客搭建/index.html","hash":"1caa4853ccec2ea9590f17f737008d65bef6a251","modified":1561692327713},{"_id":"public/tags/Java/index.html","hash":"6a2977480ca172e0bf5aee47e553ad0367174524","modified":1561692327713},{"_id":"public/tags/Java基础/index.html","hash":"b52dab3024c7ec047ad8d229bae713676b2ba9a3","modified":1561692327713},{"_id":"public/tags/Rxjava/index.html","hash":"5974a850fc4f8573f794835f6d119e396d338cf8","modified":1561692327713},{"_id":"public/tags/Rxandroid/index.html","hash":"fdbd75b3a65f5353e3d00c9fd6bd14097b1d0308","modified":1561692327713},{"_id":"public/tags/响应式编程/index.html","hash":"3a0abe661b492a6fc6a7e2464f6cc84ed5fc29c2","modified":1561692327713},{"_id":"public/tags/随想/index.html","hash":"a2d4643607bf911067687cc9709c077955bdd561","modified":1561692327713},{"_id":"public/tags/你本是一个肉体，是什么驱使你前行/index.html","hash":"816525db426cecc73114655a14e0f5d0172faeed","modified":1561692327713},{"_id":"public/tags/原创/index.html","hash":"ebd31b6b8a71cc6600567017f964e8209e647bdf","modified":1561692327714},{"_id":"public/tags/笔沫拾光/index.html","hash":"a1762b78b7504186d45a094df080c07a000a0484","modified":1561692327714},{"_id":"public/tags/王阳明心学/index.html","hash":"d57ba44bc8bd37b1d81d367807af9d5047a74ea6","modified":1561692327714},{"_id":"public/tags/中国历史/index.html","hash":"242820770208f4601faab4511fad88f418a5236a","modified":1561692327714},{"_id":"public/tags/演讲/index.html","hash":"6095336dbe7cb46d8f1a3b5531d41672f51a55dc","modified":1561692327714},{"_id":"public/tags/执着的人是幸福的/index.html","hash":"5d8783bdb58a1e91d1fef0e36635a4be1c59b89e","modified":1561692327714},{"_id":"public/tags/郭川/index.html","hash":"51b8f49609ba9064fade0ad3e217d2e85316c4a6","modified":1561692327714},{"_id":"public/tags/人生的意义/index.html","hash":"f80feab5f3fd6d6856eb63eae397ed211a3840bc","modified":1561692327714},{"_id":"public/tags/加解密算法/index.html","hash":"b8c95de26c96c2b6e5d28b8f10ab038c3931aaab","modified":1561692327714},{"_id":"public/tags/Android框架源码解析/index.html","hash":"442d8272d5299a4d26e6b813416e746fdbf9a5c2","modified":1561692327714},{"_id":"public/tags/Android框架源码解析/page/2/index.html","hash":"3fe6781d96169e14a250d65ea59b225e08bd22c7","modified":1561692327714},{"_id":"public/tags/Binder通信机制/index.html","hash":"d5cbad3f416ebebaff6c3f0a460a587545be3b39","modified":1561692327715},{"_id":"public/tags/Java集合类/index.html","hash":"3f367322a80926971147a5c9f19819515ad3fc77","modified":1561692327715},{"_id":"public/tags/转载/index.html","hash":"7be80796a47e0a4349066feb6233e26c6620414c","modified":1561692327715},{"_id":"public/tags/Http文件断点续传/index.html","hash":"962e53e8bddc04fbc97d4f61acfc90be58d53873","modified":1561692327715},{"_id":"public/tags/开源框架源码解析/index.html","hash":"b1a09ab2eb786d3d4f0f798818f67330df7b6263","modified":1561692327715},{"_id":"public/tags/Logger框架源码解析/index.html","hash":"c1df43ac196e8fad20b108443b3b26525fb868c2","modified":1561692327715},{"_id":"public/tags/LeakCanary框架源码分析/index.html","hash":"28c259a535ff744d09d8d15eb6d77c05ec890a64","modified":1561692327715},{"_id":"public/tags/DecorView绘制流程/index.html","hash":"c525f3073ecf5769eb08567d7bf63a715f8ce888","modified":1561692327715},{"_id":"public/tags/Android应用程序入口源码解析/index.html","hash":"f6e58b8002b243697153a6bf97538062dbe9a9a7","modified":1561692327715},{"_id":"public/tags/Android消息机制源码解析/index.html","hash":"296d67373487b53bf1d37873d8d648a2c80e87d6","modified":1561692327715},{"_id":"public/tags/Activity启动流程/index.html","hash":"dd31afd32b01665356eb63ceaba05bd178105b29","modified":1561692327715},{"_id":"public/tags/Butterknife框架源码解析/index.html","hash":"b88be68887b79443ad1e0605b0f4682cac48a835","modified":1561692327716},{"_id":"public/tags/我之存在，因为有你/index.html","hash":"6482cee54fcf4db2f5f10ca4d242d73ce065a2a5","modified":1561692327716},{"_id":"public/tags/霍华德-舒尔茨/index.html","hash":"2276ddc421d3ca0dfdd6d495e692a1515e978d06","modified":1561692327716},{"_id":"public/tags/Android相机/index.html","hash":"45d715d8a5f2bcaaed688ff9a91cb7ec2134091e","modified":1561692327716},{"_id":"public/tags/Camera/index.html","hash":"e940e384381dc0a72f404a7b04ec99d055cbe594","modified":1561692327716},{"_id":"public/tags/悬浮窗/index.html","hash":"f27e27705584f6b7b76dff0295f79ef3290db018","modified":1561692327716},{"_id":"public/tags/WindowManager/index.html","hash":"a53d4cdcc623c399d88356b100717062f609580b","modified":1561692327716},{"_id":"public/assets/img/avatar.ico","hash":"424b445f3d6099d55ff185558c606fb829c64d17","modified":1561692327738},{"_id":"public/assets/img/avatar.jpg","hash":"758951c8dc8b33fa2153970effaf45d70621c7a1","modified":1561692327738},{"_id":"public/assets/img/ndk_ndk_build_so.png","hash":"e42d318c26877d2287756d417abbdaf33924925b","modified":1561692327738},{"_id":"public/assets/img/ndk_build_headfile.png","hash":"7880b9057ef36bb044e29fed34f5ca78be94b32d","modified":1561692327738},{"_id":"public/assets/img/ndk_build_so.png","hash":"6431d901a46ab870114a6d95813dbe11b4a9b5d5","modified":1561692327738},{"_id":"public/assets/img/ndk_config.png","hash":"5c616d1b660f1ef916aa857562f2d4e38b352a2d","modified":1561692327738},{"_id":"public/assets/img/ndk_gradle_config.png","hash":"9d8d7608f9fdc080f6b48516813ec6bf5ea37a44","modified":1561692327738},{"_id":"public/assets/img/ndk_tool_javah.png","hash":"c62846295445070e9a279d0aac528bf876f9e8c1","modified":1561692327738},{"_id":"public/assets/img/ndk_tool_ndk_build.png","hash":"9dfb93360006c39cbcd018853ce011d69c41c6d3","modified":1561692327738},{"_id":"public/assets/img/ndk_tools.png","hash":"2b2e008d22873c3934952c2f1c2d1600c9544ae0","modified":1561692327738},{"_id":"public/assets/img/tech_android_app_start_chart.png","hash":"cf403ec7c16e2852574d45444de55895b6ae3e73","modified":1561692327738},{"_id":"public/assets/img/tech_android_basic_point_img01.png","hash":"cb517fb7c8e3edcb24a4e1c08843fd1896371447","modified":1561692327738},{"_id":"public/assets/img/tech_android_binder_ipc.png","hash":"213e592431de3082648a306e2ff42f4938a4f53f","modified":1561692327738},{"_id":"public/assets/img/tech_android_ipc_aidl.png","hash":"e0534cc8b7eef73645b657db7107a03ae4dad08c","modified":1561692327739},{"_id":"public/assets/img/tech_android_ipc_regist.png","hash":"ba99eef84daabfaa5f39187ebe6758f124802243","modified":1561692327739},{"_id":"public/assets/img/tech_android_window.png","hash":"b81665289b6c4c7ee007e7afbb978ba64bcedd44","modified":1561692327739},{"_id":"public/assets/img/tech_breakpoint_flowchart.png","hash":"060d2be94507ded9da3aa3ec7753a2d2b95ba03e","modified":1561692327739},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1561692327739},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561692327739},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561692327739},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1561692327739},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561692327739},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561692327739},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1561692327739},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1561692327739},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561692327739},{"_id":"public/assets/img/as_gradle_first.jpg","hash":"fc9370b0091ecd7591c217acbcdd1a444053c343","modified":1561692327739},{"_id":"public/assets/img/tech_activity_start_flow.png","hash":"baabea79ff9211fdb8a41ef08b9541a1a0d2006e","modified":1561692327739},{"_id":"public/assets/img/tech_android_binder_struct.png","hash":"9a135d4ede575f2c78f9a48f19f8f72c69976f89","modified":1561692327739},{"_id":"public/assets/img/tech_android_draw_flow.png","hash":"60d640f95c78c247502c445dc78502528672690d","modified":1561692327739},{"_id":"public/assets/img/tech_android_system_start_chart.png","hash":"70c7e46544c81cf2c0155bb809919ea57cb033fd","modified":1561692327739},{"_id":"public/assets/img/tech_loger_framwork.png","hash":"a745e1142787b3c46692b40dc05477d4f0b9aefe","modified":1561692327739},{"_id":"public/assets/img/think_body_and_soul.jpg","hash":"f6ed8884447bdcc8e5ff394d41cce682c98b5571","modified":1561692327739},{"_id":"public/assets/img/think_history_04.png","hash":"932915e205e6ac9336f28f9ae4f7dc992cc35c7b","modified":1561692327740},{"_id":"public/assets/img/alipay.jpg","hash":"57969619aef137f74f304132efbff53fd76520f9","modified":1561692327744},{"_id":"public/assets/img/daxue.jpg","hash":"9b6b9cf92bd32cd0d8ef94dc32fac68262bdc909","modified":1561692327744},{"_id":"public/assets/img/ndk_tool_gen_headfile.png","hash":"f686fdc86621885de536350e94519230fbe0f738","modified":1561692327744},{"_id":"public/assets/img/tech_activity_start_launcher_flow.png","hash":"fd8780e0e0a17f44b72b2fda783c54dc233bf0d9","modified":1561692327744},{"_id":"public/assets/img/tech_android_binder_data.png","hash":"3b52324289e60612ade0df9ac31b62df0ec7567d","modified":1561692327744},{"_id":"public/assets/img/tech_android_dispatch_event_flow.png","hash":"c82946ca2d954be44d5ef9e3a561eca8dfa09202","modified":1561692327744},{"_id":"public/assets/img/tech_logger_output.png","hash":"f333ab87f49c93089bae95dacd24d0102db02acf","modified":1561692327744},{"_id":"public/assets/img/think_history_01.png","hash":"5a5841ca104ffc5c68964973951a62efcd0e227f","modified":1561692327744},{"_id":"public/assets/img/think_life_meaningful.jpg","hash":"19557b80148e64041a4b04efabb61ce59397f6d7","modified":1561692327744},{"_id":"public/assets/img/wechat_pay.jpg","hash":"68db0b45cc128145776978d7da942b33c492c0c1","modified":1561692327744},{"_id":"public/assets/img/think_history_02.png","hash":"a5bb13cb525b14f3900867fc291febe2cee0daa3","modified":1561692327744},{"_id":"public/assets/img/think_history_03.png","hash":"4a369fce006f63ddfc7227deb2a75b14902cb15a","modified":1561692327746},{"_id":"public/assets/img/think_iam_because_of_you.jpeg","hash":"3b0acd64a8883b58af47d5a6bbb380a24a75585c","modified":1561692327758},{"_id":"public/assets/img/tech_create_blog_record_img01.png","hash":"bf120707b14bc1695ca16b5e692159f673859b6d","modified":1561692327758},{"_id":"public/assets/img/think_guochuan_article.jpg","hash":"c788f0f61e21c6af9177cfe24d398a2178cab09d","modified":1561692327794},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1561692327885},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1561692327908},{"_id":"public/assets/img/as_gradle_fourth.jpg","hash":"d48f9338d033bd2fdaf4ce5c1fe744f0bb599c5a","modified":1561692327908},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1561692327929},{"_id":"public/assets/img/as_gradle_finish.jpg","hash":"255a996938f0650914a3af92538698b4660eedb9","modified":1561692327947},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1561692327949},{"_id":"public/assets/img/as_gradle_fifth.jpg","hash":"42858c8116a5fb0d3c53a544dc21cc20d16640cb","modified":1561692327950},{"_id":"public/assets/img/as_gradle_sixth.jpg","hash":"b6c8fe0ca1015db63bbef505d88e2949e8bb4785","modified":1561692327953},{"_id":"public/assets/img/think_poem_loushiming.jpg","hash":"bd0dc61706e8586a3205b53fdf8d49567d9db069","modified":1561692327955}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Android技术知识要点","date":"2017-04-11T07:38:32.000Z","comments":1,"_content":"---\n# 一、项目中使用库工程问题要点\n##### 1.库工程与主工程资源冲突问题\n\n  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。\n\n##### 2.库工程之间以及主工程的资源使用上的优先级问题\n\n上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。\n\n##### 3.库工程和主工程使用不同的android platform version问题\n\n主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。\n<!-- more -->\n# 二、自定义ViewGroup或Canvas获取绘制内容Bitmap\n* 可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。\n* 从Canvas获取Bitmap(自定义View类似),例子：\n\n```java\npublic Bitmap getBitmap() {  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = new Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, 0, 0, null);\n        return whiteBgBitmap;  \n    }  \n``` \n\n# 三、Https证书ctr(或cer)格式转bks格式\n- 1.要生成bks证书，需要bcprov-ext-jdk15on-151.jar([下载地址](http://www.bouncycastle.org/latest_releases.html)）\n- 2.cmd中输入以下命令\n![](/assets/img/tech_android_basic_point_img01.png);\n\n输入例子\n\nkeytool -importcert -v -trustcacerts -alias xx -file E:\\bks\\xx.cer -keystore E:\\bks\\xx.bks -storetype BKS -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath E:\\bks\\bcprov-jdk15on-146.jar -storepass xxxxxx\n\n注意:\n\n1.注意命令中不能有换行 \n\n2.地址必须全地址 \n\n3.文件要符合Java命名规范\n\n- 把证书复制到Android项目的asset(或raw)目录中，加载证书即可https访问。\n\n[Android加载证书https请求](http://www.jianshu.com/p/9a6c204616d2)——[Retrofit Https踩坑记录](http://www.jianshu.com/p/41bb549317ff)\n\n","source":"_posts/tech-android-basic-point.md","raw":"---\nlayout: post\ntitle: \"Android技术知识要点\"\ndate: 4/11/2017 3:38:32 PM  \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n---\n---\n# 一、项目中使用库工程问题要点\n##### 1.库工程与主工程资源冲突问题\n\n  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。\n\n##### 2.库工程之间以及主工程的资源使用上的优先级问题\n\n上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。\n\n##### 3.库工程和主工程使用不同的android platform version问题\n\n主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。\n<!-- more -->\n# 二、自定义ViewGroup或Canvas获取绘制内容Bitmap\n* 可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。\n* 从Canvas获取Bitmap(自定义View类似),例子：\n\n```java\npublic Bitmap getBitmap() {  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = new Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, 0, 0, null);\n        return whiteBgBitmap;  \n    }  \n``` \n\n# 三、Https证书ctr(或cer)格式转bks格式\n- 1.要生成bks证书，需要bcprov-ext-jdk15on-151.jar([下载地址](http://www.bouncycastle.org/latest_releases.html)）\n- 2.cmd中输入以下命令\n![](/assets/img/tech_android_basic_point_img01.png);\n\n输入例子\n\nkeytool -importcert -v -trustcacerts -alias xx -file E:\\bks\\xx.cer -keystore E:\\bks\\xx.bks -storetype BKS -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath E:\\bks\\bcprov-jdk15on-146.jar -storepass xxxxxx\n\n注意:\n\n1.注意命令中不能有换行 \n\n2.地址必须全地址 \n\n3.文件要符合Java命名规范\n\n- 把证书复制到Android项目的asset(或raw)目录中，加载证书即可https访问。\n\n[Android加载证书https请求](http://www.jianshu.com/p/9a6c204616d2)——[Retrofit Https踩坑记录](http://www.jianshu.com/p/41bb549317ff)\n\n","slug":"tech-android-basic-point","published":1,"updated":"2019-06-27T08:15:15.297Z","photos":[],"link":"","_id":"cjxfjaeqg0000ystgozx6o1hi","content":"<hr>\n<h1 id=\"一、项目中使用库工程问题要点\"><a href=\"#一、项目中使用库工程问题要点\" class=\"headerlink\" title=\"一、项目中使用库工程问题要点\"></a>一、项目中使用库工程问题要点</h1><h5 id=\"1-库工程与主工程资源冲突问题\"><a href=\"#1-库工程与主工程资源冲突问题\" class=\"headerlink\" title=\"1.库工程与主工程资源冲突问题\"></a>1.库工程与主工程资源冲突问题</h5><p>  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。</p>\n<h5 id=\"2-库工程之间以及主工程的资源使用上的优先级问题\"><a href=\"#2-库工程之间以及主工程的资源使用上的优先级问题\" class=\"headerlink\" title=\"2.库工程之间以及主工程的资源使用上的优先级问题\"></a>2.库工程之间以及主工程的资源使用上的优先级问题</h5><p>上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。</p>\n<h5 id=\"3-库工程和主工程使用不同的android-platform-version问题\"><a href=\"#3-库工程和主工程使用不同的android-platform-version问题\" class=\"headerlink\" title=\"3.库工程和主工程使用不同的android platform version问题\"></a>3.库工程和主工程使用不同的android platform version问题</h5><p>主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。<br><a id=\"more\"></a></p>\n<h1 id=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"><a href=\"#二、自定义ViewGroup或Canvas获取绘制内容Bitmap\" class=\"headerlink\" title=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"></a>二、自定义ViewGroup或Canvas获取绘制内容Bitmap</h1><ul>\n<li>可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。</li>\n<li>从Canvas获取Bitmap(自定义View类似),例子：</li>\n</ul>\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">()</span> </span>{  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = <span class=\"keyword\">new</span> Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);\n        <span class=\"keyword\">return</span> whiteBgBitmap;  \n    }\n</code></pre>\n<h1 id=\"三、Https证书ctr-或cer-格式转bks格式\"><a href=\"#三、Https证书ctr-或cer-格式转bks格式\" class=\"headerlink\" title=\"三、Https证书ctr(或cer)格式转bks格式\"></a>三、Https证书ctr(或cer)格式转bks格式</h1><ul>\n<li>1.要生成bks证书，需要bcprov-ext-jdk15on-151.jar(<a href=\"http://www.bouncycastle.org/latest_releases.html\" target=\"_blank\" rel=\"external\">下载地址</a>）</li>\n<li>2.cmd中输入以下命令<br><img src=\"/assets/img/tech_android_basic_point_img01.png\" alt=\"\">;</li>\n</ul>\n<p>输入例子</p>\n<p>keytool -importcert -v -trustcacerts -alias xx -file E:\\bks\\xx.cer -keystore E:\\bks\\xx.bks -storetype BKS -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath E:\\bks\\bcprov-jdk15on-146.jar -storepass xxxxxx</p>\n<p>注意:</p>\n<p>1.注意命令中不能有换行 </p>\n<p>2.地址必须全地址 </p>\n<p>3.文件要符合Java命名规范</p>\n<ul>\n<li>把证书复制到Android项目的asset(或raw)目录中，加载证书即可https访问。</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/9a6c204616d2\" target=\"_blank\" rel=\"external\">Android加载证书https请求</a>——<a href=\"http://www.jianshu.com/p/41bb549317ff\" target=\"_blank\" rel=\"external\">Retrofit Https踩坑记录</a></p>\n","excerpt":"<hr>\n<h1 id=\"一、项目中使用库工程问题要点\"><a href=\"#一、项目中使用库工程问题要点\" class=\"headerlink\" title=\"一、项目中使用库工程问题要点\"></a>一、项目中使用库工程问题要点</h1><h5 id=\"1-库工程与主工程资源冲突问题\"><a href=\"#1-库工程与主工程资源冲突问题\" class=\"headerlink\" title=\"1.库工程与主工程资源冲突问题\"></a>1.库工程与主工程资源冲突问题</h5><p>  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。</p>\n<h5 id=\"2-库工程之间以及主工程的资源使用上的优先级问题\"><a href=\"#2-库工程之间以及主工程的资源使用上的优先级问题\" class=\"headerlink\" title=\"2.库工程之间以及主工程的资源使用上的优先级问题\"></a>2.库工程之间以及主工程的资源使用上的优先级问题</h5><p>上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。</p>\n<h5 id=\"3-库工程和主工程使用不同的android-platform-version问题\"><a href=\"#3-库工程和主工程使用不同的android-platform-version问题\" class=\"headerlink\" title=\"3.库工程和主工程使用不同的android platform version问题\"></a>3.库工程和主工程使用不同的android platform version问题</h5><p>主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。<br>","more":"</p>\n<h1 id=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"><a href=\"#二、自定义ViewGroup或Canvas获取绘制内容Bitmap\" class=\"headerlink\" title=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"></a>二、自定义ViewGroup或Canvas获取绘制内容Bitmap</h1><ul>\n<li>可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。</li>\n<li>从Canvas获取Bitmap(自定义View类似),例子：</li>\n</ul>\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">()</span> </span>{  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = <span class=\"keyword\">new</span> Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);\n        <span class=\"keyword\">return</span> whiteBgBitmap;  \n    }\n</code></pre>\n<h1 id=\"三、Https证书ctr-或cer-格式转bks格式\"><a href=\"#三、Https证书ctr-或cer-格式转bks格式\" class=\"headerlink\" title=\"三、Https证书ctr(或cer)格式转bks格式\"></a>三、Https证书ctr(或cer)格式转bks格式</h1><ul>\n<li>1.要生成bks证书，需要bcprov-ext-jdk15on-151.jar(<a href=\"http://www.bouncycastle.org/latest_releases.html\">下载地址</a>）</li>\n<li>2.cmd中输入以下命令<br><img src=\"/assets/img/tech_android_basic_point_img01.png\" alt=\"\">;</li>\n</ul>\n<p>输入例子</p>\n<p>keytool -importcert -v -trustcacerts -alias xx -file E:\\bks\\xx.cer -keystore E:\\bks\\xx.bks -storetype BKS -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath E:\\bks\\bcprov-jdk15on-146.jar -storepass xxxxxx</p>\n<p>注意:</p>\n<p>1.注意命令中不能有换行 </p>\n<p>2.地址必须全地址 </p>\n<p>3.文件要符合Java命名规范</p>\n<ul>\n<li>把证书复制到Android项目的asset(或raw)目录中，加载证书即可https访问。</li>\n</ul>\n<p><a href=\"http://www.jianshu.com/p/9a6c204616d2\">Android加载证书https请求</a>——<a href=\"http://www.jianshu.com/p/41bb549317ff\">Retrofit Https踩坑记录</a></p>"},{"layout":"post","title":"Activity的启动模式","date":"2017-03-25T04:02:11.000Z","comments":1,"_content":"---\n 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。\n> 四种启动模式分别为：\n> \n- standard\n- singleTop\n- singleTask\n- singleInstance\n \n   \n>启动模式配置\n```xml\n<activity android:name=\".Activity\" android:launchMode=\"启动模式\">\n```\n\n# Activity的四种启动模式\n\n----------\n\n**1.Standard-默认模式**\n\n默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。\n<!-- more -->\n**2.SingleTop-栈顶复用模式** \n\n可以有多个实例，但是不允许多个相同Activity叠加。三种情况：\n> 1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法\n> \n> 2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例\n> \n> 3.当前栈中不存在该Activity的实例时，其行为同standard启动模式\n\n\n>应用场景:\n>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。\n\n\n**3.SingleTask-栈内复用模式**\n\n只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。\n\n如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。\n\n>应用场景:\n>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。\n\n**4.SingleInstance-全局唯一模式**\n\n只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。\n\n>应用场景:\n>\n>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。\n\n\n### Note：Activity的标签属性（taskAffinity)\ntaskAffinity属性\n>   每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：\n```xml\nactivity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/>\n```","source":"_posts/tech-android-act-start-mode.md","raw":"---\nlayout: post\ntitle: \"Activity的启动模式\"\ndate: 3/25/2017 12:02:11 PM \ncomments: true\ntags: \n\t- 技术\n\t- Android \n\t- Activity的启动模式\n---\n---\n 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。\n> 四种启动模式分别为：\n> \n- standard\n- singleTop\n- singleTask\n- singleInstance\n \n   \n>启动模式配置\n```xml\n<activity android:name=\".Activity\" android:launchMode=\"启动模式\">\n```\n\n# Activity的四种启动模式\n\n----------\n\n**1.Standard-默认模式**\n\n默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。\n<!-- more -->\n**2.SingleTop-栈顶复用模式** \n\n可以有多个实例，但是不允许多个相同Activity叠加。三种情况：\n> 1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法\n> \n> 2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例\n> \n> 3.当前栈中不存在该Activity的实例时，其行为同standard启动模式\n\n\n>应用场景:\n>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。\n\n\n**3.SingleTask-栈内复用模式**\n\n只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。\n\n如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。\n\n>应用场景:\n>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。\n\n**4.SingleInstance-全局唯一模式**\n\n只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。\n\n>应用场景:\n>\n>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。\n\n\n### Note：Activity的标签属性（taskAffinity)\ntaskAffinity属性\n>   每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：\n```xml\nactivity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/>\n```","slug":"tech-android-act-start-mode","published":1,"updated":"2019-06-27T08:15:15.295Z","photos":[],"link":"","_id":"cjxfjaeqk0001ystgia9lnfcs","content":"<hr>\n<p> 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。</p>\n<blockquote>\n<p>四种启动模式分别为：</p>\n<ul>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ul>\n<p>启动模式配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".Activity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"启动模式\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><hr>\n<p><strong>1.Standard-默认模式</strong></p>\n<p>默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。<br><a id=\"more\"></a><br><strong>2.SingleTop-栈顶复用模式</strong> </p>\n<p>可以有多个实例，但是不允许多个相同Activity叠加。三种情况：</p>\n<blockquote>\n<p>1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法</p>\n<p>2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例</p>\n<p>3.当前栈中不存在该Activity的实例时，其行为同standard启动模式</p>\n<p>应用场景:<br>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。</p>\n</blockquote>\n<p><strong>3.SingleTask-栈内复用模式</strong></p>\n<p>只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。</p>\n<p>如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。</p>\n<blockquote>\n<p>应用场景:<br>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p>\n</blockquote>\n<p><strong>4.SingleInstance-全局唯一模式</strong></p>\n<p>只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。</p>\n<blockquote>\n<p>应用场景:</p>\n<p>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。</p>\n</blockquote>\n<h3 id=\"Note：Activity的标签属性（taskAffinity\"><a href=\"#Note：Activity的标签属性（taskAffinity\" class=\"headerlink\" title=\"Note：Activity的标签属性（taskAffinity)\"></a>Note：Activity的标签属性（taskAffinity)</h3><p>taskAffinity属性</p>\n<blockquote>\n<p>  每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">activity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<hr>\n<p> 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。</p>\n<blockquote>\n<p>四种启动模式分别为：</p>\n<ul>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ul>\n<p>启动模式配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".Activity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"启动模式\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><hr>\n<p><strong>1.Standard-默认模式</strong></p>\n<p>默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。<br>","more":"<br><strong>2.SingleTop-栈顶复用模式</strong> </p>\n<p>可以有多个实例，但是不允许多个相同Activity叠加。三种情况：</p>\n<blockquote>\n<p>1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法</p>\n<p>2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例</p>\n<p>3.当前栈中不存在该Activity的实例时，其行为同standard启动模式</p>\n<p>应用场景:<br>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。</p>\n</blockquote>\n<p><strong>3.SingleTask-栈内复用模式</strong></p>\n<p>只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。</p>\n<p>如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。</p>\n<blockquote>\n<p>应用场景:<br>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p>\n</blockquote>\n<p><strong>4.SingleInstance-全局唯一模式</strong></p>\n<p>只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。</p>\n<blockquote>\n<p>应用场景:</p>\n<p>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。</p>\n</blockquote>\n<h3 id=\"Note：Activity的标签属性（taskAffinity\"><a href=\"#Note：Activity的标签属性（taskAffinity\" class=\"headerlink\" title=\"Note：Activity的标签属性（taskAffinity)\"></a>Note：Activity的标签属性（taskAffinity)</h3><p>taskAffinity属性</p>\n<blockquote>\n<p>  每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">activity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"layout":"post","title":"Annontation注解的应用及介绍","date":"2017-08-01T11:38:14.000Z","comments":1,"_content":"---\n# 一、什么是注解？\nAnnontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。\n\n# 二、注解的用处\n  - 生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等\n  - 跟踪代码依赖性，实现替代配置文件功能。\n  - 在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。\n\n# 三、注解介绍\n\n**元注解**\n\njava.lang.annotation提供了四种元注解，专门注解其他的注解：\n  - @Documented  –注解是否将包含在JavaDoc中\n  - @Retention   –什么时候使用该注解\n  - @Target      –注解用于什么地方\n  - @Inherited   – 是否允许子类继承该注解\n\n**1）@Retention– 定义该注解的生命周期**\n\n  - RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。\n  - RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式\n  - RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。\n\n**2）@Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括**\n\n- ElementType.CONSTRUCTOR:用于描述构造器\n- ElementType.FIELD:成员变量、对象、属性（包括enum实例）\n- ElementType.LOCAL_VARIABLE:用于描述局部变量\n- ElementType.METHOD:用于描述方法\n- ElementType.PACKAGE:用于描述包\n- ElementType.PARAMETER:用于描述参数\n- ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n<!-- more -->\n\n**3)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。**\n\n**4)@Inherited – 定义该注释和子类的关系**\n\n   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。\n\n# 四、注解使用\n\n**1）方法注解：**\n\n```java\n@Target(METHOD)\n@Retention(RUNTIME)\npublic @interface UserMethod {\n    String title() default \"\";\n}\n```\n\n**2）参数注解：**\n\n```java\n@Target(PARAMETER)\n@Retention(RUNTIME)\npublic @interface UserParam {\n    String name() default \"\";\n    String phone() default \"\";\n}\n```\n\n**3）注解使用：**\n```java\npublic interface UserInterface {\n    @UserMethod(title = \"AwenZeng\")\n    String getUser(@UserParam(name = \"刘峰\",phone = \"110\") String a);\n}\n```\n\n**4）获取注解：**\n\n通过[反射机制](http://blog.csdn.net/liujiahan629629/article/details/18013523)获取函数注解信息：\n\n```java\nMethod[] declaredMethods = UserInterface.class.getDeclaredMethods();\n        for (Method method : declaredMethods) {\n            Annotation[]  methodAnnotations = method.getAnnotations();\n            Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();\n        }\n```\n\n也可以获取指定的注解:\n\n```java\nUserMethod userMethod = method.getAnnotation(UserMethod.class);\n```\n\n**5) 具体实现注解接口调用**\n\n采用[Java动态代理机制](http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html)来实现:\n\n```java\n\n    public <T> T create(final Class<T> service) {\n        return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object... args)\n                            throws Throwable {\n                        // Annotation[]  methodAnnotations = method.getAnnotations();//拿到函数注解数组\n                        UserMethod userMethod = method.getAnnotation(UserMethod.class);\n                        Log.e(\"good\", \"UserParam---getValue->\" + userMethod.title());\n                        Type[] parameterTypes = method.getGenericParameterTypes();\n                        Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();//拿到参数注解\n                        for (int i = 0; i < parameterAnnotationsArray.length; i++) {\n                            Annotation[] annotations = parameterAnnotationsArray[i];\n                            if (annotations != null) {\n                                UserParam reqParam = (UserParam) annotations[0];\n                                Log.e(\"good\", \"reqParam---reqParam->\" + reqParam.name()+ \",\"+reqParam.phone()+ \",\" + args[i]);\n                            }\n                        }\n                        //下面就可以执行相应的网络请求获取结果 返回结果\n                        String result = \"\";//这里模拟一个结果\n\n                        return result;\n                    }\n              });\n    }\n```\n\n**6) 具体代码调用**\n\n```java\n        UserInterface userInterface = AnnotionProxy.create(UserInterface.class);\n        userInterface.getUser(\"我之存在，因为有你。\");\n```\n\n**7) 结果**\n\n```java\n08-01 12:11:14.688 11729-11729/com.awen.annotationdemo E/good: UserMethod---title->AwenZeng\n08-01 12:11:14.688 11729-11729/com.awen.annotationdemo E/good: UserParam---userParam->刘峰,110,我之存在，因为有你。\n```\n\n# 五、参考资料、\n\n[Java学习之注解Annotation实现原理](http://www.cnblogs.com/whoislcj/p/5671622.html)\n\n[JAVA中的反射机制](http://blog.csdn.net/liujiahan629629/article/details/18013523)\n\n[彻底理解JAVA动态代理](http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html)\n","source":"_posts/tech_android_annontation.md","raw":"---\nlayout: post\ntitle: \"Annontation注解的应用及介绍\"\ndate: 8/1/2017 7:38:14 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android注解\n\t- Java反射机制\n\t- Java动态代理\n---\n---\n# 一、什么是注解？\nAnnontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。\n\n# 二、注解的用处\n  - 生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等\n  - 跟踪代码依赖性，实现替代配置文件功能。\n  - 在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。\n\n# 三、注解介绍\n\n**元注解**\n\njava.lang.annotation提供了四种元注解，专门注解其他的注解：\n  - @Documented  –注解是否将包含在JavaDoc中\n  - @Retention   –什么时候使用该注解\n  - @Target      –注解用于什么地方\n  - @Inherited   – 是否允许子类继承该注解\n\n**1）@Retention– 定义该注解的生命周期**\n\n  - RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。\n  - RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式\n  - RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。\n\n**2）@Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括**\n\n- ElementType.CONSTRUCTOR:用于描述构造器\n- ElementType.FIELD:成员变量、对象、属性（包括enum实例）\n- ElementType.LOCAL_VARIABLE:用于描述局部变量\n- ElementType.METHOD:用于描述方法\n- ElementType.PACKAGE:用于描述包\n- ElementType.PARAMETER:用于描述参数\n- ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n<!-- more -->\n\n**3)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。**\n\n**4)@Inherited – 定义该注释和子类的关系**\n\n   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。\n\n# 四、注解使用\n\n**1）方法注解：**\n\n```java\n@Target(METHOD)\n@Retention(RUNTIME)\npublic @interface UserMethod {\n    String title() default \"\";\n}\n```\n\n**2）参数注解：**\n\n```java\n@Target(PARAMETER)\n@Retention(RUNTIME)\npublic @interface UserParam {\n    String name() default \"\";\n    String phone() default \"\";\n}\n```\n\n**3）注解使用：**\n```java\npublic interface UserInterface {\n    @UserMethod(title = \"AwenZeng\")\n    String getUser(@UserParam(name = \"刘峰\",phone = \"110\") String a);\n}\n```\n\n**4）获取注解：**\n\n通过[反射机制](http://blog.csdn.net/liujiahan629629/article/details/18013523)获取函数注解信息：\n\n```java\nMethod[] declaredMethods = UserInterface.class.getDeclaredMethods();\n        for (Method method : declaredMethods) {\n            Annotation[]  methodAnnotations = method.getAnnotations();\n            Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();\n        }\n```\n\n也可以获取指定的注解:\n\n```java\nUserMethod userMethod = method.getAnnotation(UserMethod.class);\n```\n\n**5) 具体实现注解接口调用**\n\n采用[Java动态代理机制](http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html)来实现:\n\n```java\n\n    public <T> T create(final Class<T> service) {\n        return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object... args)\n                            throws Throwable {\n                        // Annotation[]  methodAnnotations = method.getAnnotations();//拿到函数注解数组\n                        UserMethod userMethod = method.getAnnotation(UserMethod.class);\n                        Log.e(\"good\", \"UserParam---getValue->\" + userMethod.title());\n                        Type[] parameterTypes = method.getGenericParameterTypes();\n                        Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();//拿到参数注解\n                        for (int i = 0; i < parameterAnnotationsArray.length; i++) {\n                            Annotation[] annotations = parameterAnnotationsArray[i];\n                            if (annotations != null) {\n                                UserParam reqParam = (UserParam) annotations[0];\n                                Log.e(\"good\", \"reqParam---reqParam->\" + reqParam.name()+ \",\"+reqParam.phone()+ \",\" + args[i]);\n                            }\n                        }\n                        //下面就可以执行相应的网络请求获取结果 返回结果\n                        String result = \"\";//这里模拟一个结果\n\n                        return result;\n                    }\n              });\n    }\n```\n\n**6) 具体代码调用**\n\n```java\n        UserInterface userInterface = AnnotionProxy.create(UserInterface.class);\n        userInterface.getUser(\"我之存在，因为有你。\");\n```\n\n**7) 结果**\n\n```java\n08-01 12:11:14.688 11729-11729/com.awen.annotationdemo E/good: UserMethod---title->AwenZeng\n08-01 12:11:14.688 11729-11729/com.awen.annotationdemo E/good: UserParam---userParam->刘峰,110,我之存在，因为有你。\n```\n\n# 五、参考资料、\n\n[Java学习之注解Annotation实现原理](http://www.cnblogs.com/whoislcj/p/5671622.html)\n\n[JAVA中的反射机制](http://blog.csdn.net/liujiahan629629/article/details/18013523)\n\n[彻底理解JAVA动态代理](http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html)\n","slug":"tech_android_annontation","published":1,"updated":"2019-06-27T08:15:15.299Z","photos":[],"link":"","_id":"cjxfjaeqm0003ystg8dtwso64","content":"<hr>\n<h1 id=\"一、什么是注解？\"><a href=\"#一、什么是注解？\" class=\"headerlink\" title=\"一、什么是注解？\"></a>一、什么是注解？</h1><p>Annontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。</p>\n<h1 id=\"二、注解的用处\"><a href=\"#二、注解的用处\" class=\"headerlink\" title=\"二、注解的用处\"></a>二、注解的用处</h1><ul>\n<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等</li>\n<li>跟踪代码依赖性，实现替代配置文件功能。</li>\n<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>\n</ul>\n<h1 id=\"三、注解介绍\"><a href=\"#三、注解介绍\" class=\"headerlink\" title=\"三、注解介绍\"></a>三、注解介绍</h1><p><strong>元注解</strong></p>\n<p>java.lang.annotation提供了四种元注解，专门注解其他的注解：</p>\n<ul>\n<li>@Documented  –注解是否将包含在JavaDoc中</li>\n<li>@Retention   –什么时候使用该注解</li>\n<li>@Target      –注解用于什么地方</li>\n<li>@Inherited   – 是否允许子类继承该注解</li>\n</ul>\n<p><strong>1）@Retention– 定义该注解的生命周期</strong></p>\n<ul>\n<li>RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</li>\n<li>RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</li>\n<li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</li>\n</ul>\n<p><strong>2）@Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括</strong></p>\n<ul>\n<li>ElementType.CONSTRUCTOR:用于描述构造器</li>\n<li>ElementType.FIELD:成员变量、对象、属性（包括enum实例）</li>\n<li>ElementType.LOCAL_VARIABLE:用于描述局部变量</li>\n<li>ElementType.METHOD:用于描述方法</li>\n<li>ElementType.PACKAGE:用于描述包</li>\n<li>ElementType.PARAMETER:用于描述参数</li>\n<li>ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>3)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</strong></p>\n<p><strong>4)@Inherited – 定义该注释和子类的关系</strong></p>\n<p>   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>\n<h1 id=\"四、注解使用\"><a href=\"#四、注解使用\" class=\"headerlink\" title=\"四、注解使用\"></a>四、注解使用</h1><p><strong>1）方法注解：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(METHOD)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserMethod &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">title</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2）参数注解：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(PARAMETER)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserParam &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">phone</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3）注解使用：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@UserMethod</span>(title = <span class=\"string\">\"AwenZeng\"</span>)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(@UserParam(name = <span class=\"string\">\"刘峰\"</span>,phone = <span class=\"string\">\"110\"</span>)</span> String a)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4）获取注解：</strong></p>\n<p>通过<a href=\"http://blog.csdn.net/liujiahan629629/article/details/18013523\" target=\"_blank\" rel=\"external\">反射机制</a>获取函数注解信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] declaredMethods = UserInterface.class.getDeclaredMethods();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method method : declaredMethods) &#123;</div><div class=\"line\">            Annotation[]  methodAnnotations = method.getAnnotations();</div><div class=\"line\">            Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>也可以获取指定的注解:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserMethod userMethod = method.getAnnotation(UserMethod.class);</div></pre></td></tr></table></figure>\n<p><strong>5) 具体实现注解接口调用</strong></p>\n<p>采用<a href=\"http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html\" target=\"_blank\" rel=\"external\">Java动态代理机制</a>来实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;service&#125;,</div><div class=\"line\">            <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> Throwable &#123;</div><div class=\"line\">                    <span class=\"comment\">// Annotation[]  methodAnnotations = method.getAnnotations();//拿到函数注解数组</span></div><div class=\"line\">                    UserMethod userMethod = method.getAnnotation(UserMethod.class);</div><div class=\"line\">                    Log.e(<span class=\"string\">\"good\"</span>, <span class=\"string\">\"UserParam---getValue-&gt;\"</span> + userMethod.title());</div><div class=\"line\">                    Type[] parameterTypes = method.getGenericParameterTypes();</div><div class=\"line\">                    Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();<span class=\"comment\">//拿到参数注解</span></div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterAnnotationsArray.length; i++) &#123;</div><div class=\"line\">                        Annotation[] annotations = parameterAnnotationsArray[i];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (annotations != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            UserParam reqParam = (UserParam) annotations[<span class=\"number\">0</span>];</div><div class=\"line\">                            Log.e(<span class=\"string\">\"good\"</span>, <span class=\"string\">\"reqParam---reqParam-&gt;\"</span> + reqParam.name()+ <span class=\"string\">\",\"</span>+reqParam.phone()+ <span class=\"string\">\",\"</span> + args[i]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//下面就可以执行相应的网络请求获取结果 返回结果</span></div><div class=\"line\">                    String result = <span class=\"string\">\"\"</span>;<span class=\"comment\">//这里模拟一个结果</span></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> result;</div><div class=\"line\">                &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6) 具体代码调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserInterface userInterface = AnnotionProxy.create(UserInterface.class);</div><div class=\"line\">userInterface.getUser(<span class=\"string\">\"我之存在，因为有你。\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>7) 结果</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">08</span>-<span class=\"number\">01</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">14.688</span> <span class=\"number\">11729</span>-<span class=\"number\">11729</span>/com.awen.annotationdemo E/good: UserMethod---title-&gt;AwenZeng</div><div class=\"line\"><span class=\"number\">08</span>-<span class=\"number\">01</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">14.688</span> <span class=\"number\">11729</span>-<span class=\"number\">11729</span>/com.awen.annotationdemo E/good: UserParam---userParam-&gt;刘峰,<span class=\"number\">110</span>,我之存在，因为有你。</div></pre></td></tr></table></figure>\n<h1 id=\"五、参考资料、\"><a href=\"#五、参考资料、\" class=\"headerlink\" title=\"五、参考资料、\"></a>五、参考资料、</h1><p><a href=\"http://www.cnblogs.com/whoislcj/p/5671622.html\" target=\"_blank\" rel=\"external\">Java学习之注解Annotation实现原理</a></p>\n<p><a href=\"http://blog.csdn.net/liujiahan629629/article/details/18013523\" target=\"_blank\" rel=\"external\">JAVA中的反射机制</a></p>\n<p><a href=\"http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html\" target=\"_blank\" rel=\"external\">彻底理解JAVA动态代理</a></p>\n","excerpt":"<hr>\n<h1 id=\"一、什么是注解？\"><a href=\"#一、什么是注解？\" class=\"headerlink\" title=\"一、什么是注解？\"></a>一、什么是注解？</h1><p>Annontation是Java5开始引入的新特征，中文名称叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且供指定的工具或框架使用。Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。</p>\n<h1 id=\"二、注解的用处\"><a href=\"#二、注解的用处\" class=\"headerlink\" title=\"二、注解的用处\"></a>二、注解的用处</h1><ul>\n<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@param @return 等</li>\n<li>跟踪代码依赖性，实现替代配置文件功能。</li>\n<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>\n</ul>\n<h1 id=\"三、注解介绍\"><a href=\"#三、注解介绍\" class=\"headerlink\" title=\"三、注解介绍\"></a>三、注解介绍</h1><p><strong>元注解</strong></p>\n<p>java.lang.annotation提供了四种元注解，专门注解其他的注解：</p>\n<ul>\n<li>@Documented  –注解是否将包含在JavaDoc中</li>\n<li>@Retention   –什么时候使用该注解</li>\n<li>@Target      –注解用于什么地方</li>\n<li>@Inherited   – 是否允许子类继承该注解</li>\n</ul>\n<p><strong>1）@Retention– 定义该注解的生命周期</strong></p>\n<ul>\n<li>RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。</li>\n<li>RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式</li>\n<li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。</li>\n</ul>\n<p><strong>2）@Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括</strong></p>\n<ul>\n<li>ElementType.CONSTRUCTOR:用于描述构造器</li>\n<li>ElementType.FIELD:成员变量、对象、属性（包括enum实例）</li>\n<li>ElementType.LOCAL_VARIABLE:用于描述局部变量</li>\n<li>ElementType.METHOD:用于描述方法</li>\n<li>ElementType.PACKAGE:用于描述包</li>\n<li>ElementType.PARAMETER:用于描述参数</li>\n<li>ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ul>","more":"<p><strong>3)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</strong></p>\n<p><strong>4)@Inherited – 定义该注释和子类的关系</strong></p>\n<p>   @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>\n<h1 id=\"四、注解使用\"><a href=\"#四、注解使用\" class=\"headerlink\" title=\"四、注解使用\"></a>四、注解使用</h1><p><strong>1）方法注解：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(METHOD)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserMethod &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">title</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2）参数注解：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(PARAMETER)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserParam &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">phone</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3）注解使用：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@UserMethod</span>(title = <span class=\"string\">\"AwenZeng\"</span>)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">getUser</span><span class=\"params\">(@UserParam(name = <span class=\"string\">\"刘峰\"</span>,phone = <span class=\"string\">\"110\"</span>)</span> String a)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4）获取注解：</strong></p>\n<p>通过<a href=\"http://blog.csdn.net/liujiahan629629/article/details/18013523\">反射机制</a>获取函数注解信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] declaredMethods = UserInterface.class.getDeclaredMethods();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method method : declaredMethods) &#123;</div><div class=\"line\">            Annotation[]  methodAnnotations = method.getAnnotations();</div><div class=\"line\">            Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>也可以获取指定的注解:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserMethod userMethod = method.getAnnotation(UserMethod.class);</div></pre></td></tr></table></figure>\n<p><strong>5) 具体实现注解接口调用</strong></p>\n<p>采用<a href=\"http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html\">Java动态代理机制</a>来实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;service&#125;,</div><div class=\"line\">            <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// Annotation[]  methodAnnotations = method.getAnnotations();//拿到函数注解数组</span></div><div class=\"line\">                    UserMethod userMethod = method.getAnnotation(UserMethod.class);</div><div class=\"line\">                    Log.e(<span class=\"string\">\"good\"</span>, <span class=\"string\">\"UserParam---getValue-&gt;\"</span> + userMethod.title());</div><div class=\"line\">                    Type[] parameterTypes = method.getGenericParameterTypes();</div><div class=\"line\">                    Annotation[][] parameterAnnotationsArray = method.getParameterAnnotations();<span class=\"comment\">//拿到参数注解</span></div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterAnnotationsArray.length; i++) &#123;</div><div class=\"line\">                        Annotation[] annotations = parameterAnnotationsArray[i];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (annotations != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            UserParam reqParam = (UserParam) annotations[<span class=\"number\">0</span>];</div><div class=\"line\">                            Log.e(<span class=\"string\">\"good\"</span>, <span class=\"string\">\"reqParam---reqParam-&gt;\"</span> + reqParam.name()+ <span class=\"string\">\",\"</span>+reqParam.phone()+ <span class=\"string\">\",\"</span> + args[i]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//下面就可以执行相应的网络请求获取结果 返回结果</span></div><div class=\"line\">                    String result = <span class=\"string\">\"\"</span>;<span class=\"comment\">//这里模拟一个结果</span></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> result;</div><div class=\"line\">                &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>6) 具体代码调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">UserInterface userInterface = AnnotionProxy.create(UserInterface.class);</div><div class=\"line\">userInterface.getUser(<span class=\"string\">\"我之存在，因为有你。\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>7) 结果</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">08</span>-<span class=\"number\">01</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">14.688</span> <span class=\"number\">11729</span>-<span class=\"number\">11729</span>/com.awen.annotationdemo E/good: UserMethod---title-&gt;AwenZeng</div><div class=\"line\"><span class=\"number\">08</span>-<span class=\"number\">01</span> <span class=\"number\">12</span>:<span class=\"number\">11</span>:<span class=\"number\">14.688</span> <span class=\"number\">11729</span>-<span class=\"number\">11729</span>/com.awen.annotationdemo E/good: UserParam---userParam-&gt;刘峰,<span class=\"number\">110</span>,我之存在，因为有你。</div></pre></td></tr></table></figure>\n<h1 id=\"五、参考资料、\"><a href=\"#五、参考资料、\" class=\"headerlink\" title=\"五、参考资料、\"></a>五、参考资料、</h1><p><a href=\"http://www.cnblogs.com/whoislcj/p/5671622.html\">Java学习之注解Annotation实现原理</a></p>\n<p><a href=\"http://blog.csdn.net/liujiahan629629/article/details/18013523\">JAVA中的反射机制</a></p>\n<p><a href=\"http://www.cnblogs.com/flyoung2008/archive/2013/08/11/3251148.html\">彻底理解JAVA动态代理</a></p>"},{"layout":"post","title":"Android studio NDK编译及so库生成方法讲解","date":"2017-06-30T11:48:17.000Z","comments":1,"_content":"---\n前言：在Android开发的eclipse时代，想要开发NDK项目或生成so库，是非常蛋疼的，需要踩坑无数，方能生成so库；而如今Android Studio时代，开发jni C/C++项目，通过gradle的集成工具，那是一个爽。下面将会介绍两种利用AS和gradle开发NDK项目及生成so库的方式。\n## 一.环境准备\nAndroid开发环境，Android-SDK，java-SDK,android-NDK相关环境（略：网上有许多）\n\n**1.安装完成之后如图：**\n\n![](/assets/img/ndk_config.png)\n\n**2.在项目的gradle.properties文件中加上 android.useDeprecatedNdk = true**\n\n**3.注意写好native接口和System.loadLibrary()**\n\n如：JNIUtil和MainActivity\n\n```java \npublic class JNIUtil {\n\n    private static JNIUtil instance = new JNIUtil();\n\n    public static JNIUtil getInstance() {\n        return instance;\n    }\n\n    static {\n        System.loadLibrary(\"native-lib\");\n    }\n\n    public native String initData();\n    public native String getStringFromJni();\n}\n\npublic class MainActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n\n        tv.setText(JNIUtil.getInstance().getStringFromJni());\n        Log.i(\"笔沫拾光\",JNIUtil.getInstance().initData());\n        Toast.makeText(this,JNIUtil.getInstance().initData(),Toast.LENGTH_LONG);\n    }\n}\n\n```\n<!-- more -->\n## 二.两种编译和生成SO库的方式\n\n** 1.手动编译C/C++文件和so库生成 **\n\n**i.生成C/C++文件**\n\n执行Build->Make Project，生成class文件，class文件的生成路径为： app_path/build/intermediates/classes/debug.\n\njavah生成c头文件\n\n操作命令：\njavah -d jni -classpath SDK_android.jar;APP_classes lab.sodino.jnitest.MainActivity\n\n代码示例：\n\n```java\njavah -d jni -classpath D:\\sdk\\platforms\\android-25\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug com.awen.jnitest.JNIUtil\n```\n生成头文件如图：\n\n![](/assets/img/ndk_build_headfile.png)\n\n\n\n**ii.编辑C文件**\n在main.c文件中实现头文件中的方法\n\n代码示例C：\n\n```C\n\n#include \"com_awen_jnitest_JNIUtil.h\"\n\nJNIEXPORT jstring JNICALL Java_com_awen_jnitest_JNIUtil_initData(JNIEnv *env, jobject jObj){\n    return (*env)->NewStringUTF(env, \"有梦为马，随处可栖。\");\n}\n\nJNIEXPORT jstring JNICALL Java_com_awen_jnitest_JNIUtil_getStringFromJni\n        (JNIEnv *env, jobject jObj){\n    return (*env)->NewStringUTF(env, \"笔沫拾光\\nhttp://awenzeng.me/\");\n}\n\n```\n\n代码示例C++：\n\n```C++\n#include <jni.h>\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\njstring  Java_com_awen_jnitest_JNIUtil_initData(JNIEnv *env, jobject jObj){\n    return env->NewStringUTF(\"Hello NDK C++\");\n}\n\njstring  Java_com_awen_jnitest_JNIUtil_getStringFromJni\n        (JNIEnv *env, jobject jObj){\n    return env->NewStringUTF(\"笔沫拾光\\nhttp://awenzeng.me/\");\n}\n\n#ifdef __cplusplus\n}\n#endif\n```\n**iii.修改build.gradle配置**\n\n代码示例：\n\n```java\n  ndk {\n            moduleName \"native-lib\"\n            abiFilters \"armeabi\", \"armeabi-v7a\", \"x86\"//控制so库生成兼容的平台\n  }\n```\n\n具体如图\n\n![](/assets/img/ndk_gradle_config.png)\n\n**iV.执行Build->Rebuild Project或Make Project，so库就会自动生成，具体如图：**\n\n![](/assets/img/ndk_build_so.png)\n\n** 2.Android studio配置工具编译和生成so库**\n\n**i.Android studio工具配置**\n\n为了方便生成头文件和so文件，我们可以在Android Studio → External Tools中设置两个命令，分别来生成头文件和生成.so文件\n![](/assets/img/ndk_tools.png)\n\njavah:\n\n![](/assets/img/ndk_tool_javah.png)\n\n具体配置代码：\n\n```java\nProgram:\n $JDKPath$/bin/javah\n\nParameters:(具体参数参考第一种方法头文件的生成)\n -d jni -classpath D:\\sdk\\platforms\\android-25\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug $FileClass$\n\nWorking\n $SourcepathEntry$\\..\\java\n\n```\n\nndk-build:\n\n![](/assets/img/ndk_tool_ndk_build.png)\n\n具体配置代码：\n\n```java\nProgram:\n D:\\sdk\\ndk-bundle\\build\\ndk-build.cmd\n\nParameters:\n NDK_LIBS_OUT=$ModuleFileDir$/libs APP_ABI=armeabi-v7a,armeabi,x86\n\nWorking\n$ModuleFileDir$\\src\\main\n\n```\n\n**ii.C/C++文件生成及so库生成**\n\n**头文件.h的生成，具体操作如图：**\n\n![](/assets/img/ndk_tool_gen_headfile.png)\n\n具体步骤：\n\n选中JNIUtil点击右键，显示如上图，选中NDK，点击javah，就会自动生成头文件，具体位置如图：\n\n![](/assets/img/ndk_build_headfile.png)\n\n**.c文件生成和第一种一样（这里略）**\n\n**so库文件生成，点击ndk-build，生成库文件，具体如图：**\n\n![](/assets/img/ndk_ndk_build_so.png)\n\n\n到此，两种方法生成讲解完毕。\n\n## 三.注意事项\n\n**第一种方式**\n- gradle.build中生成so库文件的平台可配置，如（具体如第一种方式build配置）：abiFilters \"armeabi\", \"armeabi-v7a\", \"x86\"//控制so库生成兼容的平台\n- 生成的so库是在build文件中，需要手动copy到项目。\n\n**第二种方式**\n- 在ndk-build的配置中，so库文件生成平台也可以配置，如（具体如ndk-build配置）：APP_ABI=armeabi-v7a,armeabi,x86\n- so库文件的生成位置是可以配置的，自动生成到你配置的位置（这一点爽爆了，不用copy）,如（具体如ndk-build配置）：NDK_LIBS_OUT=$ModuleFileDir$/libs\n- 可以随时修改C/C++代码，然后点击ndk-build生成so库，直接调试，非常方便。\n\n\n\n#### 源码地址，欢迎下载及Star \n[https://github.com/awenzeng/JniTest](https://github.com/awenzeng/JniTest)\n\n## 四.参考文献\n[android studio NDK使用，编译c生成.so实践记录](http://blog.csdn.net/u010030505/article/details/51942157)\n\n[Android Studio开发JNI工程](http://blog.csdn.net/sodino/article/details/41946607)\n\n[Android NDK Jni 开发C和C++的区别](http://www.cnblogs.com/gengchangjing/p/ndk.html)\n\n\n\n\n\n\n","source":"_posts/tech_android_ndk.md","raw":"---\nlayout: post\ntitle: \"Android studio NDK编译及so库生成方法讲解\"\ndate: 6/30/2017 7:48:17 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- NDK\n\t- JNI C/C++\n---\n---\n前言：在Android开发的eclipse时代，想要开发NDK项目或生成so库，是非常蛋疼的，需要踩坑无数，方能生成so库；而如今Android Studio时代，开发jni C/C++项目，通过gradle的集成工具，那是一个爽。下面将会介绍两种利用AS和gradle开发NDK项目及生成so库的方式。\n## 一.环境准备\nAndroid开发环境，Android-SDK，java-SDK,android-NDK相关环境（略：网上有许多）\n\n**1.安装完成之后如图：**\n\n![](/assets/img/ndk_config.png)\n\n**2.在项目的gradle.properties文件中加上 android.useDeprecatedNdk = true**\n\n**3.注意写好native接口和System.loadLibrary()**\n\n如：JNIUtil和MainActivity\n\n```java \npublic class JNIUtil {\n\n    private static JNIUtil instance = new JNIUtil();\n\n    public static JNIUtil getInstance() {\n        return instance;\n    }\n\n    static {\n        System.loadLibrary(\"native-lib\");\n    }\n\n    public native String initData();\n    public native String getStringFromJni();\n}\n\npublic class MainActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        TextView tv = (TextView) findViewById(R.id.sample_text);\n\n        tv.setText(JNIUtil.getInstance().getStringFromJni());\n        Log.i(\"笔沫拾光\",JNIUtil.getInstance().initData());\n        Toast.makeText(this,JNIUtil.getInstance().initData(),Toast.LENGTH_LONG);\n    }\n}\n\n```\n<!-- more -->\n## 二.两种编译和生成SO库的方式\n\n** 1.手动编译C/C++文件和so库生成 **\n\n**i.生成C/C++文件**\n\n执行Build->Make Project，生成class文件，class文件的生成路径为： app_path/build/intermediates/classes/debug.\n\njavah生成c头文件\n\n操作命令：\njavah -d jni -classpath SDK_android.jar;APP_classes lab.sodino.jnitest.MainActivity\n\n代码示例：\n\n```java\njavah -d jni -classpath D:\\sdk\\platforms\\android-25\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug com.awen.jnitest.JNIUtil\n```\n生成头文件如图：\n\n![](/assets/img/ndk_build_headfile.png)\n\n\n\n**ii.编辑C文件**\n在main.c文件中实现头文件中的方法\n\n代码示例C：\n\n```C\n\n#include \"com_awen_jnitest_JNIUtil.h\"\n\nJNIEXPORT jstring JNICALL Java_com_awen_jnitest_JNIUtil_initData(JNIEnv *env, jobject jObj){\n    return (*env)->NewStringUTF(env, \"有梦为马，随处可栖。\");\n}\n\nJNIEXPORT jstring JNICALL Java_com_awen_jnitest_JNIUtil_getStringFromJni\n        (JNIEnv *env, jobject jObj){\n    return (*env)->NewStringUTF(env, \"笔沫拾光\\nhttp://awenzeng.me/\");\n}\n\n```\n\n代码示例C++：\n\n```C++\n#include <jni.h>\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\njstring  Java_com_awen_jnitest_JNIUtil_initData(JNIEnv *env, jobject jObj){\n    return env->NewStringUTF(\"Hello NDK C++\");\n}\n\njstring  Java_com_awen_jnitest_JNIUtil_getStringFromJni\n        (JNIEnv *env, jobject jObj){\n    return env->NewStringUTF(\"笔沫拾光\\nhttp://awenzeng.me/\");\n}\n\n#ifdef __cplusplus\n}\n#endif\n```\n**iii.修改build.gradle配置**\n\n代码示例：\n\n```java\n  ndk {\n            moduleName \"native-lib\"\n            abiFilters \"armeabi\", \"armeabi-v7a\", \"x86\"//控制so库生成兼容的平台\n  }\n```\n\n具体如图\n\n![](/assets/img/ndk_gradle_config.png)\n\n**iV.执行Build->Rebuild Project或Make Project，so库就会自动生成，具体如图：**\n\n![](/assets/img/ndk_build_so.png)\n\n** 2.Android studio配置工具编译和生成so库**\n\n**i.Android studio工具配置**\n\n为了方便生成头文件和so文件，我们可以在Android Studio → External Tools中设置两个命令，分别来生成头文件和生成.so文件\n![](/assets/img/ndk_tools.png)\n\njavah:\n\n![](/assets/img/ndk_tool_javah.png)\n\n具体配置代码：\n\n```java\nProgram:\n $JDKPath$/bin/javah\n\nParameters:(具体参数参考第一种方法头文件的生成)\n -d jni -classpath D:\\sdk\\platforms\\android-25\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug $FileClass$\n\nWorking\n $SourcepathEntry$\\..\\java\n\n```\n\nndk-build:\n\n![](/assets/img/ndk_tool_ndk_build.png)\n\n具体配置代码：\n\n```java\nProgram:\n D:\\sdk\\ndk-bundle\\build\\ndk-build.cmd\n\nParameters:\n NDK_LIBS_OUT=$ModuleFileDir$/libs APP_ABI=armeabi-v7a,armeabi,x86\n\nWorking\n$ModuleFileDir$\\src\\main\n\n```\n\n**ii.C/C++文件生成及so库生成**\n\n**头文件.h的生成，具体操作如图：**\n\n![](/assets/img/ndk_tool_gen_headfile.png)\n\n具体步骤：\n\n选中JNIUtil点击右键，显示如上图，选中NDK，点击javah，就会自动生成头文件，具体位置如图：\n\n![](/assets/img/ndk_build_headfile.png)\n\n**.c文件生成和第一种一样（这里略）**\n\n**so库文件生成，点击ndk-build，生成库文件，具体如图：**\n\n![](/assets/img/ndk_ndk_build_so.png)\n\n\n到此，两种方法生成讲解完毕。\n\n## 三.注意事项\n\n**第一种方式**\n- gradle.build中生成so库文件的平台可配置，如（具体如第一种方式build配置）：abiFilters \"armeabi\", \"armeabi-v7a\", \"x86\"//控制so库生成兼容的平台\n- 生成的so库是在build文件中，需要手动copy到项目。\n\n**第二种方式**\n- 在ndk-build的配置中，so库文件生成平台也可以配置，如（具体如ndk-build配置）：APP_ABI=armeabi-v7a,armeabi,x86\n- so库文件的生成位置是可以配置的，自动生成到你配置的位置（这一点爽爆了，不用copy）,如（具体如ndk-build配置）：NDK_LIBS_OUT=$ModuleFileDir$/libs\n- 可以随时修改C/C++代码，然后点击ndk-build生成so库，直接调试，非常方便。\n\n\n\n#### 源码地址，欢迎下载及Star \n[https://github.com/awenzeng/JniTest](https://github.com/awenzeng/JniTest)\n\n## 四.参考文献\n[android studio NDK使用，编译c生成.so实践记录](http://blog.csdn.net/u010030505/article/details/51942157)\n\n[Android Studio开发JNI工程](http://blog.csdn.net/sodino/article/details/41946607)\n\n[Android NDK Jni 开发C和C++的区别](http://www.cnblogs.com/gengchangjing/p/ndk.html)\n\n\n\n\n\n\n","slug":"tech_android_ndk","published":1,"updated":"2019-06-27T08:15:15.326Z","photos":[],"link":"","_id":"cjxfjaeqn0004ystgnhbnmtew","content":"<hr>\n<p>前言：在Android开发的eclipse时代，想要开发NDK项目或生成so库，是非常蛋疼的，需要踩坑无数，方能生成so库；而如今Android Studio时代，开发jni C/C++项目，通过gradle的集成工具，那是一个爽。下面将会介绍两种利用AS和gradle开发NDK项目及生成so库的方式。</p>\n<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一.环境准备\"></a>一.环境准备</h2><p>Android开发环境，Android-SDK，java-SDK,android-NDK相关环境（略：网上有许多）</p>\n<p><strong>1.安装完成之后如图：</strong></p>\n<p><img src=\"/assets/img/ndk_config.png\" alt=\"\"></p>\n<p><strong>2.在项目的gradle.properties文件中加上 android.useDeprecatedNdk = true</strong></p>\n<p><strong>3.注意写好native接口和System.loadLibrary()</strong></p>\n<p>如：JNIUtil和MainActivity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JNIUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JNIUtil instance = <span class=\"keyword\">new</span> JNIUtil();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JNIUtil <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"native-lib\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">initData</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">getStringFromJni</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\"></div><div class=\"line\">        tv.setText(JNIUtil.getInstance().getStringFromJni());</div><div class=\"line\">        Log.i(<span class=\"string\">\"笔沫拾光\"</span>,JNIUtil.getInstance().initData());</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>,JNIUtil.getInstance().initData(),Toast.LENGTH_LONG);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"二-两种编译和生成SO库的方式\"><a href=\"#二-两种编译和生成SO库的方式\" class=\"headerlink\" title=\"二.两种编译和生成SO库的方式\"></a>二.两种编译和生成SO库的方式</h2><p><strong> 1.手动编译C/C++文件和so库生成 </strong></p>\n<p><strong>i.生成C/C++文件</strong></p>\n<p>执行Build-&gt;Make Project，生成class文件，class文件的生成路径为： app_path/build/intermediates/classes/debug.</p>\n<p>javah生成c头文件</p>\n<p>操作命令：<br>javah -d jni -classpath SDK_android.jar;APP_classes lab.sodino.jnitest.MainActivity</p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d jni -classpath D:\\sdk\\platforms\\android-<span class=\"number\">25</span>\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug com.awen.jnitest.JNIUtil</div></pre></td></tr></table></figure>\n<p>生成头文件如图：</p>\n<p><img src=\"/assets/img/ndk_build_headfile.png\" alt=\"\"></p>\n<p><strong>ii.编辑C文件</strong><br>在main.c文件中实现头文件中的方法</p>\n<p>代码示例C：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_awen_jnitest_JNIUtil.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_awen_jnitest_JNIUtil_initData</span><span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"有梦为马，随处可栖。\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_awen_jnitest_JNIUtil_getStringFromJni</span></span></div><div class=\"line\">        <span class=\"params\">(JNIEnv *env, jobject jObj)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"笔沫拾光\\nhttp://awenzeng.me/\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码示例C++：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring  <span class=\"title\">Java_com_awen_jnitest_JNIUtil_initData</span><span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"Hello NDK C++\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring  <span class=\"title\">Java_com_awen_jnitest_JNIUtil_getStringFromJni</span></span></div><div class=\"line\">        <span class=\"params\">(JNIEnv *env, jobject jObj)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"笔沫拾光\\nhttp://awenzeng.me/\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p><strong>iii.修改build.gradle配置</strong></p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">          moduleName <span class=\"string\">\"native-lib\"</span></div><div class=\"line\">          abiFilters <span class=\"string\">\"armeabi\"</span>, <span class=\"string\">\"armeabi-v7a\"</span>, <span class=\"string\">\"x86\"</span><span class=\"comment\">//控制so库生成兼容的平台</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体如图</p>\n<p><img src=\"/assets/img/ndk_gradle_config.png\" alt=\"\"></p>\n<p><strong>iV.执行Build-&gt;Rebuild Project或Make Project，so库就会自动生成，具体如图：</strong></p>\n<p><img src=\"/assets/img/ndk_build_so.png\" alt=\"\"></p>\n<p><strong> 2.Android studio配置工具编译和生成so库</strong></p>\n<p><strong>i.Android studio工具配置</strong></p>\n<p>为了方便生成头文件和so文件，我们可以在Android Studio → External Tools中设置两个命令，分别来生成头文件和生成.so文件<br><img src=\"/assets/img/ndk_tools.png\" alt=\"\"></p>\n<p>javah:</p>\n<p><img src=\"/assets/img/ndk_tool_javah.png\" alt=\"\"></p>\n<p>具体配置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program:</div><div class=\"line\"> $JDKPath$/bin/javah</div><div class=\"line\"></div><div class=\"line\">Parameters:(具体参数参考第一种方法头文件的生成)</div><div class=\"line\"> -d jni -classpath D:\\sdk\\platforms\\android-<span class=\"number\">25</span>\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug $FileClass$</div><div class=\"line\"></div><div class=\"line\">Working</div><div class=\"line\"> $SourcepathEntry$\\..\\java</div></pre></td></tr></table></figure>\n<p>ndk-build:</p>\n<p><img src=\"/assets/img/ndk_tool_ndk_build.png\" alt=\"\"></p>\n<p>具体配置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program:</div><div class=\"line\"> D:\\sdk\\ndk-bundle\\build\\ndk-build.cmd</div><div class=\"line\"></div><div class=\"line\">Parameters:</div><div class=\"line\"> NDK_LIBS_OUT=$ModuleFileDir$/libs APP_ABI=armeabi-v7a,armeabi,x86</div><div class=\"line\"></div><div class=\"line\">Working</div><div class=\"line\">$ModuleFileDir$\\src\\main</div></pre></td></tr></table></figure>\n<p><strong>ii.C/C++文件生成及so库生成</strong></p>\n<p><strong>头文件.h的生成，具体操作如图：</strong></p>\n<p><img src=\"/assets/img/ndk_tool_gen_headfile.png\" alt=\"\"></p>\n<p>具体步骤：</p>\n<p>选中JNIUtil点击右键，显示如上图，选中NDK，点击javah，就会自动生成头文件，具体位置如图：</p>\n<p><img src=\"/assets/img/ndk_build_headfile.png\" alt=\"\"></p>\n<p><strong>.c文件生成和第一种一样（这里略）</strong></p>\n<p><strong>so库文件生成，点击ndk-build，生成库文件，具体如图：</strong></p>\n<p><img src=\"/assets/img/ndk_ndk_build_so.png\" alt=\"\"></p>\n<p>到此，两种方法生成讲解完毕。</p>\n<h2 id=\"三-注意事项\"><a href=\"#三-注意事项\" class=\"headerlink\" title=\"三.注意事项\"></a>三.注意事项</h2><p><strong>第一种方式</strong></p>\n<ul>\n<li>gradle.build中生成so库文件的平台可配置，如（具体如第一种方式build配置）：abiFilters “armeabi”, “armeabi-v7a”, “x86”//控制so库生成兼容的平台</li>\n<li>生成的so库是在build文件中，需要手动copy到项目。</li>\n</ul>\n<p><strong>第二种方式</strong></p>\n<ul>\n<li>在ndk-build的配置中，so库文件生成平台也可以配置，如（具体如ndk-build配置）：APP_ABI=armeabi-v7a,armeabi,x86</li>\n<li>so库文件的生成位置是可以配置的，自动生成到你配置的位置（这一点爽爆了，不用copy）,如（具体如ndk-build配置）：NDK_LIBS_OUT=$ModuleFileDir$/libs</li>\n<li>可以随时修改C/C++代码，然后点击ndk-build生成so库，直接调试，非常方便。</li>\n</ul>\n<h4 id=\"源码地址，欢迎下载及Star\"><a href=\"#源码地址，欢迎下载及Star\" class=\"headerlink\" title=\"源码地址，欢迎下载及Star\"></a>源码地址，欢迎下载及Star</h4><p><a href=\"https://github.com/awenzeng/JniTest\" target=\"_blank\" rel=\"external\">https://github.com/awenzeng/JniTest</a></p>\n<h2 id=\"四-参考文献\"><a href=\"#四-参考文献\" class=\"headerlink\" title=\"四.参考文献\"></a>四.参考文献</h2><p><a href=\"http://blog.csdn.net/u010030505/article/details/51942157\" target=\"_blank\" rel=\"external\">android studio NDK使用，编译c生成.so实践记录</a></p>\n<p><a href=\"http://blog.csdn.net/sodino/article/details/41946607\" target=\"_blank\" rel=\"external\">Android Studio开发JNI工程</a></p>\n<p><a href=\"http://www.cnblogs.com/gengchangjing/p/ndk.html\" target=\"_blank\" rel=\"external\">Android NDK Jni 开发C和C++的区别</a></p>\n","excerpt":"<hr>\n<p>前言：在Android开发的eclipse时代，想要开发NDK项目或生成so库，是非常蛋疼的，需要踩坑无数，方能生成so库；而如今Android Studio时代，开发jni C/C++项目，通过gradle的集成工具，那是一个爽。下面将会介绍两种利用AS和gradle开发NDK项目及生成so库的方式。</p>\n<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一.环境准备\"></a>一.环境准备</h2><p>Android开发环境，Android-SDK，java-SDK,android-NDK相关环境（略：网上有许多）</p>\n<p><strong>1.安装完成之后如图：</strong></p>\n<p><img src=\"/assets/img/ndk_config.png\" alt=\"\"></p>\n<p><strong>2.在项目的gradle.properties文件中加上 android.useDeprecatedNdk = true</strong></p>\n<p><strong>3.注意写好native接口和System.loadLibrary()</strong></p>\n<p>如：JNIUtil和MainActivity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JNIUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JNIUtil instance = <span class=\"keyword\">new</span> JNIUtil();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JNIUtil <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        System.loadLibrary(<span class=\"string\">\"native-lib\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">initData</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">getStringFromJni</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        TextView tv = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\"></div><div class=\"line\">        tv.setText(JNIUtil.getInstance().getStringFromJni());</div><div class=\"line\">        Log.i(<span class=\"string\">\"笔沫拾光\"</span>,JNIUtil.getInstance().initData());</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>,JNIUtil.getInstance().initData(),Toast.LENGTH_LONG);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"二-两种编译和生成SO库的方式\"><a href=\"#二-两种编译和生成SO库的方式\" class=\"headerlink\" title=\"二.两种编译和生成SO库的方式\"></a>二.两种编译和生成SO库的方式</h2><p><strong> 1.手动编译C/C++文件和so库生成 </strong></p>\n<p><strong>i.生成C/C++文件</strong></p>\n<p>执行Build-&gt;Make Project，生成class文件，class文件的生成路径为： app_path/build/intermediates/classes/debug.</p>\n<p>javah生成c头文件</p>\n<p>操作命令：<br>javah -d jni -classpath SDK_android.jar;APP_classes lab.sodino.jnitest.MainActivity</p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">javah -d jni -classpath D:\\sdk\\platforms\\android-<span class=\"number\">25</span>\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug com.awen.jnitest.JNIUtil</div></pre></td></tr></table></figure>\n<p>生成头文件如图：</p>\n<p><img src=\"/assets/img/ndk_build_headfile.png\" alt=\"\"></p>\n<p><strong>ii.编辑C文件</strong><br>在main.c文件中实现头文件中的方法</p>\n<p>代码示例C：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_awen_jnitest_JNIUtil.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_awen_jnitest_JNIUtil_initData</span><span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"有梦为马，随处可栖。\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_awen_jnitest_JNIUtil_getStringFromJni</span></div><div class=\"line\">        <span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"笔沫拾光\\nhttp://awenzeng.me/\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码示例C++：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring  <span class=\"title\">Java_com_awen_jnitest_JNIUtil_initData</span><span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"Hello NDK C++\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">jstring  <span class=\"title\">Java_com_awen_jnitest_JNIUtil_getStringFromJni</span></div><div class=\"line\">        <span class=\"params\">(JNIEnv *env, jobject jObj)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> env-&gt;NewStringUTF(<span class=\"string\">\"笔沫拾光\\nhttp://awenzeng.me/\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p><strong>iii.修改build.gradle配置</strong></p>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">          moduleName <span class=\"string\">\"native-lib\"</span></div><div class=\"line\">          abiFilters <span class=\"string\">\"armeabi\"</span>, <span class=\"string\">\"armeabi-v7a\"</span>, <span class=\"string\">\"x86\"</span><span class=\"comment\">//控制so库生成兼容的平台</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体如图</p>\n<p><img src=\"/assets/img/ndk_gradle_config.png\" alt=\"\"></p>\n<p><strong>iV.执行Build-&gt;Rebuild Project或Make Project，so库就会自动生成，具体如图：</strong></p>\n<p><img src=\"/assets/img/ndk_build_so.png\" alt=\"\"></p>\n<p><strong> 2.Android studio配置工具编译和生成so库</strong></p>\n<p><strong>i.Android studio工具配置</strong></p>\n<p>为了方便生成头文件和so文件，我们可以在Android Studio → External Tools中设置两个命令，分别来生成头文件和生成.so文件<br><img src=\"/assets/img/ndk_tools.png\" alt=\"\"></p>\n<p>javah:</p>\n<p><img src=\"/assets/img/ndk_tool_javah.png\" alt=\"\"></p>\n<p>具体配置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program:</div><div class=\"line\"> $JDKPath$/bin/javah</div><div class=\"line\"></div><div class=\"line\">Parameters:(具体参数参考第一种方法头文件的生成)</div><div class=\"line\"> -d jni -classpath D:\\sdk\\platforms\\android-<span class=\"number\">25</span>\\android.jar;E:\\githup\\JniTest\\app\\build\\intermediates\\classes\\debug $FileClass$</div><div class=\"line\"></div><div class=\"line\">Working</div><div class=\"line\"> $SourcepathEntry$\\..\\java</div></pre></td></tr></table></figure>\n<p>ndk-build:</p>\n<p><img src=\"/assets/img/ndk_tool_ndk_build.png\" alt=\"\"></p>\n<p>具体配置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Program:</div><div class=\"line\"> D:\\sdk\\ndk-bundle\\build\\ndk-build.cmd</div><div class=\"line\"></div><div class=\"line\">Parameters:</div><div class=\"line\"> NDK_LIBS_OUT=$ModuleFileDir$/libs APP_ABI=armeabi-v7a,armeabi,x86</div><div class=\"line\"></div><div class=\"line\">Working</div><div class=\"line\">$ModuleFileDir$\\src\\main</div></pre></td></tr></table></figure>\n<p><strong>ii.C/C++文件生成及so库生成</strong></p>\n<p><strong>头文件.h的生成，具体操作如图：</strong></p>\n<p><img src=\"/assets/img/ndk_tool_gen_headfile.png\" alt=\"\"></p>\n<p>具体步骤：</p>\n<p>选中JNIUtil点击右键，显示如上图，选中NDK，点击javah，就会自动生成头文件，具体位置如图：</p>\n<p><img src=\"/assets/img/ndk_build_headfile.png\" alt=\"\"></p>\n<p><strong>.c文件生成和第一种一样（这里略）</strong></p>\n<p><strong>so库文件生成，点击ndk-build，生成库文件，具体如图：</strong></p>\n<p><img src=\"/assets/img/ndk_ndk_build_so.png\" alt=\"\"></p>\n<p>到此，两种方法生成讲解完毕。</p>\n<h2 id=\"三-注意事项\"><a href=\"#三-注意事项\" class=\"headerlink\" title=\"三.注意事项\"></a>三.注意事项</h2><p><strong>第一种方式</strong></p>\n<ul>\n<li>gradle.build中生成so库文件的平台可配置，如（具体如第一种方式build配置）：abiFilters “armeabi”, “armeabi-v7a”, “x86”//控制so库生成兼容的平台</li>\n<li>生成的so库是在build文件中，需要手动copy到项目。</li>\n</ul>\n<p><strong>第二种方式</strong></p>\n<ul>\n<li>在ndk-build的配置中，so库文件生成平台也可以配置，如（具体如ndk-build配置）：APP_ABI=armeabi-v7a,armeabi,x86</li>\n<li>so库文件的生成位置是可以配置的，自动生成到你配置的位置（这一点爽爆了，不用copy）,如（具体如ndk-build配置）：NDK_LIBS_OUT=$ModuleFileDir$/libs</li>\n<li>可以随时修改C/C++代码，然后点击ndk-build生成so库，直接调试，非常方便。</li>\n</ul>\n<h4 id=\"源码地址，欢迎下载及Star\"><a href=\"#源码地址，欢迎下载及Star\" class=\"headerlink\" title=\"源码地址，欢迎下载及Star\"></a>源码地址，欢迎下载及Star</h4><p><a href=\"https://github.com/awenzeng/JniTest\">https://github.com/awenzeng/JniTest</a></p>\n<h2 id=\"四-参考文献\"><a href=\"#四-参考文献\" class=\"headerlink\" title=\"四.参考文献\"></a>四.参考文献</h2><p><a href=\"http://blog.csdn.net/u010030505/article/details/51942157\">android studio NDK使用，编译c生成.so实践记录</a></p>\n<p><a href=\"http://blog.csdn.net/sodino/article/details/41946607\">Android Studio开发JNI工程</a></p>\n<p><a href=\"http://www.cnblogs.com/gengchangjing/p/ndk.html\">Android NDK Jni 开发C和C++的区别</a></p>"},{"layout":"post","title":"MVP模式学习及使用","date":"2017-04-11T10:41:32.000Z","comments":1,"_content":"---\nGoogle官方推出MVP模式有一段时间，MVP模式在android项目中使用也越来越广泛。作为一个Android开发人员，学会使用MVP模式，那也相当的重要。\n# 一、什么是MVP\nMVP从MVC架构模式演化而来， MVC分别代表模型、视图和控制器，在Android中，定义Class类作为模型，Layout XML表示视图，而Activity用作控制器，这样一来，在Activity中充斥了大量代码，无论是从扩展性和重用性都无法达到理想的效果。所以个人认为，MVC分层在Android App开发中没有解决问题。而MVP解决了这个问题。\n\n MVP即为Model、View和Presenter。Model表示模型，实现数据存储与业务逻辑；View表示视图，提供用户交互的接口；Presenter表示主导器，相当于MVC中的Controller但比Controller更灵活。MVP的关系如图所示。\n\n![](http://img.blog.csdn.net/20160605143622019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### **从上图可以看出：**\n\nA） View将功能委托给Presenter完成，Presenter调用Model完成业务功能与数据存储，并再次通过View更新UI；\n\nB） View和Model没有直接关联，无法相互调用；\n\nC） Presenter和View可以相互调用；\n\nD） Presenter调用Model完成业务功能。\n\n<!-- more -->\n### **MVP的优点：**\n\nA） 各个层次之间的职责更加单一清晰；\n\nB） 很大程度上降低了代码的耦合度；\n\nC） 复用性大大提高；\n\nD） 面向接口编程，定义与实现分离，方便测试与维护；\n\nE） 代码更简洁。\n \n \n\n### **MVP的缺点：**\n\nA） 类变得更多了；\n\nB） 组件与组件之间的关系很复杂。\n\n# 二、MVP的使用\nGoogle官方在推出MVP模式时，也给出了一个使用MVP模式的DEMO([TODO-MVP](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)),通过此Demo，细细阅读，细细评味。相信，很快你就会掌握MVP模式的使用方法。\n\nDEMO项目截图:\n\n![](http://7xohx8.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-10%20%E4%B8%8B%E5%8D%883.53.20.png)\n\n使用注意：虽然MVP模式非常的给力，但我们也不能乱用。需要结合我们项目实际情况来使用，对于功能比较简单的界面，其实MVC模式相对来说还是比较适合，毕竟功能简单，代码量也不会很多。对于功能比较复杂的界面，建议使用MVP模式来优化流程。\n\n# 三、相关链接\n\n[Android Architecture Blueprints 学习之 TODO-MVP（一）](http://www.tuicool.com/articles/zqiiu2y);\n\n[Android Architecture Blueprints 学习之 TODO-MVP（二）](http://www.tuicool.com/articles/qyIVV3q);\n\n[Android Architecture Blueprints 学习之 TODO-MVP（三）](http://www.tuicool.com/articles/UrmMfyB);","source":"_posts/tech_android_mvp.md","raw":"---\nlayout: post\ntitle: \"MVP模式学习及使用\"\ndate: 4/11/2017 6:41:32 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android基础\n\t- MVP\n---\n---\nGoogle官方推出MVP模式有一段时间，MVP模式在android项目中使用也越来越广泛。作为一个Android开发人员，学会使用MVP模式，那也相当的重要。\n# 一、什么是MVP\nMVP从MVC架构模式演化而来， MVC分别代表模型、视图和控制器，在Android中，定义Class类作为模型，Layout XML表示视图，而Activity用作控制器，这样一来，在Activity中充斥了大量代码，无论是从扩展性和重用性都无法达到理想的效果。所以个人认为，MVC分层在Android App开发中没有解决问题。而MVP解决了这个问题。\n\n MVP即为Model、View和Presenter。Model表示模型，实现数据存储与业务逻辑；View表示视图，提供用户交互的接口；Presenter表示主导器，相当于MVC中的Controller但比Controller更灵活。MVP的关系如图所示。\n\n![](http://img.blog.csdn.net/20160605143622019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n### **从上图可以看出：**\n\nA） View将功能委托给Presenter完成，Presenter调用Model完成业务功能与数据存储，并再次通过View更新UI；\n\nB） View和Model没有直接关联，无法相互调用；\n\nC） Presenter和View可以相互调用；\n\nD） Presenter调用Model完成业务功能。\n\n<!-- more -->\n### **MVP的优点：**\n\nA） 各个层次之间的职责更加单一清晰；\n\nB） 很大程度上降低了代码的耦合度；\n\nC） 复用性大大提高；\n\nD） 面向接口编程，定义与实现分离，方便测试与维护；\n\nE） 代码更简洁。\n \n \n\n### **MVP的缺点：**\n\nA） 类变得更多了；\n\nB） 组件与组件之间的关系很复杂。\n\n# 二、MVP的使用\nGoogle官方在推出MVP模式时，也给出了一个使用MVP模式的DEMO([TODO-MVP](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)),通过此Demo，细细阅读，细细评味。相信，很快你就会掌握MVP模式的使用方法。\n\nDEMO项目截图:\n\n![](http://7xohx8.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-10%20%E4%B8%8B%E5%8D%883.53.20.png)\n\n使用注意：虽然MVP模式非常的给力，但我们也不能乱用。需要结合我们项目实际情况来使用，对于功能比较简单的界面，其实MVC模式相对来说还是比较适合，毕竟功能简单，代码量也不会很多。对于功能比较复杂的界面，建议使用MVP模式来优化流程。\n\n# 三、相关链接\n\n[Android Architecture Blueprints 学习之 TODO-MVP（一）](http://www.tuicool.com/articles/zqiiu2y);\n\n[Android Architecture Blueprints 学习之 TODO-MVP（二）](http://www.tuicool.com/articles/qyIVV3q);\n\n[Android Architecture Blueprints 学习之 TODO-MVP（三）](http://www.tuicool.com/articles/UrmMfyB);","slug":"tech_android_mvp","published":1,"updated":"2019-06-27T08:15:15.324Z","photos":[],"link":"","_id":"cjxfjaeqo0005ystgyt04ls5l","content":"<hr>\n<p>Google官方推出MVP模式有一段时间，MVP模式在android项目中使用也越来越广泛。作为一个Android开发人员，学会使用MVP模式，那也相当的重要。</p>\n<h1 id=\"一、什么是MVP\"><a href=\"#一、什么是MVP\" class=\"headerlink\" title=\"一、什么是MVP\"></a>一、什么是MVP</h1><p>MVP从MVC架构模式演化而来， MVC分别代表模型、视图和控制器，在Android中，定义Class类作为模型，Layout XML表示视图，而Activity用作控制器，这样一来，在Activity中充斥了大量代码，无论是从扩展性和重用性都无法达到理想的效果。所以个人认为，MVC分层在Android App开发中没有解决问题。而MVP解决了这个问题。</p>\n<p> MVP即为Model、View和Presenter。Model表示模型，实现数据存储与业务逻辑；View表示视图，提供用户交互的接口；Presenter表示主导器，相当于MVC中的Controller但比Controller更灵活。MVP的关系如图所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20160605143622019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"从上图可以看出：\"><a href=\"#从上图可以看出：\" class=\"headerlink\" title=\"从上图可以看出：\"></a><strong>从上图可以看出：</strong></h3><p>A） View将功能委托给Presenter完成，Presenter调用Model完成业务功能与数据存储，并再次通过View更新UI；</p>\n<p>B） View和Model没有直接关联，无法相互调用；</p>\n<p>C） Presenter和View可以相互调用；</p>\n<p>D） Presenter调用Model完成业务功能。</p>\n<a id=\"more\"></a>\n<h3 id=\"MVP的优点：\"><a href=\"#MVP的优点：\" class=\"headerlink\" title=\"MVP的优点：\"></a><strong>MVP的优点：</strong></h3><p>A） 各个层次之间的职责更加单一清晰；</p>\n<p>B） 很大程度上降低了代码的耦合度；</p>\n<p>C） 复用性大大提高；</p>\n<p>D） 面向接口编程，定义与实现分离，方便测试与维护；</p>\n<p>E） 代码更简洁。</p>\n<h3 id=\"MVP的缺点：\"><a href=\"#MVP的缺点：\" class=\"headerlink\" title=\"MVP的缺点：\"></a><strong>MVP的缺点：</strong></h3><p>A） 类变得更多了；</p>\n<p>B） 组件与组件之间的关系很复杂。</p>\n<h1 id=\"二、MVP的使用\"><a href=\"#二、MVP的使用\" class=\"headerlink\" title=\"二、MVP的使用\"></a>二、MVP的使用</h1><p>Google官方在推出MVP模式时，也给出了一个使用MVP模式的DEMO(<a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\" target=\"_blank\" rel=\"external\">TODO-MVP</a>),通过此Demo，细细阅读，细细评味。相信，很快你就会掌握MVP模式的使用方法。</p>\n<p>DEMO项目截图:</p>\n<p><img src=\"http://7xohx8.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-10%20%E4%B8%8B%E5%8D%883.53.20.png\" alt=\"\"></p>\n<p>使用注意：虽然MVP模式非常的给力，但我们也不能乱用。需要结合我们项目实际情况来使用，对于功能比较简单的界面，其实MVC模式相对来说还是比较适合，毕竟功能简单，代码量也不会很多。对于功能比较复杂的界面，建议使用MVP模式来优化流程。</p>\n<h1 id=\"三、相关链接\"><a href=\"#三、相关链接\" class=\"headerlink\" title=\"三、相关链接\"></a>三、相关链接</h1><p><a href=\"http://www.tuicool.com/articles/zqiiu2y\" target=\"_blank\" rel=\"external\">Android Architecture Blueprints 学习之 TODO-MVP（一）</a>;</p>\n<p><a href=\"http://www.tuicool.com/articles/qyIVV3q\" target=\"_blank\" rel=\"external\">Android Architecture Blueprints 学习之 TODO-MVP（二）</a>;</p>\n<p><a href=\"http://www.tuicool.com/articles/UrmMfyB\" target=\"_blank\" rel=\"external\">Android Architecture Blueprints 学习之 TODO-MVP（三）</a>;</p>\n","excerpt":"<hr>\n<p>Google官方推出MVP模式有一段时间，MVP模式在android项目中使用也越来越广泛。作为一个Android开发人员，学会使用MVP模式，那也相当的重要。</p>\n<h1 id=\"一、什么是MVP\"><a href=\"#一、什么是MVP\" class=\"headerlink\" title=\"一、什么是MVP\"></a>一、什么是MVP</h1><p>MVP从MVC架构模式演化而来， MVC分别代表模型、视图和控制器，在Android中，定义Class类作为模型，Layout XML表示视图，而Activity用作控制器，这样一来，在Activity中充斥了大量代码，无论是从扩展性和重用性都无法达到理想的效果。所以个人认为，MVC分层在Android App开发中没有解决问题。而MVP解决了这个问题。</p>\n<p> MVP即为Model、View和Presenter。Model表示模型，实现数据存储与业务逻辑；View表示视图，提供用户交互的接口；Presenter表示主导器，相当于MVC中的Controller但比Controller更灵活。MVP的关系如图所示。</p>\n<p><img src=\"http://img.blog.csdn.net/20160605143622019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h3 id=\"从上图可以看出：\"><a href=\"#从上图可以看出：\" class=\"headerlink\" title=\"从上图可以看出：\"></a><strong>从上图可以看出：</strong></h3><p>A） View将功能委托给Presenter完成，Presenter调用Model完成业务功能与数据存储，并再次通过View更新UI；</p>\n<p>B） View和Model没有直接关联，无法相互调用；</p>\n<p>C） Presenter和View可以相互调用；</p>\n<p>D） Presenter调用Model完成业务功能。</p>","more":"<h3 id=\"MVP的优点：\"><a href=\"#MVP的优点：\" class=\"headerlink\" title=\"MVP的优点：\"></a><strong>MVP的优点：</strong></h3><p>A） 各个层次之间的职责更加单一清晰；</p>\n<p>B） 很大程度上降低了代码的耦合度；</p>\n<p>C） 复用性大大提高；</p>\n<p>D） 面向接口编程，定义与实现分离，方便测试与维护；</p>\n<p>E） 代码更简洁。</p>\n<h3 id=\"MVP的缺点：\"><a href=\"#MVP的缺点：\" class=\"headerlink\" title=\"MVP的缺点：\"></a><strong>MVP的缺点：</strong></h3><p>A） 类变得更多了；</p>\n<p>B） 组件与组件之间的关系很复杂。</p>\n<h1 id=\"二、MVP的使用\"><a href=\"#二、MVP的使用\" class=\"headerlink\" title=\"二、MVP的使用\"></a>二、MVP的使用</h1><p>Google官方在推出MVP模式时，也给出了一个使用MVP模式的DEMO(<a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\">TODO-MVP</a>),通过此Demo，细细阅读，细细评味。相信，很快你就会掌握MVP模式的使用方法。</p>\n<p>DEMO项目截图:</p>\n<p><img src=\"http://7xohx8.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-10%20%E4%B8%8B%E5%8D%883.53.20.png\" alt=\"\"></p>\n<p>使用注意：虽然MVP模式非常的给力，但我们也不能乱用。需要结合我们项目实际情况来使用，对于功能比较简单的界面，其实MVC模式相对来说还是比较适合，毕竟功能简单，代码量也不会很多。对于功能比较复杂的界面，建议使用MVP模式来优化流程。</p>\n<h1 id=\"三、相关链接\"><a href=\"#三、相关链接\" class=\"headerlink\" title=\"三、相关链接\"></a>三、相关链接</h1><p><a href=\"http://www.tuicool.com/articles/zqiiu2y\">Android Architecture Blueprints 学习之 TODO-MVP（一）</a>;</p>\n<p><a href=\"http://www.tuicool.com/articles/qyIVV3q\">Android Architecture Blueprints 学习之 TODO-MVP（二）</a>;</p>\n<p><a href=\"http://www.tuicool.com/articles/UrmMfyB\">Android Architecture Blueprints 学习之 TODO-MVP（三）</a>;</p>"},{"layout":"post","title":"Android常用开源框架","date":"2017-05-03T12:14:42.000Z","comments":1,"_content":"---\n从08年，第一部Android智能手机发布，到如今百花开放。从Android1.5(纸杯蛋糕)到现在Android7.0(牛轧糖),可以说，Android系统的变化是巨大的，不管是在开发，还是用户体验上都已变得成熟。经过9年的发展和互联网的开放精神，[Github](https://github.com/)出现许多很不错的开源框架，如：retrofit,okhttp,Rxjava,RxAndroid,Glide,Litepal,EventBus,Butterknife,Loggger等等。\n\n\n# 常用开源框架\n-----\n\n**1.简化网络操作框架(Retrofit)**\n\n项目描述：Retrofit是square公司推出的一个针对Android和Java类型安全的http客户端。\n\n* 项目地址：[https://github.com/square/retrofit](https://github.com/square/retrofit)\n\n* 项目首页：[http://square.github.io/retrofit/](http://square.github.io/retrofit/)\n\n* 相关介绍：[Retrofit介绍1](http://www.jianshu.com/p/1ef0ba0bccc6)，[Retrofit介绍2](http://www.jianshu.com/p/94ca8a284ebb)\n\n**2.网络框架(okHttp)**\n\n项目描述：okHttp也是square公司推出一个处理网络请求轻量级框架。用于替代HttpUrlConnection和Apache HttpClient。\n\n* 项目地址：[https://github.com/square/okhttp](https://github.com/square/okhttp)\n\n* 项目首页：[http://square.github.io/okhttp/](http://square.github.io/okhttp/)\n\n* 相关介绍：[okHttp介绍1](http://blog.csdn.net/lmj623565791/article/details/47911083)，[okHttp介绍2](http://www.jianshu.com/p/ca8a982a116b)\n<!-- more -->\n**3.响应式编程框架(RxJava,RxAndroid)**\n\n项目描述：一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。\n\n* 项目地址：[https://github.com/ReactiveX/RxJava](https://github.com/ReactiveX/RxJava)，[https://github.com/ReactiveX/RxAndroid ](https://github.com/ReactiveX/RxAndroid)\n\n* 相关介绍：[RxJava介绍1](http://gank.io/post/560e15be2dca930e00da1083)，[RxJava介绍2](http://blog.csdn.net/caihongdao123/article/details/51897793)\n\n**4.图片加载框架(Glide)**\n\n项目描述：一个很方便图片加载库(网络图片、本地图片，项目图片，gif图等等)\n\n* 项目地址：[https://github.com/bumptech/glide](https://github.com/bumptech/glide)\n\n* 相关介绍：[Glide介绍1](http://www.cnblogs.com/whoislcj/p/5558168.html)，[Glide介绍2](http://www.jianshu.com/p/4a3177b57949)\n\n**5.发布/订阅事件框架(EventBus)**\n\n项目描述：是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。\n\n* 项目首页：[http://greenrobot.org/eventbus/](http://greenrobot.org/eventbus/)\n\n* 项目地址：[https://github.com/greenrobot/EventBus](https://github.com/greenrobot/EventBus)\n\n* 相关介绍：[EventBus介绍1](http://blog.csdn.net/harvic880925/article/details/40660137)，[EventBus介绍2](http://blog.csdn.net/harvic880925/article/details/40787203)\n\n**6.事件绑定框架(ButterKnife)**\n\n项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。\n\n* 项目地址：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n* 项目首页：[http://jakewharton.github.io/butterknife/](http://jakewharton.github.io/butterknife/)\n\n* 相关介绍：[ButterKnife介绍](http://www.jianshu.com/p/9ad21e548b69)\n\n**7.Log日志框架(Logger)**\n\n项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。\n\n* 项目地址：[https://github.com/orhanobut/logger](https://github.com/orhanobut/logger)\n\n* 相关介绍：[Logger介绍](http://blog.csdn.net/lvwenbo0107/article/details/52126076)\n\n**8.数据库框架(LitelPal)**\n\n项目描述：是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式\n\n* 项目地址：[https://github.com/LitePalFramework/LitePal](https://github.com/LitePalFramework/LitePal)\n\n* 相关介绍：[LitelPal介绍](http://www.jianshu.com/p/557682e0a9f0)\n\n**9.内存泄漏检测框架(LeakCanary)**\n\n项目描述：LeakCanary，它是一个Android和Java的内存泄露检测库，可以大幅度减少了开发中遇到的OOM问题。\n\n* 项目地址：[https://github.com/square/leakcanary](https://github.com/square/leakcanary)\n\n* 相关介绍：[LeakCanary介绍](https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/)\n\n**10.程序崩溃日志框架(ACRA)**\n\n项目描述：一个便于我们检测程序崩溃的框架 ACRA。又叫做 Application CrashReport for Android。\n\n* 项目地址：[https://github.com/ACRA/acra](https://github.com/ACRA/acra)\n\n* 相关介绍：[ACRA用法详解](http://blog.csdn.net/ququ9376/article/details/45933453)\n\n\n\n","source":"_posts/tech_android_opensource_libs.md","raw":"---\nlayout: post\ntitle: \"Android常用开源框架\"\ndate: 5/3/2017 8:14:42 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 开源框架\n---\n---\n从08年，第一部Android智能手机发布，到如今百花开放。从Android1.5(纸杯蛋糕)到现在Android7.0(牛轧糖),可以说，Android系统的变化是巨大的，不管是在开发，还是用户体验上都已变得成熟。经过9年的发展和互联网的开放精神，[Github](https://github.com/)出现许多很不错的开源框架，如：retrofit,okhttp,Rxjava,RxAndroid,Glide,Litepal,EventBus,Butterknife,Loggger等等。\n\n\n# 常用开源框架\n-----\n\n**1.简化网络操作框架(Retrofit)**\n\n项目描述：Retrofit是square公司推出的一个针对Android和Java类型安全的http客户端。\n\n* 项目地址：[https://github.com/square/retrofit](https://github.com/square/retrofit)\n\n* 项目首页：[http://square.github.io/retrofit/](http://square.github.io/retrofit/)\n\n* 相关介绍：[Retrofit介绍1](http://www.jianshu.com/p/1ef0ba0bccc6)，[Retrofit介绍2](http://www.jianshu.com/p/94ca8a284ebb)\n\n**2.网络框架(okHttp)**\n\n项目描述：okHttp也是square公司推出一个处理网络请求轻量级框架。用于替代HttpUrlConnection和Apache HttpClient。\n\n* 项目地址：[https://github.com/square/okhttp](https://github.com/square/okhttp)\n\n* 项目首页：[http://square.github.io/okhttp/](http://square.github.io/okhttp/)\n\n* 相关介绍：[okHttp介绍1](http://blog.csdn.net/lmj623565791/article/details/47911083)，[okHttp介绍2](http://www.jianshu.com/p/ca8a982a116b)\n<!-- more -->\n**3.响应式编程框架(RxJava,RxAndroid)**\n\n项目描述：一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。\n\n* 项目地址：[https://github.com/ReactiveX/RxJava](https://github.com/ReactiveX/RxJava)，[https://github.com/ReactiveX/RxAndroid ](https://github.com/ReactiveX/RxAndroid)\n\n* 相关介绍：[RxJava介绍1](http://gank.io/post/560e15be2dca930e00da1083)，[RxJava介绍2](http://blog.csdn.net/caihongdao123/article/details/51897793)\n\n**4.图片加载框架(Glide)**\n\n项目描述：一个很方便图片加载库(网络图片、本地图片，项目图片，gif图等等)\n\n* 项目地址：[https://github.com/bumptech/glide](https://github.com/bumptech/glide)\n\n* 相关介绍：[Glide介绍1](http://www.cnblogs.com/whoislcj/p/5558168.html)，[Glide介绍2](http://www.jianshu.com/p/4a3177b57949)\n\n**5.发布/订阅事件框架(EventBus)**\n\n项目描述：是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。\n\n* 项目首页：[http://greenrobot.org/eventbus/](http://greenrobot.org/eventbus/)\n\n* 项目地址：[https://github.com/greenrobot/EventBus](https://github.com/greenrobot/EventBus)\n\n* 相关介绍：[EventBus介绍1](http://blog.csdn.net/harvic880925/article/details/40660137)，[EventBus介绍2](http://blog.csdn.net/harvic880925/article/details/40787203)\n\n**6.事件绑定框架(ButterKnife)**\n\n项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。\n\n* 项目地址：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n* 项目首页：[http://jakewharton.github.io/butterknife/](http://jakewharton.github.io/butterknife/)\n\n* 相关介绍：[ButterKnife介绍](http://www.jianshu.com/p/9ad21e548b69)\n\n**7.Log日志框架(Logger)**\n\n项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。\n\n* 项目地址：[https://github.com/orhanobut/logger](https://github.com/orhanobut/logger)\n\n* 相关介绍：[Logger介绍](http://blog.csdn.net/lvwenbo0107/article/details/52126076)\n\n**8.数据库框架(LitelPal)**\n\n项目描述：是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式\n\n* 项目地址：[https://github.com/LitePalFramework/LitePal](https://github.com/LitePalFramework/LitePal)\n\n* 相关介绍：[LitelPal介绍](http://www.jianshu.com/p/557682e0a9f0)\n\n**9.内存泄漏检测框架(LeakCanary)**\n\n项目描述：LeakCanary，它是一个Android和Java的内存泄露检测库，可以大幅度减少了开发中遇到的OOM问题。\n\n* 项目地址：[https://github.com/square/leakcanary](https://github.com/square/leakcanary)\n\n* 相关介绍：[LeakCanary介绍](https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/)\n\n**10.程序崩溃日志框架(ACRA)**\n\n项目描述：一个便于我们检测程序崩溃的框架 ACRA。又叫做 Application CrashReport for Android。\n\n* 项目地址：[https://github.com/ACRA/acra](https://github.com/ACRA/acra)\n\n* 相关介绍：[ACRA用法详解](http://blog.csdn.net/ququ9376/article/details/45933453)\n\n\n\n","slug":"tech_android_opensource_libs","published":1,"updated":"2019-06-27T08:15:15.327Z","photos":[],"link":"","_id":"cjxfjaeqp0007ystgqqrllrwf","content":"<hr>\n<p>从08年，第一部Android智能手机发布，到如今百花开放。从Android1.5(纸杯蛋糕)到现在Android7.0(牛轧糖),可以说，Android系统的变化是巨大的，不管是在开发，还是用户体验上都已变得成熟。经过9年的发展和互联网的开放精神，<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a>出现许多很不错的开源框架，如：retrofit,okhttp,Rxjava,RxAndroid,Glide,Litepal,EventBus,Butterknife,Loggger等等。</p>\n<h1 id=\"常用开源框架\"><a href=\"#常用开源框架\" class=\"headerlink\" title=\"常用开源框架\"></a>常用开源框架</h1><hr>\n<p><strong>1.简化网络操作框架(Retrofit)</strong></p>\n<p>项目描述：Retrofit是square公司推出的一个针对Android和Java类型安全的http客户端。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/1ef0ba0bccc6\" target=\"_blank\" rel=\"external\">Retrofit介绍1</a>，<a href=\"http://www.jianshu.com/p/94ca8a284ebb\" target=\"_blank\" rel=\"external\">Retrofit介绍2</a></p>\n</li>\n</ul>\n<p><strong>2.网络框架(okHttp)</strong></p>\n<p>项目描述：okHttp也是square公司推出一个处理网络请求轻量级框架。用于替代HttpUrlConnection和Apache HttpClient。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/lmj623565791/article/details/47911083\" target=\"_blank\" rel=\"external\">okHttp介绍1</a>，<a href=\"http://www.jianshu.com/p/ca8a982a116b\" target=\"_blank\" rel=\"external\">okHttp介绍2</a></p>\n<a id=\"more\"></a>\n<p><strong>3.响应式编程框架(RxJava,RxAndroid)</strong></p>\n</li>\n</ul>\n<p>项目描述：一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxJava</a>，<a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid </a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava介绍1</a>，<a href=\"http://blog.csdn.net/caihongdao123/article/details/51897793\" target=\"_blank\" rel=\"external\">RxJava介绍2</a></p>\n</li>\n</ul>\n<p><strong>4.图片加载框架(Glide)</strong></p>\n<p>项目描述：一个很方便图片加载库(网络图片、本地图片，项目图片，gif图等等)</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">https://github.com/bumptech/glide</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.cnblogs.com/whoislcj/p/5558168.html\" target=\"_blank\" rel=\"external\">Glide介绍1</a>，<a href=\"http://www.jianshu.com/p/4a3177b57949\" target=\"_blank\" rel=\"external\">Glide介绍2</a></p>\n</li>\n</ul>\n<p><strong>5.发布/订阅事件框架(EventBus)</strong></p>\n<p>项目描述：是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。</p>\n<ul>\n<li><p>项目首页：<a href=\"http://greenrobot.org/eventbus/\" target=\"_blank\" rel=\"external\">http://greenrobot.org/eventbus/</a></p>\n</li>\n<li><p>项目地址：<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/harvic880925/article/details/40660137\" target=\"_blank\" rel=\"external\">EventBus介绍1</a>，<a href=\"http://blog.csdn.net/harvic880925/article/details/40787203\" target=\"_blank\" rel=\"external\">EventBus介绍2</a></p>\n</li>\n</ul>\n<p><strong>6.事件绑定框架(ButterKnife)</strong></p>\n<p>项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/9ad21e548b69\" target=\"_blank\" rel=\"external\">ButterKnife介绍</a></p>\n</li>\n</ul>\n<p><strong>7.Log日志框架(Logger)</strong></p>\n<p>项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/lvwenbo0107/article/details/52126076\" target=\"_blank\" rel=\"external\">Logger介绍</a></p>\n</li>\n</ul>\n<p><strong>8.数据库框架(LitelPal)</strong></p>\n<p>项目描述：是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/LitePalFramework/LitePal\" target=\"_blank\" rel=\"external\">https://github.com/LitePalFramework/LitePal</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/557682e0a9f0\" target=\"_blank\" rel=\"external\">LitelPal介绍</a></p>\n</li>\n</ul>\n<p><strong>9.内存泄漏检测框架(LeakCanary)</strong></p>\n<p>项目描述：LeakCanary，它是一个Android和Java的内存泄露检测库，可以大幅度减少了开发中遇到的OOM问题。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a></p>\n</li>\n<li><p>相关介绍：<a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\" target=\"_blank\" rel=\"external\">LeakCanary介绍</a></p>\n</li>\n</ul>\n<p><strong>10.程序崩溃日志框架(ACRA)</strong></p>\n<p>项目描述：一个便于我们检测程序崩溃的框架 ACRA。又叫做 Application CrashReport for Android。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/ACRA/acra\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/ququ9376/article/details/45933453\" target=\"_blank\" rel=\"external\">ACRA用法详解</a></p>\n</li>\n</ul>\n","excerpt":"<hr>\n<p>从08年，第一部Android智能手机发布，到如今百花开放。从Android1.5(纸杯蛋糕)到现在Android7.0(牛轧糖),可以说，Android系统的变化是巨大的，不管是在开发，还是用户体验上都已变得成熟。经过9年的发展和互联网的开放精神，<a href=\"https://github.com/\">Github</a>出现许多很不错的开源框架，如：retrofit,okhttp,Rxjava,RxAndroid,Glide,Litepal,EventBus,Butterknife,Loggger等等。</p>\n<h1 id=\"常用开源框架\"><a href=\"#常用开源框架\" class=\"headerlink\" title=\"常用开源框架\"></a>常用开源框架</h1><hr>\n<p><strong>1.简化网络操作框架(Retrofit)</strong></p>\n<p>项目描述：Retrofit是square公司推出的一个针对Android和Java类型安全的http客户端。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/retrofit\">https://github.com/square/retrofit</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://square.github.io/retrofit/\">http://square.github.io/retrofit/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/1ef0ba0bccc6\">Retrofit介绍1</a>，<a href=\"http://www.jianshu.com/p/94ca8a284ebb\">Retrofit介绍2</a></p>\n</li>\n</ul>\n<p><strong>2.网络框架(okHttp)</strong></p>\n<p>项目描述：okHttp也是square公司推出一个处理网络请求轻量级框架。用于替代HttpUrlConnection和Apache HttpClient。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/okhttp\">https://github.com/square/okhttp</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://square.github.io/okhttp/\">http://square.github.io/okhttp/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/lmj623565791/article/details/47911083\">okHttp介绍1</a>，<a href=\"http://www.jianshu.com/p/ca8a982a116b\">okHttp介绍2</a></p>","more":"<p><strong>3.响应式编程框架(RxJava,RxAndroid)</strong></p>\n</li>\n</ul>\n<p>项目描述：一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/ReactiveX/RxJava\">https://github.com/ReactiveX/RxJava</a>，<a href=\"https://github.com/ReactiveX/RxAndroid\">https://github.com/ReactiveX/RxAndroid </a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava介绍1</a>，<a href=\"http://blog.csdn.net/caihongdao123/article/details/51897793\">RxJava介绍2</a></p>\n</li>\n</ul>\n<p><strong>4.图片加载框架(Glide)</strong></p>\n<p>项目描述：一个很方便图片加载库(网络图片、本地图片，项目图片，gif图等等)</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/bumptech/glide\">https://github.com/bumptech/glide</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.cnblogs.com/whoislcj/p/5558168.html\">Glide介绍1</a>，<a href=\"http://www.jianshu.com/p/4a3177b57949\">Glide介绍2</a></p>\n</li>\n</ul>\n<p><strong>5.发布/订阅事件框架(EventBus)</strong></p>\n<p>项目描述：是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。</p>\n<ul>\n<li><p>项目首页：<a href=\"http://greenrobot.org/eventbus/\">http://greenrobot.org/eventbus/</a></p>\n</li>\n<li><p>项目地址：<a href=\"https://github.com/greenrobot/EventBus\">https://github.com/greenrobot/EventBus</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/harvic880925/article/details/40660137\">EventBus介绍1</a>，<a href=\"http://blog.csdn.net/harvic880925/article/details/40787203\">EventBus介绍2</a></p>\n</li>\n</ul>\n<p><strong>6.事件绑定框架(ButterKnife)</strong></p>\n<p>项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\">https://github.com/JakeWharton/butterknife</a></p>\n</li>\n<li><p>项目首页：<a href=\"http://jakewharton.github.io/butterknife/\">http://jakewharton.github.io/butterknife/</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/9ad21e548b69\">ButterKnife介绍</a></p>\n</li>\n</ul>\n<p><strong>7.Log日志框架(Logger)</strong></p>\n<p>项目描述：是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/orhanobut/logger\">https://github.com/orhanobut/logger</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/lvwenbo0107/article/details/52126076\">Logger介绍</a></p>\n</li>\n</ul>\n<p><strong>8.数据库框架(LitelPal)</strong></p>\n<p>项目描述：是一款开源的Android数据库框架，采用了对象关系映射(ORM)的模式</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/LitePalFramework/LitePal\">https://github.com/LitePalFramework/LitePal</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://www.jianshu.com/p/557682e0a9f0\">LitelPal介绍</a></p>\n</li>\n</ul>\n<p><strong>9.内存泄漏检测框架(LeakCanary)</strong></p>\n<p>项目描述：LeakCanary，它是一个Android和Java的内存泄露检测库，可以大幅度减少了开发中遇到的OOM问题。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/square/leakcanary\">https://github.com/square/leakcanary</a></p>\n</li>\n<li><p>相关介绍：<a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\">LeakCanary介绍</a></p>\n</li>\n</ul>\n<p><strong>10.程序崩溃日志框架(ACRA)</strong></p>\n<p>项目描述：一个便于我们检测程序崩溃的框架 ACRA。又叫做 Application CrashReport for Android。</p>\n<ul>\n<li><p>项目地址：<a href=\"https://github.com/ACRA/acra\">https://github.com/ACRA/acra</a></p>\n</li>\n<li><p>相关介绍：<a href=\"http://blog.csdn.net/ququ9376/article/details/45933453\">ACRA用法详解</a></p>\n</li>\n</ul>"},{"layout":"post","title":"【转载】Android Studio Gradle编译优化方法","date":"2017-08-08T06:30:24.000Z","comments":1,"_content":"---\n前言：最近发现Gradle项目编译越来越慢，有时甚至需要好几十分钟，实在是让人难以忍受。于是，便搜寻于网络，经过验证，发现此方案尤其有效，故留此博客，以备以后之需。\n\n# 第1步：\n打开AS安装所在的位置，用记事本打开studio64.exe.vmoptions文件。具体如图：\n![](/assets/img/as_gradle_first.jpg)\n\n# 第2步：\n打开“studio64.exe.vmoptions”文件后修改里面的值，修改后如下：\n\n```java\n#\n# *DO NOT* modify this file directly. If there is a value that you would like to override,\n# please add it to your user specific configuration file.\n#\n# See http://tools.android.com/tech-docs/configuration\n#\n-Xms2048m\n-Xmx2048m\n-XX:MaxPermSize=2048m\n-XX:ReservedCodeCacheSize=1024m\n-XX:+UseConcMarkSweepGC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-da\n-Djna.nosys=true\n-Djna.boot.library.path=\n \n-Djna.debug_load=true\n-Djna.debug_load.jna=true\n-Dsun.io.useCanonCaches=false\n-Djava.net.preferIPv4Stack=true\n-XX:+HeapDumpOnOutOfMemoryError\n-Didea.paths.selector=AndroidStudio2.0\n-Didea.platform.prefix=AndroidStudio\n```\n<!-- more -->\n# 第3步：\n打开你的项目中的“gradle.properties”文件复制如下内容：\n\n```java\n# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Settings specified in this file will override any Gradle settings\n# configured through the IDE.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# The Gradle daemon aims to improve the startup and execution time of Gradle.\n# When set to true the Gradle daemon is to run the build.\n# TODO: disable daemon on CI, since builds should be clean and reliable on servers\norg.gradle.daemon=true\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\norg.gradle.parallel=true\n# Enables new incubating mode that makes Gradle selective when configuring projects.\n# Only relevant projects are configured which results in faster builds for large multi-projects.\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand\norg.gradle.configureondemand=true\n```\n# 第4步：\n修改gradle-wrapper.properties文件,如图：\n![](/assets/img/as_gradle_fourth.jpg)\n\n# 第5步：\nGradle官网下载地址：http://services.gradle.org/distributions\n如图：\n![](/assets/img/as_gradle_fifth.jpg)\n\n# 第6步：\n具体如图：\n![](/assets/img/as_gradle_sixth.jpg)\n\n# 第7步：\n重新编译一下项目，结果如图：\n![](/assets/img/as_gradle_finish.jpg)\n\n\n参考资料：\n[Android Studio Gradle优化方法(一般人我不告诉他)](http://www.cnblogs.com/leichentao0905/p/5464844.html)","source":"_posts/tech_android_studio_config_optimize.md","raw":"---\nlayout: post\ntitle: \"【转载】Android Studio Gradle编译优化方法\"\ndate: 8/8/2017 2:30:24 PM \ncomments: true\ntags: \n\t- 技术 \n\t- AS Gradle优化\n---\n---\n前言：最近发现Gradle项目编译越来越慢，有时甚至需要好几十分钟，实在是让人难以忍受。于是，便搜寻于网络，经过验证，发现此方案尤其有效，故留此博客，以备以后之需。\n\n# 第1步：\n打开AS安装所在的位置，用记事本打开studio64.exe.vmoptions文件。具体如图：\n![](/assets/img/as_gradle_first.jpg)\n\n# 第2步：\n打开“studio64.exe.vmoptions”文件后修改里面的值，修改后如下：\n\n```java\n#\n# *DO NOT* modify this file directly. If there is a value that you would like to override,\n# please add it to your user specific configuration file.\n#\n# See http://tools.android.com/tech-docs/configuration\n#\n-Xms2048m\n-Xmx2048m\n-XX:MaxPermSize=2048m\n-XX:ReservedCodeCacheSize=1024m\n-XX:+UseConcMarkSweepGC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-da\n-Djna.nosys=true\n-Djna.boot.library.path=\n \n-Djna.debug_load=true\n-Djna.debug_load.jna=true\n-Dsun.io.useCanonCaches=false\n-Djava.net.preferIPv4Stack=true\n-XX:+HeapDumpOnOutOfMemoryError\n-Didea.paths.selector=AndroidStudio2.0\n-Didea.platform.prefix=AndroidStudio\n```\n<!-- more -->\n# 第3步：\n打开你的项目中的“gradle.properties”文件复制如下内容：\n\n```java\n# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Settings specified in this file will override any Gradle settings\n# configured through the IDE.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# The Gradle daemon aims to improve the startup and execution time of Gradle.\n# When set to true the Gradle daemon is to run the build.\n# TODO: disable daemon on CI, since builds should be clean and reliable on servers\norg.gradle.daemon=true\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\norg.gradle.parallel=true\n# Enables new incubating mode that makes Gradle selective when configuring projects.\n# Only relevant projects are configured which results in faster builds for large multi-projects.\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand\norg.gradle.configureondemand=true\n```\n# 第4步：\n修改gradle-wrapper.properties文件,如图：\n![](/assets/img/as_gradle_fourth.jpg)\n\n# 第5步：\nGradle官网下载地址：http://services.gradle.org/distributions\n如图：\n![](/assets/img/as_gradle_fifth.jpg)\n\n# 第6步：\n具体如图：\n![](/assets/img/as_gradle_sixth.jpg)\n\n# 第7步：\n重新编译一下项目，结果如图：\n![](/assets/img/as_gradle_finish.jpg)\n\n\n参考资料：\n[Android Studio Gradle优化方法(一般人我不告诉他)](http://www.cnblogs.com/leichentao0905/p/5464844.html)","slug":"tech_android_studio_config_optimize","published":1,"updated":"2019-06-27T08:15:15.329Z","photos":[],"link":"","_id":"cjxfjaeqr0008ystg5dt71djy","content":"<hr>\n<p>前言：最近发现Gradle项目编译越来越慢，有时甚至需要好几十分钟，实在是让人难以忍受。于是，便搜寻于网络，经过验证，发现此方案尤其有效，故留此博客，以备以后之需。</p>\n<h1 id=\"第1步：\"><a href=\"#第1步：\" class=\"headerlink\" title=\"第1步：\"></a>第1步：</h1><p>打开AS安装所在的位置，用记事本打开studio64.exe.vmoptions文件。具体如图：<br><img src=\"/assets/img/as_gradle_first.jpg\" alt=\"\"></p>\n<h1 id=\"第2步：\"><a href=\"#第2步：\" class=\"headerlink\" title=\"第2步：\"></a>第2步：</h1><p>打开“studio64.exe.vmoptions”文件后修改里面的值，修改后如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\"># *DO NOT* modify this file directly. If there is a value that you would like to override,</div><div class=\"line\"># please add it to your user specific configuration file.</div><div class=\"line\">#</div><div class=\"line\"># See http://tools.android.com/tech-docs/configuration</div><div class=\"line\">#</div><div class=\"line\">-Xms2048m</div><div class=\"line\">-Xmx2048m</div><div class=\"line\">-XX:MaxPermSize=2048m</div><div class=\"line\">-XX:ReservedCodeCacheSize=1024m</div><div class=\"line\">-XX:+UseConcMarkSweepGC</div><div class=\"line\">-XX:SoftRefLRUPolicyMSPerMB=50</div><div class=\"line\">-da</div><div class=\"line\">-Djna.nosys=true</div><div class=\"line\">-Djna.boot.library.path=</div><div class=\"line\"> </div><div class=\"line\">-Djna.debug_load=true</div><div class=\"line\">-Djna.debug_load.jna=true</div><div class=\"line\">-Dsun.io.useCanonCaches=false</div><div class=\"line\">-Djava.net.preferIPv4Stack=true</div><div class=\"line\">-XX:+HeapDumpOnOutOfMemoryError</div><div class=\"line\">-Didea.paths.selector=AndroidStudio2.0</div><div class=\"line\">-Didea.platform.prefix=AndroidStudio</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"第3步：\"><a href=\"#第3步：\" class=\"headerlink\" title=\"第3步：\"></a>第3步：</h1><p>打开你的项目中的“gradle.properties”文件复制如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Project-wide Gradle settings.</div><div class=\"line\"># IDE (e.g. Android Studio) users:</div><div class=\"line\"># Settings specified in this file will override any Gradle settings</div><div class=\"line\"># configured through the IDE.</div><div class=\"line\"># For more details on how to configure your build environment visit</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/build_environment.html</div><div class=\"line\"># The Gradle daemon aims to improve the startup and execution time of Gradle.</div><div class=\"line\"># When set to true the Gradle daemon is to run the build.</div><div class=\"line\"># TODO: disable daemon on CI, since builds should be clean and reliable on servers</div><div class=\"line\">org.gradle.daemon=true</div><div class=\"line\"># Specifies the JVM arguments used for the daemon process.</div><div class=\"line\"># The setting is particularly useful for tweaking memory settings.</div><div class=\"line\"># Default value: -Xmx10248m -XX:MaxPermSize=256m</div><div class=\"line\">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</div><div class=\"line\"># When configured, Gradle will run in incubating parallel mode.</div><div class=\"line\"># This option should only be used with decoupled projects. More details, visit</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</div><div class=\"line\">org.gradle.parallel=true</div><div class=\"line\"># Enables new incubating mode that makes Gradle selective when configuring projects.</div><div class=\"line\"># Only relevant projects are configured which results in faster builds for large multi-projects.</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand</div><div class=\"line\">org.gradle.configureondemand=true</div></pre></td></tr></table></figure>\n<h1 id=\"第4步：\"><a href=\"#第4步：\" class=\"headerlink\" title=\"第4步：\"></a>第4步：</h1><p>修改gradle-wrapper.properties文件,如图：<br><img src=\"/assets/img/as_gradle_fourth.jpg\" alt=\"\"></p>\n<h1 id=\"第5步：\"><a href=\"#第5步：\" class=\"headerlink\" title=\"第5步：\"></a>第5步：</h1><p>Gradle官网下载地址：<a href=\"http://services.gradle.org/distributions\" target=\"_blank\" rel=\"external\">http://services.gradle.org/distributions</a><br>如图：<br><img src=\"/assets/img/as_gradle_fifth.jpg\" alt=\"\"></p>\n<h1 id=\"第6步：\"><a href=\"#第6步：\" class=\"headerlink\" title=\"第6步：\"></a>第6步：</h1><p>具体如图：<br><img src=\"/assets/img/as_gradle_sixth.jpg\" alt=\"\"></p>\n<h1 id=\"第7步：\"><a href=\"#第7步：\" class=\"headerlink\" title=\"第7步：\"></a>第7步：</h1><p>重新编译一下项目，结果如图：<br><img src=\"/assets/img/as_gradle_finish.jpg\" alt=\"\"></p>\n<p>参考资料：<br><a href=\"http://www.cnblogs.com/leichentao0905/p/5464844.html\" target=\"_blank\" rel=\"external\">Android Studio Gradle优化方法(一般人我不告诉他)</a></p>\n","excerpt":"<hr>\n<p>前言：最近发现Gradle项目编译越来越慢，有时甚至需要好几十分钟，实在是让人难以忍受。于是，便搜寻于网络，经过验证，发现此方案尤其有效，故留此博客，以备以后之需。</p>\n<h1 id=\"第1步：\"><a href=\"#第1步：\" class=\"headerlink\" title=\"第1步：\"></a>第1步：</h1><p>打开AS安装所在的位置，用记事本打开studio64.exe.vmoptions文件。具体如图：<br><img src=\"/assets/img/as_gradle_first.jpg\" alt=\"\"></p>\n<h1 id=\"第2步：\"><a href=\"#第2步：\" class=\"headerlink\" title=\"第2步：\"></a>第2步：</h1><p>打开“studio64.exe.vmoptions”文件后修改里面的值，修改后如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\"># *DO NOT* modify this file directly. If there is a value that you would like to override,</div><div class=\"line\"># please add it to your user specific configuration file.</div><div class=\"line\">#</div><div class=\"line\"># See http://tools.android.com/tech-docs/configuration</div><div class=\"line\">#</div><div class=\"line\">-Xms2048m</div><div class=\"line\">-Xmx2048m</div><div class=\"line\">-XX:MaxPermSize=2048m</div><div class=\"line\">-XX:ReservedCodeCacheSize=1024m</div><div class=\"line\">-XX:+UseConcMarkSweepGC</div><div class=\"line\">-XX:SoftRefLRUPolicyMSPerMB=50</div><div class=\"line\">-da</div><div class=\"line\">-Djna.nosys=true</div><div class=\"line\">-Djna.boot.library.path=</div><div class=\"line\"> </div><div class=\"line\">-Djna.debug_load=true</div><div class=\"line\">-Djna.debug_load.jna=true</div><div class=\"line\">-Dsun.io.useCanonCaches=false</div><div class=\"line\">-Djava.net.preferIPv4Stack=true</div><div class=\"line\">-XX:+HeapDumpOnOutOfMemoryError</div><div class=\"line\">-Didea.paths.selector=AndroidStudio2.0</div><div class=\"line\">-Didea.platform.prefix=AndroidStudio</div></pre></td></tr></table></figure>","more":"<h1 id=\"第3步：\"><a href=\"#第3步：\" class=\"headerlink\" title=\"第3步：\"></a>第3步：</h1><p>打开你的项目中的“gradle.properties”文件复制如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Project-wide Gradle settings.</div><div class=\"line\"># IDE (e.g. Android Studio) users:</div><div class=\"line\"># Settings specified in this file will override any Gradle settings</div><div class=\"line\"># configured through the IDE.</div><div class=\"line\"># For more details on how to configure your build environment visit</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/build_environment.html</div><div class=\"line\"># The Gradle daemon aims to improve the startup and execution time of Gradle.</div><div class=\"line\"># When set to true the Gradle daemon is to run the build.</div><div class=\"line\"># TODO: disable daemon on CI, since builds should be clean and reliable on servers</div><div class=\"line\">org.gradle.daemon=true</div><div class=\"line\"># Specifies the JVM arguments used for the daemon process.</div><div class=\"line\"># The setting is particularly useful for tweaking memory settings.</div><div class=\"line\"># Default value: -Xmx10248m -XX:MaxPermSize=256m</div><div class=\"line\">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</div><div class=\"line\"># When configured, Gradle will run in incubating parallel mode.</div><div class=\"line\"># This option should only be used with decoupled projects. More details, visit</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</div><div class=\"line\">org.gradle.parallel=true</div><div class=\"line\"># Enables new incubating mode that makes Gradle selective when configuring projects.</div><div class=\"line\"># Only relevant projects are configured which results in faster builds for large multi-projects.</div><div class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand</div><div class=\"line\">org.gradle.configureondemand=true</div></pre></td></tr></table></figure>\n<h1 id=\"第4步：\"><a href=\"#第4步：\" class=\"headerlink\" title=\"第4步：\"></a>第4步：</h1><p>修改gradle-wrapper.properties文件,如图：<br><img src=\"/assets/img/as_gradle_fourth.jpg\" alt=\"\"></p>\n<h1 id=\"第5步：\"><a href=\"#第5步：\" class=\"headerlink\" title=\"第5步：\"></a>第5步：</h1><p>Gradle官网下载地址：<a href=\"http://services.gradle.org/distributions\">http://services.gradle.org/distributions</a><br>如图：<br><img src=\"/assets/img/as_gradle_fifth.jpg\" alt=\"\"></p>\n<h1 id=\"第6步：\"><a href=\"#第6步：\" class=\"headerlink\" title=\"第6步：\"></a>第6步：</h1><p>具体如图：<br><img src=\"/assets/img/as_gradle_sixth.jpg\" alt=\"\"></p>\n<h1 id=\"第7步：\"><a href=\"#第7步：\" class=\"headerlink\" title=\"第7步：\"></a>第7步：</h1><p>重新编译一下项目，结果如图：<br><img src=\"/assets/img/as_gradle_finish.jpg\" alt=\"\"></p>\n<p>参考资料：<br><a href=\"http://www.cnblogs.com/leichentao0905/p/5464844.html\">Android Studio Gradle优化方法(一般人我不告诉他)</a></p>"},{"layout":"post","title":"设计模式-六大原则","date":"2017-12-13T08:14:35.000Z","comments":1,"_content":"---\n当初作为小白，提到设计模式，就会觉得很高大上，很牛叉。其实，在我们身边，在我们的项目中，设计模式的身影无处不在。然而，什么是设计模式呢？百度解释为：**设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。** 经验总是值得学习的，特别是对我们编程有极大帮助的设计模式经验。在Java中常见的设计模式有23种，而这23种设计模式都遵循了设计模式的六大原则，这六大原则分别是：\n \n - 单一职责原则\n - 里氏替换原则\n - 依赖倒转原则\n - 接口隔离原则\n - 迪米特法则\n - 开放封闭原则\n\n# 一、单一职责原则\n1.定义：不要存在多于一个导致类变更的原因。\n\n2.通俗的说：**一个类只负责一项职责**。\n\n3.优点\n\n- 可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；\n- 提高类的可读性，提高系统的可维护性；\n- 变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。\n\n<!-- more -->\n# 二、里氏替换原则\n1.定义：所有引用基类的地方必须能透明地使用其子类的对象。\n\n2.通俗的说：**子类可以扩展父类的功能，但不能改变父类原有的功能**。\n\n具体含义：\n\n* 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。\n* 子类中可以增加自己特有的方法。\n* 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n* 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n# 三、依赖倒转原则\n1.定义:高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。\n\n2.通俗的说：**面向接口编程**。\n\n实际操作应注意：\n\n* 低层模块尽量都要有抽象类或接口，或者两者都有。\n* **变量的声明类型尽量是抽象类或接口。**\n* 使用继承时遵循里氏替换原则。\n\n\n# 四、接口隔离原则\n1.定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。\n\n2.通俗的说：**建立单一接口，不要建立庞大臃肿的接口。**\n\n注意要点：\n\n* 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。\n* 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。\n* 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。\n\n# 五、迪米特法则\n1.定义：**一个对象应该对其他对象保持最少的了解。**\n\n2.通俗的说：**只与直接的朋友通信。**\n\n什么是直接的朋友？只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。\n\n# 六、开放封闭原则\n1.定义：一个软件实体如类、模块和函数应该**对扩展开放，对修改关闭**。\n\n2.通俗的说：**用抽象构建框架，用实现扩展细节**。\n\n---\n\n**依赖倒转原则**与**里氏替换原则**实例：\n\n```java\n\npublic interface ICar {\n    void controlDirection();//控制方向\n    void addGas();//加油\n    void brakeCar();//刹车\n}\n\n\npublic class CayenneCar implements ICar {\n    @Override\n    public void controlDirection() {\n    }\n\n    @Override\n    public void addGas() {\n    }\n\n    @Override\n    public void brakeCar() {\n    }\n}\n\npublic class HavardCar implements ICar {\n    @Override\n    public void controlDirection() {\n    }\n\n    @Override\n    public void addGas() {\n    }\n\n    @Override\n    public void brakeCar() {\n    }\n}\n\npublic class Person {\n\n    private ICar car;\n\n    public Person(ICar car) {\n        this.car = car;\n    }\n\n    public void drive(){\n        car.addGas();\n        car.brakeCar();\n        car.controlDirection();\n    }\n}\n\npublic class DesignPattern {\n\n    public DesignPattern() {\n\n        HavardCar havardCar = new HavardCar();\n        Person boy = new Person(havardCar);\n        boy.drive();\n\n        CayenneCar bydCar = new CayenneCar();\n        Person girl = new Person(bydCar);\n        girl.drive();\n\n    }\n}\n```\n\n\n## 参考文献\n\n[设计模式六大原则（1）：单一职责原则](http://blog.csdn.net/zhengzhb/article/details/7278174)\n\n[设计模式六大原则（2）：里氏替换原则](http://blog.csdn.net/zhengzhb/article/details/7281833)\n\n[设计模式六大原则（3）：依赖倒转原则](http://blog.csdn.net/zhengzhb/article/details/7289269)\n\n[设计模式六大原则（4）：接口隔离原则](http://blog.csdn.net/zhengzhb/article/details/7296921)\n\n[设计模式六大原则（5）：迪米特法则](http://blog.csdn.net/zhengzhb/article/details/7296930)\n\n[设计模式六大原则（6）：开放封闭原则](http://blog.csdn.net/zhengzhb/article/details/7296944)\n\n\n\n\n","source":"_posts/tech_design_pattern.md","raw":"---\nlayout: post\ntitle: \"设计模式-六大原则\"\ndate: 12/13/2017 4:14:35 PM \ncomments: true\ntags: \n\t- 技术 \n\t- 设计模式\n---\n---\n当初作为小白，提到设计模式，就会觉得很高大上，很牛叉。其实，在我们身边，在我们的项目中，设计模式的身影无处不在。然而，什么是设计模式呢？百度解释为：**设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。** 经验总是值得学习的，特别是对我们编程有极大帮助的设计模式经验。在Java中常见的设计模式有23种，而这23种设计模式都遵循了设计模式的六大原则，这六大原则分别是：\n \n - 单一职责原则\n - 里氏替换原则\n - 依赖倒转原则\n - 接口隔离原则\n - 迪米特法则\n - 开放封闭原则\n\n# 一、单一职责原则\n1.定义：不要存在多于一个导致类变更的原因。\n\n2.通俗的说：**一个类只负责一项职责**。\n\n3.优点\n\n- 可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；\n- 提高类的可读性，提高系统的可维护性；\n- 变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。\n\n<!-- more -->\n# 二、里氏替换原则\n1.定义：所有引用基类的地方必须能透明地使用其子类的对象。\n\n2.通俗的说：**子类可以扩展父类的功能，但不能改变父类原有的功能**。\n\n具体含义：\n\n* 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。\n* 子类中可以增加自己特有的方法。\n* 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n* 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。\n\n# 三、依赖倒转原则\n1.定义:高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。\n\n2.通俗的说：**面向接口编程**。\n\n实际操作应注意：\n\n* 低层模块尽量都要有抽象类或接口，或者两者都有。\n* **变量的声明类型尽量是抽象类或接口。**\n* 使用继承时遵循里氏替换原则。\n\n\n# 四、接口隔离原则\n1.定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。\n\n2.通俗的说：**建立单一接口，不要建立庞大臃肿的接口。**\n\n注意要点：\n\n* 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。\n* 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。\n* 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。\n\n# 五、迪米特法则\n1.定义：**一个对象应该对其他对象保持最少的了解。**\n\n2.通俗的说：**只与直接的朋友通信。**\n\n什么是直接的朋友？只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。\n\n# 六、开放封闭原则\n1.定义：一个软件实体如类、模块和函数应该**对扩展开放，对修改关闭**。\n\n2.通俗的说：**用抽象构建框架，用实现扩展细节**。\n\n---\n\n**依赖倒转原则**与**里氏替换原则**实例：\n\n```java\n\npublic interface ICar {\n    void controlDirection();//控制方向\n    void addGas();//加油\n    void brakeCar();//刹车\n}\n\n\npublic class CayenneCar implements ICar {\n    @Override\n    public void controlDirection() {\n    }\n\n    @Override\n    public void addGas() {\n    }\n\n    @Override\n    public void brakeCar() {\n    }\n}\n\npublic class HavardCar implements ICar {\n    @Override\n    public void controlDirection() {\n    }\n\n    @Override\n    public void addGas() {\n    }\n\n    @Override\n    public void brakeCar() {\n    }\n}\n\npublic class Person {\n\n    private ICar car;\n\n    public Person(ICar car) {\n        this.car = car;\n    }\n\n    public void drive(){\n        car.addGas();\n        car.brakeCar();\n        car.controlDirection();\n    }\n}\n\npublic class DesignPattern {\n\n    public DesignPattern() {\n\n        HavardCar havardCar = new HavardCar();\n        Person boy = new Person(havardCar);\n        boy.drive();\n\n        CayenneCar bydCar = new CayenneCar();\n        Person girl = new Person(bydCar);\n        girl.drive();\n\n    }\n}\n```\n\n\n## 参考文献\n\n[设计模式六大原则（1）：单一职责原则](http://blog.csdn.net/zhengzhb/article/details/7278174)\n\n[设计模式六大原则（2）：里氏替换原则](http://blog.csdn.net/zhengzhb/article/details/7281833)\n\n[设计模式六大原则（3）：依赖倒转原则](http://blog.csdn.net/zhengzhb/article/details/7289269)\n\n[设计模式六大原则（4）：接口隔离原则](http://blog.csdn.net/zhengzhb/article/details/7296921)\n\n[设计模式六大原则（5）：迪米特法则](http://blog.csdn.net/zhengzhb/article/details/7296930)\n\n[设计模式六大原则（6）：开放封闭原则](http://blog.csdn.net/zhengzhb/article/details/7296944)\n\n\n\n\n","slug":"tech_design_pattern","published":1,"updated":"2019-06-27T08:15:15.333Z","photos":[],"link":"","_id":"cjxfjaeqs000aystg9gt5vgdv","content":"<hr>\n<p>当初作为小白，提到设计模式，就会觉得很高大上，很牛叉。其实，在我们身边，在我们的项目中，设计模式的身影无处不在。然而，什么是设计模式呢？百度解释为：<strong>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。</strong> 经验总是值得学习的，特别是对我们编程有极大帮助的设计模式经验。在Java中常见的设计模式有23种，而这23种设计模式都遵循了设计模式的六大原则，这六大原则分别是：</p>\n<ul>\n<li>单一职责原则</li>\n<li>里氏替换原则</li>\n<li>依赖倒转原则</li>\n<li>接口隔离原则</li>\n<li>迪米特法则</li>\n<li>开放封闭原则</li>\n</ul>\n<h1 id=\"一、单一职责原则\"><a href=\"#一、单一职责原则\" class=\"headerlink\" title=\"一、单一职责原则\"></a>一、单一职责原则</h1><p>1.定义：不要存在多于一个导致类变更的原因。</p>\n<p>2.通俗的说：<strong>一个类只负责一项职责</strong>。</p>\n<p>3.优点</p>\n<ul>\n<li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；</li>\n<li>提高类的可读性，提高系统的可维护性；</li>\n<li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"二、里氏替换原则\"><a href=\"#二、里氏替换原则\" class=\"headerlink\" title=\"二、里氏替换原则\"></a>二、里氏替换原则</h1><p>1.定义：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>2.通俗的说：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。</p>\n<p>具体含义：</p>\n<ul>\n<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li>\n<li>子类中可以增加自己特有的方法。</li>\n<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>\n<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li>\n</ul>\n<h1 id=\"三、依赖倒转原则\"><a href=\"#三、依赖倒转原则\" class=\"headerlink\" title=\"三、依赖倒转原则\"></a>三、依赖倒转原则</h1><p>1.定义:高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p>\n<p>2.通俗的说：<strong>面向接口编程</strong>。</p>\n<p>实际操作应注意：</p>\n<ul>\n<li>低层模块尽量都要有抽象类或接口，或者两者都有。</li>\n<li><strong>变量的声明类型尽量是抽象类或接口。</strong></li>\n<li>使用继承时遵循里氏替换原则。</li>\n</ul>\n<h1 id=\"四、接口隔离原则\"><a href=\"#四、接口隔离原则\" class=\"headerlink\" title=\"四、接口隔离原则\"></a>四、接口隔离原则</h1><p>1.定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>\n<p>2.通俗的说：<strong>建立单一接口，不要建立庞大臃肿的接口。</strong></p>\n<p>注意要点：</p>\n<ul>\n<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li>\n<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ul>\n<h1 id=\"五、迪米特法则\"><a href=\"#五、迪米特法则\" class=\"headerlink\" title=\"五、迪米特法则\"></a>五、迪米特法则</h1><p>1.定义：<strong>一个对象应该对其他对象保持最少的了解。</strong></p>\n<p>2.通俗的说：<strong>只与直接的朋友通信。</strong></p>\n<p>什么是直接的朋友？只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。</p>\n<h1 id=\"六、开放封闭原则\"><a href=\"#六、开放封闭原则\" class=\"headerlink\" title=\"六、开放封闭原则\"></a>六、开放封闭原则</h1><p>1.定义：一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong>。</p>\n<p>2.通俗的说：<strong>用抽象构建框架，用实现扩展细节</strong>。</p>\n<hr>\n<p><strong>依赖倒转原则</strong>与<strong>里氏替换原则</strong>实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span></span>;<span class=\"comment\">//控制方向</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span></span>;<span class=\"comment\">//加油</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span></span>;<span class=\"comment\">//刹车</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CayenneCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HavardCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ICar car;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(ICar car)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.car = car;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        car.addGas();</div><div class=\"line\">        car.brakeCar();</div><div class=\"line\">        car.controlDirection();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DesignPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DesignPattern</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        HavardCar havardCar = <span class=\"keyword\">new</span> HavardCar();</div><div class=\"line\">        Person boy = <span class=\"keyword\">new</span> Person(havardCar);</div><div class=\"line\">        boy.drive();</div><div class=\"line\"></div><div class=\"line\">        CayenneCar bydCar = <span class=\"keyword\">new</span> CayenneCar();</div><div class=\"line\">        Person girl = <span class=\"keyword\">new</span> Person(bydCar);</div><div class=\"line\">        girl.drive();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7278174\" target=\"_blank\" rel=\"external\">设计模式六大原则（1）：单一职责原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7281833\" target=\"_blank\" rel=\"external\">设计模式六大原则（2）：里氏替换原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7289269\" target=\"_blank\" rel=\"external\">设计模式六大原则（3）：依赖倒转原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296921\" target=\"_blank\" rel=\"external\">设计模式六大原则（4）：接口隔离原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296930\" target=\"_blank\" rel=\"external\">设计模式六大原则（5）：迪米特法则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296944\" target=\"_blank\" rel=\"external\">设计模式六大原则（6）：开放封闭原则</a></p>\n","excerpt":"<hr>\n<p>当初作为小白，提到设计模式，就会觉得很高大上，很牛叉。其实，在我们身边，在我们的项目中，设计模式的身影无处不在。然而，什么是设计模式呢？百度解释为：<strong>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。</strong> 经验总是值得学习的，特别是对我们编程有极大帮助的设计模式经验。在Java中常见的设计模式有23种，而这23种设计模式都遵循了设计模式的六大原则，这六大原则分别是：</p>\n<ul>\n<li>单一职责原则</li>\n<li>里氏替换原则</li>\n<li>依赖倒转原则</li>\n<li>接口隔离原则</li>\n<li>迪米特法则</li>\n<li>开放封闭原则</li>\n</ul>\n<h1 id=\"一、单一职责原则\"><a href=\"#一、单一职责原则\" class=\"headerlink\" title=\"一、单一职责原则\"></a>一、单一职责原则</h1><p>1.定义：不要存在多于一个导致类变更的原因。</p>\n<p>2.通俗的说：<strong>一个类只负责一项职责</strong>。</p>\n<p>3.优点</p>\n<ul>\n<li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；</li>\n<li>提高类的可读性，提高系统的可维护性；</li>\n<li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。</li>\n</ul>","more":"<h1 id=\"二、里氏替换原则\"><a href=\"#二、里氏替换原则\" class=\"headerlink\" title=\"二、里氏替换原则\"></a>二、里氏替换原则</h1><p>1.定义：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>2.通俗的说：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。</p>\n<p>具体含义：</p>\n<ul>\n<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li>\n<li>子类中可以增加自己特有的方法。</li>\n<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li>\n<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li>\n</ul>\n<h1 id=\"三、依赖倒转原则\"><a href=\"#三、依赖倒转原则\" class=\"headerlink\" title=\"三、依赖倒转原则\"></a>三、依赖倒转原则</h1><p>1.定义:高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p>\n<p>2.通俗的说：<strong>面向接口编程</strong>。</p>\n<p>实际操作应注意：</p>\n<ul>\n<li>低层模块尽量都要有抽象类或接口，或者两者都有。</li>\n<li><strong>变量的声明类型尽量是抽象类或接口。</strong></li>\n<li>使用继承时遵循里氏替换原则。</li>\n</ul>\n<h1 id=\"四、接口隔离原则\"><a href=\"#四、接口隔离原则\" class=\"headerlink\" title=\"四、接口隔离原则\"></a>四、接口隔离原则</h1><p>1.定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>\n<p>2.通俗的说：<strong>建立单一接口，不要建立庞大臃肿的接口。</strong></p>\n<p>注意要点：</p>\n<ul>\n<li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li>\n<li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>\n</ul>\n<h1 id=\"五、迪米特法则\"><a href=\"#五、迪米特法则\" class=\"headerlink\" title=\"五、迪米特法则\"></a>五、迪米特法则</h1><p>1.定义：<strong>一个对象应该对其他对象保持最少的了解。</strong></p>\n<p>2.通俗的说：<strong>只与直接的朋友通信。</strong></p>\n<p>什么是直接的朋友？只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。</p>\n<h1 id=\"六、开放封闭原则\"><a href=\"#六、开放封闭原则\" class=\"headerlink\" title=\"六、开放封闭原则\"></a>六、开放封闭原则</h1><p>1.定义：一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong>。</p>\n<p>2.通俗的说：<strong>用抽象构建框架，用实现扩展细节</strong>。</p>\n<hr>\n<p><strong>依赖倒转原则</strong>与<strong>里氏替换原则</strong>实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span></span>;<span class=\"comment\">//控制方向</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span></span>;<span class=\"comment\">//加油</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span></span>;<span class=\"comment\">//刹车</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CayenneCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HavardCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICar</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">controlDirection</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGas</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brakeCar</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ICar car;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(ICar car)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.car = car;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        car.addGas();</div><div class=\"line\">        car.brakeCar();</div><div class=\"line\">        car.controlDirection();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DesignPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DesignPattern</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        HavardCar havardCar = <span class=\"keyword\">new</span> HavardCar();</div><div class=\"line\">        Person boy = <span class=\"keyword\">new</span> Person(havardCar);</div><div class=\"line\">        boy.drive();</div><div class=\"line\"></div><div class=\"line\">        CayenneCar bydCar = <span class=\"keyword\">new</span> CayenneCar();</div><div class=\"line\">        Person girl = <span class=\"keyword\">new</span> Person(bydCar);</div><div class=\"line\">        girl.drive();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7278174\">设计模式六大原则（1）：单一职责原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7281833\">设计模式六大原则（2）：里氏替换原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7289269\">设计模式六大原则（3）：依赖倒转原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296921\">设计模式六大原则（4）：接口隔离原则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296930\">设计模式六大原则（5）：迪米特法则</a></p>\n<p><a href=\"http://blog.csdn.net/zhengzhb/article/details/7296944\">设计模式六大原则（6）：开放封闭原则</a></p>"},{"layout":"post","title":"Android Fragment使用小结及介绍","date":"2017-11-10T07:36:58.000Z","comments":1,"_content":"---\n偶记得第一次接触Fragment，觉得好牛叉的组件，可以做许多Activity可以做的事，辅助Activity让功能可以做得更加强大;一次编写，可以多个地方可以使用，解放了Activity。在这里，本篇文章主要是总结fragment的两种添加方式，add和replace。\n### 一、什么是Fragment\n简单来说，Fragment其实可以理解为一个具有自己生命周期的控件，只不过这个控件又有点特殊，它有自己的处理输入事件的能力，有自己的生命周期，又必须依赖于Activity，能互相通信和托管。\n\n使用Fragment还有这么几个方面优势：\n\n- 代码复用。特别适用于模块化的开发，因为一个Fragment可以被多个Activity嵌套，有个共同的业务模块就可以复用了，是模块化UI的良好组件。\n- Activity用来管理Fragment。Fragment的生命周期是寄托到Activity中，Fragment可以被Attach添加和Detach释放。\n- 可控性。Fragment可以像普通对象那样自由的创建和控制，传递参数更加容易和方便，也不用处理系统相关的事情，显示方式、替换、不管是整体还是部分，都可以做到相应的更改。\n- Fragments是view controllers，它们包含可测试的，解耦的业务逻辑块，由于Fragments是构建在views之上的，而views很容易实现动画效果，因此Fragments在屏幕切换时具有更好的控制。\n\n### 二、Fragment的生命周期\nFragment的生命周期类似Activity,如下图，Activity生命周期与Fragment生命周期对比图：\n<!-- more -->\n![这里写图片描述](http://img.blog.csdn.net/20171109172319334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n### 三、Fragment的两种添加方式(add&replace)\nFragment添加与FragmentManager与FragmentTransaction息息相关。add和replace都是FragmentTransaction的方法。除这两个方法，其中还有remove,hide和show方法。\n\nFragmentManager与FragmentTransaction的获取：\n```java\nFragmentManager frgmentManager = getFragmentManager() // v4中，getSupportFragmentManager\nFragmentTransaction transaction = frgmentManager.benginTransatcion();\n```\n**1.项目中多个Fragment，add方式添加**\n\ni.添加代码\n```java\n    public void add(BaseLibFragment fragment, int id,String tag){\n        FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n        //优先检查，fragment是否存在，避免重叠\n        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);\n        if(EmptyUtils.isNotEmpty(tempFragment)){\n            fragment = tempFragment;\n        }\n        if(fragment.isAdded()){\n            addOrShowFragment(fragmentTransaction,fragment,id,tag);\n        }else{\n            if(currentFragment!=null&&currentFragment.isAdded()){\n                fragmentTransaction.hide(currentFragment).add(id, fragment,tag).commit();\n            }else{\n                fragmentTransaction.add(id, fragment,tag).commit();\n            }\n            currentFragment = fragment;\n        }\n    }\n    /**\n     * 添加或者显示 fragment\n     *\n     * @param fragment\n     */\n    private void addOrShowFragment(FragmentTransaction transaction, BaseLibFragment fragment, int id,String tag) {\n        if(currentFragment == fragment)\n            return;\n        if (!fragment.isAdded()) { // 如果当前fragment未被添加，则添加到Fragment管理器中\n            transaction.hide(currentFragment).add(id, fragment,tag).commit();\n        } else {\n            transaction.hide(currentFragment).show(fragment).commit();\n        }\n        currentFragment.setUserVisibleHint(false);\n        currentFragment =  fragment;\n        currentFragment.setUserVisibleHint(true);\n    }\n```\nii.添加顺序\n\n- 第一次添加，先hide(隐藏)currentFragment，再add(添加)新Fragment。生命周期会按正常流程走，onCreate->onResume\n- 第二次添加，先hide(隐藏)currentFragment，在show(显示)老Fragment。生命周期不会重新走，会调用onHiddenChanged()，展示fragment的显示状态，我们可以在此做一些刷新数据操作。\n\niii.add方式Fragment重叠BUG解决方案\n为fragment设置Tag，通过findFragmentByTag查找是否存在，然后再添加\n```java\n//优先检查，fragment是否存在，避免重叠\n        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);\n        if(EmptyUtils.isNotEmpty(tempFragment)){\n            fragment = tempFragment;\n        }\n```\n\n**2.项目中多个Fragment，replace方式添加**\ni.添加代码\n```java\n    public void replace(BaseLibFragment fragment, int id){\n        FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n        fragmentTransaction.replace(id, fragment);\n        fragmentTransaction.commit();\n    }\n```\nii.添加方式\n添加方式比较直接，直接替换。在这过程中因为是替换，第一和第二次添加没啥区别，生命周期都要重新执行一次\n\n### 四、两种添加方式性能比较\n标准的四大金刚模式。底部四个Item，通过Fragment内容切换，此种方式add与replace性能对比，如下两图：\n\n**add方式**\n\n![这里写图片描述](http://img.blog.csdn.net/20171109193642486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**replace方式**\n![这里写图片描述](http://img.blog.csdn.net/20171109193725890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n由以上两图知：replace方式内存波动比较大，网络请求消耗大；add方式则反之。\n\n\n\n","source":"_posts/tech_fragment.md","raw":"---\nlayout: post\ntitle: \"Android Fragment使用小结及介绍\"\ndate: 11/10/2017 3:36:58 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Fragment\n---\n---\n偶记得第一次接触Fragment，觉得好牛叉的组件，可以做许多Activity可以做的事，辅助Activity让功能可以做得更加强大;一次编写，可以多个地方可以使用，解放了Activity。在这里，本篇文章主要是总结fragment的两种添加方式，add和replace。\n### 一、什么是Fragment\n简单来说，Fragment其实可以理解为一个具有自己生命周期的控件，只不过这个控件又有点特殊，它有自己的处理输入事件的能力，有自己的生命周期，又必须依赖于Activity，能互相通信和托管。\n\n使用Fragment还有这么几个方面优势：\n\n- 代码复用。特别适用于模块化的开发，因为一个Fragment可以被多个Activity嵌套，有个共同的业务模块就可以复用了，是模块化UI的良好组件。\n- Activity用来管理Fragment。Fragment的生命周期是寄托到Activity中，Fragment可以被Attach添加和Detach释放。\n- 可控性。Fragment可以像普通对象那样自由的创建和控制，传递参数更加容易和方便，也不用处理系统相关的事情，显示方式、替换、不管是整体还是部分，都可以做到相应的更改。\n- Fragments是view controllers，它们包含可测试的，解耦的业务逻辑块，由于Fragments是构建在views之上的，而views很容易实现动画效果，因此Fragments在屏幕切换时具有更好的控制。\n\n### 二、Fragment的生命周期\nFragment的生命周期类似Activity,如下图，Activity生命周期与Fragment生命周期对比图：\n<!-- more -->\n![这里写图片描述](http://img.blog.csdn.net/20171109172319334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n### 三、Fragment的两种添加方式(add&replace)\nFragment添加与FragmentManager与FragmentTransaction息息相关。add和replace都是FragmentTransaction的方法。除这两个方法，其中还有remove,hide和show方法。\n\nFragmentManager与FragmentTransaction的获取：\n```java\nFragmentManager frgmentManager = getFragmentManager() // v4中，getSupportFragmentManager\nFragmentTransaction transaction = frgmentManager.benginTransatcion();\n```\n**1.项目中多个Fragment，add方式添加**\n\ni.添加代码\n```java\n    public void add(BaseLibFragment fragment, int id,String tag){\n        FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n        //优先检查，fragment是否存在，避免重叠\n        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);\n        if(EmptyUtils.isNotEmpty(tempFragment)){\n            fragment = tempFragment;\n        }\n        if(fragment.isAdded()){\n            addOrShowFragment(fragmentTransaction,fragment,id,tag);\n        }else{\n            if(currentFragment!=null&&currentFragment.isAdded()){\n                fragmentTransaction.hide(currentFragment).add(id, fragment,tag).commit();\n            }else{\n                fragmentTransaction.add(id, fragment,tag).commit();\n            }\n            currentFragment = fragment;\n        }\n    }\n    /**\n     * 添加或者显示 fragment\n     *\n     * @param fragment\n     */\n    private void addOrShowFragment(FragmentTransaction transaction, BaseLibFragment fragment, int id,String tag) {\n        if(currentFragment == fragment)\n            return;\n        if (!fragment.isAdded()) { // 如果当前fragment未被添加，则添加到Fragment管理器中\n            transaction.hide(currentFragment).add(id, fragment,tag).commit();\n        } else {\n            transaction.hide(currentFragment).show(fragment).commit();\n        }\n        currentFragment.setUserVisibleHint(false);\n        currentFragment =  fragment;\n        currentFragment.setUserVisibleHint(true);\n    }\n```\nii.添加顺序\n\n- 第一次添加，先hide(隐藏)currentFragment，再add(添加)新Fragment。生命周期会按正常流程走，onCreate->onResume\n- 第二次添加，先hide(隐藏)currentFragment，在show(显示)老Fragment。生命周期不会重新走，会调用onHiddenChanged()，展示fragment的显示状态，我们可以在此做一些刷新数据操作。\n\niii.add方式Fragment重叠BUG解决方案\n为fragment设置Tag，通过findFragmentByTag查找是否存在，然后再添加\n```java\n//优先检查，fragment是否存在，避免重叠\n        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);\n        if(EmptyUtils.isNotEmpty(tempFragment)){\n            fragment = tempFragment;\n        }\n```\n\n**2.项目中多个Fragment，replace方式添加**\ni.添加代码\n```java\n    public void replace(BaseLibFragment fragment, int id){\n        FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n        fragmentTransaction.replace(id, fragment);\n        fragmentTransaction.commit();\n    }\n```\nii.添加方式\n添加方式比较直接，直接替换。在这过程中因为是替换，第一和第二次添加没啥区别，生命周期都要重新执行一次\n\n### 四、两种添加方式性能比较\n标准的四大金刚模式。底部四个Item，通过Fragment内容切换，此种方式add与replace性能对比，如下两图：\n\n**add方式**\n\n![这里写图片描述](http://img.blog.csdn.net/20171109193642486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**replace方式**\n![这里写图片描述](http://img.blog.csdn.net/20171109193725890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n由以上两图知：replace方式内存波动比较大，网络请求消耗大；add方式则反之。\n\n\n\n","slug":"tech_fragment","published":1,"updated":"2019-06-27T08:15:15.335Z","photos":[],"link":"","_id":"cjxfjaeqt000cystghvdlejvu","content":"<hr>\n<p>偶记得第一次接触Fragment，觉得好牛叉的组件，可以做许多Activity可以做的事，辅助Activity让功能可以做得更加强大;一次编写，可以多个地方可以使用，解放了Activity。在这里，本篇文章主要是总结fragment的两种添加方式，add和replace。</p>\n<h3 id=\"一、什么是Fragment\"><a href=\"#一、什么是Fragment\" class=\"headerlink\" title=\"一、什么是Fragment\"></a>一、什么是Fragment</h3><p>简单来说，Fragment其实可以理解为一个具有自己生命周期的控件，只不过这个控件又有点特殊，它有自己的处理输入事件的能力，有自己的生命周期，又必须依赖于Activity，能互相通信和托管。</p>\n<p>使用Fragment还有这么几个方面优势：</p>\n<ul>\n<li>代码复用。特别适用于模块化的开发，因为一个Fragment可以被多个Activity嵌套，有个共同的业务模块就可以复用了，是模块化UI的良好组件。</li>\n<li>Activity用来管理Fragment。Fragment的生命周期是寄托到Activity中，Fragment可以被Attach添加和Detach释放。</li>\n<li>可控性。Fragment可以像普通对象那样自由的创建和控制，传递参数更加容易和方便，也不用处理系统相关的事情，显示方式、替换、不管是整体还是部分，都可以做到相应的更改。</li>\n<li>Fragments是view controllers，它们包含可测试的，解耦的业务逻辑块，由于Fragments是构建在views之上的，而views很容易实现动画效果，因此Fragments在屏幕切换时具有更好的控制。</li>\n</ul>\n<h3 id=\"二、Fragment的生命周期\"><a href=\"#二、Fragment的生命周期\" class=\"headerlink\" title=\"二、Fragment的生命周期\"></a>二、Fragment的生命周期</h3><p>Fragment的生命周期类似Activity,如下图，Activity生命周期与Fragment生命周期对比图：<br><a id=\"more\"></a><br><img src=\"http://img.blog.csdn.net/20171109172319334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"三、Fragment的两种添加方式-add-amp-replace\"><a href=\"#三、Fragment的两种添加方式-add-amp-replace\" class=\"headerlink\" title=\"三、Fragment的两种添加方式(add&amp;replace)\"></a>三、Fragment的两种添加方式(add&amp;replace)</h3><p>Fragment添加与FragmentManager与FragmentTransaction息息相关。add和replace都是FragmentTransaction的方法。除这两个方法，其中还有remove,hide和show方法。</p>\n<p>FragmentManager与FragmentTransaction的获取：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentManager frgmentManager = getFragmentManager() <span class=\"comment\">// v4中，getSupportFragmentManager</span></div><div class=\"line\">FragmentTransaction transaction = frgmentManager.benginTransatcion();</div></pre></td></tr></table></figure></p>\n<p><strong>1.项目中多个Fragment，add方式添加</strong></p>\n<p>i.添加代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(BaseLibFragment fragment, <span class=\"keyword\">int</span> id,String tag)</span></span>&#123;</div><div class=\"line\">    FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();</div><div class=\"line\">    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">    <span class=\"comment\">//优先检查，fragment是否存在，避免重叠</span></div><div class=\"line\">    BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);</div><div class=\"line\">    <span class=\"keyword\">if</span>(EmptyUtils.isNotEmpty(tempFragment))&#123;</div><div class=\"line\">        fragment = tempFragment;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(fragment.isAdded())&#123;</div><div class=\"line\">        addOrShowFragment(fragmentTransaction,fragment,id,tag);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(currentFragment!=<span class=\"keyword\">null</span>&amp;&amp;currentFragment.isAdded())&#123;</div><div class=\"line\">            fragmentTransaction.hide(currentFragment).add(id, fragment,tag).commit();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            fragmentTransaction.add(id, fragment,tag).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentFragment = fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 添加或者显示 fragment</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> fragment</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrShowFragment</span><span class=\"params\">(FragmentTransaction transaction, BaseLibFragment fragment, <span class=\"keyword\">int</span> id,String tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(currentFragment == fragment)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fragment.isAdded()) &#123; <span class=\"comment\">// 如果当前fragment未被添加，则添加到Fragment管理器中</span></div><div class=\"line\">        transaction.hide(currentFragment).add(id, fragment,tag).commit();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        transaction.hide(currentFragment).show(fragment).commit();</div><div class=\"line\">    &#125;</div><div class=\"line\">    currentFragment.setUserVisibleHint(<span class=\"keyword\">false</span>);</div><div class=\"line\">    currentFragment =  fragment;</div><div class=\"line\">    currentFragment.setUserVisibleHint(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ii.添加顺序</p>\n<ul>\n<li>第一次添加，先hide(隐藏)currentFragment，再add(添加)新Fragment。生命周期会按正常流程走，onCreate-&gt;onResume</li>\n<li>第二次添加，先hide(隐藏)currentFragment，在show(显示)老Fragment。生命周期不会重新走，会调用onHiddenChanged()，展示fragment的显示状态，我们可以在此做一些刷新数据操作。</li>\n</ul>\n<p>iii.add方式Fragment重叠BUG解决方案<br>为fragment设置Tag，通过findFragmentByTag查找是否存在，然后再添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优先检查，fragment是否存在，避免重叠</span></div><div class=\"line\">        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);</div><div class=\"line\">        <span class=\"keyword\">if</span>(EmptyUtils.isNotEmpty(tempFragment))&#123;</div><div class=\"line\">            fragment = tempFragment;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.项目中多个Fragment，replace方式添加</strong><br>i.添加代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(BaseLibFragment fragment, <span class=\"keyword\">int</span> id)</span></span>&#123;</div><div class=\"line\">    FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();</div><div class=\"line\">    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">    fragmentTransaction.replace(id, fragment);</div><div class=\"line\">    fragmentTransaction.commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ii.添加方式<br>添加方式比较直接，直接替换。在这过程中因为是替换，第一和第二次添加没啥区别，生命周期都要重新执行一次</p>\n<h3 id=\"四、两种添加方式性能比较\"><a href=\"#四、两种添加方式性能比较\" class=\"headerlink\" title=\"四、两种添加方式性能比较\"></a>四、两种添加方式性能比较</h3><p>标准的四大金刚模式。底部四个Item，通过Fragment内容切换，此种方式add与replace性能对比，如下两图：</p>\n<p><strong>add方式</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171109193642486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>replace方式</strong><br><img src=\"http://img.blog.csdn.net/20171109193725890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>由以上两图知：replace方式内存波动比较大，网络请求消耗大；add方式则反之。</p>\n","excerpt":"<hr>\n<p>偶记得第一次接触Fragment，觉得好牛叉的组件，可以做许多Activity可以做的事，辅助Activity让功能可以做得更加强大;一次编写，可以多个地方可以使用，解放了Activity。在这里，本篇文章主要是总结fragment的两种添加方式，add和replace。</p>\n<h3 id=\"一、什么是Fragment\"><a href=\"#一、什么是Fragment\" class=\"headerlink\" title=\"一、什么是Fragment\"></a>一、什么是Fragment</h3><p>简单来说，Fragment其实可以理解为一个具有自己生命周期的控件，只不过这个控件又有点特殊，它有自己的处理输入事件的能力，有自己的生命周期，又必须依赖于Activity，能互相通信和托管。</p>\n<p>使用Fragment还有这么几个方面优势：</p>\n<ul>\n<li>代码复用。特别适用于模块化的开发，因为一个Fragment可以被多个Activity嵌套，有个共同的业务模块就可以复用了，是模块化UI的良好组件。</li>\n<li>Activity用来管理Fragment。Fragment的生命周期是寄托到Activity中，Fragment可以被Attach添加和Detach释放。</li>\n<li>可控性。Fragment可以像普通对象那样自由的创建和控制，传递参数更加容易和方便，也不用处理系统相关的事情，显示方式、替换、不管是整体还是部分，都可以做到相应的更改。</li>\n<li>Fragments是view controllers，它们包含可测试的，解耦的业务逻辑块，由于Fragments是构建在views之上的，而views很容易实现动画效果，因此Fragments在屏幕切换时具有更好的控制。</li>\n</ul>\n<h3 id=\"二、Fragment的生命周期\"><a href=\"#二、Fragment的生命周期\" class=\"headerlink\" title=\"二、Fragment的生命周期\"></a>二、Fragment的生命周期</h3><p>Fragment的生命周期类似Activity,如下图，Activity生命周期与Fragment生命周期对比图：<br>","more":"<br><img src=\"http://img.blog.csdn.net/20171109172319334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"三、Fragment的两种添加方式-add-amp-replace\"><a href=\"#三、Fragment的两种添加方式-add-amp-replace\" class=\"headerlink\" title=\"三、Fragment的两种添加方式(add&amp;replace)\"></a>三、Fragment的两种添加方式(add&amp;replace)</h3><p>Fragment添加与FragmentManager与FragmentTransaction息息相关。add和replace都是FragmentTransaction的方法。除这两个方法，其中还有remove,hide和show方法。</p>\n<p>FragmentManager与FragmentTransaction的获取：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentManager frgmentManager = getFragmentManager() <span class=\"comment\">// v4中，getSupportFragmentManager</span></div><div class=\"line\">FragmentTransaction transaction = frgmentManager.benginTransatcion();</div></pre></td></tr></table></figure></p>\n<p><strong>1.项目中多个Fragment，add方式添加</strong></p>\n<p>i.添加代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(BaseLibFragment fragment, <span class=\"keyword\">int</span> id,String tag)</span></span>&#123;</div><div class=\"line\">    FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();</div><div class=\"line\">    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">    <span class=\"comment\">//优先检查，fragment是否存在，避免重叠</span></div><div class=\"line\">    BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);</div><div class=\"line\">    <span class=\"keyword\">if</span>(EmptyUtils.isNotEmpty(tempFragment))&#123;</div><div class=\"line\">        fragment = tempFragment;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(fragment.isAdded())&#123;</div><div class=\"line\">        addOrShowFragment(fragmentTransaction,fragment,id,tag);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(currentFragment!=<span class=\"keyword\">null</span>&amp;&amp;currentFragment.isAdded())&#123;</div><div class=\"line\">            fragmentTransaction.hide(currentFragment).add(id, fragment,tag).commit();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            fragmentTransaction.add(id, fragment,tag).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentFragment = fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 添加或者显示 fragment</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> fragment</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrShowFragment</span><span class=\"params\">(FragmentTransaction transaction, BaseLibFragment fragment, <span class=\"keyword\">int</span> id,String tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(currentFragment == fragment)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fragment.isAdded()) &#123; <span class=\"comment\">// 如果当前fragment未被添加，则添加到Fragment管理器中</span></div><div class=\"line\">        transaction.hide(currentFragment).add(id, fragment,tag).commit();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        transaction.hide(currentFragment).show(fragment).commit();</div><div class=\"line\">    &#125;</div><div class=\"line\">    currentFragment.setUserVisibleHint(<span class=\"keyword\">false</span>);</div><div class=\"line\">    currentFragment =  fragment;</div><div class=\"line\">    currentFragment.setUserVisibleHint(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ii.添加顺序</p>\n<ul>\n<li>第一次添加，先hide(隐藏)currentFragment，再add(添加)新Fragment。生命周期会按正常流程走，onCreate-&gt;onResume</li>\n<li>第二次添加，先hide(隐藏)currentFragment，在show(显示)老Fragment。生命周期不会重新走，会调用onHiddenChanged()，展示fragment的显示状态，我们可以在此做一些刷新数据操作。</li>\n</ul>\n<p>iii.add方式Fragment重叠BUG解决方案<br>为fragment设置Tag，通过findFragmentByTag查找是否存在，然后再添加<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优先检查，fragment是否存在，避免重叠</span></div><div class=\"line\">        BaseLibFragment tempFragment = (BaseLibFragment)fragmentManager.findFragmentByTag(tag);</div><div class=\"line\">        <span class=\"keyword\">if</span>(EmptyUtils.isNotEmpty(tempFragment))&#123;</div><div class=\"line\">            fragment = tempFragment;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.项目中多个Fragment，replace方式添加</strong><br>i.添加代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(BaseLibFragment fragment, <span class=\"keyword\">int</span> id)</span></span>&#123;</div><div class=\"line\">    FragmentManager fragmentManager = ((BaseLibActivity)mContext).getSupportFragmentManager();</div><div class=\"line\">    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">    fragmentTransaction.replace(id, fragment);</div><div class=\"line\">    fragmentTransaction.commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ii.添加方式<br>添加方式比较直接，直接替换。在这过程中因为是替换，第一和第二次添加没啥区别，生命周期都要重新执行一次</p>\n<h3 id=\"四、两种添加方式性能比较\"><a href=\"#四、两种添加方式性能比较\" class=\"headerlink\" title=\"四、两种添加方式性能比较\"></a>四、两种添加方式性能比较</h3><p>标准的四大金刚模式。底部四个Item，通过Fragment内容切换，此种方式add与replace性能对比，如下两图：</p>\n<p><strong>add方式</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171109193642486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>replace方式</strong><br><img src=\"http://img.blog.csdn.net/20171109193725890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>由以上两图知：replace方式内存波动比较大，网络请求消耗大；add方式则反之。</p>"},{"layout":"post","title":" Hexo+Github从零搭建技术博客","date":"2017-03-12T10:41:32.000Z","comments":1,"_content":"---\n【作为一名技术开发人员，搭建一个属于自己的博客，记录自己，沉淀自己，还是很重要的。】\n\n年前给自己定一个目标：搭建博客，记录成长。之后，你懂的，就有下面的内容：\n\n# 一、Hexo介绍、安装及实操\n[Hexo平台搭建官网](https://hexo.io/zh-cn/docs/index.html)\n\n通过hexo官网步骤，可以很快的搭建hexo平台。通过命令hexo s,然后，在浏览器中输入http://localhost:4000/ 网站显示如下：\n![](/assets/img/tech_create_blog_record_img01.png)\n\n# 二、Hexo主题选择\n通过Hexo官网，搭建的博客使用的主题为hexo自带的主题landscape,效果如上图。如果你希望你的博客更炫，更酷，推荐使用第三方的Hexo主题。主题选择：\n<!-- more -->\n1.[Next主题](http://theme-next.iissnan.com/)\n\n2.[Hexo主题集合(github)](https://github.com/hexojs/hexo/wiki/Themes)\n\n3.[Hexo主题集合(知乎)](https://www.zhihu.com/question/24422335)\n\n**主题配置：**\n\n```\n在hexo配置文件_config.yml中修改 theme: 主题名字（如：theme: landscape)\n```\n\n**非Hexo主题(搭建网站可用)**\n\n[jekyll主题集合(官网)](http://jekyllthemes.org/)\n\n[jekyll主题集合(github)](https://github.com/jekyll/jekyll/wiki/Sites)\n\n[WordPress主题集合](https://wordpress.org/themes/)\n\n# 三、部署到Github上\n [Github官网](https://github.com/)\n\n1.注册Github账号\n\n2.创建Repository（格式为：github账号名.github.io）\n\n```\n注意Repository的名字必须和账号名相同。比如Github账号是angelen10，那么应该创建的Repository的名字是：angelen10.github.io。\n```\n\n3.在hexo配置文件_config.yml中配置git路径\n\n```\nxxxx为github账户名\ndeploy: \n  type: git \n  repository: git@github.com:xxxxx/xxxx.github.io.git\n  branch: master\n```\n\n4.设置SSH keys绑定到你建的repository\n\n[设置SSH key官方教程](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\n\n5.Hexo基本操作命令\n\n```\n\nhexo g == hexo generate\n\nhexo d == hexo deploy\n\nhexo s == hexo server\n\nhexo n == hexo new\n\n```\n\n# 四、相关链接\n\n[搭建Hexo博客并部署到Github详细教程](http://blog.sina.com.cn/s/blog_4c44643f0102vuju.html)\n\n[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n\n[利用Github Page 搭建个人博客网站](http://blog.csdn.net/tzs_1041218129/article/details/53214497)\n\n\n\n\n\n\n\n\n\n","source":"_posts/tech_create_blog_record.md","raw":"---\nlayout: post\ntitle: \" Hexo+Github从零搭建技术博客\"\ndate: 3/12/2017 6:41:32 PM \ncomments: true\ntags: \n\t- 技术 \n\t- 博客搭建\n---\n---\n【作为一名技术开发人员，搭建一个属于自己的博客，记录自己，沉淀自己，还是很重要的。】\n\n年前给自己定一个目标：搭建博客，记录成长。之后，你懂的，就有下面的内容：\n\n# 一、Hexo介绍、安装及实操\n[Hexo平台搭建官网](https://hexo.io/zh-cn/docs/index.html)\n\n通过hexo官网步骤，可以很快的搭建hexo平台。通过命令hexo s,然后，在浏览器中输入http://localhost:4000/ 网站显示如下：\n![](/assets/img/tech_create_blog_record_img01.png)\n\n# 二、Hexo主题选择\n通过Hexo官网，搭建的博客使用的主题为hexo自带的主题landscape,效果如上图。如果你希望你的博客更炫，更酷，推荐使用第三方的Hexo主题。主题选择：\n<!-- more -->\n1.[Next主题](http://theme-next.iissnan.com/)\n\n2.[Hexo主题集合(github)](https://github.com/hexojs/hexo/wiki/Themes)\n\n3.[Hexo主题集合(知乎)](https://www.zhihu.com/question/24422335)\n\n**主题配置：**\n\n```\n在hexo配置文件_config.yml中修改 theme: 主题名字（如：theme: landscape)\n```\n\n**非Hexo主题(搭建网站可用)**\n\n[jekyll主题集合(官网)](http://jekyllthemes.org/)\n\n[jekyll主题集合(github)](https://github.com/jekyll/jekyll/wiki/Sites)\n\n[WordPress主题集合](https://wordpress.org/themes/)\n\n# 三、部署到Github上\n [Github官网](https://github.com/)\n\n1.注册Github账号\n\n2.创建Repository（格式为：github账号名.github.io）\n\n```\n注意Repository的名字必须和账号名相同。比如Github账号是angelen10，那么应该创建的Repository的名字是：angelen10.github.io。\n```\n\n3.在hexo配置文件_config.yml中配置git路径\n\n```\nxxxx为github账户名\ndeploy: \n  type: git \n  repository: git@github.com:xxxxx/xxxx.github.io.git\n  branch: master\n```\n\n4.设置SSH keys绑定到你建的repository\n\n[设置SSH key官方教程](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\n\n5.Hexo基本操作命令\n\n```\n\nhexo g == hexo generate\n\nhexo d == hexo deploy\n\nhexo s == hexo server\n\nhexo n == hexo new\n\n```\n\n# 四、相关链接\n\n[搭建Hexo博客并部署到Github详细教程](http://blog.sina.com.cn/s/blog_4c44643f0102vuju.html)\n\n[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n\n[利用Github Page 搭建个人博客网站](http://blog.csdn.net/tzs_1041218129/article/details/53214497)\n\n\n\n\n\n\n\n\n\n","slug":"tech_create_blog_record","published":1,"updated":"2019-06-27T08:15:15.332Z","photos":[],"link":"","_id":"cjxfjaeqv000fystg4wr84zlr","content":"<hr>\n<p>【作为一名技术开发人员，搭建一个属于自己的博客，记录自己，沉淀自己，还是很重要的。】</p>\n<p>年前给自己定一个目标：搭建博客，记录成长。之后，你懂的，就有下面的内容：</p>\n<h1 id=\"一、Hexo介绍、安装及实操\"><a href=\"#一、Hexo介绍、安装及实操\" class=\"headerlink\" title=\"一、Hexo介绍、安装及实操\"></a>一、Hexo介绍、安装及实操</h1><p><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">Hexo平台搭建官网</a></p>\n<p>通过hexo官网步骤，可以很快的搭建hexo平台。通过命令hexo s,然后，在浏览器中输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 网站显示如下：<br><img src=\"/assets/img/tech_create_blog_record_img01.png\" alt=\"\"></p>\n<h1 id=\"二、Hexo主题选择\"><a href=\"#二、Hexo主题选择\" class=\"headerlink\" title=\"二、Hexo主题选择\"></a>二、Hexo主题选择</h1><p>通过Hexo官网，搭建的博客使用的主题为hexo自带的主题landscape,效果如上图。如果你希望你的博客更炫，更酷，推荐使用第三方的Hexo主题。主题选择：<br><a id=\"more\"></a><br>1.<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Next主题</a></p>\n<p>2.<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Hexo主题集合(github)</a></p>\n<p>3.<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">Hexo主题集合(知乎)</a></p>\n<p><strong>主题配置：</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在hexo配置文件_config.yml中修改 <span class=\"string\">theme:</span> 主题名字（如：<span class=\"string\">theme:</span> landscape)</div></pre></td></tr></table></figure>\n<p><strong>非Hexo主题(搭建网站可用)</strong></p>\n<p><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"external\">jekyll主题集合(官网)</a></p>\n<p><a href=\"https://github.com/jekyll/jekyll/wiki/Sites\" target=\"_blank\" rel=\"external\">jekyll主题集合(github)</a></p>\n<p><a href=\"https://wordpress.org/themes/\" target=\"_blank\" rel=\"external\">WordPress主题集合</a></p>\n<h1 id=\"三、部署到Github上\"><a href=\"#三、部署到Github上\" class=\"headerlink\" title=\"三、部署到Github上\"></a>三、部署到Github上</h1><p> <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github官网</a></p>\n<p>1.注册Github账号</p>\n<p>2.创建Repository（格式为：github账号名.github.io）</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意Repository的名字必须和账号名相同。比如Github账号是angelen10，那么应该创建的Repository的名字是：angelen10<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>。</div></pre></td></tr></table></figure>\n<p>3.在hexo配置文件_config.yml中配置git路径</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxx为github账户名</div><div class=\"line\">deploy: </div><div class=\"line\">  type: git </div><div class=\"line\">  repository: git@github<span class=\"selector-class\">.com</span>:xxxxx/xxxx<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>4.设置SSH keys绑定到你建的repository</p>\n<p><a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\" target=\"_blank\" rel=\"external\">设置SSH key官方教程</a></p>\n<p>5.Hexo基本操作命令</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div></pre></td></tr></table></figure>\n<h1 id=\"四、相关链接\"><a href=\"#四、相关链接\" class=\"headerlink\" title=\"四、相关链接\"></a>四、相关链接</h1><p><a href=\"http://blog.sina.com.cn/s/blog_4c44643f0102vuju.html\" target=\"_blank\" rel=\"external\">搭建Hexo博客并部署到Github详细教程</a></p>\n<p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"external\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>\n<p><a href=\"http://blog.csdn.net/tzs_1041218129/article/details/53214497\" target=\"_blank\" rel=\"external\">利用Github Page 搭建个人博客网站</a></p>\n","excerpt":"<hr>\n<p>【作为一名技术开发人员，搭建一个属于自己的博客，记录自己，沉淀自己，还是很重要的。】</p>\n<p>年前给自己定一个目标：搭建博客，记录成长。之后，你懂的，就有下面的内容：</p>\n<h1 id=\"一、Hexo介绍、安装及实操\"><a href=\"#一、Hexo介绍、安装及实操\" class=\"headerlink\" title=\"一、Hexo介绍、安装及实操\"></a>一、Hexo介绍、安装及实操</h1><p><a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo平台搭建官网</a></p>\n<p>通过hexo官网步骤，可以很快的搭建hexo平台。通过命令hexo s,然后，在浏览器中输入<a href=\"http://localhost:4000/\">http://localhost:4000/</a> 网站显示如下：<br><img src=\"/assets/img/tech_create_blog_record_img01.png\" alt=\"\"></p>\n<h1 id=\"二、Hexo主题选择\"><a href=\"#二、Hexo主题选择\" class=\"headerlink\" title=\"二、Hexo主题选择\"></a>二、Hexo主题选择</h1><p>通过Hexo官网，搭建的博客使用的主题为hexo自带的主题landscape,效果如上图。如果你希望你的博客更炫，更酷，推荐使用第三方的Hexo主题。主题选择：<br>","more":"<br>1.<a href=\"http://theme-next.iissnan.com/\">Next主题</a></p>\n<p>2.<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">Hexo主题集合(github)</a></p>\n<p>3.<a href=\"https://www.zhihu.com/question/24422335\">Hexo主题集合(知乎)</a></p>\n<p><strong>主题配置：</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">在hexo配置文件_config.yml中修改 <span class=\"string\">theme:</span> 主题名字（如：<span class=\"string\">theme:</span> landscape)</div></pre></td></tr></table></figure>\n<p><strong>非Hexo主题(搭建网站可用)</strong></p>\n<p><a href=\"http://jekyllthemes.org/\">jekyll主题集合(官网)</a></p>\n<p><a href=\"https://github.com/jekyll/jekyll/wiki/Sites\">jekyll主题集合(github)</a></p>\n<p><a href=\"https://wordpress.org/themes/\">WordPress主题集合</a></p>\n<h1 id=\"三、部署到Github上\"><a href=\"#三、部署到Github上\" class=\"headerlink\" title=\"三、部署到Github上\"></a>三、部署到Github上</h1><p> <a href=\"https://github.com/\">Github官网</a></p>\n<p>1.注册Github账号</p>\n<p>2.创建Repository（格式为：github账号名.github.io）</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意Repository的名字必须和账号名相同。比如Github账号是angelen10，那么应该创建的Repository的名字是：angelen10<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>。</div></pre></td></tr></table></figure>\n<p>3.在hexo配置文件_config.yml中配置git路径</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxx为github账户名</div><div class=\"line\">deploy: </div><div class=\"line\">  type: git </div><div class=\"line\">  repository: git@github<span class=\"selector-class\">.com</span>:xxxxx/xxxx<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>4.设置SSH keys绑定到你建的repository</p>\n<p><a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">设置SSH key官方教程</a></p>\n<p>5.Hexo基本操作命令</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\"></div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\"></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\"></div><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div></pre></td></tr></table></figure>\n<h1 id=\"四、相关链接\"><a href=\"#四、相关链接\" class=\"headerlink\" title=\"四、相关链接\"></a>四、相关链接</h1><p><a href=\"http://blog.sina.com.cn/s/blog_4c44643f0102vuju.html\">搭建Hexo博客并部署到Github详细教程</a></p>\n<p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>\n<p><a href=\"http://blog.csdn.net/tzs_1041218129/article/details/53214497\">利用Github Page 搭建个人博客网站</a></p>"},{"layout":"post","title":"SimpleDateFormat与Calendar使用详解","date":"2017-05-17T10:20:05.000Z","comments":1,"_content":"---\n# 1.SimpleDateFormat类\n\n**Format语法**\n\n| 标识 | 标识代表意 | \n| :-----: | :----: |\n|G|年代标志符|\n|y|年|\n|M|月|\n|d|日|\n|h|时 在上午或下午 (1~12)|\n|H|时 在一天中 (0~23)|\n|m|分|\n|s|秒|\n|S|毫秒|\n|E|星期|\n|D|一年中的第几天|\n|F|一月中第几个星期几|\n|w|一年中第几个星期|\n|W|一月中第几个星期|\n|a|上午 / 下午 标记符| \n|k|时 在一天中 (1~24)|\n|K|时 在上午或下午 (0~11)|\n|z|时区|\n<!-- more -->\n**Java代码示例：**\n```java\n        SimpleDateFormat myFmt  = new SimpleDateFormat(\"yyyy年MM月dd日 HH时mm分ss秒\");\n        SimpleDateFormat myFmt1 = new SimpleDateFormat(\"yy/MM/dd HH:mm\");\n        SimpleDateFormat myFmt2 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        SimpleDateFormat myFmt3 = new SimpleDateFormat(\"yyyy年MM月dd日 HH时mm分ss秒 E \");\n        SimpleDateFormat myFmt4 = new SimpleDateFormat(\"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区\");\n        Date now=new Date();\n        System.out.println(myFmt.format(now));\n        System.out.println(myFmt1.format(now));\n        System.out.println(myFmt2.format(now));\n        System.out.println(myFmt3.format(now));\n        System.out.println(myFmt4.format(now));\n        System.out.println(now.toGMTString());\n        System.out.println(now.toLocaleString());\n        System.out.println(now.toString());\n````\n\n**输出结果：**\n> 2017年05月23日 10时53分28秒\n> 17/05/23 10:53\n> 2017-05-23 10:53:28\n> 2017年05月23日 10时53分28秒 星期二 \n> 一年中的第 143 天 一年中第21个星期 一月中第4个星期 在一天中10时 CST时区\n> 23 May 2017 02:53:28 GMT\n> 2017-5-23 10:53:28\n> Tue May 23 10:53:28 CST 2017\n\n# 2.Calendar类\n\n|Letter|\tDate or Time Component\t|Presentation\t|Examples|\n| :-----: | :----: | :-----: | :----: |\n|G\t|Era designator\t|Text\t|AD|\n|y\t|Year|\tYear|1996; 96|\n|Y\t|Week year|\tYear|\t2009; 09|\n|M|\tMonth in year (context sensitive)|\tMonth|\tJuly; Jul; 07\n|L|\tMonth in year (standalone form)\tMonth\t|July; Jul; 07|\n|w|\tWeek in year|\tNumber|27|\n|W\t|Week in month|\tNumber|\t2|\n|D\t|Day in year\t|Number|\t189|\n|d|\tDay in month|\tNumber|\t10|\n|F|\tDay of week in month|\tNumber|\t2|\n|E|\tDay name in week|\tText|\tTuesday; Tue|\n|u\t|Day number of week (1 = Monday, ..., 7 = Sunday)|\tNumber|\t1|\n|a|\tAm/pm marker|\tText\t|PM|\n|H|\tHour in day (0-23)|\tNumber|\t0|\n|k|\tHour in day (1-24)|\tNumber|\t24|\n|K|\tHour in am/pm (0-11)|\tNumber|\t0|\n|h|\tHour in am/pm (1-12)|\tNumber|\t12|\n|m|\tMinute in hour|\tNumber|\t30|\n|s\t|Second in minute|\tNumber|\t55|\n|S|\tMillisecond|Number|\t978|\n|z\t|Time zone|\tGeneral time zone|\tPacific Standard Time; PST; GMT-08:00|\n|Z|\tTime zone\t|RFC 822 time zone|\t-0800|\n|X\t|Time zone\t|ISO 8601 time zone\t-08;| -0800; -08:00|\n\n**Java代码示例：**\n```java\n // Calendar 取得当前时间的方法  \n    // 初始化 (重置) Calendar 对象  \n    calendar = Calendar.getInstance();  \n    // 或者用 Date 来初始化 Calendar 对象  \n    calendar.setTime(new Date());  \n  \n    // 显示年份  \n    int year = calendar.get(Calendar.YEAR);  \n    System.out.println(\"year is = \" + String.valueOf(year));  \n  \n    // 显示月份 (从0开始, 实际显示要加一)  \n    int month = calendar.get(Calendar.MONTH);  \n    System.out.println(\"nth is = \" + (month + 1));  \n  \n    // 本周几  \n    int week = calendar.get(Calendar.DAY_OF_WEEK);  \n    System.out.println(\"week is = \" + week);  \n  \n    // 今年的第 N 天  \n    int DAY_OF_YEAR = calendar.get(Calendar.DAY_OF_YEAR);  \n    System.out.println(\"DAY_OF_YEAR is = \" + DAY_OF_YEAR);  \n  \n    // 本月第 N 天  \n    int DAY_OF_MONTH = calendar.get(Calendar.DAY_OF_MONTH);  \n    System.out.println(\"DAY_OF_MONTH = \" + String.valueOf(DAY_OF_MONTH));  \n  \n    // 3小时以后  \n    calendar.add(Calendar.HOUR_OF_DAY, 3);  \n    int HOUR_OF_DAY = calendar.get(Calendar.HOUR_OF_DAY);  \n    System.out.println(\"HOUR_OF_DAY + 3 = \" + HOUR_OF_DAY);  \n  \n    // 当前分钟数  \n    int MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE = \" + MINUTE);  \n  \n    // 15 分钟以后  \n    calendar.add(Calendar.MINUTE, 15);  \n    MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE + 15 = \" + MINUTE);  \n  \n    // 30分钟前  \n    calendar.add(Calendar.MINUTE, -30);  \n    MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE - 30 = \" + MINUTE);  \n  \n    str = (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SS\")).format(calendar.getTime());  \n    System.out.println(str);  \n  \n    // 重置 Calendar 显示当前时间  \n    calendar.setTime(new Date());  \n    str = (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SS\")).format(calendar.getTime());  \n    System.out.println(str);  \n  \n    // 创建一个 Calendar 用于比较时间  \n    Calendar calendarNew = Calendar.getInstance();  \n  \n    // 设定为 5 小时以前，后者大，显示 -1  \n    calendarNew.add(Calendar.HOUR, -5);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n  \n    // 设定7小时以后，前者大，显示 1  \n    calendarNew.add(Calendar.HOUR, +7);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n  \n    // 退回 2 小时，时间相同，显示 0  \n    calendarNew.add(Calendar.HOUR, -2);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n```\n\n**输出结果：**\n\n>year is = 2017\nnth is = 5\nweek is = 3\nDAY_OF_YEAR is = 143\nDAY_OF_MONTH = 23\nHOUR_OF_DAY + 3 = 14\nMINUTE = 7\nMINUTE + 15 = 22\nMINUTE - 30 = 52\n时间比较：-1\n时间比较：-1\n时间比较：-1\n\n","source":"_posts/tech_java_date_format.md","raw":"---\nlayout: post\ntitle: \"SimpleDateFormat与Calendar使用详解\"\ndate: 5/17/2017 6:20:05 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Java\n\t- Java基础\n---\n---\n# 1.SimpleDateFormat类\n\n**Format语法**\n\n| 标识 | 标识代表意 | \n| :-----: | :----: |\n|G|年代标志符|\n|y|年|\n|M|月|\n|d|日|\n|h|时 在上午或下午 (1~12)|\n|H|时 在一天中 (0~23)|\n|m|分|\n|s|秒|\n|S|毫秒|\n|E|星期|\n|D|一年中的第几天|\n|F|一月中第几个星期几|\n|w|一年中第几个星期|\n|W|一月中第几个星期|\n|a|上午 / 下午 标记符| \n|k|时 在一天中 (1~24)|\n|K|时 在上午或下午 (0~11)|\n|z|时区|\n<!-- more -->\n**Java代码示例：**\n```java\n        SimpleDateFormat myFmt  = new SimpleDateFormat(\"yyyy年MM月dd日 HH时mm分ss秒\");\n        SimpleDateFormat myFmt1 = new SimpleDateFormat(\"yy/MM/dd HH:mm\");\n        SimpleDateFormat myFmt2 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        SimpleDateFormat myFmt3 = new SimpleDateFormat(\"yyyy年MM月dd日 HH时mm分ss秒 E \");\n        SimpleDateFormat myFmt4 = new SimpleDateFormat(\"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区\");\n        Date now=new Date();\n        System.out.println(myFmt.format(now));\n        System.out.println(myFmt1.format(now));\n        System.out.println(myFmt2.format(now));\n        System.out.println(myFmt3.format(now));\n        System.out.println(myFmt4.format(now));\n        System.out.println(now.toGMTString());\n        System.out.println(now.toLocaleString());\n        System.out.println(now.toString());\n````\n\n**输出结果：**\n> 2017年05月23日 10时53分28秒\n> 17/05/23 10:53\n> 2017-05-23 10:53:28\n> 2017年05月23日 10时53分28秒 星期二 \n> 一年中的第 143 天 一年中第21个星期 一月中第4个星期 在一天中10时 CST时区\n> 23 May 2017 02:53:28 GMT\n> 2017-5-23 10:53:28\n> Tue May 23 10:53:28 CST 2017\n\n# 2.Calendar类\n\n|Letter|\tDate or Time Component\t|Presentation\t|Examples|\n| :-----: | :----: | :-----: | :----: |\n|G\t|Era designator\t|Text\t|AD|\n|y\t|Year|\tYear|1996; 96|\n|Y\t|Week year|\tYear|\t2009; 09|\n|M|\tMonth in year (context sensitive)|\tMonth|\tJuly; Jul; 07\n|L|\tMonth in year (standalone form)\tMonth\t|July; Jul; 07|\n|w|\tWeek in year|\tNumber|27|\n|W\t|Week in month|\tNumber|\t2|\n|D\t|Day in year\t|Number|\t189|\n|d|\tDay in month|\tNumber|\t10|\n|F|\tDay of week in month|\tNumber|\t2|\n|E|\tDay name in week|\tText|\tTuesday; Tue|\n|u\t|Day number of week (1 = Monday, ..., 7 = Sunday)|\tNumber|\t1|\n|a|\tAm/pm marker|\tText\t|PM|\n|H|\tHour in day (0-23)|\tNumber|\t0|\n|k|\tHour in day (1-24)|\tNumber|\t24|\n|K|\tHour in am/pm (0-11)|\tNumber|\t0|\n|h|\tHour in am/pm (1-12)|\tNumber|\t12|\n|m|\tMinute in hour|\tNumber|\t30|\n|s\t|Second in minute|\tNumber|\t55|\n|S|\tMillisecond|Number|\t978|\n|z\t|Time zone|\tGeneral time zone|\tPacific Standard Time; PST; GMT-08:00|\n|Z|\tTime zone\t|RFC 822 time zone|\t-0800|\n|X\t|Time zone\t|ISO 8601 time zone\t-08;| -0800; -08:00|\n\n**Java代码示例：**\n```java\n // Calendar 取得当前时间的方法  \n    // 初始化 (重置) Calendar 对象  \n    calendar = Calendar.getInstance();  \n    // 或者用 Date 来初始化 Calendar 对象  \n    calendar.setTime(new Date());  \n  \n    // 显示年份  \n    int year = calendar.get(Calendar.YEAR);  \n    System.out.println(\"year is = \" + String.valueOf(year));  \n  \n    // 显示月份 (从0开始, 实际显示要加一)  \n    int month = calendar.get(Calendar.MONTH);  \n    System.out.println(\"nth is = \" + (month + 1));  \n  \n    // 本周几  \n    int week = calendar.get(Calendar.DAY_OF_WEEK);  \n    System.out.println(\"week is = \" + week);  \n  \n    // 今年的第 N 天  \n    int DAY_OF_YEAR = calendar.get(Calendar.DAY_OF_YEAR);  \n    System.out.println(\"DAY_OF_YEAR is = \" + DAY_OF_YEAR);  \n  \n    // 本月第 N 天  \n    int DAY_OF_MONTH = calendar.get(Calendar.DAY_OF_MONTH);  \n    System.out.println(\"DAY_OF_MONTH = \" + String.valueOf(DAY_OF_MONTH));  \n  \n    // 3小时以后  \n    calendar.add(Calendar.HOUR_OF_DAY, 3);  \n    int HOUR_OF_DAY = calendar.get(Calendar.HOUR_OF_DAY);  \n    System.out.println(\"HOUR_OF_DAY + 3 = \" + HOUR_OF_DAY);  \n  \n    // 当前分钟数  \n    int MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE = \" + MINUTE);  \n  \n    // 15 分钟以后  \n    calendar.add(Calendar.MINUTE, 15);  \n    MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE + 15 = \" + MINUTE);  \n  \n    // 30分钟前  \n    calendar.add(Calendar.MINUTE, -30);  \n    MINUTE = calendar.get(Calendar.MINUTE);  \n    System.out.println(\"MINUTE - 30 = \" + MINUTE);  \n  \n    str = (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SS\")).format(calendar.getTime());  \n    System.out.println(str);  \n  \n    // 重置 Calendar 显示当前时间  \n    calendar.setTime(new Date());  \n    str = (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SS\")).format(calendar.getTime());  \n    System.out.println(str);  \n  \n    // 创建一个 Calendar 用于比较时间  \n    Calendar calendarNew = Calendar.getInstance();  \n  \n    // 设定为 5 小时以前，后者大，显示 -1  \n    calendarNew.add(Calendar.HOUR, -5);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n  \n    // 设定7小时以后，前者大，显示 1  \n    calendarNew.add(Calendar.HOUR, +7);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n  \n    // 退回 2 小时，时间相同，显示 0  \n    calendarNew.add(Calendar.HOUR, -2);  \n    System.out.println(\"时间比较：\" + calendarNew.compareTo(calendar));  \n```\n\n**输出结果：**\n\n>year is = 2017\nnth is = 5\nweek is = 3\nDAY_OF_YEAR is = 143\nDAY_OF_MONTH = 23\nHOUR_OF_DAY + 3 = 14\nMINUTE = 7\nMINUTE + 15 = 22\nMINUTE - 30 = 52\n时间比较：-1\n时间比较：-1\n时间比较：-1\n\n","slug":"tech_java_date_format","published":1,"updated":"2019-06-27T08:15:15.340Z","photos":[],"link":"","_id":"cjxfjaeqw000gystgd2wt5qfu","content":"<hr>\n<h1 id=\"1-SimpleDateFormat类\"><a href=\"#1-SimpleDateFormat类\" class=\"headerlink\" title=\"1.SimpleDateFormat类\"></a>1.SimpleDateFormat类</h1><p><strong>Format语法</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">标识代表意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">年代标志符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">年</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">月</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">日</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">时 在上午或下午 (1~12)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">时 在一天中 (0~23)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">毫秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">一年中的第几天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">一月中第几个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">一年中第几个星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">一月中第几个星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">上午 / 下午 标记符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">时 在一天中 (1~24)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">时 在上午或下午 (0~11)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">时区</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p><strong>Java代码示例：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">        SimpleDateFormat myFmt  = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年MM月dd日 HH时mm分ss秒\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt1 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yy/MM/dd HH:mm\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt2 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt3 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年MM月dd日 HH时mm分ss秒 E \"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt4 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区\"</span>);</div><div class=\"line\">        Date now=<span class=\"keyword\">new</span> Date();</div><div class=\"line\">        System.out.println(myFmt.format(now));</div><div class=\"line\">        System.out.println(myFmt1.format(now));</div><div class=\"line\">        System.out.println(myFmt2.format(now));</div><div class=\"line\">        System.out.println(myFmt3.format(now));</div><div class=\"line\">        System.out.println(myFmt4.format(now));</div><div class=\"line\">        System.out.println(now.toGMTString());</div><div class=\"line\">        System.out.println(now.toLocaleString());</div><div class=\"line\">        System.out.println(now.toString());</div><div class=\"line\">`</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p>2017年05月23日 10时53分28秒<br>17/05/23 10:53<br>2017-05-23 10:53:28<br>2017年05月23日 10时53分28秒 星期二<br>一年中的第 143 天 一年中第21个星期 一月中第4个星期 在一天中10时 CST时区<br>23 May 2017 02:53:28 GMT<br>2017-5-23 10:53:28<br>Tue May 23 10:53:28 CST 2017</p>\n</blockquote>\n<h1 id=\"2-Calendar类\"><a href=\"#2-Calendar类\" class=\"headerlink\" title=\"2.Calendar类\"></a>2.Calendar类</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Letter</th>\n<th style=\"text-align:center\">Date or Time Component</th>\n<th style=\"text-align:center\">Presentation</th>\n<th style=\"text-align:center\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">Era designator</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">AD</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">1996; 96</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Week year</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">2009; 09</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">Month in year (context sensitive)</td>\n<td style=\"text-align:center\">Month</td>\n<td style=\"text-align:center\">July; Jul; 07</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">Month in year (standalone form)    Month</td>\n<td style=\"text-align:center\">July; Jul; 07</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">Week in year</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">27</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">Week in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">Day in year</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">189</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">Day in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">Day of week in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">Day name in week</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">Tuesday; Tue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">Day number of week (1 = Monday, …, 7 = Sunday)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">Am/pm marker</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">PM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">Hour in day (0-23)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">Hour in day (1-24)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">24</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">Hour in am/pm (0-11)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">Hour in am/pm (1-12)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">Minute in hour</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">Second in minute</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">55</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">Millisecond</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">978</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">General time zone</td>\n<td style=\"text-align:center\">Pacific Standard Time; PST; GMT-08:00</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">RFC 822 time zone</td>\n<td style=\"text-align:center\">-0800</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">ISO 8601 time zone    -08;</td>\n<td style=\"text-align:center\">-0800; -08:00</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Java代码示例：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Calendar 取得当前时间的方法  </span></div><div class=\"line\">   <span class=\"comment\">// 初始化 (重置) Calendar 对象  </span></div><div class=\"line\">   calendar = Calendar.getInstance();  </div><div class=\"line\">   <span class=\"comment\">// 或者用 Date 来初始化 Calendar 对象  </span></div><div class=\"line\">   calendar.setTime(<span class=\"keyword\">new</span> Date());  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 显示年份  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> year = calendar.get(Calendar.YEAR);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"year is = \"</span> + String.valueOf(year));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 显示月份 (从0开始, 实际显示要加一)  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> month = calendar.get(Calendar.MONTH);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"nth is = \"</span> + (month + <span class=\"number\">1</span>));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 本周几  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> week = calendar.get(Calendar.DAY_OF_WEEK);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"week is = \"</span> + week);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 今年的第 N 天  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> DAY_OF_YEAR = calendar.get(Calendar.DAY_OF_YEAR);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"DAY_OF_YEAR is = \"</span> + DAY_OF_YEAR);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 本月第 N 天  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> DAY_OF_MONTH = calendar.get(Calendar.DAY_OF_MONTH);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"DAY_OF_MONTH = \"</span> + String.valueOf(DAY_OF_MONTH));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 3小时以后  </span></div><div class=\"line\">   calendar.add(Calendar.HOUR_OF_DAY, <span class=\"number\">3</span>);  </div><div class=\"line\">   <span class=\"keyword\">int</span> HOUR_OF_DAY = calendar.get(Calendar.HOUR_OF_DAY);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"HOUR_OF_DAY + 3 = \"</span> + HOUR_OF_DAY);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 当前分钟数  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 15 分钟以后  </span></div><div class=\"line\">   calendar.add(Calendar.MINUTE, <span class=\"number\">15</span>);  </div><div class=\"line\">   MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE + 15 = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 30分钟前  </span></div><div class=\"line\">   calendar.add(Calendar.MINUTE, -<span class=\"number\">30</span>);  </div><div class=\"line\">   MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE - 30 = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   str = (<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss:SS\"</span>)).format(calendar.getTime());  </div><div class=\"line\">   System.out.println(str);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 重置 Calendar 显示当前时间  </span></div><div class=\"line\">   calendar.setTime(<span class=\"keyword\">new</span> Date());  </div><div class=\"line\">   str = (<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss:SS\"</span>)).format(calendar.getTime());  </div><div class=\"line\">   System.out.println(str);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 创建一个 Calendar 用于比较时间  </span></div><div class=\"line\">   Calendar calendarNew = Calendar.getInstance();  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 设定为 5 小时以前，后者大，显示 -1  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, -<span class=\"number\">5</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 设定7小时以后，前者大，显示 1  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, +<span class=\"number\">7</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 退回 2 小时，时间相同，显示 0  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, -<span class=\"number\">2</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p>year is = 2017<br>nth is = 5<br>week is = 3<br>DAY_OF_YEAR is = 143<br>DAY_OF_MONTH = 23<br>HOUR_OF_DAY + 3 = 14<br>MINUTE = 7<br>MINUTE + 15 = 22<br>MINUTE - 30 = 52<br>时间比较：-1<br>时间比较：-1<br>时间比较：-1</p>\n</blockquote>\n","excerpt":"<hr>\n<h1 id=\"1-SimpleDateFormat类\"><a href=\"#1-SimpleDateFormat类\" class=\"headerlink\" title=\"1.SimpleDateFormat类\"></a>1.SimpleDateFormat类</h1><p><strong>Format语法</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识</th>\n<th style=\"text-align:center\">标识代表意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">年代标志符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">年</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">月</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">日</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">时 在上午或下午 (1~12)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">时 在一天中 (0~23)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">毫秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">一年中的第几天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">一月中第几个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">一年中第几个星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">一月中第几个星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">上午 / 下午 标记符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">时 在一天中 (1~24)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">时 在上午或下午 (0~11)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">时区</td>\n</tr>\n</tbody>\n</table>","more":"<p><strong>Java代码示例：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">        SimpleDateFormat myFmt  = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年MM月dd日 HH时mm分ss秒\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt1 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yy/MM/dd HH:mm\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt2 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt3 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年MM月dd日 HH时mm分ss秒 E \"</span>);</div><div class=\"line\">        SimpleDateFormat myFmt4 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区\"</span>);</div><div class=\"line\">        Date now=<span class=\"keyword\">new</span> Date();</div><div class=\"line\">        System.out.println(myFmt.format(now));</div><div class=\"line\">        System.out.println(myFmt1.format(now));</div><div class=\"line\">        System.out.println(myFmt2.format(now));</div><div class=\"line\">        System.out.println(myFmt3.format(now));</div><div class=\"line\">        System.out.println(myFmt4.format(now));</div><div class=\"line\">        System.out.println(now.toGMTString());</div><div class=\"line\">        System.out.println(now.toLocaleString());</div><div class=\"line\">        System.out.println(now.toString());</div><div class=\"line\">`</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p>2017年05月23日 10时53分28秒<br>17/05/23 10:53<br>2017-05-23 10:53:28<br>2017年05月23日 10时53分28秒 星期二<br>一年中的第 143 天 一年中第21个星期 一月中第4个星期 在一天中10时 CST时区<br>23 May 2017 02:53:28 GMT<br>2017-5-23 10:53:28<br>Tue May 23 10:53:28 CST 2017</p>\n</blockquote>\n<h1 id=\"2-Calendar类\"><a href=\"#2-Calendar类\" class=\"headerlink\" title=\"2.Calendar类\"></a>2.Calendar类</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Letter</th>\n<th style=\"text-align:center\">Date or Time Component</th>\n<th style=\"text-align:center\">Presentation</th>\n<th style=\"text-align:center\">Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">Era designator</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">AD</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">1996; 96</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Week year</td>\n<td style=\"text-align:center\">Year</td>\n<td style=\"text-align:center\">2009; 09</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">Month in year (context sensitive)</td>\n<td style=\"text-align:center\">Month</td>\n<td style=\"text-align:center\">July; Jul; 07</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">Month in year (standalone form)    Month</td>\n<td style=\"text-align:center\">July; Jul; 07</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">Week in year</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">27</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">Week in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">Day in year</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">189</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">Day in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">Day of week in month</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">Day name in week</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">Tuesday; Tue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">Day number of week (1 = Monday, …, 7 = Sunday)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">Am/pm marker</td>\n<td style=\"text-align:center\">Text</td>\n<td style=\"text-align:center\">PM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">Hour in day (0-23)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k</td>\n<td style=\"text-align:center\">Hour in day (1-24)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">24</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">Hour in am/pm (0-11)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">Hour in am/pm (1-12)</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">Minute in hour</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">Second in minute</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">55</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">Millisecond</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">978</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">General time zone</td>\n<td style=\"text-align:center\">Pacific Standard Time; PST; GMT-08:00</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">RFC 822 time zone</td>\n<td style=\"text-align:center\">-0800</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">Time zone</td>\n<td style=\"text-align:center\">ISO 8601 time zone    -08;</td>\n<td style=\"text-align:center\">-0800; -08:00</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Java代码示例：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Calendar 取得当前时间的方法  </span></div><div class=\"line\">   <span class=\"comment\">// 初始化 (重置) Calendar 对象  </span></div><div class=\"line\">   calendar = Calendar.getInstance();  </div><div class=\"line\">   <span class=\"comment\">// 或者用 Date 来初始化 Calendar 对象  </span></div><div class=\"line\">   calendar.setTime(<span class=\"keyword\">new</span> Date());  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 显示年份  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> year = calendar.get(Calendar.YEAR);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"year is = \"</span> + String.valueOf(year));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 显示月份 (从0开始, 实际显示要加一)  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> month = calendar.get(Calendar.MONTH);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"nth is = \"</span> + (month + <span class=\"number\">1</span>));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 本周几  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> week = calendar.get(Calendar.DAY_OF_WEEK);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"week is = \"</span> + week);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 今年的第 N 天  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> DAY_OF_YEAR = calendar.get(Calendar.DAY_OF_YEAR);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"DAY_OF_YEAR is = \"</span> + DAY_OF_YEAR);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 本月第 N 天  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> DAY_OF_MONTH = calendar.get(Calendar.DAY_OF_MONTH);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"DAY_OF_MONTH = \"</span> + String.valueOf(DAY_OF_MONTH));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 3小时以后  </span></div><div class=\"line\">   calendar.add(Calendar.HOUR_OF_DAY, <span class=\"number\">3</span>);  </div><div class=\"line\">   <span class=\"keyword\">int</span> HOUR_OF_DAY = calendar.get(Calendar.HOUR_OF_DAY);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"HOUR_OF_DAY + 3 = \"</span> + HOUR_OF_DAY);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 当前分钟数  </span></div><div class=\"line\">   <span class=\"keyword\">int</span> MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 15 分钟以后  </span></div><div class=\"line\">   calendar.add(Calendar.MINUTE, <span class=\"number\">15</span>);  </div><div class=\"line\">   MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE + 15 = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 30分钟前  </span></div><div class=\"line\">   calendar.add(Calendar.MINUTE, -<span class=\"number\">30</span>);  </div><div class=\"line\">   MINUTE = calendar.get(Calendar.MINUTE);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"MINUTE - 30 = \"</span> + MINUTE);  </div><div class=\"line\"> </div><div class=\"line\">   str = (<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss:SS\"</span>)).format(calendar.getTime());  </div><div class=\"line\">   System.out.println(str);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 重置 Calendar 显示当前时间  </span></div><div class=\"line\">   calendar.setTime(<span class=\"keyword\">new</span> Date());  </div><div class=\"line\">   str = (<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss:SS\"</span>)).format(calendar.getTime());  </div><div class=\"line\">   System.out.println(str);  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 创建一个 Calendar 用于比较时间  </span></div><div class=\"line\">   Calendar calendarNew = Calendar.getInstance();  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 设定为 5 小时以前，后者大，显示 -1  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, -<span class=\"number\">5</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 设定7小时以后，前者大，显示 1  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, +<span class=\"number\">7</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));  </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">// 退回 2 小时，时间相同，显示 0  </span></div><div class=\"line\">   calendarNew.add(Calendar.HOUR, -<span class=\"number\">2</span>);  </div><div class=\"line\">   System.out.println(<span class=\"string\">\"时间比较：\"</span> + calendarNew.compareTo(calendar));</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p>year is = 2017<br>nth is = 5<br>week is = 3<br>DAY_OF_YEAR is = 143<br>DAY_OF_MONTH = 23<br>HOUR_OF_DAY + 3 = 14<br>MINUTE = 7<br>MINUTE + 15 = 22<br>MINUTE - 30 = 52<br>时间比较：-1<br>时间比较：-1<br>时间比较：-1</p>\n</blockquote>"},{"layout":"post","title":"Rxjava学习总结","date":"2017-03-16T13:06:13.000Z","comments":1,"_content":"---\n# 1.[RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083) #\n# 2.RxJava常用方法总结 #\nRxJava 的观察者模式\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg)\n\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg)\n\n\nObservable.just(T...)方法\n>![](http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg)\n>Observable.just()动画显示\n>![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif)\n\nObservable.from(T[])分发集合方法(图类似just())\n\n<!-- more -->\nObservable.map()直接变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg)\n\nObservable.flatMap()平铺变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg)\n\n# 3.RxJava线程调度 #\n1.RxJava线程控制\n>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)\n>\nObservable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程\n>\nObservable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用\n\n2.Schedulers介绍\n\n > Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。\n > \n > Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n > \n > Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n > \n >Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n >\n >AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   \n\n# 4.结尾 #\n以上图片资源皆来至于 [RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083)\n\n\n","source":"_posts/tech_rxjava_basic.md","raw":"---\nlayout: post\ntitle: \"Rxjava学习总结\"\ndate: 3/16/2017 9:06:13 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Rxjava\n\t- Rxandroid\n\t- 响应式编程\n---\n---\n# 1.[RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083) #\n# 2.RxJava常用方法总结 #\nRxJava 的观察者模式\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg)\n\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg)\n\n\nObservable.just(T...)方法\n>![](http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg)\n>Observable.just()动画显示\n>![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif)\n\nObservable.from(T[])分发集合方法(图类似just())\n\n<!-- more -->\nObservable.map()直接变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg)\n\nObservable.flatMap()平铺变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg)\n\n# 3.RxJava线程调度 #\n1.RxJava线程控制\n>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)\n>\nObservable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程\n>\nObservable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用\n\n2.Schedulers介绍\n\n > Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。\n > \n > Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n > \n > Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n > \n >Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n >\n >AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   \n\n# 4.结尾 #\n以上图片资源皆来至于 [RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083)\n\n\n","slug":"tech_rxjava_basic","published":1,"updated":"2019-06-27T08:15:15.343Z","photos":[],"link":"","_id":"cjxfjaeqx000iystgfrtajzny","content":"<hr>\n<h1 id=\"1-RxJava基础详解-扔物线\"><a href=\"#1-RxJava基础详解-扔物线\" class=\"headerlink\" title=\"1.RxJava基础详解-扔物线\"></a>1.<a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava基础详解-扔物线</a></h1><h1 id=\"2-RxJava常用方法总结\"><a href=\"#2-RxJava常用方法总结\" class=\"headerlink\" title=\"2.RxJava常用方法总结\"></a>2.RxJava常用方法总结</h1><p>RxJava 的观察者模式</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg\" alt=\"\"></p>\n<p>Observable.just(T…)方法</p>\n<blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg\" alt=\"\"><br>Observable.just()动画显示<br><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif\" alt=\"\"></p>\n</blockquote>\n<p>Observable.from(T[])分发集合方法(图类似just())</p>\n<a id=\"more\"></a>\n<p>Observable.map()直接变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg\" alt=\"\"></p>\n</blockquote>\n<p>Observable.flatMap()平铺变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-RxJava线程调度\"><a href=\"#3-RxJava线程调度\" class=\"headerlink\" title=\"3.RxJava线程调度\"></a>3.RxJava线程调度</h1><p>1.RxJava线程控制</p>\n<blockquote>\n<p>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)</p>\n<p>Observable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程</p>\n<p>Observable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用</p>\n</blockquote>\n<p>2.Schedulers介绍</p>\n<blockquote>\n<p>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。</p>\n<p>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</p>\n<p>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</p>\n<p>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>\n<p>AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   </p>\n</blockquote>\n<h1 id=\"4-结尾\"><a href=\"#4-结尾\" class=\"headerlink\" title=\"4.结尾\"></a>4.结尾</h1><p>以上图片资源皆来至于 <a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava基础详解-扔物线</a></p>\n","excerpt":"<hr>\n<h1 id=\"1-RxJava基础详解-扔物线\"><a href=\"#1-RxJava基础详解-扔物线\" class=\"headerlink\" title=\"1.RxJava基础详解-扔物线\"></a>1.<a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava基础详解-扔物线</a></h1><h1 id=\"2-RxJava常用方法总结\"><a href=\"#2-RxJava常用方法总结\" class=\"headerlink\" title=\"2.RxJava常用方法总结\"></a>2.RxJava常用方法总结</h1><p>RxJava 的观察者模式</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg\" alt=\"\"></p>\n<p>Observable.just(T…)方法</p>\n<blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg\" alt=\"\"><br>Observable.just()动画显示<br><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif\" alt=\"\"></p>\n</blockquote>\n<p>Observable.from(T[])分发集合方法(图类似just())</p>","more":"<p>Observable.map()直接变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg\" alt=\"\"></p>\n</blockquote>\n<p>Observable.flatMap()平铺变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-RxJava线程调度\"><a href=\"#3-RxJava线程调度\" class=\"headerlink\" title=\"3.RxJava线程调度\"></a>3.RxJava线程调度</h1><p>1.RxJava线程控制</p>\n<blockquote>\n<p>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)</p>\n<p>Observable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程</p>\n<p>Observable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用</p>\n</blockquote>\n<p>2.Schedulers介绍</p>\n<blockquote>\n<p>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。</p>\n<p>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</p>\n<p>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</p>\n<p>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>\n<p>AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   </p>\n</blockquote>\n<h1 id=\"4-结尾\"><a href=\"#4-结尾\" class=\"headerlink\" title=\"4.结尾\"></a>4.结尾</h1><p>以上图片资源皆来至于 <a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava基础详解-扔物线</a></p>"},{"layout":"post","title":"学习网址","date":"2017-03-17T13:59:30.000Z","comments":1,"_content":"---\n\n\n# 技术学习网址\n|   网址1   | 网址2  |  网址3    |  网址4     |\n| :---: | :---: | :---: | :---: | \n| [Markdown学习](https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html)  | [Markdown语法学习](http://www.jianshu.com/p/0b257de21eb5)  |[RxJava学习](http://gank.io/post/560e15be2dca930e00da1083)|[Android组件化](http://www.jianshu.com/p/2af3795957a8)|\n| [Airbnb的Lottie动画开源框架](http://www.jianshu.com/p/9a2136ecbc7b)   | [Lottie官网](http://www.lottiefiles.com/?page=2)  |[MaterialDesign安卓开源库](https://github.com/lightSky/Awesome-MaterialDesign) | [常用框架源码解析](http://a.codekk.com/)   |\n| [Recyclerview学习](http://www.recyclerview.org/)   |[视频播放器](http://www.jianshu.com/p/420f7b14d6f6)|[节操视频播放器](https://github.com/lipangit/JieCaoVideoPlayer)|[Java基础](http://leeeyou.xyz/2017/04/14/blog-2017-04-14-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B9%8BJava%E5%9F%BA%E7%A1%80/) |\n\n# 技术明星\n|  昵称   | 博客  | Github地址   |\n| :---: | :---: | :---: |\n|GcsSloop|[http://www.gcssloop.com/](http://www.gcssloop.com/)|[GcsSloop](https://github.com/GcsSloop)|\n|陈宇明|[http://blog.csdn.net/cym492224103](http://blog.csdn.net/cym492224103)|[CymChad](https://github.com/CymChad)|\n|郭霖|[http://blog.csdn.net/guolin_blog/article/details/26365683](http://blog.csdn.net/guolin_blog/article/details/26365683)||\n|张鸿洋|[http://blog.csdn.net/lmj623565791/article/details/45460089](http://blog.csdn.net/lmj623565791/article/details/45460089)||\n|秋百万|[https://www.liaohuqiu.net/cn/](https://www.liaohuqiu.net/cn/)|[liaohuqiu](https://github.com/liaohuqiu)|\n|刘超|[http://blog.csdn.net/qq_23547831?viewmode=contents](http://blog.csdn.net/qq_23547831?viewmode=contents)|[yipianfengye](https://github.com/yipianfengye)|\n|刘望舒|[http://liuwangshu.cn/](http://liuwangshu.cn/)|[henrymorgen](https://github.com/henrymorgen)|\n\n\n","source":"_posts/tech_study_website.md","raw":"---\nlayout: post\ntitle: \"学习网址\"\ndate: 3/17/2017 9:59:30 PM \ncomments: true\ntags: \n\t- 技术 \n---\n---\n\n\n# 技术学习网址\n|   网址1   | 网址2  |  网址3    |  网址4     |\n| :---: | :---: | :---: | :---: | \n| [Markdown学习](https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html)  | [Markdown语法学习](http://www.jianshu.com/p/0b257de21eb5)  |[RxJava学习](http://gank.io/post/560e15be2dca930e00da1083)|[Android组件化](http://www.jianshu.com/p/2af3795957a8)|\n| [Airbnb的Lottie动画开源框架](http://www.jianshu.com/p/9a2136ecbc7b)   | [Lottie官网](http://www.lottiefiles.com/?page=2)  |[MaterialDesign安卓开源库](https://github.com/lightSky/Awesome-MaterialDesign) | [常用框架源码解析](http://a.codekk.com/)   |\n| [Recyclerview学习](http://www.recyclerview.org/)   |[视频播放器](http://www.jianshu.com/p/420f7b14d6f6)|[节操视频播放器](https://github.com/lipangit/JieCaoVideoPlayer)|[Java基础](http://leeeyou.xyz/2017/04/14/blog-2017-04-14-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B9%8BJava%E5%9F%BA%E7%A1%80/) |\n\n# 技术明星\n|  昵称   | 博客  | Github地址   |\n| :---: | :---: | :---: |\n|GcsSloop|[http://www.gcssloop.com/](http://www.gcssloop.com/)|[GcsSloop](https://github.com/GcsSloop)|\n|陈宇明|[http://blog.csdn.net/cym492224103](http://blog.csdn.net/cym492224103)|[CymChad](https://github.com/CymChad)|\n|郭霖|[http://blog.csdn.net/guolin_blog/article/details/26365683](http://blog.csdn.net/guolin_blog/article/details/26365683)||\n|张鸿洋|[http://blog.csdn.net/lmj623565791/article/details/45460089](http://blog.csdn.net/lmj623565791/article/details/45460089)||\n|秋百万|[https://www.liaohuqiu.net/cn/](https://www.liaohuqiu.net/cn/)|[liaohuqiu](https://github.com/liaohuqiu)|\n|刘超|[http://blog.csdn.net/qq_23547831?viewmode=contents](http://blog.csdn.net/qq_23547831?viewmode=contents)|[yipianfengye](https://github.com/yipianfengye)|\n|刘望舒|[http://liuwangshu.cn/](http://liuwangshu.cn/)|[henrymorgen](https://github.com/henrymorgen)|\n\n\n","slug":"tech_study_website","published":1,"updated":"2019-06-27T08:15:15.344Z","photos":[],"link":"","_id":"cjxfjaeqy000jystgathcoyjx","content":"<hr>\n<h1 id=\"技术学习网址\"><a href=\"#技术学习网址\" class=\"headerlink\" title=\"技术学习网址\"></a>技术学习网址</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">网址1</th>\n<th style=\"text-align:center\">网址2</th>\n<th style=\"text-align:center\">网址3</th>\n<th style=\"text-align:center\">网址4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html\" target=\"_blank\" rel=\"external\">Markdown学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/0b257de21eb5\" target=\"_blank\" rel=\"external\">Markdown语法学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/2af3795957a8\" target=\"_blank\" rel=\"external\">Android组件化</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/9a2136ecbc7b\" target=\"_blank\" rel=\"external\">Airbnb的Lottie动画开源框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.lottiefiles.com/?page=2\" target=\"_blank\" rel=\"external\">Lottie官网</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\" target=\"_blank\" rel=\"external\">MaterialDesign安卓开源库</a></td>\n<td style=\"text-align:center\"><a href=\"http://a.codekk.com/\" target=\"_blank\" rel=\"external\">常用框架源码解析</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.recyclerview.org/\" target=\"_blank\" rel=\"external\">Recyclerview学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/420f7b14d6f6\" target=\"_blank\" rel=\"external\">视频播放器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lipangit/JieCaoVideoPlayer\" target=\"_blank\" rel=\"external\">节操视频播放器</a></td>\n<td style=\"text-align:center\"><a href=\"http://leeeyou.xyz/2017/04/14/blog-2017-04-14-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B9%8BJava%E5%9F%BA%E7%A1%80/\" target=\"_blank\" rel=\"external\">Java基础</a></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"技术明星\"><a href=\"#技术明星\" class=\"headerlink\" title=\"技术明星\"></a>技术明星</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">昵称</th>\n<th style=\"text-align:center\">博客</th>\n<th style=\"text-align:center\">Github地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">GcsSloop</td>\n<td style=\"text-align:center\"><a href=\"http://www.gcssloop.com/\" target=\"_blank\" rel=\"external\">http://www.gcssloop.com/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/GcsSloop\" target=\"_blank\" rel=\"external\">GcsSloop</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">陈宇明</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/cym492224103\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/cym492224103</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/CymChad\" target=\"_blank\" rel=\"external\">CymChad</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">郭霖</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/guolin_blog/article/details/26365683\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/guolin_blog/article/details/26365683</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">张鸿洋</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/lmj623565791/article/details/45460089\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lmj623565791/article/details/45460089</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">秋百万</td>\n<td style=\"text-align:center\"><a href=\"https://www.liaohuqiu.net/cn/\" target=\"_blank\" rel=\"external\">https://www.liaohuqiu.net/cn/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/liaohuqiu\" target=\"_blank\" rel=\"external\">liaohuqiu</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">刘超</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/qq_23547831?viewmode=contents\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_23547831?viewmode=contents</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/yipianfengye\" target=\"_blank\" rel=\"external\">yipianfengye</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">刘望舒</td>\n<td style=\"text-align:center\"><a href=\"http://liuwangshu.cn/\" target=\"_blank\" rel=\"external\">http://liuwangshu.cn/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/henrymorgen\" target=\"_blank\" rel=\"external\">henrymorgen</a></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<hr>\n<h1 id=\"技术学习网址\"><a href=\"#技术学习网址\" class=\"headerlink\" title=\"技术学习网址\"></a>技术学习网址</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">网址1</th>\n<th style=\"text-align:center\">网址2</th>\n<th style=\"text-align:center\">网址3</th>\n<th style=\"text-align:center\">网址4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html\">Markdown学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/0b257de21eb5\">Markdown语法学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/2af3795957a8\">Android组件化</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/9a2136ecbc7b\">Airbnb的Lottie动画开源框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.lottiefiles.com/?page=2\">Lottie官网</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\">MaterialDesign安卓开源库</a></td>\n<td style=\"text-align:center\"><a href=\"http://a.codekk.com/\">常用框架源码解析</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.recyclerview.org/\">Recyclerview学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/420f7b14d6f6\">视频播放器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lipangit/JieCaoVideoPlayer\">节操视频播放器</a></td>\n<td style=\"text-align:center\"><a href=\"http://leeeyou.xyz/2017/04/14/blog-2017-04-14-%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E4%B9%8BJava%E5%9F%BA%E7%A1%80/\">Java基础</a></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"技术明星\"><a href=\"#技术明星\" class=\"headerlink\" title=\"技术明星\"></a>技术明星</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">昵称</th>\n<th style=\"text-align:center\">博客</th>\n<th style=\"text-align:center\">Github地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">GcsSloop</td>\n<td style=\"text-align:center\"><a href=\"http://www.gcssloop.com/\">http://www.gcssloop.com/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/GcsSloop\">GcsSloop</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">陈宇明</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/cym492224103\">http://blog.csdn.net/cym492224103</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/CymChad\">CymChad</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">郭霖</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/guolin_blog/article/details/26365683\">http://blog.csdn.net/guolin_blog/article/details/26365683</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">张鸿洋</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/lmj623565791/article/details/45460089\">http://blog.csdn.net/lmj623565791/article/details/45460089</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">秋百万</td>\n<td style=\"text-align:center\"><a href=\"https://www.liaohuqiu.net/cn/\">https://www.liaohuqiu.net/cn/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/liaohuqiu\">liaohuqiu</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">刘超</td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/qq_23547831?viewmode=contents\">http://blog.csdn.net/qq_23547831?viewmode=contents</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/yipianfengye\">yipianfengye</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">刘望舒</td>\n<td style=\"text-align:center\"><a href=\"http://liuwangshu.cn/\">http://liuwangshu.cn/</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/henrymorgen\">henrymorgen</a></td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"post","title":"你本是一个肉体，是什么驱使你前行[1]","date":"2017-05-24T10:15:20.000Z","comments":1,"_content":"---\n文/笔沫拾光\n\n![](/assets/img/think_body_and_soul.jpg)\n\n你本是一个肉体，是什么驱使你前行。\n\n你生来是一个肉体，\n三四岁时你有了意识，但还没有自己，不知道自己。\n\n十四，十五岁，你开始反叛，开始认识到自己，开始追求自己。\n\n长大了，成年了，你开始寻找自己，问自己：\n我是谁？我从哪里来？我要去那里？\n\n在路上，没有谁给过你答案。\n\n书本，电影，旅行见闻。当你们相遇时，你会去思考，会去寻求答案。\n\n有那么一段时间，你认为你找到了。\n\n可当夜深人静，静卧回思，\n你又会发现，不，那不是的。\n\n迷迷糊糊中，你又会问起，\n你本是一团肉体，是什么驱使你前行？\n\n是爱情，是家庭，是亲人，是兴趣，是理想，是金钱...\n是房子和车子，是权利，是安全感，是稳定,还是美丽的风景......\n\n\n\n","source":"_posts/think_body_and_soul.md","raw":"---\nlayout: post\ntitle: \"你本是一个肉体，是什么驱使你前行[1]\"\ndate:  05/24/2017 6:15:20 PM \ncomments: true\ntags: \n\t- 随想 \n\t- 你本是一个肉体，是什么驱使你前行\n\t- 原创\n\t- 笔沫拾光\n---\n---\n文/笔沫拾光\n\n![](/assets/img/think_body_and_soul.jpg)\n\n你本是一个肉体，是什么驱使你前行。\n\n你生来是一个肉体，\n三四岁时你有了意识，但还没有自己，不知道自己。\n\n十四，十五岁，你开始反叛，开始认识到自己，开始追求自己。\n\n长大了，成年了，你开始寻找自己，问自己：\n我是谁？我从哪里来？我要去那里？\n\n在路上，没有谁给过你答案。\n\n书本，电影，旅行见闻。当你们相遇时，你会去思考，会去寻求答案。\n\n有那么一段时间，你认为你找到了。\n\n可当夜深人静，静卧回思，\n你又会发现，不，那不是的。\n\n迷迷糊糊中，你又会问起，\n你本是一团肉体，是什么驱使你前行？\n\n是爱情，是家庭，是亲人，是兴趣，是理想，是金钱...\n是房子和车子，是权利，是安全感，是稳定,还是美丽的风景......\n\n\n\n","slug":"think_body_and_soul","published":1,"updated":"2019-06-27T08:15:15.345Z","photos":[],"link":"","_id":"cjxfjaeqz000lystg4xlpt1wy","content":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_body_and_soul.jpg\" alt=\"\"></p>\n<p>你本是一个肉体，是什么驱使你前行。</p>\n<p>你生来是一个肉体，<br>三四岁时你有了意识，但还没有自己，不知道自己。</p>\n<p>十四，十五岁，你开始反叛，开始认识到自己，开始追求自己。</p>\n<p>长大了，成年了，你开始寻找自己，问自己：<br>我是谁？我从哪里来？我要去那里？</p>\n<p>在路上，没有谁给过你答案。</p>\n<p>书本，电影，旅行见闻。当你们相遇时，你会去思考，会去寻求答案。</p>\n<p>有那么一段时间，你认为你找到了。</p>\n<p>可当夜深人静，静卧回思，<br>你又会发现，不，那不是的。</p>\n<p>迷迷糊糊中，你又会问起，<br>你本是一团肉体，是什么驱使你前行？</p>\n<p>是爱情，是家庭，是亲人，是兴趣，是理想，是金钱…<br>是房子和车子，是权利，是安全感，是稳定,还是美丽的风景……</p>\n","excerpt":"","more":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_body_and_soul.jpg\" alt=\"\"></p>\n<p>你本是一个肉体，是什么驱使你前行。</p>\n<p>你生来是一个肉体，<br>三四岁时你有了意识，但还没有自己，不知道自己。</p>\n<p>十四，十五岁，你开始反叛，开始认识到自己，开始追求自己。</p>\n<p>长大了，成年了，你开始寻找自己，问自己：<br>我是谁？我从哪里来？我要去那里？</p>\n<p>在路上，没有谁给过你答案。</p>\n<p>书本，电影，旅行见闻。当你们相遇时，你会去思考，会去寻求答案。</p>\n<p>有那么一段时间，你认为你找到了。</p>\n<p>可当夜深人静，静卧回思，<br>你又会发现，不，那不是的。</p>\n<p>迷迷糊糊中，你又会问起，<br>你本是一团肉体，是什么驱使你前行？</p>\n<p>是爱情，是家庭，是亲人，是兴趣，是理想，是金钱…<br>是房子和车子，是权利，是安全感，是稳定,还是美丽的风景……</p>\n"},{"layout":"post","title":"你本是一个肉体，是什么驱使你前行[3]","date":"2017-09-04T11:02:57.000Z","comments":1,"_content":"---\n《大学》\n\n![](/assets/img/daxue.jpg)\n\n大学之道，在明明德，在亲民，在止於至善。\n知止而后有定；定而后能静；静而后能安；安而后能虑；虑而后能得。物有本末；事有终始。知所先后，则近道矣。\n\n古之欲明明德於天下者，先治其国；欲治其国者先齐其家；欲齐其家者先修其身；欲修其身者,先正其心；欲正其心者,先诚其意；欲诚其意者；先致其知；致知在格物。\n物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。\n\n自天子以至於庶人，一是皆以修身为本。其本乱而末治者，否矣； 其所厚者薄，而其所薄者厚，未之有也。此谓知本，此谓知之至也。\n\n<!-- more -->\n\n\n## 王阳明心学视频(浙江大学公开课-董平教授)\n\n[1.导论：王阳明与阳明心学](http://open.163.com/movie/2011/10/F/G/M7GF17HPS_M7GHGQTFG.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[2.心即理：阳明心学的逻辑起点](http://open.163.com/movie/2011/10/5/Q/M7GF17HPS_M7GHH045Q.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[3.知行合一：阳明心学的实践品格](http://open.163.com/movie/2011/10/P/6/M7GF17HPS_M7GHGUSP6.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[4.格物致知：知识论域的实践转向](http://open.163.com/movie/2011/10/Q/8/M7GF17HPS_M7HV73TQ8.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[5.本体与主体性的自我建立](http://open.163.com/movie/2011/10/N/Q/M7GF17HPS_M7IF9HONQ.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[6.本心的自我开显与自我表达](http://open.163.com/movie/2011/10/6/U/M7GF17HPS_M7J1IBS6U.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[7.心外无物：生命境界的无限圆融](http://open.163.com/movie/2011/10/P/B/M7GF17HPS_M7JJ24JPB.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[8.天泉证道“四句教”阳明学派的分化](http://open.163.com/movie/2011/10/P/3/M7GF17HPS_M7K5H57P3.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[9.心体的自我澄明与价值实现](http://open.163.com/movie/2011/10/L/D/M7GF17HPS_M7KNQBKLD.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n","source":"_posts/think_body_and_soul_3.md","raw":"---\nlayout: post\ntitle: \"你本是一个肉体，是什么驱使你前行[3]\"\ndate: 9/4/2017 7:02:57 PM \ncomments: true\ntags: \n\t- 随想 \n\t- 你本是一个肉体，是什么驱使你前行\n\t- 原创\n\t- 王阳明心学\n---\n---\n《大学》\n\n![](/assets/img/daxue.jpg)\n\n大学之道，在明明德，在亲民，在止於至善。\n知止而后有定；定而后能静；静而后能安；安而后能虑；虑而后能得。物有本末；事有终始。知所先后，则近道矣。\n\n古之欲明明德於天下者，先治其国；欲治其国者先齐其家；欲齐其家者先修其身；欲修其身者,先正其心；欲正其心者,先诚其意；欲诚其意者；先致其知；致知在格物。\n物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。\n\n自天子以至於庶人，一是皆以修身为本。其本乱而末治者，否矣； 其所厚者薄，而其所薄者厚，未之有也。此谓知本，此谓知之至也。\n\n<!-- more -->\n\n\n## 王阳明心学视频(浙江大学公开课-董平教授)\n\n[1.导论：王阳明与阳明心学](http://open.163.com/movie/2011/10/F/G/M7GF17HPS_M7GHGQTFG.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[2.心即理：阳明心学的逻辑起点](http://open.163.com/movie/2011/10/5/Q/M7GF17HPS_M7GHH045Q.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[3.知行合一：阳明心学的实践品格](http://open.163.com/movie/2011/10/P/6/M7GF17HPS_M7GHGUSP6.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[4.格物致知：知识论域的实践转向](http://open.163.com/movie/2011/10/Q/8/M7GF17HPS_M7HV73TQ8.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[5.本体与主体性的自我建立](http://open.163.com/movie/2011/10/N/Q/M7GF17HPS_M7IF9HONQ.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[6.本心的自我开显与自我表达](http://open.163.com/movie/2011/10/6/U/M7GF17HPS_M7J1IBS6U.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[7.心外无物：生命境界的无限圆融](http://open.163.com/movie/2011/10/P/B/M7GF17HPS_M7JJ24JPB.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[8.天泉证道“四句教”阳明学派的分化](http://open.163.com/movie/2011/10/P/3/M7GF17HPS_M7K5H57P3.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n[9.心体的自我澄明与价值实现](http://open.163.com/movie/2011/10/L/D/M7GF17HPS_M7KNQBKLD.html)\n\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n","slug":"think_body_and_soul_3","published":1,"updated":"2019-06-27T08:15:15.347Z","photos":[],"link":"","_id":"cjxfjaeqz000nystgc44sh3e8","content":"<hr>\n<p>《大学》</p>\n<p><img src=\"/assets/img/daxue.jpg\" alt=\"\"></p>\n<p>大学之道，在明明德，在亲民，在止於至善。<br>知止而后有定；定而后能静；静而后能安；安而后能虑；虑而后能得。物有本末；事有终始。知所先后，则近道矣。</p>\n<p>古之欲明明德於天下者，先治其国；欲治其国者先齐其家；欲齐其家者先修其身；欲修其身者,先正其心；欲正其心者,先诚其意；欲诚其意者；先致其知；致知在格物。<br>物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。</p>\n<p>自天子以至於庶人，一是皆以修身为本。其本乱而末治者，否矣； 其所厚者薄，而其所薄者厚，未之有也。此谓知本，此谓知之至也。</p>\n<a id=\"more\"></a>\n<h2 id=\"王阳明心学视频-浙江大学公开课-董平教授\"><a href=\"#王阳明心学视频-浙江大学公开课-董平教授\" class=\"headerlink\" title=\"王阳明心学视频(浙江大学公开课-董平教授)\"></a>王阳明心学视频(浙江大学公开课-董平教授)</h2><p><a href=\"http://open.163.com/movie/2011/10/F/G/M7GF17HPS_M7GHGQTFG.html\" target=\"_blank\" rel=\"external\">1.导论：王阳明与阳明心学</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/5/Q/M7GF17HPS_M7GHH045Q.html\" target=\"_blank\" rel=\"external\">2.心即理：阳明心学的逻辑起点</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/6/M7GF17HPS_M7GHGUSP6.html\" target=\"_blank\" rel=\"external\">3.知行合一：阳明心学的实践品格</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/Q/8/M7GF17HPS_M7HV73TQ8.html\" target=\"_blank\" rel=\"external\">4.格物致知：知识论域的实践转向</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/N/Q/M7GF17HPS_M7IF9HONQ.html\" target=\"_blank\" rel=\"external\">5.本体与主体性的自我建立</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/6/U/M7GF17HPS_M7J1IBS6U.html\" target=\"_blank\" rel=\"external\">6.本心的自我开显与自我表达</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/B/M7GF17HPS_M7JJ24JPB.html\" target=\"_blank\" rel=\"external\">7.心外无物：生命境界的无限圆融</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/3/M7GF17HPS_M7K5H57P3.html\" target=\"_blank\" rel=\"external\">8.天泉证道“四句教”阳明学派的分化</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/L/D/M7GF17HPS_M7KNQBKLD.html\" target=\"_blank\" rel=\"external\">9.心体的自我澄明与价值实现</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"wmode\" value=\"transparent\"><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowfullscreen=\"true\" wmode=\"transparent\" allowscriptaccess=\"always\"></object>\n\n","excerpt":"<hr>\n<p>《大学》</p>\n<p><img src=\"/assets/img/daxue.jpg\" alt=\"\"></p>\n<p>大学之道，在明明德，在亲民，在止於至善。<br>知止而后有定；定而后能静；静而后能安；安而后能虑；虑而后能得。物有本末；事有终始。知所先后，则近道矣。</p>\n<p>古之欲明明德於天下者，先治其国；欲治其国者先齐其家；欲齐其家者先修其身；欲修其身者,先正其心；欲正其心者,先诚其意；欲诚其意者；先致其知；致知在格物。<br>物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。</p>\n<p>自天子以至於庶人，一是皆以修身为本。其本乱而末治者，否矣； 其所厚者薄，而其所薄者厚，未之有也。此谓知本，此谓知之至也。</p>","more":"<h2 id=\"王阳明心学视频-浙江大学公开课-董平教授\"><a href=\"#王阳明心学视频-浙江大学公开课-董平教授\" class=\"headerlink\" title=\"王阳明心学视频(浙江大学公开课-董平教授)\"></a>王阳明心学视频(浙江大学公开课-董平教授)</h2><p><a href=\"http://open.163.com/movie/2011/10/F/G/M7GF17HPS_M7GHGQTFG.html\">1.导论：王阳明与阳明心学</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGQTFG-vimg1_ws_126_net//image/snapshot_movie/2011/11/B/S/M7HBBBQBS-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/5/Q/M7GF17HPS_M7GHH045Q.html\">2.心即理：阳明心学的逻辑起点</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHH045Q-vimg1_ws_126_net//image/snapshot_movie/2011/11/E/U/M7HBBLCEU-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/6/M7GF17HPS_M7GHGUSP6.html\">3.知行合一：阳明心学的实践品格</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7GHGUSP6-vimg1_ws_126_net//image/snapshot_movie/2011/11/O/E/M7HBBVSOE-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/Q/8/M7GF17HPS_M7HV73TQ8.html\">4.格物致知：知识论域的实践转向</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7HV73TQ8-vimg1_ws_126_net//image/snapshot_movie/2011/11/2/N/M7HV73N2N-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/N/Q/M7GF17HPS_M7IF9HONQ.html\">5.本体与主体性的自我建立</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7IF9HONQ-vimg1_ws_126_net//image/snapshot_movie/2011/11/6/2/M7IHDBT62-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/6/U/M7GF17HPS_M7J1IBS6U.html\">6.本心的自我开显与自我表达</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7J1IBS6U-vimg1_ws_126_net//image/snapshot_movie/2011/11/G/N/M7J3IIBGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/B/M7GF17HPS_M7JJ24JPB.html\">7.心外无物：生命境界的无限圆融</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7JJ24JPB-vimg1_ws_126_net//image/snapshot_movie/2011/12/8/U/M7JJ24G8U-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/P/3/M7GF17HPS_M7K5H57P3.html\">8.天泉证道“四句教”阳明学派的分化</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7K5H57P3-vimg1_ws_126_net//image/snapshot_movie/2011/12/G/N/M7K5H4SGN-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>\n\n<p><a href=\"http://open.163.com/movie/2011/10/L/D/M7GF17HPS_M7KNQBKLD.html\">9.心体的自我澄明与价值实现</a></p>\n<object width=\"640\" height=\"360\"><param name=\"movie\" value=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\"></param><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://swf.ws.126.net/openplayer/v01/-0-2_M7GF17HPS_M7KNQBKLD-vimg1_ws_126_net//image/snapshot_movie/2011/12/O/3/M7KNUJ1O3-1430711943278.swf\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"360\" allowFullScreen=\"true\" wmode=\"transparent\" allowScriptAccess=\"always\"></embed></object>"},{"layout":"post","title":"你本是一个肉体，是什么驱使你前行[2]","date":"2017-08-21T08:58:49.000Z","comments":1,"_content":"---\n文/笔沫拾光\n\n![](/assets/img/think_body_and_soul.jpg)\n\n从出生到五岁，你童年无忌，\n尽情玩耍，想哭就哭，想笑就笑。\n\n五岁到十二岁，你在小学，\n开始谨记：好好学习，天天向上。\n\n十二岁到十五岁，你在初中，\n尽情游戏，忘乎天地，但也没忘，好好学习，上高中。\n\n十五岁到十九岁，你在高中，\n远离游戏，废寝忘食，决战高考，梦想大学。\n\n十九岁到二十三岁，你在大学，\n努力学习，奋战自习室，为了未来，为了工作。\n\n二十三岁到现在，你毕业，工作。\n我却想问：你本是一个肉体，是什么驱使你前行？\n\n\n\n","source":"_posts/think_body_and_soul_2.md","raw":"---\nlayout: post\ntitle: \"你本是一个肉体，是什么驱使你前行[2]\"\ndate: 8/21/2017 4:58:49 PM \ncomments: true\ntags: \n\t- 随想 \n\t- 你本是一个肉体，是什么驱使你前行\n\t- 原创\n\t- 笔沫拾光\n---\n---\n文/笔沫拾光\n\n![](/assets/img/think_body_and_soul.jpg)\n\n从出生到五岁，你童年无忌，\n尽情玩耍，想哭就哭，想笑就笑。\n\n五岁到十二岁，你在小学，\n开始谨记：好好学习，天天向上。\n\n十二岁到十五岁，你在初中，\n尽情游戏，忘乎天地，但也没忘，好好学习，上高中。\n\n十五岁到十九岁，你在高中，\n远离游戏，废寝忘食，决战高考，梦想大学。\n\n十九岁到二十三岁，你在大学，\n努力学习，奋战自习室，为了未来，为了工作。\n\n二十三岁到现在，你毕业，工作。\n我却想问：你本是一个肉体，是什么驱使你前行？\n\n\n\n","slug":"think_body_and_soul_2","published":1,"updated":"2019-06-27T08:15:15.346Z","photos":[],"link":"","_id":"cjxfjaer0000qystge9egc2v9","content":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_body_and_soul.jpg\" alt=\"\"></p>\n<p>从出生到五岁，你童年无忌，<br>尽情玩耍，想哭就哭，想笑就笑。</p>\n<p>五岁到十二岁，你在小学，<br>开始谨记：好好学习，天天向上。</p>\n<p>十二岁到十五岁，你在初中，<br>尽情游戏，忘乎天地，但也没忘，好好学习，上高中。</p>\n<p>十五岁到十九岁，你在高中，<br>远离游戏，废寝忘食，决战高考，梦想大学。</p>\n<p>十九岁到二十三岁，你在大学，<br>努力学习，奋战自习室，为了未来，为了工作。</p>\n<p>二十三岁到现在，你毕业，工作。<br>我却想问：你本是一个肉体，是什么驱使你前行？</p>\n","excerpt":"","more":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_body_and_soul.jpg\" alt=\"\"></p>\n<p>从出生到五岁，你童年无忌，<br>尽情玩耍，想哭就哭，想笑就笑。</p>\n<p>五岁到十二岁，你在小学，<br>开始谨记：好好学习，天天向上。</p>\n<p>十二岁到十五岁，你在初中，<br>尽情游戏，忘乎天地，但也没忘，好好学习，上高中。</p>\n<p>十五岁到十九岁，你在高中，<br>远离游戏，废寝忘食，决战高考，梦想大学。</p>\n<p>十九岁到二十三岁，你在大学，<br>努力学习，奋战自习室，为了未来，为了工作。</p>\n<p>二十三岁到现在，你毕业，工作。<br>我却想问：你本是一个肉体，是什么驱使你前行？</p>\n"},{"layout":"post","title":"中国历史","date":"2017-05-10T06:21:44.000Z","comments":1,"_content":"---\n\n三皇五帝始，尧舜禹相传。夏商与西周，东周分两段。春秋和战国，一统秦两汉。\n三分魏蜀吴，二晋前后延。南北朝并立，隋唐五代传。宋元明清后，皇朝自此完。\n\n-----\n![](/assets/img/think_history_01.png)\n![](/assets/img/think_history_02.png)\n![](/assets/img/think_history_03.png)\n![](/assets/img/think_history_04.png)\n<!-- more -->\n-----\n**1．夏（约前2070-1600年）**\n210万，包括长江以北的湖北，河南，安徽，山东，河北，山西，京津和江苏，陕西的一部分\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051149384529020.jpg)\n\n** 2．商（约前1600-1046年）**\n320万，除上述土地外，还包括陕西江苏的剩余土地，辽宁，甘肃，湖南，浙江，重庆和四川的一部分\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051150139423592.jpg)\n\n**3．周（约前1046-221年）**\n340万，基本与商差不多，在辽宁和重庆四川的范围更大\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051151160306678.jpg)\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152037973888.jpg)\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152261219492.jpg)\n\n**4．秦（前221-207年）**\n360万，还包括整个宁夏并包括重庆全部和更大的几乎整个四川的土地，东晋各诸侯国的国土总合与西周基本相同\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152595834055.jpg)\n\n**5．汉（前206-公元220年）**\n在两汉最顶盛的时代，由西汉武帝和后人西汉宣帝、东汉光武帝、东汉明帝打下了惊人的国土。现在朝鲜的几乎全部，越南的北方。大半的新疆，包括中亚相当大的土地都在汉的西域都护府范围中，还有全部的四川和云贵的大片土地，辽宁的全部土地也在汉治下，和吉林的一片土地，内蒙也有相当大的土地在汉的治内，估约国土为1040万平方公里。东汉后期出现严重缩水，失去了云贵和内蒙的土地，新疆北部的土地也丧失殆尽，国土应为890万平方公里。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051321524057953.jpg)\n\n**6．三国（220-280年）**\n魏：530万平方公里，所有的长江以北的汉人地区和在新疆甚至中亚的土地，也包括朝鲜的少量土地和内蒙的土地；\n吴：240万平方公里，浙江，江西，福建，广东，海南，广西和越南北方。\n蜀：170万平方公里，湖南，四川，重庆，贵州，云南，和青海的一小部分，缅甸的极北方。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051322266165185.jpg)\n\n**7．晋（265-420年）**\n西晋的国土大小为920万平方公里。在云贵两地上略少于蜀的控制，在越南和朝鲜的土地缩小了。但略增加了内蒙的土地。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323111394665.jpg)\n\n\n**8．五胡十六国（304-439年）**\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323282052059.jpg)\n\n**9．南北朝（420-581年）**\n国土总合约为935万平方公里，增加了几乎所有剩余的内蒙和部分外蒙的土地\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051324030096475.jpg)\n\n**10．隋（581-618年）**\n国土为840万平方公里，突厥占领了甘肃和宁夏相当大的土地，云南和贵州也正走向独立，丧失了所有在越南和朝鲜的国土\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325135214460.jpg)\n\n**11．唐（618-907年）**\n强盛时的唐国土大的非常惊人，比现在中国少黑龙江和西藏与云南，多了中亚的大片土地，大半个蒙古国和俄贝加尔湖，共1240万平方公里，在数十年后竟缩为1030万平方公里，安史之乱后更是缩为800万平方公里，可谓史上巨大的缩水。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325444403275.jpg)\n\n**12．五代十国（907-979）**\n国家太多，地图略\n\n**13．宋（960-1179年）**\n国土为460万平方公里，与现在中国比没有新疆，甘肃，宁夏，内蒙，整个东北三省，青海和西藏，云贵和台湾。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326097595854.jpg)\n\n**12．元（1206-1368年）**\n1680万平方公里，马克思列宁毛泽东都视其是中国的朝代，忽必烈也自称是中国之主。国土包括整个中国和蒙古，和俄罗斯西伯利亚的大片土地，当是中国古代史上的第一\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326277464631.jpg)\n\n**13．明（1368-1644年）**\n国土最大时，比现在少一小半西藏和大半新疆，内蒙古全部和东三省小半土地，俄罗斯极少土地。共710万平方公里。后来大为缩水，丧失西藏新疆和东北台湾，到灭亡时只剩下350万平方公里。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326510684659.jpg)\n\n**14．清（1616-1911年）**\n国土1310万平方公里，整个中国和外蒙和俄罗斯及中亚的一些土地，论大小算是中国各朝代第二。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051327201782867.jpg)\n\n\n\n# 参考文献\n[中国历史朝代顺序表](http://www.diyifanwen.com/tool/lishichaodai/126100035061238.html)\n[中国各朝代历史地图](http://lishi.100xuexi.com/view/trend/20151205/288371.html)\n[世界历史发展视频](http://img1.cache.netease.com/flvplayer081128/~false~0085_V6T2A4508~vimg2.ws.126.net/image/snapshot/2011/2/0/9/V6T2A4509~.swf)\n\n\n\n","source":"_posts/think_china_history_map.md","raw":"---\nlayout: post\ntitle: \"中国历史\"\ndate: 5/10/2017 2:21:44 PM  \ncomments: true\ntags: \n\t- 随想 \n\t- 中国历史\n---\n---\n\n三皇五帝始，尧舜禹相传。夏商与西周，东周分两段。春秋和战国，一统秦两汉。\n三分魏蜀吴，二晋前后延。南北朝并立，隋唐五代传。宋元明清后，皇朝自此完。\n\n-----\n![](/assets/img/think_history_01.png)\n![](/assets/img/think_history_02.png)\n![](/assets/img/think_history_03.png)\n![](/assets/img/think_history_04.png)\n<!-- more -->\n-----\n**1．夏（约前2070-1600年）**\n210万，包括长江以北的湖北，河南，安徽，山东，河北，山西，京津和江苏，陕西的一部分\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051149384529020.jpg)\n\n** 2．商（约前1600-1046年）**\n320万，除上述土地外，还包括陕西江苏的剩余土地，辽宁，甘肃，湖南，浙江，重庆和四川的一部分\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051150139423592.jpg)\n\n**3．周（约前1046-221年）**\n340万，基本与商差不多，在辽宁和重庆四川的范围更大\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051151160306678.jpg)\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152037973888.jpg)\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152261219492.jpg)\n\n**4．秦（前221-207年）**\n360万，还包括整个宁夏并包括重庆全部和更大的几乎整个四川的土地，东晋各诸侯国的国土总合与西周基本相同\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152595834055.jpg)\n\n**5．汉（前206-公元220年）**\n在两汉最顶盛的时代，由西汉武帝和后人西汉宣帝、东汉光武帝、东汉明帝打下了惊人的国土。现在朝鲜的几乎全部，越南的北方。大半的新疆，包括中亚相当大的土地都在汉的西域都护府范围中，还有全部的四川和云贵的大片土地，辽宁的全部土地也在汉治下，和吉林的一片土地，内蒙也有相当大的土地在汉的治内，估约国土为1040万平方公里。东汉后期出现严重缩水，失去了云贵和内蒙的土地，新疆北部的土地也丧失殆尽，国土应为890万平方公里。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051321524057953.jpg)\n\n**6．三国（220-280年）**\n魏：530万平方公里，所有的长江以北的汉人地区和在新疆甚至中亚的土地，也包括朝鲜的少量土地和内蒙的土地；\n吴：240万平方公里，浙江，江西，福建，广东，海南，广西和越南北方。\n蜀：170万平方公里，湖南，四川，重庆，贵州，云南，和青海的一小部分，缅甸的极北方。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051322266165185.jpg)\n\n**7．晋（265-420年）**\n西晋的国土大小为920万平方公里。在云贵两地上略少于蜀的控制，在越南和朝鲜的土地缩小了。但略增加了内蒙的土地。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323111394665.jpg)\n\n\n**8．五胡十六国（304-439年）**\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323282052059.jpg)\n\n**9．南北朝（420-581年）**\n国土总合约为935万平方公里，增加了几乎所有剩余的内蒙和部分外蒙的土地\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051324030096475.jpg)\n\n**10．隋（581-618年）**\n国土为840万平方公里，突厥占领了甘肃和宁夏相当大的土地，云南和贵州也正走向独立，丧失了所有在越南和朝鲜的国土\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325135214460.jpg)\n\n**11．唐（618-907年）**\n强盛时的唐国土大的非常惊人，比现在中国少黑龙江和西藏与云南，多了中亚的大片土地，大半个蒙古国和俄贝加尔湖，共1240万平方公里，在数十年后竟缩为1030万平方公里，安史之乱后更是缩为800万平方公里，可谓史上巨大的缩水。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325444403275.jpg)\n\n**12．五代十国（907-979）**\n国家太多，地图略\n\n**13．宋（960-1179年）**\n国土为460万平方公里，与现在中国比没有新疆，甘肃，宁夏，内蒙，整个东北三省，青海和西藏，云贵和台湾。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326097595854.jpg)\n\n**12．元（1206-1368年）**\n1680万平方公里，马克思列宁毛泽东都视其是中国的朝代，忽必烈也自称是中国之主。国土包括整个中国和蒙古，和俄罗斯西伯利亚的大片土地，当是中国古代史上的第一\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326277464631.jpg)\n\n**13．明（1368-1644年）**\n国土最大时，比现在少一小半西藏和大半新疆，内蒙古全部和东三省小半土地，俄罗斯极少土地。共710万平方公里。后来大为缩水，丧失西藏新疆和东北台湾，到灭亡时只剩下350万平方公里。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326510684659.jpg)\n\n**14．清（1616-1911年）**\n国土1310万平方公里，整个中国和外蒙和俄罗斯及中亚的一些土地，论大小算是中国各朝代第二。\n\n![](http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051327201782867.jpg)\n\n\n\n# 参考文献\n[中国历史朝代顺序表](http://www.diyifanwen.com/tool/lishichaodai/126100035061238.html)\n[中国各朝代历史地图](http://lishi.100xuexi.com/view/trend/20151205/288371.html)\n[世界历史发展视频](http://img1.cache.netease.com/flvplayer081128/~false~0085_V6T2A4508~vimg2.ws.126.net/image/snapshot/2011/2/0/9/V6T2A4509~.swf)\n\n\n\n","slug":"think_china_history_map","published":1,"updated":"2019-06-27T08:15:15.349Z","photos":[],"link":"","_id":"cjxfjaer1000systgyyhsn7bi","content":"<hr>\n<p>三皇五帝始，尧舜禹相传。夏商与西周，东周分两段。春秋和战国，一统秦两汉。<br>三分魏蜀吴，二晋前后延。南北朝并立，隋唐五代传。宋元明清后，皇朝自此完。</p>\n<hr>\n<p><img src=\"/assets/img/think_history_01.png\" alt=\"\"><br><img src=\"/assets/img/think_history_02.png\" alt=\"\"><br><img src=\"/assets/img/think_history_03.png\" alt=\"\"><br><img src=\"/assets/img/think_history_04.png\" alt=\"\"></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><p><strong>1．夏（约前2070-1600年）</strong><br>210万，包括长江以北的湖北，河南，安徽，山东，河北，山西，京津和江苏，陕西的一部分</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051149384529020.jpg\" alt=\"\"></p>\n<p><strong> 2．商（约前1600-1046年）</strong><br>320万，除上述土地外，还包括陕西江苏的剩余土地，辽宁，甘肃，湖南，浙江，重庆和四川的一部分</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051150139423592.jpg\" alt=\"\"></p>\n<p><strong>3．周（约前1046-221年）</strong><br>340万，基本与商差不多，在辽宁和重庆四川的范围更大</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051151160306678.jpg\" alt=\"\"><br><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152037973888.jpg\" alt=\"\"><br><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152261219492.jpg\" alt=\"\"></p>\n<p><strong>4．秦（前221-207年）</strong><br>360万，还包括整个宁夏并包括重庆全部和更大的几乎整个四川的土地，东晋各诸侯国的国土总合与西周基本相同</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152595834055.jpg\" alt=\"\"></p>\n<p><strong>5．汉（前206-公元220年）</strong><br>在两汉最顶盛的时代，由西汉武帝和后人西汉宣帝、东汉光武帝、东汉明帝打下了惊人的国土。现在朝鲜的几乎全部，越南的北方。大半的新疆，包括中亚相当大的土地都在汉的西域都护府范围中，还有全部的四川和云贵的大片土地，辽宁的全部土地也在汉治下，和吉林的一片土地，内蒙也有相当大的土地在汉的治内，估约国土为1040万平方公里。东汉后期出现严重缩水，失去了云贵和内蒙的土地，新疆北部的土地也丧失殆尽，国土应为890万平方公里。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051321524057953.jpg\" alt=\"\"></p>\n<p><strong>6．三国（220-280年）</strong><br>魏：530万平方公里，所有的长江以北的汉人地区和在新疆甚至中亚的土地，也包括朝鲜的少量土地和内蒙的土地；<br>吴：240万平方公里，浙江，江西，福建，广东，海南，广西和越南北方。<br>蜀：170万平方公里，湖南，四川，重庆，贵州，云南，和青海的一小部分，缅甸的极北方。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051322266165185.jpg\" alt=\"\"></p>\n<p><strong>7．晋（265-420年）</strong><br>西晋的国土大小为920万平方公里。在云贵两地上略少于蜀的控制，在越南和朝鲜的土地缩小了。但略增加了内蒙的土地。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323111394665.jpg\" alt=\"\"></p>\n<p><strong>8．五胡十六国（304-439年）</strong></p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323282052059.jpg\" alt=\"\"></p>\n<p><strong>9．南北朝（420-581年）</strong><br>国土总合约为935万平方公里，增加了几乎所有剩余的内蒙和部分外蒙的土地</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051324030096475.jpg\" alt=\"\"></p>\n<p><strong>10．隋（581-618年）</strong><br>国土为840万平方公里，突厥占领了甘肃和宁夏相当大的土地，云南和贵州也正走向独立，丧失了所有在越南和朝鲜的国土</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325135214460.jpg\" alt=\"\"></p>\n<p><strong>11．唐（618-907年）</strong><br>强盛时的唐国土大的非常惊人，比现在中国少黑龙江和西藏与云南，多了中亚的大片土地，大半个蒙古国和俄贝加尔湖，共1240万平方公里，在数十年后竟缩为1030万平方公里，安史之乱后更是缩为800万平方公里，可谓史上巨大的缩水。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325444403275.jpg\" alt=\"\"></p>\n<p><strong>12．五代十国（907-979）</strong><br>国家太多，地图略</p>\n<p><strong>13．宋（960-1179年）</strong><br>国土为460万平方公里，与现在中国比没有新疆，甘肃，宁夏，内蒙，整个东北三省，青海和西藏，云贵和台湾。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326097595854.jpg\" alt=\"\"></p>\n<p><strong>12．元（1206-1368年）</strong><br>1680万平方公里，马克思列宁毛泽东都视其是中国的朝代，忽必烈也自称是中国之主。国土包括整个中国和蒙古，和俄罗斯西伯利亚的大片土地，当是中国古代史上的第一</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326277464631.jpg\" alt=\"\"></p>\n<p><strong>13．明（1368-1644年）</strong><br>国土最大时，比现在少一小半西藏和大半新疆，内蒙古全部和东三省小半土地，俄罗斯极少土地。共710万平方公里。后来大为缩水，丧失西藏新疆和东北台湾，到灭亡时只剩下350万平方公里。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326510684659.jpg\" alt=\"\"></p>\n<p><strong>14．清（1616-1911年）</strong><br>国土1310万平方公里，整个中国和外蒙和俄罗斯及中亚的一些土地，论大小算是中国各朝代第二。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051327201782867.jpg\" alt=\"\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://www.diyifanwen.com/tool/lishichaodai/126100035061238.html\" target=\"_blank\" rel=\"external\">中国历史朝代顺序表</a><br><a href=\"http://lishi.100xuexi.com/view/trend/20151205/288371.html\" target=\"_blank\" rel=\"external\">中国各朝代历史地图</a><br><a href=\"http://img1.cache.netease.com/flvplayer081128/~false~0085_V6T2A4508~vimg2.ws.126.net/image/snapshot/2011/2/0/9/V6T2A4509~.swf\" target=\"_blank\" rel=\"external\">世界历史发展视频</a></p>\n","excerpt":"<hr>\n<p>三皇五帝始，尧舜禹相传。夏商与西周，东周分两段。春秋和战国，一统秦两汉。<br>三分魏蜀吴，二晋前后延。南北朝并立，隋唐五代传。宋元明清后，皇朝自此完。</p>\n<hr>\n<p><img src=\"/assets/img/think_history_01.png\" alt=\"\"><br><img src=\"/assets/img/think_history_02.png\" alt=\"\"><br><img src=\"/assets/img/think_history_03.png\" alt=\"\"><br><img src=\"/assets/img/think_history_04.png\" alt=\"\"></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><p><strong>1．夏（约前2070-1600年）</strong><br>210万，包括长江以北的湖北，河南，安徽，山东，河北，山西，京津和江苏，陕西的一部分</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051149384529020.jpg\" alt=\"\"></p>\n<p><strong> 2．商（约前1600-1046年）</strong><br>320万，除上述土地外，还包括陕西江苏的剩余土地，辽宁，甘肃，湖南，浙江，重庆和四川的一部分</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051150139423592.jpg\" alt=\"\"></p>\n<p><strong>3．周（约前1046-221年）</strong><br>340万，基本与商差不多，在辽宁和重庆四川的范围更大</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051151160306678.jpg\" alt=\"\"><br><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152037973888.jpg\" alt=\"\"><br><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152261219492.jpg\" alt=\"\"></p>\n<p><strong>4．秦（前221-207年）</strong><br>360万，还包括整个宁夏并包括重庆全部和更大的几乎整个四川的土地，东晋各诸侯国的国土总合与西周基本相同</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051152595834055.jpg\" alt=\"\"></p>\n<p><strong>5．汉（前206-公元220年）</strong><br>在两汉最顶盛的时代，由西汉武帝和后人西汉宣帝、东汉光武帝、东汉明帝打下了惊人的国土。现在朝鲜的几乎全部，越南的北方。大半的新疆，包括中亚相当大的土地都在汉的西域都护府范围中，还有全部的四川和云贵的大片土地，辽宁的全部土地也在汉治下，和吉林的一片土地，内蒙也有相当大的土地在汉的治内，估约国土为1040万平方公里。东汉后期出现严重缩水，失去了云贵和内蒙的土地，新疆北部的土地也丧失殆尽，国土应为890万平方公里。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051321524057953.jpg\" alt=\"\"></p>\n<p><strong>6．三国（220-280年）</strong><br>魏：530万平方公里，所有的长江以北的汉人地区和在新疆甚至中亚的土地，也包括朝鲜的少量土地和内蒙的土地；<br>吴：240万平方公里，浙江，江西，福建，广东，海南，广西和越南北方。<br>蜀：170万平方公里，湖南，四川，重庆，贵州，云南，和青海的一小部分，缅甸的极北方。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051322266165185.jpg\" alt=\"\"></p>\n<p><strong>7．晋（265-420年）</strong><br>西晋的国土大小为920万平方公里。在云贵两地上略少于蜀的控制，在越南和朝鲜的土地缩小了。但略增加了内蒙的土地。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323111394665.jpg\" alt=\"\"></p>\n<p><strong>8．五胡十六国（304-439年）</strong></p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051323282052059.jpg\" alt=\"\"></p>\n<p><strong>9．南北朝（420-581年）</strong><br>国土总合约为935万平方公里，增加了几乎所有剩余的内蒙和部分外蒙的土地</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051324030096475.jpg\" alt=\"\"></p>\n<p><strong>10．隋（581-618年）</strong><br>国土为840万平方公里，突厥占领了甘肃和宁夏相当大的土地，云南和贵州也正走向独立，丧失了所有在越南和朝鲜的国土</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325135214460.jpg\" alt=\"\"></p>\n<p><strong>11．唐（618-907年）</strong><br>强盛时的唐国土大的非常惊人，比现在中国少黑龙江和西藏与云南，多了中亚的大片土地，大半个蒙古国和俄贝加尔湖，共1240万平方公里，在数十年后竟缩为1030万平方公里，安史之乱后更是缩为800万平方公里，可谓史上巨大的缩水。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051325444403275.jpg\" alt=\"\"></p>\n<p><strong>12．五代十国（907-979）</strong><br>国家太多，地图略</p>\n<p><strong>13．宋（960-1179年）</strong><br>国土为460万平方公里，与现在中国比没有新疆，甘肃，宁夏，内蒙，整个东北三省，青海和西藏，云贵和台湾。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326097595854.jpg\" alt=\"\"></p>\n<p><strong>12．元（1206-1368年）</strong><br>1680万平方公里，马克思列宁毛泽东都视其是中国的朝代，忽必烈也自称是中国之主。国土包括整个中国和蒙古，和俄罗斯西伯利亚的大片土地，当是中国古代史上的第一</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326277464631.jpg\" alt=\"\"></p>\n<p><strong>13．明（1368-1644年）</strong><br>国土最大时，比现在少一小半西藏和大半新疆，内蒙古全部和东三省小半土地，俄罗斯极少土地。共710万平方公里。后来大为缩水，丧失西藏新疆和东北台湾，到灭亡时只剩下350万平方公里。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051326510684659.jpg\" alt=\"\"></p>\n<p><strong>14．清（1616-1911年）</strong><br>国土1310万平方公里，整个中国和外蒙和俄罗斯及中亚的一些土地，论大小算是中国各朝代第二。</p>\n<p><img src=\"http://file.100xuexi.com/XXSub/MatUpPT/Image/201512051327201782867.jpg\" alt=\"\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://www.diyifanwen.com/tool/lishichaodai/126100035061238.html\">中国历史朝代顺序表</a><br><a href=\"http://lishi.100xuexi.com/view/trend/20151205/288371.html\">中国各朝代历史地图</a><br><a href=\"http://img1.cache.netease.com/flvplayer081128/~false~0085_V6T2A4508~vimg2.ws.126.net/image/snapshot/2011/2/0/9/V6T2A4509~.swf\">世界历史发展视频</a></p>"},{"layout":"post","title":"执着的人是幸福的","date":"2017-08-11T02:04:50.000Z","comments":1,"_content":"---\n文/郭川\n\n![](/assets/img/think_guochuan_article.jpg)\n\n今天是我完成单人不间断环球航行上岸两周年的日子。\n\n在我上岸后，我接受了很多媒体的采访。他们都会问我同一个问题，就是你为什么要做这样一个挑战。虽然大部分人对我做的事情表示钦佩，但是也会有人对我的冒险表示不理解，认为我太自我。\n\n如果我是一个法国人或者英国人，我不会遇到这样的问题，更多的人可能会对我如何完成这样的挑战的细节感兴趣。\n<!-- more -->\n\n事实上，从你为什么要做这件事，到你如何做到这样事，问问题的角度不同，而观念之间的距离却是一个几十年的差距。\n\n在过去的20年，我们在物质上的进步可谓神速，然而精神上的追求却似乎陷入了迷茫和困惑。\n\n2013年5月10日，正在美国旧金山参加美洲杯帆船赛训练的瑞典船队阿特米斯号意外倾覆，船上北京奥运会帆船星级赛冠军英国人安德鲁-辛普森不幸身亡。36岁的辛普森是两枚奥运奖牌得主，除北京奥运金牌外，他还在2012年的伦敦奥运会上获得一枚银牌。国际奥委会主席罗格当年曾代表比利时参加过奥运会帆船比赛，他在一份声明中说：“辛普森是一位非常有成就的帆船运动员和奥运选手，他是在对帆船运动的激情的追求中离世的。”\n\n独立的思想，自由的精神，始终是我追求的一个境界。\n\n从我的履历看，我与常人的想法并没有什么不同：获得北京航空航天大学飞行器控制专业硕士学位，我有自己的学术追求；考取北大光华管理学院，我也有向职业经理人跃升的职业规划。如果不是因为帆船，或许在我接下来的个人简历上，会写上某某公司总经理，首席执行官之类的头衔。\n\n然而，突然有一天，这种单调的生活让我厌倦，我开始拼命拓展生命的外延，因此我去学开滑翔机、学习潜水、学习滑雪……用一切可能的方式挑战自我的极限，用常人难以想象的意志力和“与年龄不符”的热情疯狂填充自己生命中的空白。\n\n应该说，是帆船改变了我的后半生。感谢帆船，让我自由的灵魂得以释放，而我放荡不羁的内心也找到了皈依的地方。十五年来的帆船生活，让我对人生有了全新的思考，但这一切都要基于一个科学的态度和方法！\n\n有人说中国人传统，习惯沿着父母或者社会铺就或者认可的人生轨迹前行，在与内心深处那个真实的自我纠结多年之后,我没有选择背叛梦想，背叛个性。在这个传统的循规蹈矩的社会，我的所做所为更像是个另类：放弃富足的生活和成功的事业，投身于自己热衷的充满风险和挑战的高危竞技活动，而这一切，除了帆船的魅力，就是因为忠实于自我的勇气。\n\n我在法国训练的这几年，生活非常简单。每天吃的东西都是千篇一律，我的团队到法国来看我的训练，非常吃惊。而我却感觉不到是在吃苦。因为我非常享受这个过程，这种做自己喜欢的事情，全情投入的感觉。\n\n有人说中国人保守，什么年龄做什么事情，我已过不惑之年，似乎应该循规蹈矩。但是在我看来，人生不应是一条由窄变宽、由急变缓的河流，更应该像一条在崇山峻岭间奔腾的小溪，时而近乎枯竭，时而一泻千里，总之你不会知道在下一个弯口会出现怎样的景致和故事，人生本该立体而多彩。\n\n我也想对所有心怀梦想的人说：我今年50岁，十年前开始改变自己的人生，只要想改变，什么时候都不算晚。只要内心保留住真实的自我，保留住那份对生活的执着。\n\n茫茫大海，漫无边际，在长达数月的航行中，我需要忍受着孤独、抑郁和恐惧的煎熬，我的冒险行为，在常人看来无异于“疯子”。而我和别人的不同就是多了一些执着。所谓执着，就是不怕吃苦，不怕前面是未知还要把它当做追求的目标。我认为我是一个幸福的人，因为执着，我成就了我的梦想。\n\n好奇与冒险本来就是人类与生俱来的品性，是人类进步的优良基因，我不过遵从了这种本性的召唤，回归真实的自我。\n\n希望不久的将来，中国人在精神上的进步会像物质上的增长速度一样快，也希望我的所作所能激励更多的中国人，走向海洋，勇于冒险，不要轻易被安逸的生活所困，让我们共同努力，重塑中国人的民族精神！\n","source":"_posts/think_guochuan_article.md","raw":"---\nlayout: post\ntitle: \"执着的人是幸福的\"\ndate: 8/11/2017 10:04:50 AM \ncomments: true\ntags: \n\t- 随想\n\t- 演讲\n\t- 执着的人是幸福的\n\t- 郭川\n---\n---\n文/郭川\n\n![](/assets/img/think_guochuan_article.jpg)\n\n今天是我完成单人不间断环球航行上岸两周年的日子。\n\n在我上岸后，我接受了很多媒体的采访。他们都会问我同一个问题，就是你为什么要做这样一个挑战。虽然大部分人对我做的事情表示钦佩，但是也会有人对我的冒险表示不理解，认为我太自我。\n\n如果我是一个法国人或者英国人，我不会遇到这样的问题，更多的人可能会对我如何完成这样的挑战的细节感兴趣。\n<!-- more -->\n\n事实上，从你为什么要做这件事，到你如何做到这样事，问问题的角度不同，而观念之间的距离却是一个几十年的差距。\n\n在过去的20年，我们在物质上的进步可谓神速，然而精神上的追求却似乎陷入了迷茫和困惑。\n\n2013年5月10日，正在美国旧金山参加美洲杯帆船赛训练的瑞典船队阿特米斯号意外倾覆，船上北京奥运会帆船星级赛冠军英国人安德鲁-辛普森不幸身亡。36岁的辛普森是两枚奥运奖牌得主，除北京奥运金牌外，他还在2012年的伦敦奥运会上获得一枚银牌。国际奥委会主席罗格当年曾代表比利时参加过奥运会帆船比赛，他在一份声明中说：“辛普森是一位非常有成就的帆船运动员和奥运选手，他是在对帆船运动的激情的追求中离世的。”\n\n独立的思想，自由的精神，始终是我追求的一个境界。\n\n从我的履历看，我与常人的想法并没有什么不同：获得北京航空航天大学飞行器控制专业硕士学位，我有自己的学术追求；考取北大光华管理学院，我也有向职业经理人跃升的职业规划。如果不是因为帆船，或许在我接下来的个人简历上，会写上某某公司总经理，首席执行官之类的头衔。\n\n然而，突然有一天，这种单调的生活让我厌倦，我开始拼命拓展生命的外延，因此我去学开滑翔机、学习潜水、学习滑雪……用一切可能的方式挑战自我的极限，用常人难以想象的意志力和“与年龄不符”的热情疯狂填充自己生命中的空白。\n\n应该说，是帆船改变了我的后半生。感谢帆船，让我自由的灵魂得以释放，而我放荡不羁的内心也找到了皈依的地方。十五年来的帆船生活，让我对人生有了全新的思考，但这一切都要基于一个科学的态度和方法！\n\n有人说中国人传统，习惯沿着父母或者社会铺就或者认可的人生轨迹前行，在与内心深处那个真实的自我纠结多年之后,我没有选择背叛梦想，背叛个性。在这个传统的循规蹈矩的社会，我的所做所为更像是个另类：放弃富足的生活和成功的事业，投身于自己热衷的充满风险和挑战的高危竞技活动，而这一切，除了帆船的魅力，就是因为忠实于自我的勇气。\n\n我在法国训练的这几年，生活非常简单。每天吃的东西都是千篇一律，我的团队到法国来看我的训练，非常吃惊。而我却感觉不到是在吃苦。因为我非常享受这个过程，这种做自己喜欢的事情，全情投入的感觉。\n\n有人说中国人保守，什么年龄做什么事情，我已过不惑之年，似乎应该循规蹈矩。但是在我看来，人生不应是一条由窄变宽、由急变缓的河流，更应该像一条在崇山峻岭间奔腾的小溪，时而近乎枯竭，时而一泻千里，总之你不会知道在下一个弯口会出现怎样的景致和故事，人生本该立体而多彩。\n\n我也想对所有心怀梦想的人说：我今年50岁，十年前开始改变自己的人生，只要想改变，什么时候都不算晚。只要内心保留住真实的自我，保留住那份对生活的执着。\n\n茫茫大海，漫无边际，在长达数月的航行中，我需要忍受着孤独、抑郁和恐惧的煎熬，我的冒险行为，在常人看来无异于“疯子”。而我和别人的不同就是多了一些执着。所谓执着，就是不怕吃苦，不怕前面是未知还要把它当做追求的目标。我认为我是一个幸福的人，因为执着，我成就了我的梦想。\n\n好奇与冒险本来就是人类与生俱来的品性，是人类进步的优良基因，我不过遵从了这种本性的召唤，回归真实的自我。\n\n希望不久的将来，中国人在精神上的进步会像物质上的增长速度一样快，也希望我的所作所能激励更多的中国人，走向海洋，勇于冒险，不要轻易被安逸的生活所困，让我们共同努力，重塑中国人的民族精神！\n","slug":"think_guochuan_article","published":1,"updated":"2019-06-27T08:15:15.351Z","photos":[],"link":"","_id":"cjxfjaer2000vystghmueey40","content":"<hr>\n<p>文/郭川</p>\n<p><img src=\"/assets/img/think_guochuan_article.jpg\" alt=\"\"></p>\n<p>今天是我完成单人不间断环球航行上岸两周年的日子。</p>\n<p>在我上岸后，我接受了很多媒体的采访。他们都会问我同一个问题，就是你为什么要做这样一个挑战。虽然大部分人对我做的事情表示钦佩，但是也会有人对我的冒险表示不理解，认为我太自我。</p>\n<p>如果我是一个法国人或者英国人，我不会遇到这样的问题，更多的人可能会对我如何完成这样的挑战的细节感兴趣。<br><a id=\"more\"></a></p>\n<p>事实上，从你为什么要做这件事，到你如何做到这样事，问问题的角度不同，而观念之间的距离却是一个几十年的差距。</p>\n<p>在过去的20年，我们在物质上的进步可谓神速，然而精神上的追求却似乎陷入了迷茫和困惑。</p>\n<p>2013年5月10日，正在美国旧金山参加美洲杯帆船赛训练的瑞典船队阿特米斯号意外倾覆，船上北京奥运会帆船星级赛冠军英国人安德鲁-辛普森不幸身亡。36岁的辛普森是两枚奥运奖牌得主，除北京奥运金牌外，他还在2012年的伦敦奥运会上获得一枚银牌。国际奥委会主席罗格当年曾代表比利时参加过奥运会帆船比赛，他在一份声明中说：“辛普森是一位非常有成就的帆船运动员和奥运选手，他是在对帆船运动的激情的追求中离世的。”</p>\n<p>独立的思想，自由的精神，始终是我追求的一个境界。</p>\n<p>从我的履历看，我与常人的想法并没有什么不同：获得北京航空航天大学飞行器控制专业硕士学位，我有自己的学术追求；考取北大光华管理学院，我也有向职业经理人跃升的职业规划。如果不是因为帆船，或许在我接下来的个人简历上，会写上某某公司总经理，首席执行官之类的头衔。</p>\n<p>然而，突然有一天，这种单调的生活让我厌倦，我开始拼命拓展生命的外延，因此我去学开滑翔机、学习潜水、学习滑雪……用一切可能的方式挑战自我的极限，用常人难以想象的意志力和“与年龄不符”的热情疯狂填充自己生命中的空白。</p>\n<p>应该说，是帆船改变了我的后半生。感谢帆船，让我自由的灵魂得以释放，而我放荡不羁的内心也找到了皈依的地方。十五年来的帆船生活，让我对人生有了全新的思考，但这一切都要基于一个科学的态度和方法！</p>\n<p>有人说中国人传统，习惯沿着父母或者社会铺就或者认可的人生轨迹前行，在与内心深处那个真实的自我纠结多年之后,我没有选择背叛梦想，背叛个性。在这个传统的循规蹈矩的社会，我的所做所为更像是个另类：放弃富足的生活和成功的事业，投身于自己热衷的充满风险和挑战的高危竞技活动，而这一切，除了帆船的魅力，就是因为忠实于自我的勇气。</p>\n<p>我在法国训练的这几年，生活非常简单。每天吃的东西都是千篇一律，我的团队到法国来看我的训练，非常吃惊。而我却感觉不到是在吃苦。因为我非常享受这个过程，这种做自己喜欢的事情，全情投入的感觉。</p>\n<p>有人说中国人保守，什么年龄做什么事情，我已过不惑之年，似乎应该循规蹈矩。但是在我看来，人生不应是一条由窄变宽、由急变缓的河流，更应该像一条在崇山峻岭间奔腾的小溪，时而近乎枯竭，时而一泻千里，总之你不会知道在下一个弯口会出现怎样的景致和故事，人生本该立体而多彩。</p>\n<p>我也想对所有心怀梦想的人说：我今年50岁，十年前开始改变自己的人生，只要想改变，什么时候都不算晚。只要内心保留住真实的自我，保留住那份对生活的执着。</p>\n<p>茫茫大海，漫无边际，在长达数月的航行中，我需要忍受着孤独、抑郁和恐惧的煎熬，我的冒险行为，在常人看来无异于“疯子”。而我和别人的不同就是多了一些执着。所谓执着，就是不怕吃苦，不怕前面是未知还要把它当做追求的目标。我认为我是一个幸福的人，因为执着，我成就了我的梦想。</p>\n<p>好奇与冒险本来就是人类与生俱来的品性，是人类进步的优良基因，我不过遵从了这种本性的召唤，回归真实的自我。</p>\n<p>希望不久的将来，中国人在精神上的进步会像物质上的增长速度一样快，也希望我的所作所能激励更多的中国人，走向海洋，勇于冒险，不要轻易被安逸的生活所困，让我们共同努力，重塑中国人的民族精神！</p>\n","excerpt":"<hr>\n<p>文/郭川</p>\n<p><img src=\"/assets/img/think_guochuan_article.jpg\" alt=\"\"></p>\n<p>今天是我完成单人不间断环球航行上岸两周年的日子。</p>\n<p>在我上岸后，我接受了很多媒体的采访。他们都会问我同一个问题，就是你为什么要做这样一个挑战。虽然大部分人对我做的事情表示钦佩，但是也会有人对我的冒险表示不理解，认为我太自我。</p>\n<p>如果我是一个法国人或者英国人，我不会遇到这样的问题，更多的人可能会对我如何完成这样的挑战的细节感兴趣。<br>","more":"</p>\n<p>事实上，从你为什么要做这件事，到你如何做到这样事，问问题的角度不同，而观念之间的距离却是一个几十年的差距。</p>\n<p>在过去的20年，我们在物质上的进步可谓神速，然而精神上的追求却似乎陷入了迷茫和困惑。</p>\n<p>2013年5月10日，正在美国旧金山参加美洲杯帆船赛训练的瑞典船队阿特米斯号意外倾覆，船上北京奥运会帆船星级赛冠军英国人安德鲁-辛普森不幸身亡。36岁的辛普森是两枚奥运奖牌得主，除北京奥运金牌外，他还在2012年的伦敦奥运会上获得一枚银牌。国际奥委会主席罗格当年曾代表比利时参加过奥运会帆船比赛，他在一份声明中说：“辛普森是一位非常有成就的帆船运动员和奥运选手，他是在对帆船运动的激情的追求中离世的。”</p>\n<p>独立的思想，自由的精神，始终是我追求的一个境界。</p>\n<p>从我的履历看，我与常人的想法并没有什么不同：获得北京航空航天大学飞行器控制专业硕士学位，我有自己的学术追求；考取北大光华管理学院，我也有向职业经理人跃升的职业规划。如果不是因为帆船，或许在我接下来的个人简历上，会写上某某公司总经理，首席执行官之类的头衔。</p>\n<p>然而，突然有一天，这种单调的生活让我厌倦，我开始拼命拓展生命的外延，因此我去学开滑翔机、学习潜水、学习滑雪……用一切可能的方式挑战自我的极限，用常人难以想象的意志力和“与年龄不符”的热情疯狂填充自己生命中的空白。</p>\n<p>应该说，是帆船改变了我的后半生。感谢帆船，让我自由的灵魂得以释放，而我放荡不羁的内心也找到了皈依的地方。十五年来的帆船生活，让我对人生有了全新的思考，但这一切都要基于一个科学的态度和方法！</p>\n<p>有人说中国人传统，习惯沿着父母或者社会铺就或者认可的人生轨迹前行，在与内心深处那个真实的自我纠结多年之后,我没有选择背叛梦想，背叛个性。在这个传统的循规蹈矩的社会，我的所做所为更像是个另类：放弃富足的生活和成功的事业，投身于自己热衷的充满风险和挑战的高危竞技活动，而这一切，除了帆船的魅力，就是因为忠实于自我的勇气。</p>\n<p>我在法国训练的这几年，生活非常简单。每天吃的东西都是千篇一律，我的团队到法国来看我的训练，非常吃惊。而我却感觉不到是在吃苦。因为我非常享受这个过程，这种做自己喜欢的事情，全情投入的感觉。</p>\n<p>有人说中国人保守，什么年龄做什么事情，我已过不惑之年，似乎应该循规蹈矩。但是在我看来，人生不应是一条由窄变宽、由急变缓的河流，更应该像一条在崇山峻岭间奔腾的小溪，时而近乎枯竭，时而一泻千里，总之你不会知道在下一个弯口会出现怎样的景致和故事，人生本该立体而多彩。</p>\n<p>我也想对所有心怀梦想的人说：我今年50岁，十年前开始改变自己的人生，只要想改变，什么时候都不算晚。只要内心保留住真实的自我，保留住那份对生活的执着。</p>\n<p>茫茫大海，漫无边际，在长达数月的航行中，我需要忍受着孤独、抑郁和恐惧的煎熬，我的冒险行为，在常人看来无异于“疯子”。而我和别人的不同就是多了一些执着。所谓执着，就是不怕吃苦，不怕前面是未知还要把它当做追求的目标。我认为我是一个幸福的人，因为执着，我成就了我的梦想。</p>\n<p>好奇与冒险本来就是人类与生俱来的品性，是人类进步的优良基因，我不过遵从了这种本性的召唤，回归真实的自我。</p>\n<p>希望不久的将来，中国人在精神上的进步会像物质上的增长速度一样快，也希望我的所作所能激励更多的中国人，走向海洋，勇于冒险，不要轻易被安逸的生活所困，让我们共同努力，重塑中国人的民族精神！</p>"},{"layout":"post","title":"人生的意义","date":"2017-05-10T03:09:26.000Z","comments":1,"_content":"---\n文/笔沫拾光\n\n![](/assets/img/think_life_meaningful.jpg)\n\n如果你问我,人生有啥意义？\n我会说：人生毫无意义，所谓的人生意义需要自己去下定义，自己去寻找属于自己的人生意义。\n\n人一生很短暂，平均也就八十多个春夏秋冬，也就三万多个小时；\n这一生，你想要怎样过活，必须由你自己来决定。\n\n父母，亲人，他们也都不是你自己；\n他们的话，始终也只是建议，重点在于你。\n\n你可以采纳吸收，也可以弃之不用。\n\n我们每一个人，都是独一无二的，也都可以独立活出自己想要的生活。\n不需要过多的焦虑，跟随自己的内心，你的内心会告诉你答案。\n\n\n\n","source":"_posts/think_life_meaningful.md","raw":"---\nlayout: post\ntitle: \"人生的意义\"\ndate: 5/10/2017 11:09:26 AM  \ncomments: true\ntags: \n\t- 随想 \n\t- 人生的意义\n\t- 原创\n\t- 笔沫拾光\n---\n---\n文/笔沫拾光\n\n![](/assets/img/think_life_meaningful.jpg)\n\n如果你问我,人生有啥意义？\n我会说：人生毫无意义，所谓的人生意义需要自己去下定义，自己去寻找属于自己的人生意义。\n\n人一生很短暂，平均也就八十多个春夏秋冬，也就三万多个小时；\n这一生，你想要怎样过活，必须由你自己来决定。\n\n父母，亲人，他们也都不是你自己；\n他们的话，始终也只是建议，重点在于你。\n\n你可以采纳吸收，也可以弃之不用。\n\n我们每一个人，都是独一无二的，也都可以独立活出自己想要的生活。\n不需要过多的焦虑，跟随自己的内心，你的内心会告诉你答案。\n\n\n\n","slug":"think_life_meaningful","published":1,"updated":"2019-06-27T08:15:15.354Z","photos":[],"link":"","_id":"cjxfjaer3000wystg4eohcr0q","content":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_life_meaningful.jpg\" alt=\"\"></p>\n<p>如果你问我,人生有啥意义？<br>我会说：人生毫无意义，所谓的人生意义需要自己去下定义，自己去寻找属于自己的人生意义。</p>\n<p>人一生很短暂，平均也就八十多个春夏秋冬，也就三万多个小时；<br>这一生，你想要怎样过活，必须由你自己来决定。</p>\n<p>父母，亲人，他们也都不是你自己；<br>他们的话，始终也只是建议，重点在于你。</p>\n<p>你可以采纳吸收，也可以弃之不用。</p>\n<p>我们每一个人，都是独一无二的，也都可以独立活出自己想要的生活。<br>不需要过多的焦虑，跟随自己的内心，你的内心会告诉你答案。</p>\n","excerpt":"","more":"<hr>\n<p>文/笔沫拾光</p>\n<p><img src=\"/assets/img/think_life_meaningful.jpg\" alt=\"\"></p>\n<p>如果你问我,人生有啥意义？<br>我会说：人生毫无意义，所谓的人生意义需要自己去下定义，自己去寻找属于自己的人生意义。</p>\n<p>人一生很短暂，平均也就八十多个春夏秋冬，也就三万多个小时；<br>这一生，你想要怎样过活，必须由你自己来决定。</p>\n<p>父母，亲人，他们也都不是你自己；<br>他们的话，始终也只是建议，重点在于你。</p>\n<p>你可以采纳吸收，也可以弃之不用。</p>\n<p>我们每一个人，都是独一无二的，也都可以独立活出自己想要的生活。<br>不需要过多的焦虑，跟随自己的内心，你的内心会告诉你答案。</p>\n"},{"layout":"post","title":"Android常用加解密算法","date":"2017-05-10T12:54:22.000Z","comments":1,"_content":"---\n数据安全，不管是对于企业还是个人都是十分重要。而作为一个移动开发者，我们更需要去考虑数据传输的安全性，去保护企业及个人信息安全。在Java,Android语言中，有许多的常用加解密算法，例如：对称加密算法AES,DES,3DES，非对称加密算法RSA,经典哈希算法MD5,SHA.\n\n>对称加密算法：加密秘钥和解密秘钥相同 例：AES,DES,3DES\n>\n>非对称加密算法：有公钥和秘钥，公钥加密私钥解密，私钥加密公钥解密。例：RSA\n>\n>哈希算法：加解密是不可逆的 例：MD5,SHA\n\n\n\n# 常用加解密算法\n---\n\n# 1.AES算法(Advanced Encryption Standard 高级数据加密标准)\n\n- AES：高级数据加密标准，能够有效抵御已知的针对DES算法的所有攻击 \n\n- 特点：密钥建立时间短、灵敏性好、内存需求低、安全性高 \n\n- Java实现\n\n1).生成秘钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");//密钥生成器\nkeygen.init(128);  //默认128，获得无政策权限后可为192或256\nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n<!-- more -->\n2).AES加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"AES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"AES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3).AES解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"AES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"AES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n\n# 2.DES算法(Data Encryption Standard 数据加密标准)\n- DES：数据加密标准，是对称加密算法领域中的典型算法 \n- 特点：密钥偏短（56位）、生命周期短（避免被破解） \n- Java实现\n\n1）生成密钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");//密钥生成器\nkeyGen.init(56);//初始化密钥生成器\nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n2）加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，加密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3）解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n\n# 3.3DES算法(Triple DES、DESede，三重DES加密算法)\n- 3DES：将密钥长度增至112位或168位，通过增加迭代次数提高安全性 \n- 缺点：处理速度较慢、密钥计算时间较长、加密效率不高 \n- Java实现\n\n1）生成密钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"DESede\");//密钥生成器\nkeyGen.init(168);  //可指定密钥长度为112或168，默认为168   \nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n\n2）3DES加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DESede\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DESede\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3）3DES解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DESede\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DESede\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n# 4.RSA算法\nRSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。\n> RSA算法原理如下：\n>1.随机选择两个大质数p和q，p不等于q，计算N=pq； \n>2.选择一个大于1小于N的自然数e，e必须与(p-1)(q-1)互素。 \n>3.用公式计算出d：d×e = 1 (mod (p-1)(q-1)) 。\n>4.销毁p和q。\n\n1)生成秘钥\n\n通过openssl工具生成RSA的公钥和私钥\n[RSA密钥的生成与配置](http://blog.csdn.net/tsuliuchao/article/details/8447690)\n\n2)获取公钥\n```java\n    private PublicKey getPublicKey(){\n        PublicKey publicKey = null;\n        try {\n            InputStream in =  RSAApp.instance.getResources().getAssets().open(\"rsa_public_key.pem\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String readLine = null;\n            StringBuilder sb = new StringBuilder();\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == '-') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                }\n            }\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            byte[] buffer=Base64.decode(sb.toString());\n            EncodedKeySpec keySpec = new X509EncodedKeySpec(buffer);\n            publicKey = keyFactory.generatePublic(keySpec);\n            return publicKey;\n        } catch (Exception e) {\n        }\n        return publicKey;\n    }\n```\n\n3)获取私钥\n```java\n private PrivateKey getPrivateKey(){\n        PrivateKey privateKey = null;\n        try {\n            InputStream in = RSAApp.instance.getResources().getAssets().open(\"pkcs8_rsa_private_key.pem\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String readLine = null;\n            StringBuilder sb = new StringBuilder();\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == '-') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                }\n            }\n            in.close();\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            byte[] buffer= Base64.decode(sb.toString());\n            EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(buffer);\n            privateKey = keyFactory.generatePrivate(privateKeySpec);\n            return privateKey;\n\n        } catch (Exception e) {\n        }\n        return privateKey;\n    }\n```\n\n4)公钥加密\n```java\n    public String encode(String str) {\n        if (TextUtils.isEmpty(str)) {\n            return str;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, getPublicKey());\n            byte[] enBytes = cipher.doFinal(str.getBytes());\n            return Base64.encode(enBytes);\n        } catch (Exception e) {\n        }\n        return str;\n    }\n```\n\n5)私钥解密\n```java\n    public String decode(String str) {\n        if (TextUtils.isEmpty(str)) {\n            return str;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, getPrivateKey());\n            byte[] base64 = Base64.decode(str);\n            byte[] deBytes = cipher.doFinal(base64);\n            return new String(deBytes, \"UTF-8\");\n        } catch (Exception e) {\n        }\n        return \"\";\n    }\n```\n\n# 5.MD5算法\n**MD5加密有哪些特点？**\n\n- 压缩性：任意长度的数据，算出的MD5值长度都是固定的。\n- 容易计算：从原数据计算出MD5值很容易。\n- 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n- 强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n\n**MD5应用场景：**\n\n- 一致性验证\n- 数字签名\n- 安全访问认证\n\n**java加密**\n```java\n public static String md5(String string) {\n        if (TextUtils.isEmpty(string)) {\n            return \"\";\n        }\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md5.digest(string.getBytes());\n            String result = \"\";\n            for (byte b : bytes) {\n                String temp = Integer.toHexString(b & 0xff);\n                if (temp.length() == 1) {\n                    temp = \"0\" + temp;\n                }\n                result += temp;\n            }\n            return result;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n```\n\n# 参考文献\n[Java利用DES/3DES/AES 三种算法分别实现对称加密](http://blog.csdn.net/smartbetter/article/details/54017759)\n[Android数据加密之Rsa加密](http://www.cnblogs.com/whoislcj/p/5470095.html)\n[Android数据加密之Aes加密](http://www.cnblogs.com/whoislcj/p/5473030.html)\n[Android数据加密之Des加密](http://www.cnblogs.com/whoislcj/p/5580950.html)\n[Android数据加密之MD5加密](http://www.cnblogs.com/whoislcj/p/5885006.html)\n\n>注意：不管是对称加密还是非对称加密，加密的填充方式也是十分重要的。\n>\n>android系统的RSA实现填充方式是\"RSA/None/NoPadding\"，而标准JDK实现是\"RSA/None/PKCS1Padding\",当与服务器交互时，需要注意加密的填充方式。\n\n| 算法 | 密钥长度 | 默认密钥长度 | 工作模式 | 填充方式 |\n| :-----: | :----: | :---------: | :---: | :---: | \n| DES | 56 |  56    |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n| 3DES| 112、168 |  168   |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n| AES | 128、192、256   |  128  |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n\n","source":"_posts/tech_android_encrypt_and_decode.md","raw":"---\nlayout: post\ntitle: \"Android常用加解密算法\"\ndate: 5/10/2017 8:54:22 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 加解密算法\n---\n---\n数据安全，不管是对于企业还是个人都是十分重要。而作为一个移动开发者，我们更需要去考虑数据传输的安全性，去保护企业及个人信息安全。在Java,Android语言中，有许多的常用加解密算法，例如：对称加密算法AES,DES,3DES，非对称加密算法RSA,经典哈希算法MD5,SHA.\n\n>对称加密算法：加密秘钥和解密秘钥相同 例：AES,DES,3DES\n>\n>非对称加密算法：有公钥和秘钥，公钥加密私钥解密，私钥加密公钥解密。例：RSA\n>\n>哈希算法：加解密是不可逆的 例：MD5,SHA\n\n\n\n# 常用加解密算法\n---\n\n# 1.AES算法(Advanced Encryption Standard 高级数据加密标准)\n\n- AES：高级数据加密标准，能够有效抵御已知的针对DES算法的所有攻击 \n\n- 特点：密钥建立时间短、灵敏性好、内存需求低、安全性高 \n\n- Java实现\n\n1).生成秘钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");//密钥生成器\nkeygen.init(128);  //默认128，获得无政策权限后可为192或256\nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n<!-- more -->\n2).AES加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"AES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"AES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3).AES解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"AES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"AES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n\n# 2.DES算法(Data Encryption Standard 数据加密标准)\n- DES：数据加密标准，是对称加密算法领域中的典型算法 \n- 特点：密钥偏短（56位）、生命周期短（避免被破解） \n- Java实现\n\n1）生成密钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");//密钥生成器\nkeyGen.init(56);//初始化密钥生成器\nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n2）加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，加密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3）解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DES\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DES\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n\n# 3.3DES算法(Triple DES、DESede，三重DES加密算法)\n- 3DES：将密钥长度增至112位或168位，通过增加迭代次数提高安全性 \n- 缺点：处理速度较慢、密钥计算时间较长、加密效率不高 \n- Java实现\n\n1）生成密钥\n```java\nKeyGenerator keyGen = KeyGenerator.getInstance(\"DESede\");//密钥生成器\nkeyGen.init(168);  //可指定密钥长度为112或168，默认为168   \nSecretKey secretKey = keyGen.generateKey();//生成密钥\nbyte[] key = secretKey.getEncoded();//密钥字节数组\n```\n\n2）3DES加密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DESede\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DESede\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//加密data\n```\n3）3DES解密\n```java\nSecretKey secretKey = new SecretKeySpec(key, \"DESede\");//恢复密钥\nCipher cipher = Cipher.getInstance(\"DESede\");//Cipher完成加密或解密工作类\ncipher.init(Cipher.DECRYPT_MODE, secretKey);//对Cipher初始化，解密模式\nbyte[] cipherByte = cipher.doFinal(data);//解密data\n```\n# 4.RSA算法\nRSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。\n> RSA算法原理如下：\n>1.随机选择两个大质数p和q，p不等于q，计算N=pq； \n>2.选择一个大于1小于N的自然数e，e必须与(p-1)(q-1)互素。 \n>3.用公式计算出d：d×e = 1 (mod (p-1)(q-1)) 。\n>4.销毁p和q。\n\n1)生成秘钥\n\n通过openssl工具生成RSA的公钥和私钥\n[RSA密钥的生成与配置](http://blog.csdn.net/tsuliuchao/article/details/8447690)\n\n2)获取公钥\n```java\n    private PublicKey getPublicKey(){\n        PublicKey publicKey = null;\n        try {\n            InputStream in =  RSAApp.instance.getResources().getAssets().open(\"rsa_public_key.pem\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String readLine = null;\n            StringBuilder sb = new StringBuilder();\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == '-') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                }\n            }\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            byte[] buffer=Base64.decode(sb.toString());\n            EncodedKeySpec keySpec = new X509EncodedKeySpec(buffer);\n            publicKey = keyFactory.generatePublic(keySpec);\n            return publicKey;\n        } catch (Exception e) {\n        }\n        return publicKey;\n    }\n```\n\n3)获取私钥\n```java\n private PrivateKey getPrivateKey(){\n        PrivateKey privateKey = null;\n        try {\n            InputStream in = RSAApp.instance.getResources().getAssets().open(\"pkcs8_rsa_private_key.pem\");\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\n            String readLine = null;\n            StringBuilder sb = new StringBuilder();\n            while ((readLine = br.readLine()) != null) {\n                if (readLine.charAt(0) == '-') {\n                    continue;\n                } else {\n                    sb.append(readLine);\n                }\n            }\n            in.close();\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            byte[] buffer= Base64.decode(sb.toString());\n            EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(buffer);\n            privateKey = keyFactory.generatePrivate(privateKeySpec);\n            return privateKey;\n\n        } catch (Exception e) {\n        }\n        return privateKey;\n    }\n```\n\n4)公钥加密\n```java\n    public String encode(String str) {\n        if (TextUtils.isEmpty(str)) {\n            return str;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, getPublicKey());\n            byte[] enBytes = cipher.doFinal(str.getBytes());\n            return Base64.encode(enBytes);\n        } catch (Exception e) {\n        }\n        return str;\n    }\n```\n\n5)私钥解密\n```java\n    public String decode(String str) {\n        if (TextUtils.isEmpty(str)) {\n            return str;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n            cipher.init(Cipher.DECRYPT_MODE, getPrivateKey());\n            byte[] base64 = Base64.decode(str);\n            byte[] deBytes = cipher.doFinal(base64);\n            return new String(deBytes, \"UTF-8\");\n        } catch (Exception e) {\n        }\n        return \"\";\n    }\n```\n\n# 5.MD5算法\n**MD5加密有哪些特点？**\n\n- 压缩性：任意长度的数据，算出的MD5值长度都是固定的。\n- 容易计算：从原数据计算出MD5值很容易。\n- 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n- 强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n\n**MD5应用场景：**\n\n- 一致性验证\n- 数字签名\n- 安全访问认证\n\n**java加密**\n```java\n public static String md5(String string) {\n        if (TextUtils.isEmpty(string)) {\n            return \"\";\n        }\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md5.digest(string.getBytes());\n            String result = \"\";\n            for (byte b : bytes) {\n                String temp = Integer.toHexString(b & 0xff);\n                if (temp.length() == 1) {\n                    temp = \"0\" + temp;\n                }\n                result += temp;\n            }\n            return result;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n```\n\n# 参考文献\n[Java利用DES/3DES/AES 三种算法分别实现对称加密](http://blog.csdn.net/smartbetter/article/details/54017759)\n[Android数据加密之Rsa加密](http://www.cnblogs.com/whoislcj/p/5470095.html)\n[Android数据加密之Aes加密](http://www.cnblogs.com/whoislcj/p/5473030.html)\n[Android数据加密之Des加密](http://www.cnblogs.com/whoislcj/p/5580950.html)\n[Android数据加密之MD5加密](http://www.cnblogs.com/whoislcj/p/5885006.html)\n\n>注意：不管是对称加密还是非对称加密，加密的填充方式也是十分重要的。\n>\n>android系统的RSA实现填充方式是\"RSA/None/NoPadding\"，而标准JDK实现是\"RSA/None/PKCS1Padding\",当与服务器交互时，需要注意加密的填充方式。\n\n| 算法 | 密钥长度 | 默认密钥长度 | 工作模式 | 填充方式 |\n| :-----: | :----: | :---------: | :---: | :---: | \n| DES | 56 |  56    |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n| 3DES| 112、168 |  168   |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n| AES | 128、192、256   |  128  |ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128|NoPadding、PKCS5Padding、ISO10126Padding|\n\n","slug":"tech_android_encrypt_and_decode","published":1,"updated":"2019-06-27T08:15:15.302Z","photos":[],"link":"","_id":"cjxfjaerw003hystgjpzbsevg","content":"<hr>\n<p>数据安全，不管是对于企业还是个人都是十分重要。而作为一个移动开发者，我们更需要去考虑数据传输的安全性，去保护企业及个人信息安全。在Java,Android语言中，有许多的常用加解密算法，例如：对称加密算法AES,DES,3DES，非对称加密算法RSA,经典哈希算法MD5,SHA.</p>\n<blockquote>\n<p>对称加密算法：加密秘钥和解密秘钥相同 例：AES,DES,3DES</p>\n<p>非对称加密算法：有公钥和秘钥，公钥加密私钥解密，私钥加密公钥解密。例：RSA</p>\n<p>哈希算法：加解密是不可逆的 例：MD5,SHA</p>\n</blockquote>\n<h1 id=\"常用加解密算法\"><a href=\"#常用加解密算法\" class=\"headerlink\" title=\"常用加解密算法\"></a>常用加解密算法</h1><hr>\n<h1 id=\"1-AES算法-Advanced-Encryption-Standard-高级数据加密标准\"><a href=\"#1-AES算法-Advanced-Encryption-Standard-高级数据加密标准\" class=\"headerlink\" title=\"1.AES算法(Advanced Encryption Standard 高级数据加密标准)\"></a>1.AES算法(Advanced Encryption Standard 高级数据加密标准)</h1><ul>\n<li><p>AES：高级数据加密标准，能够有效抵御已知的针对DES算法的所有攻击 </p>\n</li>\n<li><p>特点：密钥建立时间短、灵敏性好、内存需求低、安全性高 </p>\n</li>\n<li><p>Java实现</p>\n</li>\n</ul>\n<p>1).生成秘钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keygen.init(<span class=\"number\">128</span>);  <span class=\"comment\">//默认128，获得无政策权限后可为192或256</span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2).AES加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"AES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3).AES解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"AES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"2-DES算法-Data-Encryption-Standard-数据加密标准\"><a href=\"#2-DES算法-Data-Encryption-Standard-数据加密标准\" class=\"headerlink\" title=\"2.DES算法(Data Encryption Standard 数据加密标准)\"></a>2.DES算法(Data Encryption Standard 数据加密标准)</h1><ul>\n<li>DES：数据加密标准，是对称加密算法领域中的典型算法 </li>\n<li>特点：密钥偏短（56位）、生命周期短（避免被破解） </li>\n<li>Java实现</li>\n</ul>\n<p>1）生成密钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keyGen.init(<span class=\"number\">56</span>);<span class=\"comment\">//初始化密钥生成器</span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>\n<p>2）加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，加密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3）解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-3DES算法-Triple-DES、DESede，三重DES加密算法\"><a href=\"#3-3DES算法-Triple-DES、DESede，三重DES加密算法\" class=\"headerlink\" title=\"3.3DES算法(Triple DES、DESede，三重DES加密算法)\"></a>3.3DES算法(Triple DES、DESede，三重DES加密算法)</h1><ul>\n<li>3DES：将密钥长度增至112位或168位，通过增加迭代次数提高安全性 </li>\n<li>缺点：处理速度较慢、密钥计算时间较长、加密效率不高 </li>\n<li>Java实现</li>\n</ul>\n<p>1）生成密钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keyGen.init(<span class=\"number\">168</span>);  <span class=\"comment\">//可指定密钥长度为112或168，默认为168   </span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>\n<p>2）3DES加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3）3DES解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"4-RSA算法\"><a href=\"#4-RSA算法\" class=\"headerlink\" title=\"4.RSA算法\"></a>4.RSA算法</h1><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<blockquote>\n<p>RSA算法原理如下：<br>1.随机选择两个大质数p和q，p不等于q，计算N=pq；<br>2.选择一个大于1小于N的自然数e，e必须与(p-1)(q-1)互素。<br>3.用公式计算出d：d×e = 1 (mod (p-1)(q-1)) 。<br>4.销毁p和q。</p>\n</blockquote>\n<p>1)生成秘钥</p>\n<p>通过openssl工具生成RSA的公钥和私钥<br><a href=\"http://blog.csdn.net/tsuliuchao/article/details/8447690\" target=\"_blank\" rel=\"external\">RSA密钥的生成与配置</a></p>\n<p>2)获取公钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PublicKey <span class=\"title\">getPublicKey</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    PublicKey publicKey = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        InputStream in =  RSAApp.instance.getResources().getAssets().open(<span class=\"string\">\"rsa_public_key.pem\"</span>);</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">        String readLine = <span class=\"keyword\">null</span>;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">while</span> ((readLine = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (readLine.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sb.append(readLine);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] buffer=Base64.decode(sb.toString());</div><div class=\"line\">        EncodedKeySpec keySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(buffer);</div><div class=\"line\">        publicKey = keyFactory.generatePublic(keySpec);</div><div class=\"line\">        <span class=\"keyword\">return</span> publicKey;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> publicKey;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3)获取私钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PrivateKey <span class=\"title\">getPrivateKey</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       PrivateKey privateKey = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           InputStream in = RSAApp.instance.getResources().getAssets().open(<span class=\"string\">\"pkcs8_rsa_private_key.pem\"</span>);</div><div class=\"line\">           BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">           String readLine = <span class=\"keyword\">null</span>;</div><div class=\"line\">           StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">           <span class=\"keyword\">while</span> ((readLine = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (readLine.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">continue</span>;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   sb.append(readLine);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           in.close();</div><div class=\"line\">           KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</div><div class=\"line\">           <span class=\"keyword\">byte</span>[] buffer= Base64.decode(sb.toString());</div><div class=\"line\">           EncodedKeySpec privateKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(buffer);</div><div class=\"line\">           privateKey = keyFactory.generatePrivate(privateKeySpec);</div><div class=\"line\">           <span class=\"keyword\">return</span> privateKey;</div><div class=\"line\"></div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> privateKey;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>4)公钥加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">encode</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Cipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA/ECB/PKCS1Padding\"</span>);</div><div class=\"line\">        cipher.init(Cipher.ENCRYPT_MODE, getPublicKey());</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] enBytes = cipher.doFinal(str.getBytes());</div><div class=\"line\">        <span class=\"keyword\">return</span> Base64.encode(enBytes);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5)私钥解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">decode</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Cipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA/ECB/PKCS1Padding\"</span>);</div><div class=\"line\">        cipher.init(Cipher.DECRYPT_MODE, getPrivateKey());</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] base64 = Base64.decode(str);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] deBytes = cipher.doFinal(base64);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(deBytes, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-MD5算法\"><a href=\"#5-MD5算法\" class=\"headerlink\" title=\"5.MD5算法\"></a>5.MD5算法</h1><p><strong>MD5加密有哪些特点？</strong></p>\n<ul>\n<li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li>\n<li>容易计算：从原数据计算出MD5值很容易。</li>\n<li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li>\n<li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li>\n</ul>\n<p><strong>MD5应用场景：</strong></p>\n<ul>\n<li>一致性验证</li>\n<li>数字签名</li>\n<li>安全访问认证</li>\n</ul>\n<p><strong>java加密</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">md5</span><span class=\"params\">(String string)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (TextUtils.isEmpty(string)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       MessageDigest md5 = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           md5 = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">           <span class=\"keyword\">byte</span>[] bytes = md5.digest(string.getBytes());</div><div class=\"line\">           String result = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</div><div class=\"line\">               String temp = Integer.toHexString(b &amp; <span class=\"number\">0xff</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (temp.length() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                   temp = <span class=\"string\">\"0\"</span> + temp;</div><div class=\"line\">               &#125;</div><div class=\"line\">               result += temp;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> result;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://blog.csdn.net/smartbetter/article/details/54017759\" target=\"_blank\" rel=\"external\">Java利用DES/3DES/AES 三种算法分别实现对称加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5470095.html\" target=\"_blank\" rel=\"external\">Android数据加密之Rsa加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5473030.html\" target=\"_blank\" rel=\"external\">Android数据加密之Aes加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5580950.html\" target=\"_blank\" rel=\"external\">Android数据加密之Des加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5885006.html\" target=\"_blank\" rel=\"external\">Android数据加密之MD5加密</a></p>\n<blockquote>\n<p>注意：不管是对称加密还是非对称加密，加密的填充方式也是十分重要的。</p>\n<p>android系统的RSA实现填充方式是”RSA/None/NoPadding”，而标准JDK实现是”RSA/None/PKCS1Padding”,当与服务器交互时，需要注意加密的填充方式。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">算法</th>\n<th style=\"text-align:center\">密钥长度</th>\n<th style=\"text-align:center\">默认密钥长度</th>\n<th style=\"text-align:center\">工作模式</th>\n<th style=\"text-align:center\">填充方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">DES</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3DES</td>\n<td style=\"text-align:center\">112、168</td>\n<td style=\"text-align:center\">168</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AES</td>\n<td style=\"text-align:center\">128、192、256</td>\n<td style=\"text-align:center\">128</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<hr>\n<p>数据安全，不管是对于企业还是个人都是十分重要。而作为一个移动开发者，我们更需要去考虑数据传输的安全性，去保护企业及个人信息安全。在Java,Android语言中，有许多的常用加解密算法，例如：对称加密算法AES,DES,3DES，非对称加密算法RSA,经典哈希算法MD5,SHA.</p>\n<blockquote>\n<p>对称加密算法：加密秘钥和解密秘钥相同 例：AES,DES,3DES</p>\n<p>非对称加密算法：有公钥和秘钥，公钥加密私钥解密，私钥加密公钥解密。例：RSA</p>\n<p>哈希算法：加解密是不可逆的 例：MD5,SHA</p>\n</blockquote>\n<h1 id=\"常用加解密算法\"><a href=\"#常用加解密算法\" class=\"headerlink\" title=\"常用加解密算法\"></a>常用加解密算法</h1><hr>\n<h1 id=\"1-AES算法-Advanced-Encryption-Standard-高级数据加密标准\"><a href=\"#1-AES算法-Advanced-Encryption-Standard-高级数据加密标准\" class=\"headerlink\" title=\"1.AES算法(Advanced Encryption Standard 高级数据加密标准)\"></a>1.AES算法(Advanced Encryption Standard 高级数据加密标准)</h1><ul>\n<li><p>AES：高级数据加密标准，能够有效抵御已知的针对DES算法的所有攻击 </p>\n</li>\n<li><p>特点：密钥建立时间短、灵敏性好、内存需求低、安全性高 </p>\n</li>\n<li><p>Java实现</p>\n</li>\n</ul>\n<p>1).生成秘钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keygen.init(<span class=\"number\">128</span>);  <span class=\"comment\">//默认128，获得无政策权限后可为192或256</span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>","more":"<p>2).AES加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"AES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3).AES解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"AES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"2-DES算法-Data-Encryption-Standard-数据加密标准\"><a href=\"#2-DES算法-Data-Encryption-Standard-数据加密标准\" class=\"headerlink\" title=\"2.DES算法(Data Encryption Standard 数据加密标准)\"></a>2.DES算法(Data Encryption Standard 数据加密标准)</h1><ul>\n<li>DES：数据加密标准，是对称加密算法领域中的典型算法 </li>\n<li>特点：密钥偏短（56位）、生命周期短（避免被破解） </li>\n<li>Java实现</li>\n</ul>\n<p>1）生成密钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keyGen.init(<span class=\"number\">56</span>);<span class=\"comment\">//初始化密钥生成器</span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>\n<p>2）加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，加密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3）解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DES\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-3DES算法-Triple-DES、DESede，三重DES加密算法\"><a href=\"#3-3DES算法-Triple-DES、DESede，三重DES加密算法\" class=\"headerlink\" title=\"3.3DES算法(Triple DES、DESede，三重DES加密算法)\"></a>3.3DES算法(Triple DES、DESede，三重DES加密算法)</h1><ul>\n<li>3DES：将密钥长度增至112位或168位，通过增加迭代次数提高安全性 </li>\n<li>缺点：处理速度较慢、密钥计算时间较长、加密效率不高 </li>\n<li>Java实现</li>\n</ul>\n<p>1）生成密钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyGenerator keyGen = KeyGenerator.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//密钥生成器</span></div><div class=\"line\">keyGen.init(<span class=\"number\">168</span>);  <span class=\"comment\">//可指定密钥长度为112或168，默认为168   </span></div><div class=\"line\">SecretKey secretKey = keyGen.generateKey();<span class=\"comment\">//生成密钥</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">//密钥字节数组</span></div></pre></td></tr></table></figure></p>\n<p>2）3DES加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//加密data</span></div></pre></td></tr></table></figure></p>\n<p>3）3DES解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecretKey secretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//恢复密钥</span></div><div class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"DESede\"</span>);<span class=\"comment\">//Cipher完成加密或解密工作类</span></div><div class=\"line\">cipher.init(Cipher.DECRYPT_MODE, secretKey);<span class=\"comment\">//对Cipher初始化，解密模式</span></div><div class=\"line\"><span class=\"keyword\">byte</span>[] cipherByte = cipher.doFinal(data);<span class=\"comment\">//解密data</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"4-RSA算法\"><a href=\"#4-RSA算法\" class=\"headerlink\" title=\"4.RSA算法\"></a>4.RSA算法</h1><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<blockquote>\n<p>RSA算法原理如下：<br>1.随机选择两个大质数p和q，p不等于q，计算N=pq；<br>2.选择一个大于1小于N的自然数e，e必须与(p-1)(q-1)互素。<br>3.用公式计算出d：d×e = 1 (mod (p-1)(q-1)) 。<br>4.销毁p和q。</p>\n</blockquote>\n<p>1)生成秘钥</p>\n<p>通过openssl工具生成RSA的公钥和私钥<br><a href=\"http://blog.csdn.net/tsuliuchao/article/details/8447690\">RSA密钥的生成与配置</a></p>\n<p>2)获取公钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PublicKey <span class=\"title\">getPublicKey</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    PublicKey publicKey = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        InputStream in =  RSAApp.instance.getResources().getAssets().open(<span class=\"string\">\"rsa_public_key.pem\"</span>);</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">        String readLine = <span class=\"keyword\">null</span>;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">while</span> ((readLine = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (readLine.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                sb.append(readLine);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] buffer=Base64.decode(sb.toString());</div><div class=\"line\">        EncodedKeySpec keySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(buffer);</div><div class=\"line\">        publicKey = keyFactory.generatePublic(keySpec);</div><div class=\"line\">        <span class=\"keyword\">return</span> publicKey;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> publicKey;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3)获取私钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PrivateKey <span class=\"title\">getPrivateKey</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       PrivateKey privateKey = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           InputStream in = RSAApp.instance.getResources().getAssets().open(<span class=\"string\">\"pkcs8_rsa_private_key.pem\"</span>);</div><div class=\"line\">           BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(in));</div><div class=\"line\">           String readLine = <span class=\"keyword\">null</span>;</div><div class=\"line\">           StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">           <span class=\"keyword\">while</span> ((readLine = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (readLine.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">continue</span>;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   sb.append(readLine);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           in.close();</div><div class=\"line\">           KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</div><div class=\"line\">           <span class=\"keyword\">byte</span>[] buffer= Base64.decode(sb.toString());</div><div class=\"line\">           EncodedKeySpec privateKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(buffer);</div><div class=\"line\">           privateKey = keyFactory.generatePrivate(privateKeySpec);</div><div class=\"line\">           <span class=\"keyword\">return</span> privateKey;</div><div class=\"line\"></div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> privateKey;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>4)公钥加密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">encode</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Cipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA/ECB/PKCS1Padding\"</span>);</div><div class=\"line\">        cipher.init(Cipher.ENCRYPT_MODE, getPublicKey());</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] enBytes = cipher.doFinal(str.getBytes());</div><div class=\"line\">        <span class=\"keyword\">return</span> Base64.encode(enBytes);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5)私钥解密<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">decode</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(str)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> str;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        Cipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA/ECB/PKCS1Padding\"</span>);</div><div class=\"line\">        cipher.init(Cipher.DECRYPT_MODE, getPrivateKey());</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] base64 = Base64.decode(str);</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] deBytes = cipher.doFinal(base64);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(deBytes, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-MD5算法\"><a href=\"#5-MD5算法\" class=\"headerlink\" title=\"5.MD5算法\"></a>5.MD5算法</h1><p><strong>MD5加密有哪些特点？</strong></p>\n<ul>\n<li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li>\n<li>容易计算：从原数据计算出MD5值很容易。</li>\n<li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li>\n<li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li>\n</ul>\n<p><strong>MD5应用场景：</strong></p>\n<ul>\n<li>一致性验证</li>\n<li>数字签名</li>\n<li>安全访问认证</li>\n</ul>\n<p><strong>java加密</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">md5</span><span class=\"params\">(String string)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (TextUtils.isEmpty(string)) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       MessageDigest md5 = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           md5 = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">           <span class=\"keyword\">byte</span>[] bytes = md5.digest(string.getBytes());</div><div class=\"line\">           String result = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</div><div class=\"line\">               String temp = Integer.toHexString(b &amp; <span class=\"number\">0xff</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (temp.length() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                   temp = <span class=\"string\">\"0\"</span> + temp;</div><div class=\"line\">               &#125;</div><div class=\"line\">               result += temp;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> result;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://blog.csdn.net/smartbetter/article/details/54017759\">Java利用DES/3DES/AES 三种算法分别实现对称加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5470095.html\">Android数据加密之Rsa加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5473030.html\">Android数据加密之Aes加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5580950.html\">Android数据加密之Des加密</a><br><a href=\"http://www.cnblogs.com/whoislcj/p/5885006.html\">Android数据加密之MD5加密</a></p>\n<blockquote>\n<p>注意：不管是对称加密还是非对称加密，加密的填充方式也是十分重要的。</p>\n<p>android系统的RSA实现填充方式是”RSA/None/NoPadding”，而标准JDK实现是”RSA/None/PKCS1Padding”,当与服务器交互时，需要注意加密的填充方式。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">算法</th>\n<th style=\"text-align:center\">密钥长度</th>\n<th style=\"text-align:center\">默认密钥长度</th>\n<th style=\"text-align:center\">工作模式</th>\n<th style=\"text-align:center\">填充方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">DES</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3DES</td>\n<td style=\"text-align:center\">112、168</td>\n<td style=\"text-align:center\">168</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AES</td>\n<td style=\"text-align:center\">128、192、256</td>\n<td style=\"text-align:center\">128</td>\n<td style=\"text-align:center\">ECB、CBC、PCBC、CTR、CTS、CFB、CFB8-CFB128、OFB、OFB8-OFB128</td>\n<td style=\"text-align:center\">NoPadding、PKCS5Padding、ISO10126Padding</td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"Activity布局加载流程源码分析(II)","date":"2018-01-03T10:55:03.000Z","comments":1,"_content":"---\n在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)文章中，已经详细分析了setContentView()加载流程，但对于装饰器DecorView怎么被加载到Window上的，上篇博文没有说到，所以本篇博文将会接着上篇博文，继续分析Activity布局的加载流程。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **Window：** 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **DecorView：**是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View。\n- **WindowManager：** 是Window的管理类，管理着Window的添加、更新和删除。\n- **WindowManagerService(AMS)：**是系统窗口管理服务类，具体管理着系统各种各样的Window。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n\n# 一、Activity布局及DecorView加载分析\n这里，我们接着Activity布局加载流程继续分析。在布局加载流程最后，主要是通过WindowManager添加装饰器DecorView到Window中，从而实现Activity布局的加载，这里继续来看那部分代码\n<!-- more -->\n\n```java\n   final void handleResumeActivity(IBinder token, boolean clearHide, boolean isForward) {\n\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n        .......\n        if (r != null) {\n            final Activity a = r.activity;\n            ......\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);\n                }\n            ......\n        }\n    }\n```\n这里，简单解释一下参数。其中r.window为PhoneWindow,decor就是装饰器DecorView,wm就是WindowManager。最后通过wm.addView(decor, l)方法，实现Activity布局的加载。这里还注意到WindowManager.LayoutParams的type参数为WindowManager.LayoutParams.TYPE_BASE_APPLICATION，也即是应用窗口类型(所有程序窗口的base窗口，其他应用程序窗口都显示在它上面),具体有关Window的窗口属性，可以参考博文[Android悬浮窗原理解析(Window)](http://blog.csdn.net/awenyini/article/details/78265284),想了解的同学，可以点击看看，这里有比较全的Window属性解释。\n\n我们再来看一下wm,这里定义的类型是接口ViewManager，其实它就是WindowManager，这里主要是使用设计模式的里氏替换原则(源码中很多地方都用这原则)。wm主要是通过a.getWindowManager()赋值的，所以我们主要来看看Activity中的getWindowManager()方法\n```java\n    public WindowManager getWindowManager() {\n        return mWindowManager;\n    }\n```\nmWindowMananger是Activity的一个属性变量，通过[Activity的启动加载流程](http://blog.csdn.net/awenyini/article/details/78906030),Activity初始化过程中就会对mWindowManager进行赋值，而Activity初始化主要通过attach方法完成，所以我们继续来看Activity的attach方法\n```java\n    final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        .......\n        \n        mWindow = PolicyManager.makeNewWindow(this);\n        mWindow.setCallback(this);\n        mWindow.getLayoutInflater().setPrivateFactory(this);\n\n        ......\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n这里是通过mWindow.getWindowManager()来赋值mWindowManager，而mWindow即PhoneWindow，这点在[Activity布局加载流程](http://blog.csdn.net/awenyini/article/details/78934390)中，已分析过。由于PhoneWindow是继承至Window，通过阅读源码分析知道，getWindowManager()方法，主要是window中完成实现的，所以我们具体来看看Window中的getWindowManager()方法\n```java\n\n    public void setWindowManager(WindowManager wm, IBinder appToken, String appName,\n            boolean hardwareAccelerated) {\n        mAppToken = appToken;\n        mAppName = appName;\n        if (wm == null) {\n            wm = WindowManagerImpl.getDefault();//1.核心代码\n        }\n        mWindowManager = new LocalWindowManager(wm, hardwareAccelerated);//2.核心代码\n    }\n\n    public WindowManager getWindowManager() {\n        return mWindowManager;\n    }\n```\n这里，我们先来看一下注释1，WindowManagerImpl.getDefault()，这很明显是单例模式。我们继续来看看源码\n```java\n\n    private final static WindowManagerImpl sWindowManager = new WindowManagerImpl();\n\n    public static WindowManagerImpl getDefault() {\n        return sWindowManager;\n    }\n```\n这里wm就是WindowManagerImpl。我们来看看WindowManagerImpl类\n```java\npublic class WindowManagerImpl implements WindowManager {\n ......省略细节\n}\n```\n我们再来看看注释2,也即LocalWindowManager类\n```java\nprivate class LocalWindowManager extends WindowManagerImpl.CompatModeWrapper {\n\n        private static final String PROPERTY_HARDWARE_UI = \"persist.sys.ui.hw\";\n\n        private final boolean mHardwareAccelerated;\n\n        LocalWindowManager(WindowManager wm, boolean hardwareAccelerated) {\n            super(wm, getCompatInfo(mContext));\n            mHardwareAccelerated = hardwareAccelerated ||\n                    SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);\n        }\n\n        public boolean isHardwareAccelerated() {\n            return mHardwareAccelerated;\n        }\n        \n        public final void addView(View view, ViewGroup.LayoutParams params) {\n            ........\n            super.addView(view, params);\n        }\n    }\n```\n我们继续来看看LocalWindowManager类继承的WindowManagerImpl的内部类CompatModeWrapper\n```java\n static class CompatModeWrapper implements WindowManager {\n        private final WindowManagerImpl mWindowManager;\n        private final Display mDefaultDisplay;\n        private final CompatibilityInfoHolder mCompatibilityInfo;\n\n        CompatModeWrapper(WindowManager wm, CompatibilityInfoHolder ci) {\n            mWindowManager = wm instanceof CompatModeWrapper\n                    ? ((CompatModeWrapper)wm).mWindowManager : (WindowManagerImpl)wm;\n            if (ci == null) {\n                mDefaultDisplay = mWindowManager.getDefaultDisplay();\n            } else {\n                mDefaultDisplay = Display.createCompatibleDisplay(\n                        mWindowManager.getDefaultDisplay().getDisplayId(), ci);\n            }\n\n            mCompatibilityInfo = ci;\n        }\n\n        @Override\n        public void addView(View view, android.view.ViewGroup.LayoutParams params) {\n            mWindowManager.addView(view, params, mCompatibilityInfo);\n        }\n\n        @Override\n        public void updateViewLayout(View view, android.view.ViewGroup.LayoutParams params) {\n            mWindowManager.updateViewLayout(view, params);\n\n        }\n\n        @Override\n        public void removeView(View view) {\n            mWindowManager.removeView(view);\n        }\n\n        @Override\n        public Display getDefaultDisplay() {\n            return mDefaultDisplay;\n        }\n\n        @Override\n        public void removeViewImmediate(View view) {\n            mWindowManager.removeViewImmediate(view);\n        }\n\n        @Override\n        public boolean isHardwareAccelerated() {\n            return mWindowManager.isHardwareAccelerated();\n        }\n    }\n```\nWindowManagerImpl的内部类CompatModeWrapper实现了WindowManager接口，而WindowManager又实现了ViewManager接口\n```java\npublic interface WindowManager extends ViewManager {\n  ......\n}\n```\n我们来看看ViewManager接口\n```java\npublic interface ViewManager\n{\n    public void addView(View view, ViewGroup.LayoutParams params);\n    public void updateViewLayout(View view, ViewGroup.LayoutParams params);\n    public void removeView(View view);\n}\n```\n这里实现ViewManager接口的有WindowManager,而WindowManagerImpl和CompatModeWrapper也都实现WindowManager接口，从而间接实现了ViewManager接口，也都实现的添加，更新和删除View的方法。\n\n所以，在最开始处，以ViewManager定义的wm其实也就是LocalWindowManager,通过相互继承调用，其实最后调用的是WindowManagerImpl中的addView()方法，我们继续来看看此方法\n```java\n public void addView(View view) {\n        addView(view, new WindowManager.LayoutParams(\n            WindowManager.LayoutParams.TYPE_APPLICATION, 0, PixelFormat.OPAQUE));\n    }\n\n    public void addView(View view, ViewGroup.LayoutParams params) {\n        addView(view, params, null, false);\n    }\n    \n    public void addView(View view, ViewGroup.LayoutParams params, CompatibilityInfoHolder cih) {\n        addView(view, params, cih, false);\n    }\n    \n    private void addView(View view, ViewGroup.LayoutParams params,\n            CompatibilityInfoHolder cih, boolean nest) {\n        if (false) Log.v(\"WindowManager\", \"addView view=\" + view);\n\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\n                    \"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams\n                = (WindowManager.LayoutParams)params;\n        \n        ViewRootImpl root;\n        View panelParentView = null;\n        .......\n            root = new ViewRootImpl(view.getContext());\n            root.mAddNesting = 1;\n            if (cih == null) {\n                root.mCompatibilityInfo = new CompatibilityInfoHolder();\n            } else {\n                root.mCompatibilityInfo = cih;\n            }\n\n            view.setLayoutParams(wparams);\n            \n            if (mViews == null) {\n                index = 1;\n                mViews = new View[1];\n                mRoots = new ViewRootImpl[1];\n                mParams = new WindowManager.LayoutParams[1];\n            } else {\n                index = mViews.length + 1;\n                Object[] old = mViews;\n                mViews = new View[index]; \n                System.arraycopy(old, 0, mViews, 0, index-1);\n                old = mRoots;\n                mRoots = new ViewRootImpl[index];\n                System.arraycopy(old, 0, mRoots, 0, index-1);\n                old = mParams;\n                mParams = new WindowManager.LayoutParams[index];\n                System.arraycopy(old, 0, mParams, 0, index-1);\n            }\n            index--;\n\n            mViews[index] = view;\n            mRoots[index] = root;\n            mParams[index] = wparams;\n        }\n        // do this last because it fires off messages to start doing things\n        root.setView(view, wparams, panelParentView);\n    }\n```\n这里有三个数组mViews，mRoots，mParams变量，mViews主要保存向Window中添加的View,mRoots主要保存实现绘制View的ViewRootImpl,mParams主要保存添加的Window参数，最后每一个添加的View都会调用root.setView(view, wparams, panelParentView)方法，实现View的绘制。关于这三个参数的作用，是因为WindowManager中可能添加多个Window，多个View，所以需要保存起来，方便删除和更新。\n\n关于WindowManagerImpl的源码，这里需要注意一下，由于我用的版本是Andorid4.1.1_r1，源码如上，而在大于Andorid4.1.1_r11的版本，如Android5.1.1中的WindowManagerImpl源码的addView方法，主要是通过WindowManagerGlobal来实现的,逻辑也都和Andorid4.1.1_r1一样，只是把部分逻辑封装成WindowManagerGlobal，这里我就不多说，想了解的同学，可以自行查看。\n\n到这里，DecorView添加入Window的流程就分析完了。接下来主要就是DecorView的绘制流程，也即View的绘制流程。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n\n[Activity布局加载流程源码分析](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)\n\n[Android悬浮窗原理解析(Window)](http://blog.csdn.net/awenyini/article/details/78265284)\n","source":"_posts/tech_android_framework_activity_loadLayout_II.md","raw":"---\nlayout: post\ntitle: \"Activity布局加载流程源码分析(II)\"\ndate: 1/3/2018 6:55:03 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)文章中，已经详细分析了setContentView()加载流程，但对于装饰器DecorView怎么被加载到Window上的，上篇博文没有说到，所以本篇博文将会接着上篇博文，继续分析Activity布局的加载流程。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **Window：** 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **DecorView：**是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View。\n- **WindowManager：** 是Window的管理类，管理着Window的添加、更新和删除。\n- **WindowManagerService(AMS)：**是系统窗口管理服务类，具体管理着系统各种各样的Window。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n\n# 一、Activity布局及DecorView加载分析\n这里，我们接着Activity布局加载流程继续分析。在布局加载流程最后，主要是通过WindowManager添加装饰器DecorView到Window中，从而实现Activity布局的加载，这里继续来看那部分代码\n<!-- more -->\n\n```java\n   final void handleResumeActivity(IBinder token, boolean clearHide, boolean isForward) {\n\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n        .......\n        if (r != null) {\n            final Activity a = r.activity;\n            ......\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);\n                }\n            ......\n        }\n    }\n```\n这里，简单解释一下参数。其中r.window为PhoneWindow,decor就是装饰器DecorView,wm就是WindowManager。最后通过wm.addView(decor, l)方法，实现Activity布局的加载。这里还注意到WindowManager.LayoutParams的type参数为WindowManager.LayoutParams.TYPE_BASE_APPLICATION，也即是应用窗口类型(所有程序窗口的base窗口，其他应用程序窗口都显示在它上面),具体有关Window的窗口属性，可以参考博文[Android悬浮窗原理解析(Window)](http://blog.csdn.net/awenyini/article/details/78265284),想了解的同学，可以点击看看，这里有比较全的Window属性解释。\n\n我们再来看一下wm,这里定义的类型是接口ViewManager，其实它就是WindowManager，这里主要是使用设计模式的里氏替换原则(源码中很多地方都用这原则)。wm主要是通过a.getWindowManager()赋值的，所以我们主要来看看Activity中的getWindowManager()方法\n```java\n    public WindowManager getWindowManager() {\n        return mWindowManager;\n    }\n```\nmWindowMananger是Activity的一个属性变量，通过[Activity的启动加载流程](http://blog.csdn.net/awenyini/article/details/78906030),Activity初始化过程中就会对mWindowManager进行赋值，而Activity初始化主要通过attach方法完成，所以我们继续来看Activity的attach方法\n```java\n    final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        .......\n        \n        mWindow = PolicyManager.makeNewWindow(this);\n        mWindow.setCallback(this);\n        mWindow.getLayoutInflater().setPrivateFactory(this);\n\n        ......\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n这里是通过mWindow.getWindowManager()来赋值mWindowManager，而mWindow即PhoneWindow，这点在[Activity布局加载流程](http://blog.csdn.net/awenyini/article/details/78934390)中，已分析过。由于PhoneWindow是继承至Window，通过阅读源码分析知道，getWindowManager()方法，主要是window中完成实现的，所以我们具体来看看Window中的getWindowManager()方法\n```java\n\n    public void setWindowManager(WindowManager wm, IBinder appToken, String appName,\n            boolean hardwareAccelerated) {\n        mAppToken = appToken;\n        mAppName = appName;\n        if (wm == null) {\n            wm = WindowManagerImpl.getDefault();//1.核心代码\n        }\n        mWindowManager = new LocalWindowManager(wm, hardwareAccelerated);//2.核心代码\n    }\n\n    public WindowManager getWindowManager() {\n        return mWindowManager;\n    }\n```\n这里，我们先来看一下注释1，WindowManagerImpl.getDefault()，这很明显是单例模式。我们继续来看看源码\n```java\n\n    private final static WindowManagerImpl sWindowManager = new WindowManagerImpl();\n\n    public static WindowManagerImpl getDefault() {\n        return sWindowManager;\n    }\n```\n这里wm就是WindowManagerImpl。我们来看看WindowManagerImpl类\n```java\npublic class WindowManagerImpl implements WindowManager {\n ......省略细节\n}\n```\n我们再来看看注释2,也即LocalWindowManager类\n```java\nprivate class LocalWindowManager extends WindowManagerImpl.CompatModeWrapper {\n\n        private static final String PROPERTY_HARDWARE_UI = \"persist.sys.ui.hw\";\n\n        private final boolean mHardwareAccelerated;\n\n        LocalWindowManager(WindowManager wm, boolean hardwareAccelerated) {\n            super(wm, getCompatInfo(mContext));\n            mHardwareAccelerated = hardwareAccelerated ||\n                    SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);\n        }\n\n        public boolean isHardwareAccelerated() {\n            return mHardwareAccelerated;\n        }\n        \n        public final void addView(View view, ViewGroup.LayoutParams params) {\n            ........\n            super.addView(view, params);\n        }\n    }\n```\n我们继续来看看LocalWindowManager类继承的WindowManagerImpl的内部类CompatModeWrapper\n```java\n static class CompatModeWrapper implements WindowManager {\n        private final WindowManagerImpl mWindowManager;\n        private final Display mDefaultDisplay;\n        private final CompatibilityInfoHolder mCompatibilityInfo;\n\n        CompatModeWrapper(WindowManager wm, CompatibilityInfoHolder ci) {\n            mWindowManager = wm instanceof CompatModeWrapper\n                    ? ((CompatModeWrapper)wm).mWindowManager : (WindowManagerImpl)wm;\n            if (ci == null) {\n                mDefaultDisplay = mWindowManager.getDefaultDisplay();\n            } else {\n                mDefaultDisplay = Display.createCompatibleDisplay(\n                        mWindowManager.getDefaultDisplay().getDisplayId(), ci);\n            }\n\n            mCompatibilityInfo = ci;\n        }\n\n        @Override\n        public void addView(View view, android.view.ViewGroup.LayoutParams params) {\n            mWindowManager.addView(view, params, mCompatibilityInfo);\n        }\n\n        @Override\n        public void updateViewLayout(View view, android.view.ViewGroup.LayoutParams params) {\n            mWindowManager.updateViewLayout(view, params);\n\n        }\n\n        @Override\n        public void removeView(View view) {\n            mWindowManager.removeView(view);\n        }\n\n        @Override\n        public Display getDefaultDisplay() {\n            return mDefaultDisplay;\n        }\n\n        @Override\n        public void removeViewImmediate(View view) {\n            mWindowManager.removeViewImmediate(view);\n        }\n\n        @Override\n        public boolean isHardwareAccelerated() {\n            return mWindowManager.isHardwareAccelerated();\n        }\n    }\n```\nWindowManagerImpl的内部类CompatModeWrapper实现了WindowManager接口，而WindowManager又实现了ViewManager接口\n```java\npublic interface WindowManager extends ViewManager {\n  ......\n}\n```\n我们来看看ViewManager接口\n```java\npublic interface ViewManager\n{\n    public void addView(View view, ViewGroup.LayoutParams params);\n    public void updateViewLayout(View view, ViewGroup.LayoutParams params);\n    public void removeView(View view);\n}\n```\n这里实现ViewManager接口的有WindowManager,而WindowManagerImpl和CompatModeWrapper也都实现WindowManager接口，从而间接实现了ViewManager接口，也都实现的添加，更新和删除View的方法。\n\n所以，在最开始处，以ViewManager定义的wm其实也就是LocalWindowManager,通过相互继承调用，其实最后调用的是WindowManagerImpl中的addView()方法，我们继续来看看此方法\n```java\n public void addView(View view) {\n        addView(view, new WindowManager.LayoutParams(\n            WindowManager.LayoutParams.TYPE_APPLICATION, 0, PixelFormat.OPAQUE));\n    }\n\n    public void addView(View view, ViewGroup.LayoutParams params) {\n        addView(view, params, null, false);\n    }\n    \n    public void addView(View view, ViewGroup.LayoutParams params, CompatibilityInfoHolder cih) {\n        addView(view, params, cih, false);\n    }\n    \n    private void addView(View view, ViewGroup.LayoutParams params,\n            CompatibilityInfoHolder cih, boolean nest) {\n        if (false) Log.v(\"WindowManager\", \"addView view=\" + view);\n\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\n                    \"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams\n                = (WindowManager.LayoutParams)params;\n        \n        ViewRootImpl root;\n        View panelParentView = null;\n        .......\n            root = new ViewRootImpl(view.getContext());\n            root.mAddNesting = 1;\n            if (cih == null) {\n                root.mCompatibilityInfo = new CompatibilityInfoHolder();\n            } else {\n                root.mCompatibilityInfo = cih;\n            }\n\n            view.setLayoutParams(wparams);\n            \n            if (mViews == null) {\n                index = 1;\n                mViews = new View[1];\n                mRoots = new ViewRootImpl[1];\n                mParams = new WindowManager.LayoutParams[1];\n            } else {\n                index = mViews.length + 1;\n                Object[] old = mViews;\n                mViews = new View[index]; \n                System.arraycopy(old, 0, mViews, 0, index-1);\n                old = mRoots;\n                mRoots = new ViewRootImpl[index];\n                System.arraycopy(old, 0, mRoots, 0, index-1);\n                old = mParams;\n                mParams = new WindowManager.LayoutParams[index];\n                System.arraycopy(old, 0, mParams, 0, index-1);\n            }\n            index--;\n\n            mViews[index] = view;\n            mRoots[index] = root;\n            mParams[index] = wparams;\n        }\n        // do this last because it fires off messages to start doing things\n        root.setView(view, wparams, panelParentView);\n    }\n```\n这里有三个数组mViews，mRoots，mParams变量，mViews主要保存向Window中添加的View,mRoots主要保存实现绘制View的ViewRootImpl,mParams主要保存添加的Window参数，最后每一个添加的View都会调用root.setView(view, wparams, panelParentView)方法，实现View的绘制。关于这三个参数的作用，是因为WindowManager中可能添加多个Window，多个View，所以需要保存起来，方便删除和更新。\n\n关于WindowManagerImpl的源码，这里需要注意一下，由于我用的版本是Andorid4.1.1_r1，源码如上，而在大于Andorid4.1.1_r11的版本，如Android5.1.1中的WindowManagerImpl源码的addView方法，主要是通过WindowManagerGlobal来实现的,逻辑也都和Andorid4.1.1_r1一样，只是把部分逻辑封装成WindowManagerGlobal，这里我就不多说，想了解的同学，可以自行查看。\n\n到这里，DecorView添加入Window的流程就分析完了。接下来主要就是DecorView的绘制流程，也即View的绘制流程。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n\n[Activity布局加载流程源码分析](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)\n\n[Android悬浮窗原理解析(Window)](http://blog.csdn.net/awenyini/article/details/78265284)\n","slug":"tech_android_framework_activity_loadLayout_II","published":1,"updated":"2019-06-27T08:15:15.307Z","photos":[],"link":"","_id":"cjxfjaerx003iystg0w36bjuu","content":"<hr>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>文章中，已经详细分析了setContentView()加载流程，但对于装饰器DecorView怎么被加载到Window上的，上篇博文没有说到，所以本篇博文将会接着上篇博文，继续分析Activity布局的加载流程。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>Window：</strong> 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。</li>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>DecorView：</strong>是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View。</li>\n<li><strong>WindowManager：</strong> 是Window的管理类，管理着Window的添加、更新和删除。</li>\n<li><strong>WindowManagerService(AMS)：</strong>是系统窗口管理服务类，具体管理着系统各种各样的Window。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n</ul>\n<h1 id=\"一、Activity布局及DecorView加载分析\"><a href=\"#一、Activity布局及DecorView加载分析\" class=\"headerlink\" title=\"一、Activity布局及DecorView加载分析\"></a>一、Activity布局及DecorView加载分析</h1><p>这里，我们接着Activity布局加载流程继续分析。在布局加载流程最后，主要是通过WindowManager添加装饰器DecorView到Window中，从而实现Activity布局的加载，这里继续来看那部分代码<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">     ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\">     .......</div><div class=\"line\">     <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> Activity a = r.activity;</div><div class=\"line\">         ......</div><div class=\"line\">         <span class=\"keyword\">if</span> (r.window == <span class=\"keyword\">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">             r.window = r.activity.getWindow();</div><div class=\"line\">             View decor = r.window.getDecorView();</div><div class=\"line\">             decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">             ViewManager wm = a.getWindowManager();</div><div class=\"line\">             WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">             a.mDecor = decor;</div><div class=\"line\">             l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">             l.softInputMode |= forwardBit;</div><div class=\"line\">             <span class=\"keyword\">if</span> (a.mVisibleFromClient) &#123;</div><div class=\"line\">                 a.mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">                 wm.addView(decor, l);</div><div class=\"line\">             &#125;</div><div class=\"line\">         ......</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这里，简单解释一下参数。其中r.window为PhoneWindow,decor就是装饰器DecorView,wm就是WindowManager。最后通过wm.addView(decor, l)方法，实现Activity布局的加载。这里还注意到WindowManager.LayoutParams的type参数为WindowManager.LayoutParams.TYPE_BASE_APPLICATION，也即是应用窗口类型(所有程序窗口的base窗口，其他应用程序窗口都显示在它上面),具体有关Window的窗口属性，可以参考博文<a href=\"http://blog.csdn.net/awenyini/article/details/78265284\" target=\"_blank\" rel=\"external\">Android悬浮窗原理解析(Window)</a>,想了解的同学，可以点击看看，这里有比较全的Window属性解释。</p>\n<p>我们再来看一下wm,这里定义的类型是接口ViewManager，其实它就是WindowManager，这里主要是使用设计模式的里氏替换原则(源码中很多地方都用这原则)。wm主要是通过a.getWindowManager()赋值的，所以我们主要来看看Activity中的getWindowManager()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WindowManager <span class=\"title\">getWindowManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>mWindowMananger是Activity的一个属性变量，通过<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity的启动加载流程</a>,Activity初始化过程中就会对mWindowManager进行赋值，而Activity初始化主要通过attach方法完成，所以我们继续来看Activity的attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></div><div class=\"line\">        Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">        Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">        CharSequence title, Activity parent, String id,</div><div class=\"line\">        NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">        Configuration config) &#123;</div><div class=\"line\">    .......</div><div class=\"line\">    </div><div class=\"line\">    mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mWindow.getLayoutInflater().setPrivateFactory(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">    mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">    &#125;</div><div class=\"line\">    mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">    mCurrentConfig = config;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是通过mWindow.getWindowManager()来赋值mWindowManager，而mWindow即PhoneWindow，这点在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程</a>中，已分析过。由于PhoneWindow是继承至Window，通过阅读源码分析知道，getWindowManager()方法，主要是window中完成实现的，所以我们具体来看看Window中的getWindowManager()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWindowManager</span><span class=\"params\">(WindowManager wm, IBinder appToken, String appName,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> hardwareAccelerated) &#123;</div><div class=\"line\">    mAppToken = appToken;</div><div class=\"line\">    mAppName = appName;</div><div class=\"line\">    <span class=\"keyword\">if</span> (wm == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        wm = WindowManagerImpl.getDefault();<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    mWindowManager = <span class=\"keyword\">new</span> LocalWindowManager(wm, hardwareAccelerated);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WindowManager <span class=\"title\">getWindowManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，我们先来看一下注释1，WindowManagerImpl.getDefault()，这很明显是单例模式。我们继续来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> WindowManagerImpl sWindowManager = <span class=\"keyword\">new</span> WindowManagerImpl();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> WindowManagerImpl <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里wm就是WindowManagerImpl。我们来看看WindowManagerImpl类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowManagerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">WindowManager</span> </span>&#123;</div><div class=\"line\"> ......省略细节</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再来看看注释2,也即LocalWindowManager类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalWindowManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">WindowManagerImpl</span>.<span class=\"title\">CompatModeWrapper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROPERTY_HARDWARE_UI = <span class=\"string\">\"persist.sys.ui.hw\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mHardwareAccelerated;</div><div class=\"line\"></div><div class=\"line\">        LocalWindowManager(WindowManager wm, <span class=\"keyword\">boolean</span> hardwareAccelerated) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(wm, getCompatInfo(mContext));</div><div class=\"line\">            mHardwareAccelerated = hardwareAccelerated ||</div><div class=\"line\">                    SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHardwareAccelerated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mHardwareAccelerated;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">super</span>.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续来看看LocalWindowManager类继承的WindowManagerImpl的内部类CompatModeWrapper<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompatModeWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">WindowManager</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WindowManagerImpl mWindowManager;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Display mDefaultDisplay;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CompatibilityInfoHolder mCompatibilityInfo;</div><div class=\"line\"></div><div class=\"line\">       CompatModeWrapper(WindowManager wm, CompatibilityInfoHolder ci) &#123;</div><div class=\"line\">           mWindowManager = wm <span class=\"keyword\">instanceof</span> CompatModeWrapper</div><div class=\"line\">                   ? ((CompatModeWrapper)wm).mWindowManager : (WindowManagerImpl)wm;</div><div class=\"line\">           <span class=\"keyword\">if</span> (ci == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               mDefaultDisplay = mWindowManager.getDefaultDisplay();</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               mDefaultDisplay = Display.createCompatibleDisplay(</div><div class=\"line\">                       mWindowManager.getDefaultDisplay().getDisplayId(), ci);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           mCompatibilityInfo = ci;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, android.view.ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.addView(view, params, mCompatibilityInfo);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, android.view.ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.updateViewLayout(view, params);</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.removeView(view);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> Display <span class=\"title\">getDefaultDisplay</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mDefaultDisplay;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.removeViewImmediate(view);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHardwareAccelerated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mWindowManager.isHardwareAccelerated();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>WindowManagerImpl的内部类CompatModeWrapper实现了WindowManager接口，而WindowManager又实现了ViewManager接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WindowManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewManager</span> </span>&#123;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看看ViewManager接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ViewManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里实现ViewManager接口的有WindowManager,而WindowManagerImpl和CompatModeWrapper也都实现WindowManager接口，从而间接实现了ViewManager接口，也都实现的添加，更新和删除View的方法。</p>\n<p>所以，在最开始处，以ViewManager定义的wm其实也就是LocalWindowManager,通过相互继承调用，其实最后调用的是WindowManagerImpl中的addView()方法，我们继续来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       addView(view, <span class=\"keyword\">new</span> WindowManager.LayoutParams(</div><div class=\"line\">           WindowManager.LayoutParams.TYPE_APPLICATION, <span class=\"number\">0</span>, PixelFormat.OPAQUE));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       addView(view, params, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params, CompatibilityInfoHolder cih)</span> </span>&#123;</div><div class=\"line\">       addView(view, params, cih, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</span></span></div><div class=\"line\">           CompatibilityInfoHolder cih, <span class=\"keyword\">boolean</span> nest) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) Log.v(<span class=\"string\">\"WindowManager\"</span>, <span class=\"string\">\"addView view=\"</span> + view);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">                   <span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams</div><div class=\"line\">               = (WindowManager.LayoutParams)params;</div><div class=\"line\">       </div><div class=\"line\">       ViewRootImpl root;</div><div class=\"line\">       View panelParentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">       .......</div><div class=\"line\">           root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext());</div><div class=\"line\">           root.mAddNesting = <span class=\"number\">1</span>;</div><div class=\"line\">           <span class=\"keyword\">if</span> (cih == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               root.mCompatibilityInfo = <span class=\"keyword\">new</span> CompatibilityInfoHolder();</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               root.mCompatibilityInfo = cih;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           view.setLayoutParams(wparams);</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"keyword\">if</span> (mViews == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               index = <span class=\"number\">1</span>;</div><div class=\"line\">               mViews = <span class=\"keyword\">new</span> View[<span class=\"number\">1</span>];</div><div class=\"line\">               mRoots = <span class=\"keyword\">new</span> ViewRootImpl[<span class=\"number\">1</span>];</div><div class=\"line\">               mParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams[<span class=\"number\">1</span>];</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               index = mViews.length + <span class=\"number\">1</span>;</div><div class=\"line\">               Object[] old = mViews;</div><div class=\"line\">               mViews = <span class=\"keyword\">new</span> View[index]; </div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mViews, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">               old = mRoots;</div><div class=\"line\">               mRoots = <span class=\"keyword\">new</span> ViewRootImpl[index];</div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mRoots, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">               old = mParams;</div><div class=\"line\">               mParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams[index];</div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mParams, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           index--;</div><div class=\"line\"></div><div class=\"line\">           mViews[index] = view;</div><div class=\"line\">           mRoots[index] = root;</div><div class=\"line\">           mParams[index] = wparams;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       root.setView(view, wparams, panelParentView);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里有三个数组mViews，mRoots，mParams变量，mViews主要保存向Window中添加的View,mRoots主要保存实现绘制View的ViewRootImpl,mParams主要保存添加的Window参数，最后每一个添加的View都会调用root.setView(view, wparams, panelParentView)方法，实现View的绘制。关于这三个参数的作用，是因为WindowManager中可能添加多个Window，多个View，所以需要保存起来，方便删除和更新。</p>\n<p>关于WindowManagerImpl的源码，这里需要注意一下，由于我用的版本是Andorid4.1.1_r1，源码如上，而在大于Andorid4.1.1_r11的版本，如Android5.1.1中的WindowManagerImpl源码的addView方法，主要是通过WindowManagerGlobal来实现的,逻辑也都和Andorid4.1.1_r1一样，只是把部分逻辑封装成WindowManagerGlobal，这里我就不多说，想了解的同学，可以自行查看。</p>\n<p>到这里，DecorView添加入Window的流程就分析完了。接下来主要就是DecorView的绘制流程，也即View的绘制流程。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78265284\" target=\"_blank\" rel=\"external\">Android悬浮窗原理解析(Window)</a></p>\n","excerpt":"<hr>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>文章中，已经详细分析了setContentView()加载流程，但对于装饰器DecorView怎么被加载到Window上的，上篇博文没有说到，所以本篇博文将会接着上篇博文，继续分析Activity布局的加载流程。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>Window：</strong> 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。</li>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>DecorView：</strong>是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View。</li>\n<li><strong>WindowManager：</strong> 是Window的管理类，管理着Window的添加、更新和删除。</li>\n<li><strong>WindowManagerService(AMS)：</strong>是系统窗口管理服务类，具体管理着系统各种各样的Window。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n</ul>\n<h1 id=\"一、Activity布局及DecorView加载分析\"><a href=\"#一、Activity布局及DecorView加载分析\" class=\"headerlink\" title=\"一、Activity布局及DecorView加载分析\"></a>一、Activity布局及DecorView加载分析</h1><p>这里，我们接着Activity布局加载流程继续分析。在布局加载流程最后，主要是通过WindowManager添加装饰器DecorView到Window中，从而实现Activity布局的加载，这里继续来看那部分代码<br>","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">     ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\">     .......</div><div class=\"line\">     <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> Activity a = r.activity;</div><div class=\"line\">         ......</div><div class=\"line\">         <span class=\"keyword\">if</span> (r.window == <span class=\"keyword\">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">             r.window = r.activity.getWindow();</div><div class=\"line\">             View decor = r.window.getDecorView();</div><div class=\"line\">             decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">             ViewManager wm = a.getWindowManager();</div><div class=\"line\">             WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">             a.mDecor = decor;</div><div class=\"line\">             l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">             l.softInputMode |= forwardBit;</div><div class=\"line\">             <span class=\"keyword\">if</span> (a.mVisibleFromClient) &#123;</div><div class=\"line\">                 a.mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">                 wm.addView(decor, l);</div><div class=\"line\">             &#125;</div><div class=\"line\">         ......</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>这里，简单解释一下参数。其中r.window为PhoneWindow,decor就是装饰器DecorView,wm就是WindowManager。最后通过wm.addView(decor, l)方法，实现Activity布局的加载。这里还注意到WindowManager.LayoutParams的type参数为WindowManager.LayoutParams.TYPE_BASE_APPLICATION，也即是应用窗口类型(所有程序窗口的base窗口，其他应用程序窗口都显示在它上面),具体有关Window的窗口属性，可以参考博文<a href=\"http://blog.csdn.net/awenyini/article/details/78265284\">Android悬浮窗原理解析(Window)</a>,想了解的同学，可以点击看看，这里有比较全的Window属性解释。</p>\n<p>我们再来看一下wm,这里定义的类型是接口ViewManager，其实它就是WindowManager，这里主要是使用设计模式的里氏替换原则(源码中很多地方都用这原则)。wm主要是通过a.getWindowManager()赋值的，所以我们主要来看看Activity中的getWindowManager()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WindowManager <span class=\"title\">getWindowManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>mWindowMananger是Activity的一个属性变量，通过<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity的启动加载流程</a>,Activity初始化过程中就会对mWindowManager进行赋值，而Activity初始化主要通过attach方法完成，所以我们继续来看Activity的attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</div><div class=\"line\">        Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">        Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">        CharSequence title, Activity parent, String id,</div><div class=\"line\">        NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">        Configuration config)</span> </span>&#123;</div><div class=\"line\">    .......</div><div class=\"line\">    </div><div class=\"line\">    mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mWindow.getLayoutInflater().setPrivateFactory(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">    mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">    &#125;</div><div class=\"line\">    mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">    mCurrentConfig = config;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是通过mWindow.getWindowManager()来赋值mWindowManager，而mWindow即PhoneWindow，这点在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程</a>中，已分析过。由于PhoneWindow是继承至Window，通过阅读源码分析知道，getWindowManager()方法，主要是window中完成实现的，所以我们具体来看看Window中的getWindowManager()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWindowManager</span><span class=\"params\">(WindowManager wm, IBinder appToken, String appName,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> hardwareAccelerated)</span> </span>&#123;</div><div class=\"line\">    mAppToken = appToken;</div><div class=\"line\">    mAppName = appName;</div><div class=\"line\">    <span class=\"keyword\">if</span> (wm == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        wm = WindowManagerImpl.getDefault();<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    mWindowManager = <span class=\"keyword\">new</span> LocalWindowManager(wm, hardwareAccelerated);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WindowManager <span class=\"title\">getWindowManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，我们先来看一下注释1，WindowManagerImpl.getDefault()，这很明显是单例模式。我们继续来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> WindowManagerImpl sWindowManager = <span class=\"keyword\">new</span> WindowManagerImpl();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> WindowManagerImpl <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sWindowManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里wm就是WindowManagerImpl。我们来看看WindowManagerImpl类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowManagerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">WindowManager</span> </span>&#123;</div><div class=\"line\"> ......省略细节</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再来看看注释2,也即LocalWindowManager类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalWindowManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">WindowManagerImpl</span>.<span class=\"title\">CompatModeWrapper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PROPERTY_HARDWARE_UI = <span class=\"string\">\"persist.sys.ui.hw\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mHardwareAccelerated;</div><div class=\"line\"></div><div class=\"line\">        LocalWindowManager(WindowManager wm, <span class=\"keyword\">boolean</span> hardwareAccelerated) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(wm, getCompatInfo(mContext));</div><div class=\"line\">            mHardwareAccelerated = hardwareAccelerated ||</div><div class=\"line\">                    SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHardwareAccelerated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mHardwareAccelerated;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">super</span>.addView(view, params);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续来看看LocalWindowManager类继承的WindowManagerImpl的内部类CompatModeWrapper<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompatModeWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">WindowManager</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WindowManagerImpl mWindowManager;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Display mDefaultDisplay;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CompatibilityInfoHolder mCompatibilityInfo;</div><div class=\"line\"></div><div class=\"line\">       CompatModeWrapper(WindowManager wm, CompatibilityInfoHolder ci) &#123;</div><div class=\"line\">           mWindowManager = wm <span class=\"keyword\">instanceof</span> CompatModeWrapper</div><div class=\"line\">                   ? ((CompatModeWrapper)wm).mWindowManager : (WindowManagerImpl)wm;</div><div class=\"line\">           <span class=\"keyword\">if</span> (ci == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               mDefaultDisplay = mWindowManager.getDefaultDisplay();</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               mDefaultDisplay = Display.createCompatibleDisplay(</div><div class=\"line\">                       mWindowManager.getDefaultDisplay().getDisplayId(), ci);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           mCompatibilityInfo = ci;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, android.view.ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.addView(view, params, mCompatibilityInfo);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, android.view.ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.updateViewLayout(view, params);</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.removeView(view);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> Display <span class=\"title\">getDefaultDisplay</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mDefaultDisplay;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeViewImmediate</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">           mWindowManager.removeViewImmediate(view);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHardwareAccelerated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mWindowManager.isHardwareAccelerated();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>WindowManagerImpl的内部类CompatModeWrapper实现了WindowManager接口，而WindowManager又实现了ViewManager接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WindowManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewManager</span> </span>&#123;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看看ViewManager接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ViewManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里实现ViewManager接口的有WindowManager,而WindowManagerImpl和CompatModeWrapper也都实现WindowManager接口，从而间接实现了ViewManager接口，也都实现的添加，更新和删除View的方法。</p>\n<p>所以，在最开始处，以ViewManager定义的wm其实也就是LocalWindowManager,通过相互继承调用，其实最后调用的是WindowManagerImpl中的addView()方法，我们继续来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       addView(view, <span class=\"keyword\">new</span> WindowManager.LayoutParams(</div><div class=\"line\">           WindowManager.LayoutParams.TYPE_APPLICATION, <span class=\"number\">0</span>, PixelFormat.OPAQUE));</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class=\"line\">       addView(view, params, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params, CompatibilityInfoHolder cih)</span> </span>&#123;</div><div class=\"line\">       addView(view, params, cih, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params,</div><div class=\"line\">           CompatibilityInfoHolder cih, <span class=\"keyword\">boolean</span> nest)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) Log.v(<span class=\"string\">\"WindowManager\"</span>, <span class=\"string\">\"addView view=\"</span> + view);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (!(params <span class=\"keyword\">instanceof</span> WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</div><div class=\"line\">                   <span class=\"string\">\"Params must be WindowManager.LayoutParams\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> WindowManager.LayoutParams wparams</div><div class=\"line\">               = (WindowManager.LayoutParams)params;</div><div class=\"line\">       </div><div class=\"line\">       ViewRootImpl root;</div><div class=\"line\">       View panelParentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">       .......</div><div class=\"line\">           root = <span class=\"keyword\">new</span> ViewRootImpl(view.getContext());</div><div class=\"line\">           root.mAddNesting = <span class=\"number\">1</span>;</div><div class=\"line\">           <span class=\"keyword\">if</span> (cih == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               root.mCompatibilityInfo = <span class=\"keyword\">new</span> CompatibilityInfoHolder();</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               root.mCompatibilityInfo = cih;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           view.setLayoutParams(wparams);</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"keyword\">if</span> (mViews == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               index = <span class=\"number\">1</span>;</div><div class=\"line\">               mViews = <span class=\"keyword\">new</span> View[<span class=\"number\">1</span>];</div><div class=\"line\">               mRoots = <span class=\"keyword\">new</span> ViewRootImpl[<span class=\"number\">1</span>];</div><div class=\"line\">               mParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams[<span class=\"number\">1</span>];</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               index = mViews.length + <span class=\"number\">1</span>;</div><div class=\"line\">               Object[] old = mViews;</div><div class=\"line\">               mViews = <span class=\"keyword\">new</span> View[index]; </div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mViews, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">               old = mRoots;</div><div class=\"line\">               mRoots = <span class=\"keyword\">new</span> ViewRootImpl[index];</div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mRoots, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">               old = mParams;</div><div class=\"line\">               mParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams[index];</div><div class=\"line\">               System.arraycopy(old, <span class=\"number\">0</span>, mParams, <span class=\"number\">0</span>, index-<span class=\"number\">1</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           index--;</div><div class=\"line\"></div><div class=\"line\">           mViews[index] = view;</div><div class=\"line\">           mRoots[index] = root;</div><div class=\"line\">           mParams[index] = wparams;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// do this last because it fires off messages to start doing things</span></div><div class=\"line\">       root.setView(view, wparams, panelParentView);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里有三个数组mViews，mRoots，mParams变量，mViews主要保存向Window中添加的View,mRoots主要保存实现绘制View的ViewRootImpl,mParams主要保存添加的Window参数，最后每一个添加的View都会调用root.setView(view, wparams, panelParentView)方法，实现View的绘制。关于这三个参数的作用，是因为WindowManager中可能添加多个Window，多个View，所以需要保存起来，方便删除和更新。</p>\n<p>关于WindowManagerImpl的源码，这里需要注意一下，由于我用的版本是Andorid4.1.1_r1，源码如上，而在大于Andorid4.1.1_r11的版本，如Android5.1.1中的WindowManagerImpl源码的addView方法，主要是通过WindowManagerGlobal来实现的,逻辑也都和Andorid4.1.1_r1一样，只是把部分逻辑封装成WindowManagerGlobal，这里我就不多说，想了解的同学，可以自行查看。</p>\n<p>到这里，DecorView添加入Window的流程就分析完了。接下来主要就是DecorView的绘制流程，也即View的绘制流程。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78265284\">Android悬浮窗原理解析(Window)</a></p>"},{"layout":"post","title":"Binder通信机制原理解析","date":"2017-12-14T11:24:20.000Z","comments":1,"_content":"---\nBinder是什么？Binder有啥用？作为一个应用开发者，如果我们开发的应用不涉及跨进程通信(IPC)，我想我们也不会去接触Binder。但不知你有没有发现，近来的Andorid面试，都会问及Android跨进程通信方面的知识，这又是为什么呢？如果你喜欢看Android源码，你就会发现Binder无处不在，Android系统中很多服务都是通过Binder来进行跨进程通信，了解Binder,弄懂Binder原理，这就变得非常重要了。\n\nAndroid的内核是Linux内核,但为什么没有采用Linux常用的跨进程通信方式呢？而是采用Binder呢？这里在知乎有一篇非常详细的帖子:为什么 Android 要采用 Binder 作为 IPC 机制？大家可以看一下，我相信此篇帖子下肚，你就可以了解当年Android之父Andy Rubin为什么会选择Binder作为android系统跨进程通信方式了。\n\n# 一、什么Binder?\n\nBinder是Android系统中非常重要的一种跨进程通信方式(IPC)。\n\nBinder是一种基于C/S的架构，主要包含四个部分：服务端（Server）,客户端（Client）,Binder驱动,ServiceManager。\n\nAndroid四大组件Activity、Service、BroadcastReceiver和ContentProvider的启动原理也都与Binder IPC机制有关；Android源码中ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等服务的调用也都与Binder IPC机制有关。\n\n# 二、Binder跨进程通信实现原理\n**1.应用进程空间分配**\n<!-- more -->\n![](/assets/img/tech_android_binder_ipc.png)\n\n每个Android应用程序的进程，只能运行在自己进程所拥有的虚拟地址空间上。对应一个4GB的虚拟地址空间，其中3GB是用户空间，1GB是内核空间，当然内核空间的大小是可以通过参数配置调整的。对于用户空间，不同进程之间彼此是不能共享的，而内核空间却是可共享的。Client进程向Server进程通信，恰恰是利用进程间可共享的内核内存空间来完成底层通信工作的，Client端与Server端进程往往采用ioctl等方法跟内核空间的驱动进行交互。\n\n**2.Binder进程通信原理**\n\n![](/assets/img/tech_android_binder_struct.png)\n\n* Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中\n* Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server\n* Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信\n* Client和Server之间的进程间通信通过Binder驱动程序间接实现\n* Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力\n\n**3.Binder跨进程通信数据流动图：**\n\n![](/assets/img/tech_android_binder_data.png)\n\nClient端发起通信请求–>服务代理Proxy通过Parcel打包数据–>内核空间Binder驱动实现共享数据–>Server端解包Parcel获取数据。这样就实现了Client端到Server端的跨进程通信。\n\n具体详细实现，可以参考这篇文章[彻底理解Android Binder通信架构](http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/)\n\n# 三、Binder两种跨进程通信方式\n**1.注册服务的方式**\n\nAndroid系统多数服务，都需要先注册，并通过ServiceManager守护进程来管理，需要用时，直接从ServiceManager中获取相关服务。例如ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等系统服务都是通过此种方式。这些服务什么时候注册呢？在Android应用程序入口源码解析这篇文章中有说，当Zygote进程启动后，启动SystemServer进程时，就会注册各种服务。具体系统服务是怎么通信的，下篇博文会介绍。\n\n**2.AIDL方式**\n\n这种方式也是开发中我们经常使用的方式。首先定义一个后缀为aidl的接口，如\n```java\ninterface IMainService {\n   void start(String temp);\n}\n```\n项目编译成功后，会自动生成相关的java文件如：\n```java\npublic interface IMainService extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.awen.codebase.IMainService {\n        private static final java.lang.String DESCRIPTOR = \"com.awen.codebase.IMainService\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.awen.codebase.IMainService interface,\n         * generating a proxy if needed.\n         */\n        public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_start: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    this.start(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.awen.codebase.IMainService {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            @Override\n            public void start(java.lang.String temp) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeString(temp);\n                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n    }\n    public void start(java.lang.String temp) throws android.os.RemoteException;\n}\n```\n\n其中Stub就相当于Server端，代理Proxy就相当于Client端。在AIDL开发中，一般都是结合Service一起使用的，通过bindService把客户端和服务端链接起来，从而就可以进行通信。如果Service在同一个进程，就在进程中通信，如果Service在另外一个进程，就属于跨进程通信。\n\n\n# 四、总结\nBinder跨进程通信，主要就是利用进程间内核空间共享数据来实现的。Binder驱动主要就是在内核空间，通过Binder驱动实现进程间数据共享。\n\n# 五、参考文档\n[彻底理解Android Binder通信架构](http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/)\n\n[Binder系列—开篇](http://gityuan.com/2015/10/31/binder-prepare/)\n\n[简单理解Binder机制的原理](http://www.jianshu.com/p/4920c7781afe?from=jiantop.com)\n\n[Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n\n\n","source":"_posts/tech_android_framework_binder.md","raw":"---\nlayout: post\ntitle: \"Binder通信机制原理解析\"\ndate: 12/14/2017 7:24:20 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Binder通信机制\n\t- Android框架源码解析\n---\n---\nBinder是什么？Binder有啥用？作为一个应用开发者，如果我们开发的应用不涉及跨进程通信(IPC)，我想我们也不会去接触Binder。但不知你有没有发现，近来的Andorid面试，都会问及Android跨进程通信方面的知识，这又是为什么呢？如果你喜欢看Android源码，你就会发现Binder无处不在，Android系统中很多服务都是通过Binder来进行跨进程通信，了解Binder,弄懂Binder原理，这就变得非常重要了。\n\nAndroid的内核是Linux内核,但为什么没有采用Linux常用的跨进程通信方式呢？而是采用Binder呢？这里在知乎有一篇非常详细的帖子:为什么 Android 要采用 Binder 作为 IPC 机制？大家可以看一下，我相信此篇帖子下肚，你就可以了解当年Android之父Andy Rubin为什么会选择Binder作为android系统跨进程通信方式了。\n\n# 一、什么Binder?\n\nBinder是Android系统中非常重要的一种跨进程通信方式(IPC)。\n\nBinder是一种基于C/S的架构，主要包含四个部分：服务端（Server）,客户端（Client）,Binder驱动,ServiceManager。\n\nAndroid四大组件Activity、Service、BroadcastReceiver和ContentProvider的启动原理也都与Binder IPC机制有关；Android源码中ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等服务的调用也都与Binder IPC机制有关。\n\n# 二、Binder跨进程通信实现原理\n**1.应用进程空间分配**\n<!-- more -->\n![](/assets/img/tech_android_binder_ipc.png)\n\n每个Android应用程序的进程，只能运行在自己进程所拥有的虚拟地址空间上。对应一个4GB的虚拟地址空间，其中3GB是用户空间，1GB是内核空间，当然内核空间的大小是可以通过参数配置调整的。对于用户空间，不同进程之间彼此是不能共享的，而内核空间却是可共享的。Client进程向Server进程通信，恰恰是利用进程间可共享的内核内存空间来完成底层通信工作的，Client端与Server端进程往往采用ioctl等方法跟内核空间的驱动进行交互。\n\n**2.Binder进程通信原理**\n\n![](/assets/img/tech_android_binder_struct.png)\n\n* Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中\n* Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server\n* Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信\n* Client和Server之间的进程间通信通过Binder驱动程序间接实现\n* Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力\n\n**3.Binder跨进程通信数据流动图：**\n\n![](/assets/img/tech_android_binder_data.png)\n\nClient端发起通信请求–>服务代理Proxy通过Parcel打包数据–>内核空间Binder驱动实现共享数据–>Server端解包Parcel获取数据。这样就实现了Client端到Server端的跨进程通信。\n\n具体详细实现，可以参考这篇文章[彻底理解Android Binder通信架构](http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/)\n\n# 三、Binder两种跨进程通信方式\n**1.注册服务的方式**\n\nAndroid系统多数服务，都需要先注册，并通过ServiceManager守护进程来管理，需要用时，直接从ServiceManager中获取相关服务。例如ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等系统服务都是通过此种方式。这些服务什么时候注册呢？在Android应用程序入口源码解析这篇文章中有说，当Zygote进程启动后，启动SystemServer进程时，就会注册各种服务。具体系统服务是怎么通信的，下篇博文会介绍。\n\n**2.AIDL方式**\n\n这种方式也是开发中我们经常使用的方式。首先定义一个后缀为aidl的接口，如\n```java\ninterface IMainService {\n   void start(String temp);\n}\n```\n项目编译成功后，会自动生成相关的java文件如：\n```java\npublic interface IMainService extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.awen.codebase.IMainService {\n        private static final java.lang.String DESCRIPTOR = \"com.awen.codebase.IMainService\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.awen.codebase.IMainService interface,\n         * generating a proxy if needed.\n         */\n        public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_start: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    this.start(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.awen.codebase.IMainService {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            @Override\n            public void start(java.lang.String temp) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeString(temp);\n                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n    }\n    public void start(java.lang.String temp) throws android.os.RemoteException;\n}\n```\n\n其中Stub就相当于Server端，代理Proxy就相当于Client端。在AIDL开发中，一般都是结合Service一起使用的，通过bindService把客户端和服务端链接起来，从而就可以进行通信。如果Service在同一个进程，就在进程中通信，如果Service在另外一个进程，就属于跨进程通信。\n\n\n# 四、总结\nBinder跨进程通信，主要就是利用进程间内核空间共享数据来实现的。Binder驱动主要就是在内核空间，通过Binder驱动实现进程间数据共享。\n\n# 五、参考文档\n[彻底理解Android Binder通信架构](http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/)\n\n[Binder系列—开篇](http://gityuan.com/2015/10/31/binder-prepare/)\n\n[简单理解Binder机制的原理](http://www.jianshu.com/p/4920c7781afe?from=jiantop.com)\n\n[Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n\n\n","slug":"tech_android_framework_binder","published":1,"updated":"2019-06-27T08:15:15.310Z","photos":[],"link":"","_id":"cjxfjaery003kystgxf6xzcd3","content":"<hr>\n<p>Binder是什么？Binder有啥用？作为一个应用开发者，如果我们开发的应用不涉及跨进程通信(IPC)，我想我们也不会去接触Binder。但不知你有没有发现，近来的Andorid面试，都会问及Android跨进程通信方面的知识，这又是为什么呢？如果你喜欢看Android源码，你就会发现Binder无处不在，Android系统中很多服务都是通过Binder来进行跨进程通信，了解Binder,弄懂Binder原理，这就变得非常重要了。</p>\n<p>Android的内核是Linux内核,但为什么没有采用Linux常用的跨进程通信方式呢？而是采用Binder呢？这里在知乎有一篇非常详细的帖子:为什么 Android 要采用 Binder 作为 IPC 机制？大家可以看一下，我相信此篇帖子下肚，你就可以了解当年Android之父Andy Rubin为什么会选择Binder作为android系统跨进程通信方式了。</p>\n<h1 id=\"一、什么Binder\"><a href=\"#一、什么Binder\" class=\"headerlink\" title=\"一、什么Binder?\"></a>一、什么Binder?</h1><p>Binder是Android系统中非常重要的一种跨进程通信方式(IPC)。</p>\n<p>Binder是一种基于C/S的架构，主要包含四个部分：服务端（Server）,客户端（Client）,Binder驱动,ServiceManager。</p>\n<p>Android四大组件Activity、Service、BroadcastReceiver和ContentProvider的启动原理也都与Binder IPC机制有关；Android源码中ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等服务的调用也都与Binder IPC机制有关。</p>\n<h1 id=\"二、Binder跨进程通信实现原理\"><a href=\"#二、Binder跨进程通信实现原理\" class=\"headerlink\" title=\"二、Binder跨进程通信实现原理\"></a>二、Binder跨进程通信实现原理</h1><p><strong>1.应用进程空间分配</strong><br><a id=\"more\"></a><br><img src=\"/assets/img/tech_android_binder_ipc.png\" alt=\"\"></p>\n<p>每个Android应用程序的进程，只能运行在自己进程所拥有的虚拟地址空间上。对应一个4GB的虚拟地址空间，其中3GB是用户空间，1GB是内核空间，当然内核空间的大小是可以通过参数配置调整的。对于用户空间，不同进程之间彼此是不能共享的，而内核空间却是可共享的。Client进程向Server进程通信，恰恰是利用进程间可共享的内核内存空间来完成底层通信工作的，Client端与Server端进程往往采用ioctl等方法跟内核空间的驱动进行交互。</p>\n<p><strong>2.Binder进程通信原理</strong></p>\n<p><img src=\"/assets/img/tech_android_binder_struct.png\" alt=\"\"></p>\n<ul>\n<li>Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中</li>\n<li>Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server</li>\n<li>Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信</li>\n<li>Client和Server之间的进程间通信通过Binder驱动程序间接实现</li>\n<li>Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力</li>\n</ul>\n<p><strong>3.Binder跨进程通信数据流动图：</strong></p>\n<p><img src=\"/assets/img/tech_android_binder_data.png\" alt=\"\"></p>\n<p>Client端发起通信请求–&gt;服务代理Proxy通过Parcel打包数据–&gt;内核空间Binder驱动实现共享数据–&gt;Server端解包Parcel获取数据。这样就实现了Client端到Server端的跨进程通信。</p>\n<p>具体详细实现，可以参考这篇文章<a href=\"http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/\" target=\"_blank\" rel=\"external\">彻底理解Android Binder通信架构</a></p>\n<h1 id=\"三、Binder两种跨进程通信方式\"><a href=\"#三、Binder两种跨进程通信方式\" class=\"headerlink\" title=\"三、Binder两种跨进程通信方式\"></a>三、Binder两种跨进程通信方式</h1><p><strong>1.注册服务的方式</strong></p>\n<p>Android系统多数服务，都需要先注册，并通过ServiceManager守护进程来管理，需要用时，直接从ServiceManager中获取相关服务。例如ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等系统服务都是通过此种方式。这些服务什么时候注册呢？在Android应用程序入口源码解析这篇文章中有说，当Zygote进程启动后，启动SystemServer进程时，就会注册各种服务。具体系统服务是怎么通信的，下篇博文会介绍。</p>\n<p><strong>2.AIDL方式</strong></p>\n<p>这种方式也是开发中我们经常使用的方式。首先定义一个后缀为aidl的接口，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>项目编译成功后，会自动生成相关的java文件如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.awen.codebase.IMainService\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Cast an IBinder object into an com.awen.codebase.IMainService interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_start: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.start(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeString(temp);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中Stub就相当于Server端，代理Proxy就相当于Client端。在AIDL开发中，一般都是结合Service一起使用的，通过bindService把客户端和服务端链接起来，从而就可以进行通信。如果Service在同一个进程，就在进程中通信，如果Service在另外一个进程，就属于跨进程通信。</p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>Binder跨进程通信，主要就是利用进程间内核空间共享数据来实现的。Binder驱动主要就是在内核空间，通过Binder驱动实现进程间数据共享。</p>\n<h1 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h1><p><a href=\"http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/\" target=\"_blank\" rel=\"external\">彻底理解Android Binder通信架构</a></p>\n<p><a href=\"http://gityuan.com/2015/10/31/binder-prepare/\" target=\"_blank\" rel=\"external\">Binder系列—开篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/4920c7781afe?from=jiantop.com\" target=\"_blank\" rel=\"external\">简单理解Binder机制的原理</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\" target=\"_blank\" rel=\"external\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></p>\n","excerpt":"<hr>\n<p>Binder是什么？Binder有啥用？作为一个应用开发者，如果我们开发的应用不涉及跨进程通信(IPC)，我想我们也不会去接触Binder。但不知你有没有发现，近来的Andorid面试，都会问及Android跨进程通信方面的知识，这又是为什么呢？如果你喜欢看Android源码，你就会发现Binder无处不在，Android系统中很多服务都是通过Binder来进行跨进程通信，了解Binder,弄懂Binder原理，这就变得非常重要了。</p>\n<p>Android的内核是Linux内核,但为什么没有采用Linux常用的跨进程通信方式呢？而是采用Binder呢？这里在知乎有一篇非常详细的帖子:为什么 Android 要采用 Binder 作为 IPC 机制？大家可以看一下，我相信此篇帖子下肚，你就可以了解当年Android之父Andy Rubin为什么会选择Binder作为android系统跨进程通信方式了。</p>\n<h1 id=\"一、什么Binder\"><a href=\"#一、什么Binder\" class=\"headerlink\" title=\"一、什么Binder?\"></a>一、什么Binder?</h1><p>Binder是Android系统中非常重要的一种跨进程通信方式(IPC)。</p>\n<p>Binder是一种基于C/S的架构，主要包含四个部分：服务端（Server）,客户端（Client）,Binder驱动,ServiceManager。</p>\n<p>Android四大组件Activity、Service、BroadcastReceiver和ContentProvider的启动原理也都与Binder IPC机制有关；Android源码中ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等服务的调用也都与Binder IPC机制有关。</p>\n<h1 id=\"二、Binder跨进程通信实现原理\"><a href=\"#二、Binder跨进程通信实现原理\" class=\"headerlink\" title=\"二、Binder跨进程通信实现原理\"></a>二、Binder跨进程通信实现原理</h1><p><strong>1.应用进程空间分配</strong><br>","more":"<br><img src=\"/assets/img/tech_android_binder_ipc.png\" alt=\"\"></p>\n<p>每个Android应用程序的进程，只能运行在自己进程所拥有的虚拟地址空间上。对应一个4GB的虚拟地址空间，其中3GB是用户空间，1GB是内核空间，当然内核空间的大小是可以通过参数配置调整的。对于用户空间，不同进程之间彼此是不能共享的，而内核空间却是可共享的。Client进程向Server进程通信，恰恰是利用进程间可共享的内核内存空间来完成底层通信工作的，Client端与Server端进程往往采用ioctl等方法跟内核空间的驱动进行交互。</p>\n<p><strong>2.Binder进程通信原理</strong></p>\n<p><img src=\"/assets/img/tech_android_binder_struct.png\" alt=\"\"></p>\n<ul>\n<li>Client、Server和Service Manager实现在用户空间中，Binder驱动程序实现在内核空间中</li>\n<li>Binder驱动程序和Service Manager在Android平台中已经实现，开发者只需要在用户空间实现自己的Client和Server</li>\n<li>Binder驱动程序提供设备文件/dev/binder与用户空间交互，Client、Server和Service Manager通过open和ioctl文件操作函数与Binder驱动程序进行通信</li>\n<li>Client和Server之间的进程间通信通过Binder驱动程序间接实现</li>\n<li>Service Manager是一个守护进程，用来管理Server，并向Client提供查询Server接口的能力</li>\n</ul>\n<p><strong>3.Binder跨进程通信数据流动图：</strong></p>\n<p><img src=\"/assets/img/tech_android_binder_data.png\" alt=\"\"></p>\n<p>Client端发起通信请求–&gt;服务代理Proxy通过Parcel打包数据–&gt;内核空间Binder驱动实现共享数据–&gt;Server端解包Parcel获取数据。这样就实现了Client端到Server端的跨进程通信。</p>\n<p>具体详细实现，可以参考这篇文章<a href=\"http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/\">彻底理解Android Binder通信架构</a></p>\n<h1 id=\"三、Binder两种跨进程通信方式\"><a href=\"#三、Binder两种跨进程通信方式\" class=\"headerlink\" title=\"三、Binder两种跨进程通信方式\"></a>三、Binder两种跨进程通信方式</h1><p><strong>1.注册服务的方式</strong></p>\n<p>Android系统多数服务，都需要先注册，并通过ServiceManager守护进程来管理，需要用时，直接从ServiceManager中获取相关服务。例如ActivityManagerService、PackageManagerService、WindowManagerService、PowerManagerService等系统服务都是通过此种方式。这些服务什么时候注册呢？在Android应用程序入口源码解析这篇文章中有说，当Zygote进程启动后，启动SystemServer进程时，就会注册各种服务。具体系统服务是怎么通信的，下篇博文会介绍。</p>\n<p><strong>2.AIDL方式</strong></p>\n<p>这种方式也是开发中我们经常使用的方式。首先定义一个后缀为aidl的接口，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>项目编译成功后，会自动生成相关的java文件如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.awen.codebase.IMainService\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Cast an IBinder object into an com.awen.codebase.IMainService interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_start: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.start(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeString(temp);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中Stub就相当于Server端，代理Proxy就相当于Client端。在AIDL开发中，一般都是结合Service一起使用的，通过bindService把客户端和服务端链接起来，从而就可以进行通信。如果Service在同一个进程，就在进程中通信，如果Service在另外一个进程，就属于跨进程通信。</p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>Binder跨进程通信，主要就是利用进程间内核空间共享数据来实现的。Binder驱动主要就是在内核空间，通过Binder驱动实现进程间数据共享。</p>\n<h1 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h1><p><a href=\"http://www.droidsec.cn/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3android-binder%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84/\">彻底理解Android Binder通信架构</a></p>\n<p><a href=\"http://gityuan.com/2015/10/31/binder-prepare/\">Binder系列—开篇</a></p>\n<p><a href=\"http://www.jianshu.com/p/4920c7781afe?from=jiantop.com\">简单理解Binder机制的原理</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></p>"},{"layout":"post","title":"Java集合类详解","date":"2017-09-22T09:05:45.000Z","comments":1,"_content":"---\n# 一、集合与数组\n\n数组（可以存储**基本数据类型**）是用来存现对象的一种容器，但是数组的**长度固定**，不适合在对象数量未知的情况下使用。\n\n集合（只能存储**对象**，对象类型可以不一样）的**长度可变**，可在多数情况下使用。\n\n# 二、层次关系\n\n\n图1：实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口\n\n![这里写图片描述](http://img.blog.csdn.net/20170921182029951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<!-- more -->\n图2：\n\n![这里写图片描述](http://img.blog.csdn.net/20170922165412119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\nCollection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。**Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。**\n\nMap是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。**Map不能包含重复的key，但是可以包含相同的value。**\n\nIterator，所有的集合类，都实现了Iterator接口，这是一个用于遍历集合中元素的接口，主要包含以下三种方法：\n1.hasNext()是否还有下一个元素。\n2.next()返回下一个元素。\n3.remove()删除当前元素。\n\n# 三、几种重要的接口和类简介\n\n**1、List（有序、可重复）**\nList里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。\n\n**2、Set（无序、不能重复）**\nSet里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。\n\n**3、Map（键值对、键唯一、值不唯一）**\nMap集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。\n\n对比如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170921182218896?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n#  四、遍历\n 在类集中提供了以下四种的常见输出方式：\n \n1）Iterator：迭代输出，是使用最多的输出方式。\n2）ListIterator：是Iterator的子接口，专门用于输出List中的内容。\n3）foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。\n4）for循环\n\n代码示例如下：\n\n for的形式：\n\n```java \nfor（int i=0;i<arr.size();i++){}\n```\n \n foreach的形式：\n\n```java \nfor(int　i：arr){} \n```\n \n iterator的形式：\n\n```java \nIterator it = arr.iterator();\nwhile(it.hasNext())\n{\n   object o =it.next(); \n}\n ```\n\n# 五、Collection集合\n\nCollection是集合接口\n    |————Set子接口:无序，不允许重复。\n    |————List子接口:有序，可以有重复元素。\n    区别：Collections是集合类\n    Set和List对比：\n    Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n    List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n    Set和List具体子类：\n    Set\n     |————HashSet：以哈希表的形式存放元素，插入删除速度很快。\n    List\n     |————ArrayList：动态数组\n     |————LinkedList：链表、队列、堆栈。\n    Array和java.util.Vector\n    Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n# 六、Map集合\n**1.实现类：HashMap、Hashtable、LinkedHashMap和TreeMap**\n\n**HashMap** \n\nHashMap是最常用的Map，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，遍历时，**取得数据的顺序是完全随机的。因为键对象不可以重复**，所以HashMap最多只允许一条记录的键为Null，允许多条记录的值为Null，是非同步的\n\n**Hashtable**\n\nHashtable与HashMap类似，是HashMap的**线程安全版**，它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢，它继承自Dictionary类，不同的是它不允许记录的键或者值为null，同时效率较低。\n\n**ConcurrentHashMap**\n\n线程安全，并且锁分离。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。\n\n**LinkedHashMap**\n\nLinkedHashMap**保存了记录的插入顺序**，在用Iteraor遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢，有HashMap的全部特性。\n\n**TreeMap**\n\nTreeMap实现SortMap接口，能够把它保存的记录**根据键排序**，默认是按键值的升序排序（自然顺序），也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。不允许key值为空，非同步的；\n\n**2.map的遍历**\n\n**第一种：KeySet()**\n\n将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key 。\n取到的结果会乱序，是因为取得数据行主键的时候，使用了HashMap.keySet()方法，而这个方法返回的Set结果，里面的数据是乱序排放的。\n典型用法如下：\n\n```java\nMap map = new HashMap();\nmap.put(\"key1\",\"lisi1\");\nmap.put(\"key2\",\"lisi2\");\nmap.put(\"key3\",\"lisi3\");\nmap.put(\"key4\",\"lisi4\");  \n//先获取map集合的所有键的set集合，keyset（）\nIterator it = map.keySet().iterator();\n //获取迭代器\nwhile(it.hasNext()){\nObject key = it.next();\nSystem.out.println(map.get(key));\n}\n```\n\n**第二种：entrySet（）**\n```java\nSet<Map.Entry<K,V>> entrySet() //返回此映射中包含的映射关系的 Set 视图。（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。Map.Entry表示映射关系。entrySet()：迭代后可以e.getKey()，e.getValue()两种方法来取key和value。返回的是Entry接口。\n典型用法如下：\nMap map = new HashMap();\nmap.put(\"key1\",\"lisi1\");\nmap.put(\"key2\",\"lisi2\");\nmap.put(\"key3\",\"lisi3\");\nmap.put(\"key4\",\"lisi4\");\n//将map集合中的映射关系取出，存入到set集合\nIterator it = map.entrySet().iterator();\nwhile(it.hasNext()){\nEntry e =(Entry) it.next();\nSystem.out.println(\"键\"+e.getKey () + \"的值为\" + e.getValue());\n}\n```\n推荐使用第二种方式，即**entrySet()方法，效率较高。**\n对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。\n\n# 七、主要实现类区别小结\n\n**Vector和ArrayList**\n\n1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。\n\n2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。\n\n3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。\n\nArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。\n\n**arraylist和linkedlist**\n\n1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n\n2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n\n3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。\n\n**HashMap与TreeMap**\n\n1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。\n\n2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。\n\n两个map中的元素一样，但顺序不一样，导致hashCode()不一样。\n同样做测试：\n在HashMap中，同样的值的map,顺序不同，equals时，false;\n而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。\n\n**HashTable与HashMap**\n\n1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。\n\n2、HashMap允许存在一个为null的key，多个为null的value 。\n\n3、hashtable的key和value都不允许为null。\n\n# 八、参考文献\n[JAVA集合类汇总](http://www.cnblogs.com/leeplogs/p/5891861.html)\n\n[ Java集合类详解](http://blog.csdn.net/u014136713/article/details/52089156)\n\n[哈希表（散列表）原理详解](http://blog.csdn.net/duan19920101/article/details/51579136)\n\n","source":"_posts/tech_java_collections.md","raw":"---\nlayout: post\ntitle: \"Java集合类详解\"\ndate: 9/22/2017 5:05:45 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Java集合类\n\t- 转载\n---\n---\n# 一、集合与数组\n\n数组（可以存储**基本数据类型**）是用来存现对象的一种容器，但是数组的**长度固定**，不适合在对象数量未知的情况下使用。\n\n集合（只能存储**对象**，对象类型可以不一样）的**长度可变**，可在多数情况下使用。\n\n# 二、层次关系\n\n\n图1：实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口\n\n![这里写图片描述](http://img.blog.csdn.net/20170921182029951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<!-- more -->\n图2：\n\n![这里写图片描述](http://img.blog.csdn.net/20170922165412119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\nCollection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。**Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。**\n\nMap是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。**Map不能包含重复的key，但是可以包含相同的value。**\n\nIterator，所有的集合类，都实现了Iterator接口，这是一个用于遍历集合中元素的接口，主要包含以下三种方法：\n1.hasNext()是否还有下一个元素。\n2.next()返回下一个元素。\n3.remove()删除当前元素。\n\n# 三、几种重要的接口和类简介\n\n**1、List（有序、可重复）**\nList里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。\n\n**2、Set（无序、不能重复）**\nSet里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。\n\n**3、Map（键值对、键唯一、值不唯一）**\nMap集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。\n\n对比如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20170921182218896?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n#  四、遍历\n 在类集中提供了以下四种的常见输出方式：\n \n1）Iterator：迭代输出，是使用最多的输出方式。\n2）ListIterator：是Iterator的子接口，专门用于输出List中的内容。\n3）foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。\n4）for循环\n\n代码示例如下：\n\n for的形式：\n\n```java \nfor（int i=0;i<arr.size();i++){}\n```\n \n foreach的形式：\n\n```java \nfor(int　i：arr){} \n```\n \n iterator的形式：\n\n```java \nIterator it = arr.iterator();\nwhile(it.hasNext())\n{\n   object o =it.next(); \n}\n ```\n\n# 五、Collection集合\n\nCollection是集合接口\n    |————Set子接口:无序，不允许重复。\n    |————List子接口:有序，可以有重复元素。\n    区别：Collections是集合类\n    Set和List对比：\n    Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。\n    List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。\n    Set和List具体子类：\n    Set\n     |————HashSet：以哈希表的形式存放元素，插入删除速度很快。\n    List\n     |————ArrayList：动态数组\n     |————LinkedList：链表、队列、堆栈。\n    Array和java.util.Vector\n    Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。\n\n# 六、Map集合\n**1.实现类：HashMap、Hashtable、LinkedHashMap和TreeMap**\n\n**HashMap** \n\nHashMap是最常用的Map，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，遍历时，**取得数据的顺序是完全随机的。因为键对象不可以重复**，所以HashMap最多只允许一条记录的键为Null，允许多条记录的值为Null，是非同步的\n\n**Hashtable**\n\nHashtable与HashMap类似，是HashMap的**线程安全版**，它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢，它继承自Dictionary类，不同的是它不允许记录的键或者值为null，同时效率较低。\n\n**ConcurrentHashMap**\n\n线程安全，并且锁分离。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。\n\n**LinkedHashMap**\n\nLinkedHashMap**保存了记录的插入顺序**，在用Iteraor遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢，有HashMap的全部特性。\n\n**TreeMap**\n\nTreeMap实现SortMap接口，能够把它保存的记录**根据键排序**，默认是按键值的升序排序（自然顺序），也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。不允许key值为空，非同步的；\n\n**2.map的遍历**\n\n**第一种：KeySet()**\n\n将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key 。\n取到的结果会乱序，是因为取得数据行主键的时候，使用了HashMap.keySet()方法，而这个方法返回的Set结果，里面的数据是乱序排放的。\n典型用法如下：\n\n```java\nMap map = new HashMap();\nmap.put(\"key1\",\"lisi1\");\nmap.put(\"key2\",\"lisi2\");\nmap.put(\"key3\",\"lisi3\");\nmap.put(\"key4\",\"lisi4\");  \n//先获取map集合的所有键的set集合，keyset（）\nIterator it = map.keySet().iterator();\n //获取迭代器\nwhile(it.hasNext()){\nObject key = it.next();\nSystem.out.println(map.get(key));\n}\n```\n\n**第二种：entrySet（）**\n```java\nSet<Map.Entry<K,V>> entrySet() //返回此映射中包含的映射关系的 Set 视图。（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。Map.Entry表示映射关系。entrySet()：迭代后可以e.getKey()，e.getValue()两种方法来取key和value。返回的是Entry接口。\n典型用法如下：\nMap map = new HashMap();\nmap.put(\"key1\",\"lisi1\");\nmap.put(\"key2\",\"lisi2\");\nmap.put(\"key3\",\"lisi3\");\nmap.put(\"key4\",\"lisi4\");\n//将map集合中的映射关系取出，存入到set集合\nIterator it = map.entrySet().iterator();\nwhile(it.hasNext()){\nEntry e =(Entry) it.next();\nSystem.out.println(\"键\"+e.getKey () + \"的值为\" + e.getValue());\n}\n```\n推荐使用第二种方式，即**entrySet()方法，效率较高。**\n对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。\n\n# 七、主要实现类区别小结\n\n**Vector和ArrayList**\n\n1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。\n\n2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。\n\n3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。\n\nArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。\n\n**arraylist和linkedlist**\n\n1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n\n2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n\n3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。\n\n**HashMap与TreeMap**\n\n1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。\n\n2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。\n\n两个map中的元素一样，但顺序不一样，导致hashCode()不一样。\n同样做测试：\n在HashMap中，同样的值的map,顺序不同，equals时，false;\n而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。\n\n**HashTable与HashMap**\n\n1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。\n\n2、HashMap允许存在一个为null的key，多个为null的value 。\n\n3、hashtable的key和value都不允许为null。\n\n# 八、参考文献\n[JAVA集合类汇总](http://www.cnblogs.com/leeplogs/p/5891861.html)\n\n[ Java集合类详解](http://blog.csdn.net/u014136713/article/details/52089156)\n\n[哈希表（散列表）原理详解](http://blog.csdn.net/duan19920101/article/details/51579136)\n\n","slug":"tech_java_collections","published":1,"updated":"2019-06-27T08:15:15.338Z","photos":[],"link":"","_id":"cjxfjaerz003lystgbsbrdw42","content":"<hr>\n<h1 id=\"一、集合与数组\"><a href=\"#一、集合与数组\" class=\"headerlink\" title=\"一、集合与数组\"></a>一、集合与数组</h1><p>数组（可以存储<strong>基本数据类型</strong>）是用来存现对象的一种容器，但是数组的<strong>长度固定</strong>，不适合在对象数量未知的情况下使用。</p>\n<p>集合（只能存储<strong>对象</strong>，对象类型可以不一样）的<strong>长度可变</strong>，可在多数情况下使用。</p>\n<h1 id=\"二、层次关系\"><a href=\"#二、层次关系\" class=\"headerlink\" title=\"二、层次关系\"></a>二、层次关系</h1><p>图1：实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口</p>\n<p><img src=\"http://img.blog.csdn.net/20170921182029951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<a id=\"more\"></a>\n<p>图2：</p>\n<p><img src=\"http://img.blog.csdn.net/20170922165412119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。<strong>Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</strong></p>\n<p>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。<strong>Map不能包含重复的key，但是可以包含相同的value。</strong></p>\n<p>Iterator，所有的集合类，都实现了Iterator接口，这是一个用于遍历集合中元素的接口，主要包含以下三种方法：<br>1.hasNext()是否还有下一个元素。<br>2.next()返回下一个元素。<br>3.remove()删除当前元素。</p>\n<h1 id=\"三、几种重要的接口和类简介\"><a href=\"#三、几种重要的接口和类简介\" class=\"headerlink\" title=\"三、几种重要的接口和类简介\"></a>三、几种重要的接口和类简介</h1><p><strong>1、List（有序、可重复）</strong><br>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p>\n<p><strong>2、Set（无序、不能重复）</strong><br>Set里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p>\n<p><strong>3、Map（键值对、键唯一、值不唯一）</strong><br>Map集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。</p>\n<p>对比如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170921182218896?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"四、遍历\"><a href=\"#四、遍历\" class=\"headerlink\" title=\"四、遍历\"></a>四、遍历</h1><p> 在类集中提供了以下四种的常见输出方式：</p>\n<p>1）Iterator：迭代输出，是使用最多的输出方式。<br>2）ListIterator：是Iterator的子接口，专门用于输出List中的内容。<br>3）foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。<br>4）for循环</p>\n<p>代码示例如下：</p>\n<p> for的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>（<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.size();i++)&#123;&#125;</div></pre></td></tr></table></figure>\n<p> foreach的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>　i：arr)&#123;&#125;</div></pre></td></tr></table></figure>\n<p> iterator的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator it = arr.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())</div><div class=\"line\">&#123;</div><div class=\"line\">   object o =it.next(); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、Collection集合\"><a href=\"#五、Collection集合\" class=\"headerlink\" title=\"五、Collection集合\"></a>五、Collection集合</h1><p>Collection是集合接口<br>    |————Set子接口:无序，不允许重复。<br>    |————List子接口:有序，可以有重复元素。<br>    区别：Collections是集合类<br>    Set和List对比：<br>    Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。<br>    List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。<br>    Set和List具体子类：<br>    Set<br>     |————HashSet：以哈希表的形式存放元素，插入删除速度很快。<br>    List<br>     |————ArrayList：动态数组<br>     |————LinkedList：链表、队列、堆栈。<br>    Array和java.util.Vector<br>    Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。</p>\n<h1 id=\"六、Map集合\"><a href=\"#六、Map集合\" class=\"headerlink\" title=\"六、Map集合\"></a>六、Map集合</h1><p><strong>1.实现类：HashMap、Hashtable、LinkedHashMap和TreeMap</strong></p>\n<p><strong>HashMap</strong> </p>\n<p>HashMap是最常用的Map，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，遍历时，<strong>取得数据的顺序是完全随机的。因为键对象不可以重复</strong>，所以HashMap最多只允许一条记录的键为Null，允许多条记录的值为Null，是非同步的</p>\n<p><strong>Hashtable</strong></p>\n<p>Hashtable与HashMap类似，是HashMap的<strong>线程安全版</strong>，它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢，它继承自Dictionary类，不同的是它不允许记录的键或者值为null，同时效率较低。</p>\n<p><strong>ConcurrentHashMap</strong></p>\n<p>线程安全，并且锁分离。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>\n<p><strong>LinkedHashMap</strong></p>\n<p>LinkedHashMap<strong>保存了记录的插入顺序</strong>，在用Iteraor遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢，有HashMap的全部特性。</p>\n<p><strong>TreeMap</strong></p>\n<p>TreeMap实现SortMap接口，能够把它保存的记录<strong>根据键排序</strong>，默认是按键值的升序排序（自然顺序），也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。不允许key值为空，非同步的；</p>\n<p><strong>2.map的遍历</strong></p>\n<p><strong>第一种：KeySet()</strong></p>\n<p>将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key 。<br>取到的结果会乱序，是因为取得数据行主键的时候，使用了HashMap.keySet()方法，而这个方法返回的Set结果，里面的数据是乱序排放的。<br>典型用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">map.put(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"lisi1\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key2\"</span>,<span class=\"string\">\"lisi2\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key3\"</span>,<span class=\"string\">\"lisi3\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key4\"</span>,<span class=\"string\">\"lisi4\"</span>);  </div><div class=\"line\"><span class=\"comment\">//先获取map集合的所有键的set集合，keyset（）</span></div><div class=\"line\">Iterator it = map.keySet().iterator();</div><div class=\"line\"> <span class=\"comment\">//获取迭代器</span></div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">Object key = it.next();</div><div class=\"line\">System.out.println(map.get(key));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>第二种：entrySet（）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() <span class=\"comment\">//返回此映射中包含的映射关系的 Set 视图。（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。Map.Entry表示映射关系。entrySet()：迭代后可以e.getKey()，e.getValue()两种方法来取key和value。返回的是Entry接口。</span></div><div class=\"line\">典型用法如下：</div><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">map.put(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"lisi1\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key2\"</span>,<span class=\"string\">\"lisi2\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key3\"</span>,<span class=\"string\">\"lisi3\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key4\"</span>,<span class=\"string\">\"lisi4\"</span>);</div><div class=\"line\"><span class=\"comment\">//将map集合中的映射关系取出，存入到set集合</span></div><div class=\"line\">Iterator it = map.entrySet().iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">Entry e =(Entry) it.next();</div><div class=\"line\">System.out.println(<span class=\"string\">\"键\"</span>+e.getKey () + <span class=\"string\">\"的值为\"</span> + e.getValue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐使用第二种方式，即<strong>entrySet()方法，效率较高。</strong><br>对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。</p>\n<h1 id=\"七、主要实现类区别小结\"><a href=\"#七、主要实现类区别小结\" class=\"headerlink\" title=\"七、主要实现类区别小结\"></a>七、主要实现类区别小结</h1><p><strong>Vector和ArrayList</strong></p>\n<p>1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。</p>\n<p>2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。</p>\n<p>3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。</p>\n<p>ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。</p>\n<p><strong>arraylist和linkedlist</strong></p>\n<p>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</p>\n<p>2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</p>\n<p>3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。</p>\n<p><strong>HashMap与TreeMap</strong></p>\n<p>1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。</p>\n<p>2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。</p>\n<p>两个map中的元素一样，但顺序不一样，导致hashCode()不一样。<br>同样做测试：<br>在HashMap中，同样的值的map,顺序不同，equals时，false;<br>而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。</p>\n<p><strong>HashTable与HashMap</strong></p>\n<p>1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。</p>\n<p>2、HashMap允许存在一个为null的key，多个为null的value 。</p>\n<p>3、hashtable的key和value都不允许为null。</p>\n<h1 id=\"八、参考文献\"><a href=\"#八、参考文献\" class=\"headerlink\" title=\"八、参考文献\"></a>八、参考文献</h1><p><a href=\"http://www.cnblogs.com/leeplogs/p/5891861.html\" target=\"_blank\" rel=\"external\">JAVA集合类汇总</a></p>\n<p><a href=\"http://blog.csdn.net/u014136713/article/details/52089156\" target=\"_blank\" rel=\"external\"> Java集合类详解</a></p>\n<p><a href=\"http://blog.csdn.net/duan19920101/article/details/51579136\" target=\"_blank\" rel=\"external\">哈希表（散列表）原理详解</a></p>\n","excerpt":"<hr>\n<h1 id=\"一、集合与数组\"><a href=\"#一、集合与数组\" class=\"headerlink\" title=\"一、集合与数组\"></a>一、集合与数组</h1><p>数组（可以存储<strong>基本数据类型</strong>）是用来存现对象的一种容器，但是数组的<strong>长度固定</strong>，不适合在对象数量未知的情况下使用。</p>\n<p>集合（只能存储<strong>对象</strong>，对象类型可以不一样）的<strong>长度可变</strong>，可在多数情况下使用。</p>\n<h1 id=\"二、层次关系\"><a href=\"#二、层次关系\" class=\"headerlink\" title=\"二、层次关系\"></a>二、层次关系</h1><p>图1：实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口</p>\n<p><img src=\"http://img.blog.csdn.net/20170921182029951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>","more":"<p>图2：</p>\n<p><img src=\"http://img.blog.csdn.net/20170922165412119?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。<strong>Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</strong></p>\n<p>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。<strong>Map不能包含重复的key，但是可以包含相同的value。</strong></p>\n<p>Iterator，所有的集合类，都实现了Iterator接口，这是一个用于遍历集合中元素的接口，主要包含以下三种方法：<br>1.hasNext()是否还有下一个元素。<br>2.next()返回下一个元素。<br>3.remove()删除当前元素。</p>\n<h1 id=\"三、几种重要的接口和类简介\"><a href=\"#三、几种重要的接口和类简介\" class=\"headerlink\" title=\"三、几种重要的接口和类简介\"></a>三、几种重要的接口和类简介</h1><p><strong>1、List（有序、可重复）</strong><br>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p>\n<p><strong>2、Set（无序、不能重复）</strong><br>Set里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p>\n<p><strong>3、Map（键值对、键唯一、值不唯一）</strong><br>Map集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。</p>\n<p>对比如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170921182218896?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQXdlbnlpbmk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"四、遍历\"><a href=\"#四、遍历\" class=\"headerlink\" title=\"四、遍历\"></a>四、遍历</h1><p> 在类集中提供了以下四种的常见输出方式：</p>\n<p>1）Iterator：迭代输出，是使用最多的输出方式。<br>2）ListIterator：是Iterator的子接口，专门用于输出List中的内容。<br>3）foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。<br>4）for循环</p>\n<p>代码示例如下：</p>\n<p> for的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>（<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.size();i++)&#123;&#125;</div></pre></td></tr></table></figure>\n<p> foreach的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>　i：arr)&#123;&#125;</div></pre></td></tr></table></figure>\n<p> iterator的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator it = arr.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())</div><div class=\"line\">&#123;</div><div class=\"line\">   object o =it.next(); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、Collection集合\"><a href=\"#五、Collection集合\" class=\"headerlink\" title=\"五、Collection集合\"></a>五、Collection集合</h1><p>Collection是集合接口<br>    |————Set子接口:无序，不允许重复。<br>    |————List子接口:有序，可以有重复元素。<br>    区别：Collections是集合类<br>    Set和List对比：<br>    Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。<br>    List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。<br>    Set和List具体子类：<br>    Set<br>     |————HashSet：以哈希表的形式存放元素，插入删除速度很快。<br>    List<br>     |————ArrayList：动态数组<br>     |————LinkedList：链表、队列、堆栈。<br>    Array和java.util.Vector<br>    Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用。</p>\n<h1 id=\"六、Map集合\"><a href=\"#六、Map集合\" class=\"headerlink\" title=\"六、Map集合\"></a>六、Map集合</h1><p><strong>1.实现类：HashMap、Hashtable、LinkedHashMap和TreeMap</strong></p>\n<p><strong>HashMap</strong> </p>\n<p>HashMap是最常用的Map，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，遍历时，<strong>取得数据的顺序是完全随机的。因为键对象不可以重复</strong>，所以HashMap最多只允许一条记录的键为Null，允许多条记录的值为Null，是非同步的</p>\n<p><strong>Hashtable</strong></p>\n<p>Hashtable与HashMap类似，是HashMap的<strong>线程安全版</strong>，它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢，它继承自Dictionary类，不同的是它不允许记录的键或者值为null，同时效率较低。</p>\n<p><strong>ConcurrentHashMap</strong></p>\n<p>线程安全，并且锁分离。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>\n<p><strong>LinkedHashMap</strong></p>\n<p>LinkedHashMap<strong>保存了记录的插入顺序</strong>，在用Iteraor遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢，有HashMap的全部特性。</p>\n<p><strong>TreeMap</strong></p>\n<p>TreeMap实现SortMap接口，能够把它保存的记录<strong>根据键排序</strong>，默认是按键值的升序排序（自然顺序），也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。不允许key值为空，非同步的；</p>\n<p><strong>2.map的遍历</strong></p>\n<p><strong>第一种：KeySet()</strong></p>\n<p>将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key 。<br>取到的结果会乱序，是因为取得数据行主键的时候，使用了HashMap.keySet()方法，而这个方法返回的Set结果，里面的数据是乱序排放的。<br>典型用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">map.put(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"lisi1\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key2\"</span>,<span class=\"string\">\"lisi2\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key3\"</span>,<span class=\"string\">\"lisi3\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key4\"</span>,<span class=\"string\">\"lisi4\"</span>);  </div><div class=\"line\"><span class=\"comment\">//先获取map集合的所有键的set集合，keyset（）</span></div><div class=\"line\">Iterator it = map.keySet().iterator();</div><div class=\"line\"> <span class=\"comment\">//获取迭代器</span></div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">Object key = it.next();</div><div class=\"line\">System.out.println(map.get(key));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>第二种：entrySet（）</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() <span class=\"comment\">//返回此映射中包含的映射关系的 Set 视图。（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。Map.Entry表示映射关系。entrySet()：迭代后可以e.getKey()，e.getValue()两种方法来取key和value。返回的是Entry接口。</span></div><div class=\"line\">典型用法如下：</div><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">map.put(<span class=\"string\">\"key1\"</span>,<span class=\"string\">\"lisi1\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key2\"</span>,<span class=\"string\">\"lisi2\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key3\"</span>,<span class=\"string\">\"lisi3\"</span>);</div><div class=\"line\">map.put(<span class=\"string\">\"key4\"</span>,<span class=\"string\">\"lisi4\"</span>);</div><div class=\"line\"><span class=\"comment\">//将map集合中的映射关系取出，存入到set集合</span></div><div class=\"line\">Iterator it = map.entrySet().iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">Entry e =(Entry) it.next();</div><div class=\"line\">System.out.println(<span class=\"string\">\"键\"</span>+e.getKey () + <span class=\"string\">\"的值为\"</span> + e.getValue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐使用第二种方式，即<strong>entrySet()方法，效率较高。</strong><br>对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。</p>\n<h1 id=\"七、主要实现类区别小结\"><a href=\"#七、主要实现类区别小结\" class=\"headerlink\" title=\"七、主要实现类区别小结\"></a>七、主要实现类区别小结</h1><p><strong>Vector和ArrayList</strong></p>\n<p>1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。</p>\n<p>2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。</p>\n<p>3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。</p>\n<p>ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。</p>\n<p><strong>arraylist和linkedlist</strong></p>\n<p>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</p>\n<p>2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</p>\n<p>3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。</p>\n<p><strong>HashMap与TreeMap</strong></p>\n<p>1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。</p>\n<p>2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。</p>\n<p>两个map中的元素一样，但顺序不一样，导致hashCode()不一样。<br>同样做测试：<br>在HashMap中，同样的值的map,顺序不同，equals时，false;<br>而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。</p>\n<p><strong>HashTable与HashMap</strong></p>\n<p>1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。</p>\n<p>2、HashMap允许存在一个为null的key，多个为null的value 。</p>\n<p>3、hashtable的key和value都不允许为null。</p>\n<h1 id=\"八、参考文献\"><a href=\"#八、参考文献\" class=\"headerlink\" title=\"八、参考文献\"></a>八、参考文献</h1><p><a href=\"http://www.cnblogs.com/leeplogs/p/5891861.html\">JAVA集合类汇总</a></p>\n<p><a href=\"http://blog.csdn.net/u014136713/article/details/52089156\"> Java集合类详解</a></p>\n<p><a href=\"http://blog.csdn.net/duan19920101/article/details/51579136\">哈希表（散列表）原理详解</a></p>"},{"layout":"post","title":"HTTP文件断点续传原理解析","date":"2017-09-08T11:59:12.000Z","comments":1,"_content":"---\n生活中，有许多事物，在没有被揭开面纱之前，我们往往会觉得很神秘很高深，认为它一定很难，进而望而却步，失去了解它的机会。然而，很多事，只要我们自己能沉下心来，细细研究，那些神秘高深的，也会变得简单明了。\"HTTP文件断点续传\"就是这样一个好例子，深入了解背后之理，“HTTP文件断点续传原理”其实很简单。\n\n# 一、什么是断点续传\n\n**1.定义：**\n\n可以从下载或上传断开点继续开始传输，就叫断点续传。\n\n**2.核心实现原理：**\n\n**i.RandomAccessFile(文件任意位置保存)**\n方法seek():可以移动到保存文件任意位置，在该位置发生下一个读取或写入操作\n\n**ii.HttpURLConnection.setRequestProperty()(任意位置请求返回剩余文件)**\nHttpURLConnection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + end)\n\n\n# 二、实例分析\n<!-- more -->\n流程图\n\n![](/assets/img/tech_breakpoint_flowchart.png)\n\n实现步骤\n\n- 1.建立数据库：保存文件下载信息\n- 2.下载服务类(DownloadService)\n- 3.两个线程：文件信息线程(FileInfoThread)和文件下载线程(DownloadThread)\n- 4.广播(BroadcastReceiver)：UI进度更新\n\n------------\n**1.建立数据库**\n按常规数据库建立方法，具体(略)。数据保存信息为：\n```java\n/**\n * 下载信息类\n */\npublic class DownloadInfo {\n    private int id;\n    private String url;//下载链接\n    private long start;//开始大小\n    private long end;//最终大小\n    private long progress;//下载进度\n}\n```\n**2.下载服务类**\n利用service多次启动只调用onStartCommand()方法，处理开始或暂停下载逻辑。\n\n```java\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        if (intent.getAction().equals(ACTION_START)) {\n            FileInfo fileInfo = (FileInfo) intent.getSerializableExtra(TAG_FILEINFO);\n            mFileInfoThread = new FileInfoThread(fileInfo,mHandler);\n            mFileInfoThread.start();\n\n        } else if (intent.getAction().equals(ACTION_PAUSE)) {\n            if (mDownloadThread != null) {\n                mDownloadThread.setPause(true);\n            }\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n```\n**3.两个线程**\n**i.文件信息线程(FileInfoThread)**\n\n通过网络获取下载文件大小，并建立对应大小的保存文件路径。\n```java\n HttpURLConnection conn = null;\n        RandomAccessFile raf = null;\n        try {\n            URL url = new URL(mFileInfo.getUrl());\n            conn = (HttpURLConnection) url.openConnection();//连接网络文件\n            conn.setConnectTimeout(3000);\n            conn.setRequestMethod(\"GET\");\n            int length = -1;\n            Log.e(TAG,\"HttpResponseCode==\"+ conn.getResponseCode() + \"\");\n            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                //获取文件长度\n                length = conn.getContentLength();\n            }\n            if (length < 0) {\n                return;\n            }\n            File dir = new File(DownloadService.DOWNLOAD_PATH);\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            //在本地创建文件\n            File file = new File(dir, mFileInfo.getFileName());\n            raf = new RandomAccessFile(file, \"rwd\");\n            //设置本地文件长度\n            raf.setLength(length);\n            mFileInfo.setLength(length);\n            Log.e(TAG,\"下载文件大小(size)\"+ mFileInfo.getLength() + \"\");\n            mHandler.obtainMessage(DownloadService.MSG_FILEINFO, mFileInfo).sendToTarget();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (conn != null && raf != null) {\n                    raf.close();\n                    conn.disconnect();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n```\n\n**ii.文件下载线程(DownloadThread)**\n断点续传原理核心类。\n**1.判断下载进度是否有保存，若无，数据插入一条数据。**\n```java\n        if (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) {\n            mDatabaseOperation.insert(downloadInfo);\n        }\n```\n**2.设置网络请求Range参数，从请求位置返回数据**\n```java\n   //设置下载位置\n   long start = downloadInfo.getStart() + downloadInfo.getProgress();\n   connection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + downloadInfo.getEnd());\n```\n**3.通过RandomAccessFile从进度保存位置保存文件**\n```java\n  RandomAccessFile raf;\n  File file = new File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());\n  raf = new RandomAccessFile(file, \"rwd\");\n  raf.seek(start);\n  ...\n  //写入文件\n  raf.write(buffer, 0, len);\n```\n**4.用户暂停时，保存下载进度**\n```java\n //下载暂停时，保存进度\n  if (isPause) {\n     Log.e(TAG,\"保存进度文件(size):\"+progress + \"\");\n     mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);\n     return;\n  }\n```\n**4.广播(BroadcastReceiver)**：\n每秒广播一次，刷新UI\n```java\n long time = System.currentTimeMillis();\n ......\n if (System.currentTimeMillis() - time > 1000) {//超过一秒，就刷新UI\n     time = System.currentTimeMillis();\n     sendBroadcast(intent,(int)(progress * 100 / mFileInfo.getLength()));\n     Log.e(TAG,\"进度：\" + progress * 100 / mFileInfo.getLength() + \"%\");\n }\n```\n\n**DownloadThread类源码：**\n```java\n/**\n * 文件下载线程\n * Created by AwenZeng on 2017/9/6.\n */\n\npublic class DownloadThread extends Thread {\n    private DownloadInfo downloadInfo;\n    private FileInfo mFileInfo;\n    private long progress = 0;\n    private boolean isPause;\n    private DatabaseOperation mDatabaseOperation;\n    private Context mContext;\n    private static final String TAG = \"DownloadThread\";\n\n    public DownloadThread(Context context, DatabaseOperation databaseOperation, DownloadInfo threadInfo, FileInfo fileInfo) {\n        this.downloadInfo = threadInfo;\n        mContext = context;\n        mDatabaseOperation = databaseOperation;\n        mFileInfo = fileInfo;\n    }\n\n\n    public void setPause(boolean pause) {\n        isPause = pause;\n    }\n\n    @Override\n    public void run() {\n        if (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) {\n            mDatabaseOperation.insert(downloadInfo);\n        }\n        HttpURLConnection connection;\n        RandomAccessFile raf;\n        InputStream is;\n        try {\n            URL url = new URL(downloadInfo.getUrl());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(3000);\n            connection.setRequestMethod(\"GET\");\n            //设置下载位置\n            long start = downloadInfo.getStart() + downloadInfo.getProgress();\n            connection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + downloadInfo.getEnd());\n\n            //设置文件写入位置\n            File file = new File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());\n            raf = new RandomAccessFile(file, \"rwd\");\n            raf.seek(start);\n\n            progress += downloadInfo.getProgress();\n            Log.e(TAG,\"下载文件进度(size)：\"+ downloadInfo.getProgress() + \"\");\n            Log.e(TAG,\"HttpResponseCode ===\"+connection.getResponseCode() + \"\");\n            //开始下载\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) {\n                Log.e(TAG,\"剩余文件(size):\"+connection.getContentLength() + \"\");\n                Intent intent = new Intent(DownloadService.ACTION_UPDATE);//广播intent\n                is = connection.getInputStream();\n                byte[] buffer = new byte[1024 * 4];\n                int len = -1;\n                long time = System.currentTimeMillis();\n                while ((len = is.read(buffer)) != -1) {\n                    //下载暂停时，保存进度\n                    if (isPause) {\n                        Log.e(TAG,\"保存进度文件(size):\"+progress + \"\");\n                        mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);\n                        return;\n                    }\n                    //写入文件\n                    raf.write(buffer, 0, len);\n                    //把下载进度发送广播给Activity\n                    progress += len;\n                    if (System.currentTimeMillis() - time > 1000) {//超过一秒，就刷新UI\n                        time = System.currentTimeMillis();\n                        sendBroadcast(intent,(int)(progress * 100 / mFileInfo.getLength()));\n                        Log.e(TAG,\"进度：\" + progress * 100 / mFileInfo.getLength() + \"%\");\n                    }\n                }\n                sendBroadcast(intent,100);\n                /**\n                 *  删除下载信息（重新下载）\n                 */\n                mDatabaseOperation.delete(mFileInfo.getUrl(), mFileInfo.getId());\n                is.close();\n            }\n            raf.close();\n            connection.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void sendBroadcast(Intent intent,int progress){\n        intent.putExtra(\"progress\",progress);\n        mContext.sendBroadcast(intent);\n    }\n}\n```\n\n# 三、源码地址\n如果你觉得还不错，欢迎star或fork。\n[https://github.com/awenzeng/BreakPointDemo](https://github.com/awenzeng/BreakPointDemo) \n\n# 四、参考文献\n[RandomAccessFiley详解](http://www.cnblogs.com/tp123/p/6430395.html)\n\n[http断点续传原理：http头 Range、Content-Range](http://blog.csdn.net/lv18092081172/article/details/51457525)\n\n[InputStream中read()与read(byte[] b)](http://blog.csdn.net/jdsjlzx/article/details/8875758)\n\n\n\n\n\n\n\n\n\n","source":"_posts/tech_http_breakpoint.md","raw":"---\nlayout: post\ntitle: \"HTTP文件断点续传原理解析\"\ndate: 9/8/2017 7:59:12 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Http文件断点续传\n---\n---\n生活中，有许多事物，在没有被揭开面纱之前，我们往往会觉得很神秘很高深，认为它一定很难，进而望而却步，失去了解它的机会。然而，很多事，只要我们自己能沉下心来，细细研究，那些神秘高深的，也会变得简单明了。\"HTTP文件断点续传\"就是这样一个好例子，深入了解背后之理，“HTTP文件断点续传原理”其实很简单。\n\n# 一、什么是断点续传\n\n**1.定义：**\n\n可以从下载或上传断开点继续开始传输，就叫断点续传。\n\n**2.核心实现原理：**\n\n**i.RandomAccessFile(文件任意位置保存)**\n方法seek():可以移动到保存文件任意位置，在该位置发生下一个读取或写入操作\n\n**ii.HttpURLConnection.setRequestProperty()(任意位置请求返回剩余文件)**\nHttpURLConnection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + end)\n\n\n# 二、实例分析\n<!-- more -->\n流程图\n\n![](/assets/img/tech_breakpoint_flowchart.png)\n\n实现步骤\n\n- 1.建立数据库：保存文件下载信息\n- 2.下载服务类(DownloadService)\n- 3.两个线程：文件信息线程(FileInfoThread)和文件下载线程(DownloadThread)\n- 4.广播(BroadcastReceiver)：UI进度更新\n\n------------\n**1.建立数据库**\n按常规数据库建立方法，具体(略)。数据保存信息为：\n```java\n/**\n * 下载信息类\n */\npublic class DownloadInfo {\n    private int id;\n    private String url;//下载链接\n    private long start;//开始大小\n    private long end;//最终大小\n    private long progress;//下载进度\n}\n```\n**2.下载服务类**\n利用service多次启动只调用onStartCommand()方法，处理开始或暂停下载逻辑。\n\n```java\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        if (intent.getAction().equals(ACTION_START)) {\n            FileInfo fileInfo = (FileInfo) intent.getSerializableExtra(TAG_FILEINFO);\n            mFileInfoThread = new FileInfoThread(fileInfo,mHandler);\n            mFileInfoThread.start();\n\n        } else if (intent.getAction().equals(ACTION_PAUSE)) {\n            if (mDownloadThread != null) {\n                mDownloadThread.setPause(true);\n            }\n        }\n        return super.onStartCommand(intent, flags, startId);\n    }\n```\n**3.两个线程**\n**i.文件信息线程(FileInfoThread)**\n\n通过网络获取下载文件大小，并建立对应大小的保存文件路径。\n```java\n HttpURLConnection conn = null;\n        RandomAccessFile raf = null;\n        try {\n            URL url = new URL(mFileInfo.getUrl());\n            conn = (HttpURLConnection) url.openConnection();//连接网络文件\n            conn.setConnectTimeout(3000);\n            conn.setRequestMethod(\"GET\");\n            int length = -1;\n            Log.e(TAG,\"HttpResponseCode==\"+ conn.getResponseCode() + \"\");\n            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                //获取文件长度\n                length = conn.getContentLength();\n            }\n            if (length < 0) {\n                return;\n            }\n            File dir = new File(DownloadService.DOWNLOAD_PATH);\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            //在本地创建文件\n            File file = new File(dir, mFileInfo.getFileName());\n            raf = new RandomAccessFile(file, \"rwd\");\n            //设置本地文件长度\n            raf.setLength(length);\n            mFileInfo.setLength(length);\n            Log.e(TAG,\"下载文件大小(size)\"+ mFileInfo.getLength() + \"\");\n            mHandler.obtainMessage(DownloadService.MSG_FILEINFO, mFileInfo).sendToTarget();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (conn != null && raf != null) {\n                    raf.close();\n                    conn.disconnect();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n```\n\n**ii.文件下载线程(DownloadThread)**\n断点续传原理核心类。\n**1.判断下载进度是否有保存，若无，数据插入一条数据。**\n```java\n        if (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) {\n            mDatabaseOperation.insert(downloadInfo);\n        }\n```\n**2.设置网络请求Range参数，从请求位置返回数据**\n```java\n   //设置下载位置\n   long start = downloadInfo.getStart() + downloadInfo.getProgress();\n   connection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + downloadInfo.getEnd());\n```\n**3.通过RandomAccessFile从进度保存位置保存文件**\n```java\n  RandomAccessFile raf;\n  File file = new File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());\n  raf = new RandomAccessFile(file, \"rwd\");\n  raf.seek(start);\n  ...\n  //写入文件\n  raf.write(buffer, 0, len);\n```\n**4.用户暂停时，保存下载进度**\n```java\n //下载暂停时，保存进度\n  if (isPause) {\n     Log.e(TAG,\"保存进度文件(size):\"+progress + \"\");\n     mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);\n     return;\n  }\n```\n**4.广播(BroadcastReceiver)**：\n每秒广播一次，刷新UI\n```java\n long time = System.currentTimeMillis();\n ......\n if (System.currentTimeMillis() - time > 1000) {//超过一秒，就刷新UI\n     time = System.currentTimeMillis();\n     sendBroadcast(intent,(int)(progress * 100 / mFileInfo.getLength()));\n     Log.e(TAG,\"进度：\" + progress * 100 / mFileInfo.getLength() + \"%\");\n }\n```\n\n**DownloadThread类源码：**\n```java\n/**\n * 文件下载线程\n * Created by AwenZeng on 2017/9/6.\n */\n\npublic class DownloadThread extends Thread {\n    private DownloadInfo downloadInfo;\n    private FileInfo mFileInfo;\n    private long progress = 0;\n    private boolean isPause;\n    private DatabaseOperation mDatabaseOperation;\n    private Context mContext;\n    private static final String TAG = \"DownloadThread\";\n\n    public DownloadThread(Context context, DatabaseOperation databaseOperation, DownloadInfo threadInfo, FileInfo fileInfo) {\n        this.downloadInfo = threadInfo;\n        mContext = context;\n        mDatabaseOperation = databaseOperation;\n        mFileInfo = fileInfo;\n    }\n\n\n    public void setPause(boolean pause) {\n        isPause = pause;\n    }\n\n    @Override\n    public void run() {\n        if (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) {\n            mDatabaseOperation.insert(downloadInfo);\n        }\n        HttpURLConnection connection;\n        RandomAccessFile raf;\n        InputStream is;\n        try {\n            URL url = new URL(downloadInfo.getUrl());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(3000);\n            connection.setRequestMethod(\"GET\");\n            //设置下载位置\n            long start = downloadInfo.getStart() + downloadInfo.getProgress();\n            connection.setRequestProperty(\"Range\", \"bytes=\" + start + \"-\" + downloadInfo.getEnd());\n\n            //设置文件写入位置\n            File file = new File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());\n            raf = new RandomAccessFile(file, \"rwd\");\n            raf.seek(start);\n\n            progress += downloadInfo.getProgress();\n            Log.e(TAG,\"下载文件进度(size)：\"+ downloadInfo.getProgress() + \"\");\n            Log.e(TAG,\"HttpResponseCode ===\"+connection.getResponseCode() + \"\");\n            //开始下载\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) {\n                Log.e(TAG,\"剩余文件(size):\"+connection.getContentLength() + \"\");\n                Intent intent = new Intent(DownloadService.ACTION_UPDATE);//广播intent\n                is = connection.getInputStream();\n                byte[] buffer = new byte[1024 * 4];\n                int len = -1;\n                long time = System.currentTimeMillis();\n                while ((len = is.read(buffer)) != -1) {\n                    //下载暂停时，保存进度\n                    if (isPause) {\n                        Log.e(TAG,\"保存进度文件(size):\"+progress + \"\");\n                        mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);\n                        return;\n                    }\n                    //写入文件\n                    raf.write(buffer, 0, len);\n                    //把下载进度发送广播给Activity\n                    progress += len;\n                    if (System.currentTimeMillis() - time > 1000) {//超过一秒，就刷新UI\n                        time = System.currentTimeMillis();\n                        sendBroadcast(intent,(int)(progress * 100 / mFileInfo.getLength()));\n                        Log.e(TAG,\"进度：\" + progress * 100 / mFileInfo.getLength() + \"%\");\n                    }\n                }\n                sendBroadcast(intent,100);\n                /**\n                 *  删除下载信息（重新下载）\n                 */\n                mDatabaseOperation.delete(mFileInfo.getUrl(), mFileInfo.getId());\n                is.close();\n            }\n            raf.close();\n            connection.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void sendBroadcast(Intent intent,int progress){\n        intent.putExtra(\"progress\",progress);\n        mContext.sendBroadcast(intent);\n    }\n}\n```\n\n# 三、源码地址\n如果你觉得还不错，欢迎star或fork。\n[https://github.com/awenzeng/BreakPointDemo](https://github.com/awenzeng/BreakPointDemo) \n\n# 四、参考文献\n[RandomAccessFiley详解](http://www.cnblogs.com/tp123/p/6430395.html)\n\n[http断点续传原理：http头 Range、Content-Range](http://blog.csdn.net/lv18092081172/article/details/51457525)\n\n[InputStream中read()与read(byte[] b)](http://blog.csdn.net/jdsjlzx/article/details/8875758)\n\n\n\n\n\n\n\n\n\n","slug":"tech_http_breakpoint","published":1,"updated":"2019-06-27T08:15:15.336Z","photos":[],"link":"","_id":"cjxfjaerz003mystgypd3vqgu","content":"<hr>\n<p>生活中，有许多事物，在没有被揭开面纱之前，我们往往会觉得很神秘很高深，认为它一定很难，进而望而却步，失去了解它的机会。然而，很多事，只要我们自己能沉下心来，细细研究，那些神秘高深的，也会变得简单明了。”HTTP文件断点续传”就是这样一个好例子，深入了解背后之理，“HTTP文件断点续传原理”其实很简单。</p>\n<h1 id=\"一、什么是断点续传\"><a href=\"#一、什么是断点续传\" class=\"headerlink\" title=\"一、什么是断点续传\"></a>一、什么是断点续传</h1><p><strong>1.定义：</strong></p>\n<p>可以从下载或上传断开点继续开始传输，就叫断点续传。</p>\n<p><strong>2.核心实现原理：</strong></p>\n<p><strong>i.RandomAccessFile(文件任意位置保存)</strong><br>方法seek():可以移动到保存文件任意位置，在该位置发生下一个读取或写入操作</p>\n<p><strong>ii.HttpURLConnection.setRequestProperty()(任意位置请求返回剩余文件)</strong><br>HttpURLConnection.setRequestProperty(“Range”, “bytes=” + start + “-“ + end)</p>\n<h1 id=\"二、实例分析\"><a href=\"#二、实例分析\" class=\"headerlink\" title=\"二、实例分析\"></a>二、实例分析</h1><a id=\"more\"></a>\n<p>流程图</p>\n<p><img src=\"/assets/img/tech_breakpoint_flowchart.png\" alt=\"\"></p>\n<p>实现步骤</p>\n<ul>\n<li>1.建立数据库：保存文件下载信息</li>\n<li>2.下载服务类(DownloadService)</li>\n<li>3.两个线程：文件信息线程(FileInfoThread)和文件下载线程(DownloadThread)</li>\n<li>4.广播(BroadcastReceiver)：UI进度更新</li>\n</ul>\n<hr>\n<p><strong>1.建立数据库</strong><br>按常规数据库建立方法，具体(略)。数据保存信息为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 下载信息类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadInfo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;<span class=\"comment\">//下载链接</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> start;<span class=\"comment\">//开始大小</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> end;<span class=\"comment\">//最终大小</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> progress;<span class=\"comment\">//下载进度</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.下载服务类</strong><br>利用service多次启动只调用onStartCommand()方法，处理开始或暂停下载逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent.getAction().equals(ACTION_START)) &#123;</div><div class=\"line\">        FileInfo fileInfo = (FileInfo) intent.getSerializableExtra(TAG_FILEINFO);</div><div class=\"line\">        mFileInfoThread = <span class=\"keyword\">new</span> FileInfoThread(fileInfo,mHandler);</div><div class=\"line\">        mFileInfoThread.start();</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intent.getAction().equals(ACTION_PAUSE)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDownloadThread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDownloadThread.setPause(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.两个线程</strong><br><strong>i.文件信息线程(FileInfoThread)</strong></p>\n<p>通过网络获取下载文件大小，并建立对应大小的保存文件路径。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">HttpURLConnection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">       RandomAccessFile raf = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           URL url = <span class=\"keyword\">new</span> URL(mFileInfo.getUrl());</div><div class=\"line\">           conn = (HttpURLConnection) url.openConnection();<span class=\"comment\">//连接网络文件</span></div><div class=\"line\">           conn.setConnectTimeout(<span class=\"number\">3000</span>);</div><div class=\"line\">           conn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">           <span class=\"keyword\">int</span> length = -<span class=\"number\">1</span>;</div><div class=\"line\">           Log.e(TAG,<span class=\"string\">\"HttpResponseCode==\"</span>+ conn.getResponseCode() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (conn.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</div><div class=\"line\">               <span class=\"comment\">//获取文件长度</span></div><div class=\"line\">               length = conn.getContentLength();</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           File dir = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH);</div><div class=\"line\">           <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">               dir.mkdir();</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">//在本地创建文件</span></div><div class=\"line\">           File file = <span class=\"keyword\">new</span> File(dir, mFileInfo.getFileName());</div><div class=\"line\">           raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">           <span class=\"comment\">//设置本地文件长度</span></div><div class=\"line\">           raf.setLength(length);</div><div class=\"line\">           mFileInfo.setLength(length);</div><div class=\"line\">           Log.e(TAG,<span class=\"string\">\"下载文件大小(size)\"</span>+ mFileInfo.getLength() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           mHandler.obtainMessage(DownloadService.MSG_FILEINFO, mFileInfo).sendToTarget();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span> &amp;&amp; raf != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   raf.close();</div><div class=\"line\">                   conn.disconnect();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">               e.printStackTrace();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>ii.文件下载线程(DownloadThread)</strong><br>断点续传原理核心类。<br><strong>1.判断下载进度是否有保存，若无，数据插入一条数据。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) &#123;</div><div class=\"line\">    mDatabaseOperation.insert(downloadInfo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.设置网络请求Range参数，从请求位置返回数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置下载位置</span></div><div class=\"line\"><span class=\"keyword\">long</span> start = downloadInfo.getStart() + downloadInfo.getProgress();</div><div class=\"line\">connection.setRequestProperty(<span class=\"string\">\"Range\"</span>, <span class=\"string\">\"bytes=\"</span> + start + <span class=\"string\">\"-\"</span> + downloadInfo.getEnd());</div></pre></td></tr></table></figure></p>\n<p><strong>3.通过RandomAccessFile从进度保存位置保存文件</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">RandomAccessFile raf;</div><div class=\"line\">File file = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());</div><div class=\"line\">raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">raf.seek(start);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//写入文件</span></div><div class=\"line\">raf.write(buffer, <span class=\"number\">0</span>, len);</div></pre></td></tr></table></figure></p>\n<p><strong>4.用户暂停时，保存下载进度</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下载暂停时，保存进度</span></div><div class=\"line\"> <span class=\"keyword\">if</span> (isPause) &#123;</div><div class=\"line\">    Log.e(TAG,<span class=\"string\">\"保存进度文件(size):\"</span>+progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">    mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4.广播(BroadcastReceiver)</strong>：<br>每秒广播一次，刷新UI<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">......</div><div class=\"line\"><span class=\"keyword\">if</span> (System.currentTimeMillis() - time &gt; <span class=\"number\">1000</span>) &#123;<span class=\"comment\">//超过一秒，就刷新UI</span></div><div class=\"line\">    time = System.currentTimeMillis();</div><div class=\"line\">    sendBroadcast(intent,(<span class=\"keyword\">int</span>)(progress * <span class=\"number\">100</span> / mFileInfo.getLength()));</div><div class=\"line\">    Log.e(TAG,<span class=\"string\">\"进度：\"</span> + progress * <span class=\"number\">100</span> / mFileInfo.getLength() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DownloadThread类源码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 文件下载线程</div><div class=\"line\"> * Created by AwenZeng on 2017/9/6.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadInfo downloadInfo;</div><div class=\"line\">    <span class=\"keyword\">private</span> FileInfo mFileInfo;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> progress = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPause;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseOperation mDatabaseOperation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DownloadThread\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DownloadThread</span><span class=\"params\">(Context context, DatabaseOperation databaseOperation, DownloadInfo threadInfo, FileInfo fileInfo)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.downloadInfo = threadInfo;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        mDatabaseOperation = databaseOperation;</div><div class=\"line\">        mFileInfo = fileInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPause</span><span class=\"params\">(<span class=\"keyword\">boolean</span> pause)</span> </span>&#123;</div><div class=\"line\">        isPause = pause;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) &#123;</div><div class=\"line\">            mDatabaseOperation.insert(downloadInfo);</div><div class=\"line\">        &#125;</div><div class=\"line\">        HttpURLConnection connection;</div><div class=\"line\">        RandomAccessFile raf;</div><div class=\"line\">        InputStream is;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            URL url = <span class=\"keyword\">new</span> URL(downloadInfo.getUrl());</div><div class=\"line\">            connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">            connection.setConnectTimeout(<span class=\"number\">3000</span>);</div><div class=\"line\">            connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">            <span class=\"comment\">//设置下载位置</span></div><div class=\"line\">            <span class=\"keyword\">long</span> start = downloadInfo.getStart() + downloadInfo.getProgress();</div><div class=\"line\">            connection.setRequestProperty(<span class=\"string\">\"Range\"</span>, <span class=\"string\">\"bytes=\"</span> + start + <span class=\"string\">\"-\"</span> + downloadInfo.getEnd());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//设置文件写入位置</span></div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());</div><div class=\"line\">            raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">            raf.seek(start);</div><div class=\"line\"></div><div class=\"line\">            progress += downloadInfo.getProgress();</div><div class=\"line\">            Log.e(TAG,<span class=\"string\">\"下载文件进度(size)：\"</span>+ downloadInfo.getProgress() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            Log.e(TAG,<span class=\"string\">\"HttpResponseCode ===\"</span>+connection.getResponseCode() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            <span class=\"comment\">//开始下载</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) &#123;</div><div class=\"line\">                Log.e(TAG,<span class=\"string\">\"剩余文件(size):\"</span>+connection.getContentLength() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(DownloadService.ACTION_UPDATE);<span class=\"comment\">//广播intent</span></div><div class=\"line\">                is = connection.getInputStream();</div><div class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</div><div class=\"line\">                <span class=\"keyword\">int</span> len = -<span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">                <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">//下载暂停时，保存进度</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (isPause) &#123;</div><div class=\"line\">                        Log.e(TAG,<span class=\"string\">\"保存进度文件(size):\"</span>+progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);</div><div class=\"line\">                        <span class=\"keyword\">return</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//写入文件</span></div><div class=\"line\">                    raf.write(buffer, <span class=\"number\">0</span>, len);</div><div class=\"line\">                    <span class=\"comment\">//把下载进度发送广播给Activity</span></div><div class=\"line\">                    progress += len;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (System.currentTimeMillis() - time &gt; <span class=\"number\">1000</span>) &#123;<span class=\"comment\">//超过一秒，就刷新UI</span></div><div class=\"line\">                        time = System.currentTimeMillis();</div><div class=\"line\">                        sendBroadcast(intent,(<span class=\"keyword\">int</span>)(progress * <span class=\"number\">100</span> / mFileInfo.getLength()));</div><div class=\"line\">                        Log.e(TAG,<span class=\"string\">\"进度：\"</span> + progress * <span class=\"number\">100</span> / mFileInfo.getLength() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sendBroadcast(intent,<span class=\"number\">100</span>);</div><div class=\"line\">                <span class=\"comment\">/**</span></div><div class=\"line\">                 *  删除下载信息（重新下载）</div><div class=\"line\">                 */</div><div class=\"line\">                mDatabaseOperation.delete(mFileInfo.getUrl(), mFileInfo.getId());</div><div class=\"line\">                is.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">            raf.close();</div><div class=\"line\">            connection.disconnect();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendBroadcast</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        intent.putExtra(<span class=\"string\">\"progress\"</span>,progress);</div><div class=\"line\">        mContext.sendBroadcast(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"三、源码地址\"><a href=\"#三、源码地址\" class=\"headerlink\" title=\"三、源码地址\"></a>三、源码地址</h1><p>如果你觉得还不错，欢迎star或fork。<br><a href=\"https://github.com/awenzeng/BreakPointDemo\" target=\"_blank\" rel=\"external\">https://github.com/awenzeng/BreakPointDemo</a> </p>\n<h1 id=\"四、参考文献\"><a href=\"#四、参考文献\" class=\"headerlink\" title=\"四、参考文献\"></a>四、参考文献</h1><p><a href=\"http://www.cnblogs.com/tp123/p/6430395.html\" target=\"_blank\" rel=\"external\">RandomAccessFiley详解</a></p>\n<p><a href=\"http://blog.csdn.net/lv18092081172/article/details/51457525\" target=\"_blank\" rel=\"external\">http断点续传原理：http头 Range、Content-Range</a></p>\n<p><a href=\"http://blog.csdn.net/jdsjlzx/article/details/8875758\" target=\"_blank\" rel=\"external\">InputStream中read()与read(byte[] b)</a></p>\n","excerpt":"<hr>\n<p>生活中，有许多事物，在没有被揭开面纱之前，我们往往会觉得很神秘很高深，认为它一定很难，进而望而却步，失去了解它的机会。然而，很多事，只要我们自己能沉下心来，细细研究，那些神秘高深的，也会变得简单明了。”HTTP文件断点续传”就是这样一个好例子，深入了解背后之理，“HTTP文件断点续传原理”其实很简单。</p>\n<h1 id=\"一、什么是断点续传\"><a href=\"#一、什么是断点续传\" class=\"headerlink\" title=\"一、什么是断点续传\"></a>一、什么是断点续传</h1><p><strong>1.定义：</strong></p>\n<p>可以从下载或上传断开点继续开始传输，就叫断点续传。</p>\n<p><strong>2.核心实现原理：</strong></p>\n<p><strong>i.RandomAccessFile(文件任意位置保存)</strong><br>方法seek():可以移动到保存文件任意位置，在该位置发生下一个读取或写入操作</p>\n<p><strong>ii.HttpURLConnection.setRequestProperty()(任意位置请求返回剩余文件)</strong><br>HttpURLConnection.setRequestProperty(“Range”, “bytes=” + start + “-“ + end)</p>\n<h1 id=\"二、实例分析\"><a href=\"#二、实例分析\" class=\"headerlink\" title=\"二、实例分析\"></a>二、实例分析</h1>","more":"<p>流程图</p>\n<p><img src=\"/assets/img/tech_breakpoint_flowchart.png\" alt=\"\"></p>\n<p>实现步骤</p>\n<ul>\n<li>1.建立数据库：保存文件下载信息</li>\n<li>2.下载服务类(DownloadService)</li>\n<li>3.两个线程：文件信息线程(FileInfoThread)和文件下载线程(DownloadThread)</li>\n<li>4.广播(BroadcastReceiver)：UI进度更新</li>\n</ul>\n<hr>\n<p><strong>1.建立数据库</strong><br>按常规数据库建立方法，具体(略)。数据保存信息为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 下载信息类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadInfo</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String url;<span class=\"comment\">//下载链接</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> start;<span class=\"comment\">//开始大小</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> end;<span class=\"comment\">//最终大小</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> progress;<span class=\"comment\">//下载进度</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.下载服务类</strong><br>利用service多次启动只调用onStartCommand()方法，处理开始或暂停下载逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (intent.getAction().equals(ACTION_START)) &#123;</div><div class=\"line\">        FileInfo fileInfo = (FileInfo) intent.getSerializableExtra(TAG_FILEINFO);</div><div class=\"line\">        mFileInfoThread = <span class=\"keyword\">new</span> FileInfoThread(fileInfo,mHandler);</div><div class=\"line\">        mFileInfoThread.start();</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (intent.getAction().equals(ACTION_PAUSE)) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDownloadThread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDownloadThread.setPause(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.两个线程</strong><br><strong>i.文件信息线程(FileInfoThread)</strong></p>\n<p>通过网络获取下载文件大小，并建立对应大小的保存文件路径。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">HttpURLConnection conn = <span class=\"keyword\">null</span>;</div><div class=\"line\">       RandomAccessFile raf = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           URL url = <span class=\"keyword\">new</span> URL(mFileInfo.getUrl());</div><div class=\"line\">           conn = (HttpURLConnection) url.openConnection();<span class=\"comment\">//连接网络文件</span></div><div class=\"line\">           conn.setConnectTimeout(<span class=\"number\">3000</span>);</div><div class=\"line\">           conn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">           <span class=\"keyword\">int</span> length = -<span class=\"number\">1</span>;</div><div class=\"line\">           Log.e(TAG,<span class=\"string\">\"HttpResponseCode==\"</span>+ conn.getResponseCode() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           <span class=\"keyword\">if</span> (conn.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</div><div class=\"line\">               <span class=\"comment\">//获取文件长度</span></div><div class=\"line\">               length = conn.getContentLength();</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           File dir = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH);</div><div class=\"line\">           <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">               dir.mkdir();</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">//在本地创建文件</span></div><div class=\"line\">           File file = <span class=\"keyword\">new</span> File(dir, mFileInfo.getFileName());</div><div class=\"line\">           raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">           <span class=\"comment\">//设置本地文件长度</span></div><div class=\"line\">           raf.setLength(length);</div><div class=\"line\">           mFileInfo.setLength(length);</div><div class=\"line\">           Log.e(TAG,<span class=\"string\">\"下载文件大小(size)\"</span>+ mFileInfo.getLength() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">           mHandler.obtainMessage(DownloadService.MSG_FILEINFO, mFileInfo).sendToTarget();</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span> &amp;&amp; raf != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   raf.close();</div><div class=\"line\">                   conn.disconnect();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">               e.printStackTrace();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>ii.文件下载线程(DownloadThread)</strong><br>断点续传原理核心类。<br><strong>1.判断下载进度是否有保存，若无，数据插入一条数据。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) &#123;</div><div class=\"line\">    mDatabaseOperation.insert(downloadInfo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.设置网络请求Range参数，从请求位置返回数据</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置下载位置</span></div><div class=\"line\"><span class=\"keyword\">long</span> start = downloadInfo.getStart() + downloadInfo.getProgress();</div><div class=\"line\">connection.setRequestProperty(<span class=\"string\">\"Range\"</span>, <span class=\"string\">\"bytes=\"</span> + start + <span class=\"string\">\"-\"</span> + downloadInfo.getEnd());</div></pre></td></tr></table></figure></p>\n<p><strong>3.通过RandomAccessFile从进度保存位置保存文件</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">RandomAccessFile raf;</div><div class=\"line\">File file = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());</div><div class=\"line\">raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">raf.seek(start);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//写入文件</span></div><div class=\"line\">raf.write(buffer, <span class=\"number\">0</span>, len);</div></pre></td></tr></table></figure></p>\n<p><strong>4.用户暂停时，保存下载进度</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下载暂停时，保存进度</span></div><div class=\"line\"> <span class=\"keyword\">if</span> (isPause) &#123;</div><div class=\"line\">    Log.e(TAG,<span class=\"string\">\"保存进度文件(size):\"</span>+progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">    mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4.广播(BroadcastReceiver)</strong>：<br>每秒广播一次，刷新UI<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">......</div><div class=\"line\"><span class=\"keyword\">if</span> (System.currentTimeMillis() - time &gt; <span class=\"number\">1000</span>) &#123;<span class=\"comment\">//超过一秒，就刷新UI</span></div><div class=\"line\">    time = System.currentTimeMillis();</div><div class=\"line\">    sendBroadcast(intent,(<span class=\"keyword\">int</span>)(progress * <span class=\"number\">100</span> / mFileInfo.getLength()));</div><div class=\"line\">    Log.e(TAG,<span class=\"string\">\"进度：\"</span> + progress * <span class=\"number\">100</span> / mFileInfo.getLength() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>DownloadThread类源码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 文件下载线程</div><div class=\"line\"> * Created by AwenZeng on 2017/9/6.</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DownloadInfo downloadInfo;</div><div class=\"line\">    <span class=\"keyword\">private</span> FileInfo mFileInfo;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> progress = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPause;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseOperation mDatabaseOperation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DownloadThread\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DownloadThread</span><span class=\"params\">(Context context, DatabaseOperation databaseOperation, DownloadInfo threadInfo, FileInfo fileInfo)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.downloadInfo = threadInfo;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        mDatabaseOperation = databaseOperation;</div><div class=\"line\">        mFileInfo = fileInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPause</span><span class=\"params\">(<span class=\"keyword\">boolean</span> pause)</span> </span>&#123;</div><div class=\"line\">        isPause = pause;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mDatabaseOperation.isExists(downloadInfo.getUrl(), downloadInfo.getId())) &#123;</div><div class=\"line\">            mDatabaseOperation.insert(downloadInfo);</div><div class=\"line\">        &#125;</div><div class=\"line\">        HttpURLConnection connection;</div><div class=\"line\">        RandomAccessFile raf;</div><div class=\"line\">        InputStream is;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            URL url = <span class=\"keyword\">new</span> URL(downloadInfo.getUrl());</div><div class=\"line\">            connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">            connection.setConnectTimeout(<span class=\"number\">3000</span>);</div><div class=\"line\">            connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">            <span class=\"comment\">//设置下载位置</span></div><div class=\"line\">            <span class=\"keyword\">long</span> start = downloadInfo.getStart() + downloadInfo.getProgress();</div><div class=\"line\">            connection.setRequestProperty(<span class=\"string\">\"Range\"</span>, <span class=\"string\">\"bytes=\"</span> + start + <span class=\"string\">\"-\"</span> + downloadInfo.getEnd());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//设置文件写入位置</span></div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(DownloadService.DOWNLOAD_PATH, mFileInfo.getFileName());</div><div class=\"line\">            raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">\"rwd\"</span>);</div><div class=\"line\">            raf.seek(start);</div><div class=\"line\"></div><div class=\"line\">            progress += downloadInfo.getProgress();</div><div class=\"line\">            Log.e(TAG,<span class=\"string\">\"下载文件进度(size)：\"</span>+ downloadInfo.getProgress() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            Log.e(TAG,<span class=\"string\">\"HttpResponseCode ===\"</span>+connection.getResponseCode() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">            <span class=\"comment\">//开始下载</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) &#123;</div><div class=\"line\">                Log.e(TAG,<span class=\"string\">\"剩余文件(size):\"</span>+connection.getContentLength() + <span class=\"string\">\"\"</span>);</div><div class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(DownloadService.ACTION_UPDATE);<span class=\"comment\">//广播intent</span></div><div class=\"line\">                is = connection.getInputStream();</div><div class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</div><div class=\"line\">                <span class=\"keyword\">int</span> len = -<span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">                <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">//下载暂停时，保存进度</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (isPause) &#123;</div><div class=\"line\">                        Log.e(TAG,<span class=\"string\">\"保存进度文件(size):\"</span>+progress + <span class=\"string\">\"\"</span>);</div><div class=\"line\">                        mDatabaseOperation.update(mFileInfo.getUrl(), mFileInfo.getId(), progress);</div><div class=\"line\">                        <span class=\"keyword\">return</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//写入文件</span></div><div class=\"line\">                    raf.write(buffer, <span class=\"number\">0</span>, len);</div><div class=\"line\">                    <span class=\"comment\">//把下载进度发送广播给Activity</span></div><div class=\"line\">                    progress += len;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (System.currentTimeMillis() - time &gt; <span class=\"number\">1000</span>) &#123;<span class=\"comment\">//超过一秒，就刷新UI</span></div><div class=\"line\">                        time = System.currentTimeMillis();</div><div class=\"line\">                        sendBroadcast(intent,(<span class=\"keyword\">int</span>)(progress * <span class=\"number\">100</span> / mFileInfo.getLength()));</div><div class=\"line\">                        Log.e(TAG,<span class=\"string\">\"进度：\"</span> + progress * <span class=\"number\">100</span> / mFileInfo.getLength() + <span class=\"string\">\"%\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sendBroadcast(intent,<span class=\"number\">100</span>);</div><div class=\"line\">                <span class=\"comment\">/**</div><div class=\"line\">                 *  删除下载信息（重新下载）</div><div class=\"line\">                 */</span></div><div class=\"line\">                mDatabaseOperation.delete(mFileInfo.getUrl(), mFileInfo.getId());</div><div class=\"line\">                is.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">            raf.close();</div><div class=\"line\">            connection.disconnect();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendBroadcast</span><span class=\"params\">(Intent intent,<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        intent.putExtra(<span class=\"string\">\"progress\"</span>,progress);</div><div class=\"line\">        mContext.sendBroadcast(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"三、源码地址\"><a href=\"#三、源码地址\" class=\"headerlink\" title=\"三、源码地址\"></a>三、源码地址</h1><p>如果你觉得还不错，欢迎star或fork。<br><a href=\"https://github.com/awenzeng/BreakPointDemo\">https://github.com/awenzeng/BreakPointDemo</a> </p>\n<h1 id=\"四、参考文献\"><a href=\"#四、参考文献\" class=\"headerlink\" title=\"四、参考文献\"></a>四、参考文献</h1><p><a href=\"http://www.cnblogs.com/tp123/p/6430395.html\">RandomAccessFiley详解</a></p>\n<p><a href=\"http://blog.csdn.net/lv18092081172/article/details/51457525\">http断点续传原理：http头 Range、Content-Range</a></p>\n<p><a href=\"http://blog.csdn.net/jdsjlzx/article/details/8875758\">InputStream中read()与read(byte[] b)</a></p>"},{"layout":"post","title":"Logger框架源码解析","date":"2017-11-30T06:20:58.000Z","comments":1,"_content":"---\n在移动软件开发中，我们经常会用到很多框架，如网络框架retrofit，图片加载框架glide，数据库框架litepal，日志框架Logger等。这些框架对应用都很重要，日志框架也是其中重要的一部分。因为很多操作如调试，优化，修改bug等都需要通过日志来验证我们的想法，所以日志框架就成项目的必需。本篇博文将会介绍Logger日志框架，主要从源码的角度分析。\n\n# 一、什么是Logger框架？\nSimple, pretty and powerful logger for android。简单，功能强大日志框架，专为Android。\n\nLogger有多强大呢？先让我们来看一张打印日志图：\n\n![](/assets/img/tech_logger_output.png)\n<!-- more -->\n从此图，就可看出Logger打印日志相当强大。Logger框架原理图：\n\n![](/assets/img/tech_loger_framwork.png)\n\n\n# 二、Logger源码解析(Json)\nLogger源码地址：[https://github.com/orhanobut/logger](https://github.com/orhanobut/logger)\n\n本篇博文主要采用版本V2.1.1的源码。\n\n**1.Logger初始化**\n```java\n    Logger.addLogAdapter(new AndroidLogAdapter());//1.初始化\n```\n打印结果类似上面的效果图。我们先来看注释1初始化，进入Logger类\n```java\n/**\n * But more pretty, simple and powerful\n */\npublic final class Logger {\n  private static Printer printer = new LoggerPrinter();\n  ......\n  public static void addLogAdapter(LogAdapter adapter) {\n    printer.addAdapter(adapter);\n  }\n......\n}\n```\nLogger的静态方法，主要就是向printer中添加了一个Adapter，通过定义我们知道printer为LoggerPrinter,我们继续看看LoggerPrinter\n```java\nclass LoggerPrinter implements Printer {\n  private final List<LogAdapter> logAdapters = new ArrayList<>();\n  ......\n  @Override public void addAdapter(LogAdapter adapter) {\n    logAdapters.add(adapter);\n  }\n......\n}\n```\n从方法名addLogAdapter就知向LogAdapter列表添加LogAdapter,源码下来也的确如此，但这LogAdapters有啥用呢？后面会说到。让我们再来看看AndroidLogAdapter\n```java\npublic class AndroidLogAdapter implements LogAdapter {\n\n  private final FormatStrategy formatStrategy;\n\n  public AndroidLogAdapter() {\n    this.formatStrategy = PrettyFormatStrategy.newBuilder().build();\n  }\n\n  public AndroidLogAdapter(FormatStrategy formatStrategy) {\n    this.formatStrategy = formatStrategy;\n  }\n......\n}\n```\n在AndroidLogAdapter中初始化了FormatStrategy，这类有啥用呢？让我们来看看\n```java\npublic interface FormatStrategy {\n  void log(int priority, String tag, String message);\n}\n\n```\nFormatStrategy就是一接口，应该是打印日志的。我们来看看他的实现类PrettyFormatStrategy.newBuilder().build(),继续看PrettyFormatStrategy源码\n```java\npublic class PrettyFormatStrategy implements FormatStrategy {\n  private final int methodCount;\n  private final int methodOffset;\n  private final boolean showThreadInfo;\n  private final LogStrategy logStrategy;\n  private final String tag;\n\n  private PrettyFormatStrategy(Builder builder) {\n    methodCount = builder.methodCount;\n    methodOffset = builder.methodOffset;\n    showThreadInfo = builder.showThreadInfo;\n    logStrategy = builder.logStrategy;\n    tag = builder.tag;\n  }\n\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n  public static class Builder {\n\n    .......\n    private Builder() {\n    }\n    ......\n\n    public PrettyFormatStrategy build() {\n      if (logStrategy == null) {\n        logStrategy = new LogcatLogStrategy();\n      }\n      return new PrettyFormatStrategy(this);\n    }\n  }\n```\n由上易知，主要就是对PrettyFormatStrategy初始化，然后赋值给AndroidLogAdapter的FormatStrategy。PrettyFormatStrategy类对Logger来说是核心类，因为所有日志的打印控制主要也在此类实现，接下来我们会说到。\n\n**2.Logger打印日志**\n```java\n    Logger.d(\"Hello world!\");//2.debug日志\n    Logger.json(\"{ \\\"key\\\": 3, \\\"value\\\": something}\");//3.Json日志\n```\n**i.debug日志，一般日志打印**\n首先，我们来看一般日志，debug日志,进入Logger源码\n```java\npublic final class Logger {\n\n  private static Printer printer = new LoggerPrinter();\n  .....\n  public static void d(String message, Object... args) {\n    printer.d(message, args);\n  }\n\n  public static void d(Object object) {\n    printer.d(object);\n  }\n\n  public static void e(String message, Object... args) {\n    printer.e(null, message, args);\n  }\n\n  public static void e(Throwable throwable, String message, Object... args) {\n    printer.e(throwable, message, args);\n  }\n  ......\n}\n```\n主要是执行printer中的方法，我们继续看LoggerPrinter\n```java\nclass LoggerPrinter implements Printer {\n   ......\n  @Override public void d(String message, Object... args) {\n    log(DEBUG, null, message, args);\n  }\n\n  @Override public void d(Object object) {\n    log(DEBUG, null, Utils.toString(object));\n  }\n\n  @Override public synchronized void log(int priority, String tag, String message, Throwable throwable) {\n    .......\n    for (LogAdapter adapter : logAdapters) {\n      if (adapter.isLoggable(priority, tag)){\n        adapter.log(priority, tag, message);\n      }\n    }\n  }\n}\n```\n可以发现，主要就是遍历LogAdapters列表，因为adapter是不同的适配器，不同适配器有不同的打印日志信息格式。从Logger的初始化，我们知道传入的是AndroidLogAdapter并且AndroidLogAdapter中主要执行的是PrettyFormatStrategy中的log方法，这里我们直接看PrettyFormatStrategy中的log方法\n```java\n  @Override public void log(int priority, String onceOnlyTag, String message) {\n    String tag = formatTag(onceOnlyTag);\n\n    logTopBorder(priority, tag);//1.Log顶端的线格式\n    logHeaderContent(priority, tag, methodCount);//2.log头部内容\n\n    //get bytes of message with system's default charset (which is UTF-8 for Android)\n    byte[] bytes = message.getBytes();\n    int length = bytes.length;\n    if (length <= CHUNK_SIZE) {\n      if (methodCount > 0) {\n        logDivider(priority, tag);//日志分界线\n      }\n      logContent(priority, tag, message);//3.log日志内容\n      logBottomBorder(priority, tag);//4.log底端线格式\n      return;\n    }\n    if (methodCount > 0) {\n      logDivider(priority, tag);//日志分界线\n    }\n    for (int i = 0; i < length; i += CHUNK_SIZE) {\n      int count = Math.min(length - i, CHUNK_SIZE);\n      //create a new String with system's default charset (which is UTF-8 for Android)\n      logContent(priority, tag, new String(bytes, i, count));//5.log日志内容\n    }\n    logBottomBorder(priority, tag);//6.log底端线格式\n  }\n```\n此方法是Logger框架打印日志的核心方法，上面图片中的日志，主要就是通过这个方法控制打印的。让我们来看相关方法\n```java\npublic class PrettyFormatStrategy implements FormatStrategy {\n  \n  private static final char TOP_LEFT_CORNER = '┌';\n  private static final char BOTTOM_LEFT_CORNER = '└';\n  private static final char MIDDLE_CORNER = '├';\n  private static final char HORIZONTAL_LINE = '│';\n  private static final String DOUBLE_DIVIDER = \"────────────────────────────────────────────────────────\";\n  private static final String SINGLE_DIVIDER = \"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\";\n  private static final String TOP_BORDER = TOP_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;\n  private static final String BOTTOM_BORDER = BOTTOM_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;\n  private static final String MIDDLE_BORDER = MIDDLE_CORNER + SINGLE_DIVIDER + SINGLE_DIVIDER;\n  .....\n  private void logTopBorder(int logType, String tag) {\n    logChunk(logType, tag, TOP_BORDER);\n  }\n  private void logBottomBorder(int logType, String tag) {\n    logChunk(logType, tag, BOTTOM_BORDER);\n  }\n\n  private void logDivider(int logType, String tag) {\n    logChunk(logType, tag, MIDDLE_BORDER);\n  }\n\n  private void logContent(int logType, String tag, String chunk) {\n    String[] lines = chunk.split(System.getProperty(\"line.separator\"));//核心方法\n    for (String line : lines) {\n      logChunk(logType, tag, HORIZONTAL_LINE + \" \" + line);\n    }\n  }\n  private void logChunk(int priority, String tag, String chunk) {\n    logStrategy.log(priority, tag, chunk);\n  }\n......\n}\n```\n由上易知，最后都调用logChunk()方法，最后主要也是调用了logStrategy的log方法，通过Logger初始化，知logStrategy就是LogcatLogStrategy类,我们来看LogcatLogStrategy中的log方法\n```java\nimport android.util.Log;\npublic class LogcatLogStrategy implements LogStrategy {\n\n  @Override public void log(int priority, String tag, String message) {\n    Log.println(priority, tag, message);\n  }\n}\n```\n这里主要调用了android原生的打印日志方法，从而日志就被打印在logCat中了。到这里，一般日志打印就介绍完了，其他日志可以类推的，这里不介绍了。\n\n**ii.Json日志的打印**\n\n打印调用方法\n\n```java\nLogger.json(\"{ \\\"key\\\": 3, \\\"value\\\": something}\");//3.Json日志\n```\n从debug日志打印分析中，我们知道PrettyFormatStrategy的log类为打印日志核心方法，对于json日志打印，主要是打印内容的区别，其他打印没有区别，所以这里主要看看打印日志的方法\n```java\n  private void logContent(int logType, String tag, String chunk) {\n    String[] lines = chunk.split(System.getProperty(\"line.separator\"));//核心方法\n    for (String line : lines) {\n      logChunk(logType, tag, HORIZONTAL_LINE + \" \" + line);\n    }\n  }\n```\n这里知道，对打印内容chunk进行了分割，主要以System.getProperty(\"line.separator\")即换行符\\n进行分割。从打印Json内容中，我们没有发现换行符，这里需要看看最初调用的方法。由Logger初始化，我们知Logger.json()方法主要就是调用LoggerPrinter中的json方法，这里让我们来看LoggerPrinter.json()方法\n```java\n @Override public void json(String json) {\n    if (Utils.isEmpty(json)) {\n      d(\"Empty/Null json content\");\n      return;\n    }\n    try {\n      json = json.trim();\n      if (json.startsWith(\"{\")) {\n        JSONObject jsonObject = new JSONObject(json);\n        String message = jsonObject.toString(JSON_INDENT);//1\n        d(message);\n        return;\n      }\n      if (json.startsWith(\"[\")) {\n        JSONArray jsonArray = new JSONArray(json);\n        String message = jsonArray.toString(JSON_INDENT);//2.\n        d(message);\n        return;\n      }\n      e(\"Invalid Json\");\n    } catch (JSONException e) {\n      e(\"Invalid Json\");\n    }\n  }\n```\n通过调试，知道就是在注释中的位置，在进行转化的时候，字符串\"{ \\\"key\\\": 3, \\\"value\\\": something}\"转为\"{\\n\"key\": 3,\\n\"value\": something\\n}\"，从而在打印的时候，就可以分行打印键值对。这样也就再打印json的时候可以分行显示。\n\n到这里，日志Logger框架原理分析就讲解完。其中logger框架还支持打印xml，具体原理如何，这里不做介绍了。\n\n# 三、总结\nLogger日志框架，让Log日志变得整洁，简单，易看，一大功德。其中PrettyFormatStrategy通过静态内部类实现了Logger显示内容配置方式值得借鉴。\n\n# 四、相关参考文档\n\n[Looger官方介绍](https://github.com/orhanobut/logger/blob/master/README.md)\n\n\n\n\n","source":"_posts/tech_logger.md","raw":"---\nlayout: post\ntitle: \"Logger框架源码解析\"\ndate: 11/30/2017 2:20:58 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 开源框架源码解析\n\t- Logger框架源码解析\n---\n---\n在移动软件开发中，我们经常会用到很多框架，如网络框架retrofit，图片加载框架glide，数据库框架litepal，日志框架Logger等。这些框架对应用都很重要，日志框架也是其中重要的一部分。因为很多操作如调试，优化，修改bug等都需要通过日志来验证我们的想法，所以日志框架就成项目的必需。本篇博文将会介绍Logger日志框架，主要从源码的角度分析。\n\n# 一、什么是Logger框架？\nSimple, pretty and powerful logger for android。简单，功能强大日志框架，专为Android。\n\nLogger有多强大呢？先让我们来看一张打印日志图：\n\n![](/assets/img/tech_logger_output.png)\n<!-- more -->\n从此图，就可看出Logger打印日志相当强大。Logger框架原理图：\n\n![](/assets/img/tech_loger_framwork.png)\n\n\n# 二、Logger源码解析(Json)\nLogger源码地址：[https://github.com/orhanobut/logger](https://github.com/orhanobut/logger)\n\n本篇博文主要采用版本V2.1.1的源码。\n\n**1.Logger初始化**\n```java\n    Logger.addLogAdapter(new AndroidLogAdapter());//1.初始化\n```\n打印结果类似上面的效果图。我们先来看注释1初始化，进入Logger类\n```java\n/**\n * But more pretty, simple and powerful\n */\npublic final class Logger {\n  private static Printer printer = new LoggerPrinter();\n  ......\n  public static void addLogAdapter(LogAdapter adapter) {\n    printer.addAdapter(adapter);\n  }\n......\n}\n```\nLogger的静态方法，主要就是向printer中添加了一个Adapter，通过定义我们知道printer为LoggerPrinter,我们继续看看LoggerPrinter\n```java\nclass LoggerPrinter implements Printer {\n  private final List<LogAdapter> logAdapters = new ArrayList<>();\n  ......\n  @Override public void addAdapter(LogAdapter adapter) {\n    logAdapters.add(adapter);\n  }\n......\n}\n```\n从方法名addLogAdapter就知向LogAdapter列表添加LogAdapter,源码下来也的确如此，但这LogAdapters有啥用呢？后面会说到。让我们再来看看AndroidLogAdapter\n```java\npublic class AndroidLogAdapter implements LogAdapter {\n\n  private final FormatStrategy formatStrategy;\n\n  public AndroidLogAdapter() {\n    this.formatStrategy = PrettyFormatStrategy.newBuilder().build();\n  }\n\n  public AndroidLogAdapter(FormatStrategy formatStrategy) {\n    this.formatStrategy = formatStrategy;\n  }\n......\n}\n```\n在AndroidLogAdapter中初始化了FormatStrategy，这类有啥用呢？让我们来看看\n```java\npublic interface FormatStrategy {\n  void log(int priority, String tag, String message);\n}\n\n```\nFormatStrategy就是一接口，应该是打印日志的。我们来看看他的实现类PrettyFormatStrategy.newBuilder().build(),继续看PrettyFormatStrategy源码\n```java\npublic class PrettyFormatStrategy implements FormatStrategy {\n  private final int methodCount;\n  private final int methodOffset;\n  private final boolean showThreadInfo;\n  private final LogStrategy logStrategy;\n  private final String tag;\n\n  private PrettyFormatStrategy(Builder builder) {\n    methodCount = builder.methodCount;\n    methodOffset = builder.methodOffset;\n    showThreadInfo = builder.showThreadInfo;\n    logStrategy = builder.logStrategy;\n    tag = builder.tag;\n  }\n\n  public static Builder newBuilder() {\n    return new Builder();\n  }\n  public static class Builder {\n\n    .......\n    private Builder() {\n    }\n    ......\n\n    public PrettyFormatStrategy build() {\n      if (logStrategy == null) {\n        logStrategy = new LogcatLogStrategy();\n      }\n      return new PrettyFormatStrategy(this);\n    }\n  }\n```\n由上易知，主要就是对PrettyFormatStrategy初始化，然后赋值给AndroidLogAdapter的FormatStrategy。PrettyFormatStrategy类对Logger来说是核心类，因为所有日志的打印控制主要也在此类实现，接下来我们会说到。\n\n**2.Logger打印日志**\n```java\n    Logger.d(\"Hello world!\");//2.debug日志\n    Logger.json(\"{ \\\"key\\\": 3, \\\"value\\\": something}\");//3.Json日志\n```\n**i.debug日志，一般日志打印**\n首先，我们来看一般日志，debug日志,进入Logger源码\n```java\npublic final class Logger {\n\n  private static Printer printer = new LoggerPrinter();\n  .....\n  public static void d(String message, Object... args) {\n    printer.d(message, args);\n  }\n\n  public static void d(Object object) {\n    printer.d(object);\n  }\n\n  public static void e(String message, Object... args) {\n    printer.e(null, message, args);\n  }\n\n  public static void e(Throwable throwable, String message, Object... args) {\n    printer.e(throwable, message, args);\n  }\n  ......\n}\n```\n主要是执行printer中的方法，我们继续看LoggerPrinter\n```java\nclass LoggerPrinter implements Printer {\n   ......\n  @Override public void d(String message, Object... args) {\n    log(DEBUG, null, message, args);\n  }\n\n  @Override public void d(Object object) {\n    log(DEBUG, null, Utils.toString(object));\n  }\n\n  @Override public synchronized void log(int priority, String tag, String message, Throwable throwable) {\n    .......\n    for (LogAdapter adapter : logAdapters) {\n      if (adapter.isLoggable(priority, tag)){\n        adapter.log(priority, tag, message);\n      }\n    }\n  }\n}\n```\n可以发现，主要就是遍历LogAdapters列表，因为adapter是不同的适配器，不同适配器有不同的打印日志信息格式。从Logger的初始化，我们知道传入的是AndroidLogAdapter并且AndroidLogAdapter中主要执行的是PrettyFormatStrategy中的log方法，这里我们直接看PrettyFormatStrategy中的log方法\n```java\n  @Override public void log(int priority, String onceOnlyTag, String message) {\n    String tag = formatTag(onceOnlyTag);\n\n    logTopBorder(priority, tag);//1.Log顶端的线格式\n    logHeaderContent(priority, tag, methodCount);//2.log头部内容\n\n    //get bytes of message with system's default charset (which is UTF-8 for Android)\n    byte[] bytes = message.getBytes();\n    int length = bytes.length;\n    if (length <= CHUNK_SIZE) {\n      if (methodCount > 0) {\n        logDivider(priority, tag);//日志分界线\n      }\n      logContent(priority, tag, message);//3.log日志内容\n      logBottomBorder(priority, tag);//4.log底端线格式\n      return;\n    }\n    if (methodCount > 0) {\n      logDivider(priority, tag);//日志分界线\n    }\n    for (int i = 0; i < length; i += CHUNK_SIZE) {\n      int count = Math.min(length - i, CHUNK_SIZE);\n      //create a new String with system's default charset (which is UTF-8 for Android)\n      logContent(priority, tag, new String(bytes, i, count));//5.log日志内容\n    }\n    logBottomBorder(priority, tag);//6.log底端线格式\n  }\n```\n此方法是Logger框架打印日志的核心方法，上面图片中的日志，主要就是通过这个方法控制打印的。让我们来看相关方法\n```java\npublic class PrettyFormatStrategy implements FormatStrategy {\n  \n  private static final char TOP_LEFT_CORNER = '┌';\n  private static final char BOTTOM_LEFT_CORNER = '└';\n  private static final char MIDDLE_CORNER = '├';\n  private static final char HORIZONTAL_LINE = '│';\n  private static final String DOUBLE_DIVIDER = \"────────────────────────────────────────────────────────\";\n  private static final String SINGLE_DIVIDER = \"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\";\n  private static final String TOP_BORDER = TOP_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;\n  private static final String BOTTOM_BORDER = BOTTOM_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;\n  private static final String MIDDLE_BORDER = MIDDLE_CORNER + SINGLE_DIVIDER + SINGLE_DIVIDER;\n  .....\n  private void logTopBorder(int logType, String tag) {\n    logChunk(logType, tag, TOP_BORDER);\n  }\n  private void logBottomBorder(int logType, String tag) {\n    logChunk(logType, tag, BOTTOM_BORDER);\n  }\n\n  private void logDivider(int logType, String tag) {\n    logChunk(logType, tag, MIDDLE_BORDER);\n  }\n\n  private void logContent(int logType, String tag, String chunk) {\n    String[] lines = chunk.split(System.getProperty(\"line.separator\"));//核心方法\n    for (String line : lines) {\n      logChunk(logType, tag, HORIZONTAL_LINE + \" \" + line);\n    }\n  }\n  private void logChunk(int priority, String tag, String chunk) {\n    logStrategy.log(priority, tag, chunk);\n  }\n......\n}\n```\n由上易知，最后都调用logChunk()方法，最后主要也是调用了logStrategy的log方法，通过Logger初始化，知logStrategy就是LogcatLogStrategy类,我们来看LogcatLogStrategy中的log方法\n```java\nimport android.util.Log;\npublic class LogcatLogStrategy implements LogStrategy {\n\n  @Override public void log(int priority, String tag, String message) {\n    Log.println(priority, tag, message);\n  }\n}\n```\n这里主要调用了android原生的打印日志方法，从而日志就被打印在logCat中了。到这里，一般日志打印就介绍完了，其他日志可以类推的，这里不介绍了。\n\n**ii.Json日志的打印**\n\n打印调用方法\n\n```java\nLogger.json(\"{ \\\"key\\\": 3, \\\"value\\\": something}\");//3.Json日志\n```\n从debug日志打印分析中，我们知道PrettyFormatStrategy的log类为打印日志核心方法，对于json日志打印，主要是打印内容的区别，其他打印没有区别，所以这里主要看看打印日志的方法\n```java\n  private void logContent(int logType, String tag, String chunk) {\n    String[] lines = chunk.split(System.getProperty(\"line.separator\"));//核心方法\n    for (String line : lines) {\n      logChunk(logType, tag, HORIZONTAL_LINE + \" \" + line);\n    }\n  }\n```\n这里知道，对打印内容chunk进行了分割，主要以System.getProperty(\"line.separator\")即换行符\\n进行分割。从打印Json内容中，我们没有发现换行符，这里需要看看最初调用的方法。由Logger初始化，我们知Logger.json()方法主要就是调用LoggerPrinter中的json方法，这里让我们来看LoggerPrinter.json()方法\n```java\n @Override public void json(String json) {\n    if (Utils.isEmpty(json)) {\n      d(\"Empty/Null json content\");\n      return;\n    }\n    try {\n      json = json.trim();\n      if (json.startsWith(\"{\")) {\n        JSONObject jsonObject = new JSONObject(json);\n        String message = jsonObject.toString(JSON_INDENT);//1\n        d(message);\n        return;\n      }\n      if (json.startsWith(\"[\")) {\n        JSONArray jsonArray = new JSONArray(json);\n        String message = jsonArray.toString(JSON_INDENT);//2.\n        d(message);\n        return;\n      }\n      e(\"Invalid Json\");\n    } catch (JSONException e) {\n      e(\"Invalid Json\");\n    }\n  }\n```\n通过调试，知道就是在注释中的位置，在进行转化的时候，字符串\"{ \\\"key\\\": 3, \\\"value\\\": something}\"转为\"{\\n\"key\": 3,\\n\"value\": something\\n}\"，从而在打印的时候，就可以分行打印键值对。这样也就再打印json的时候可以分行显示。\n\n到这里，日志Logger框架原理分析就讲解完。其中logger框架还支持打印xml，具体原理如何，这里不做介绍了。\n\n# 三、总结\nLogger日志框架，让Log日志变得整洁，简单，易看，一大功德。其中PrettyFormatStrategy通过静态内部类实现了Logger显示内容配置方式值得借鉴。\n\n# 四、相关参考文档\n\n[Looger官方介绍](https://github.com/orhanobut/logger/blob/master/README.md)\n\n\n\n\n","slug":"tech_logger","published":1,"updated":"2019-06-27T08:15:15.342Z","photos":[],"link":"","_id":"cjxfjaes2003pystgfsxlsztc","content":"<hr>\n<p>在移动软件开发中，我们经常会用到很多框架，如网络框架retrofit，图片加载框架glide，数据库框架litepal，日志框架Logger等。这些框架对应用都很重要，日志框架也是其中重要的一部分。因为很多操作如调试，优化，修改bug等都需要通过日志来验证我们的想法，所以日志框架就成项目的必需。本篇博文将会介绍Logger日志框架，主要从源码的角度分析。</p>\n<h1 id=\"一、什么是Logger框架？\"><a href=\"#一、什么是Logger框架？\" class=\"headerlink\" title=\"一、什么是Logger框架？\"></a>一、什么是Logger框架？</h1><p>Simple, pretty and powerful logger for android。简单，功能强大日志框架，专为Android。</p>\n<p>Logger有多强大呢？先让我们来看一张打印日志图：</p>\n<p><img src=\"/assets/img/tech_logger_output.png\" alt=\"\"><br><a id=\"more\"></a><br>从此图，就可看出Logger打印日志相当强大。Logger框架原理图：</p>\n<p><img src=\"/assets/img/tech_loger_framwork.png\" alt=\"\"></p>\n<h1 id=\"二、Logger源码解析-Json\"><a href=\"#二、Logger源码解析-Json\" class=\"headerlink\" title=\"二、Logger源码解析(Json)\"></a>二、Logger源码解析(Json)</h1><p>Logger源码地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger</a></p>\n<p>本篇博文主要采用版本V2.1.1的源码。</p>\n<p><strong>1.Logger初始化</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter());<span class=\"comment\">//1.初始化</span></div></pre></td></tr></table></figure></p>\n<p>打印结果类似上面的效果图。我们先来看注释1初始化，进入Logger类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * But more pretty, simple and powerful</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Printer printer = <span class=\"keyword\">new</span> LoggerPrinter();</div><div class=\"line\">  ......</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addLogAdapter</span><span class=\"params\">(LogAdapter adapter)</span> </span>&#123;</div><div class=\"line\">    printer.addAdapter(adapter);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Logger的静态方法，主要就是向printer中添加了一个Adapter，通过定义我们知道printer为LoggerPrinter,我们继续看看LoggerPrinter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Printer</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;LogAdapter&gt; logAdapters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  ......</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAdapter</span><span class=\"params\">(LogAdapter adapter)</span> </span>&#123;</div><div class=\"line\">    logAdapters.add(adapter);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从方法名addLogAdapter就知向LogAdapter列表添加LogAdapter,源码下来也的确如此，但这LogAdapters有啥用呢？后面会说到。让我们再来看看AndroidLogAdapter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidLogAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FormatStrategy formatStrategy;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndroidLogAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatStrategy = PrettyFormatStrategy.newBuilder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndroidLogAdapter</span><span class=\"params\">(FormatStrategy formatStrategy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatStrategy = formatStrategy;</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AndroidLogAdapter中初始化了FormatStrategy，这类有啥用呢？让我们来看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>FormatStrategy就是一接口，应该是打印日志的。我们来看看他的实现类PrettyFormatStrategy.newBuilder().build(),继续看PrettyFormatStrategy源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrettyFormatStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> methodCount;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> methodOffset;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> showThreadInfo;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LogStrategy logStrategy;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String tag;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PrettyFormatStrategy</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">    methodCount = builder.methodCount;</div><div class=\"line\">    methodOffset = builder.methodOffset;</div><div class=\"line\">    showThreadInfo = builder.showThreadInfo;</div><div class=\"line\">    logStrategy = builder.logStrategy;</div><div class=\"line\">    tag = builder.tag;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PrettyFormatStrategy <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (logStrategy == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        logStrategy = <span class=\"keyword\">new</span> LogcatLogStrategy();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrettyFormatStrategy(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，主要就是对PrettyFormatStrategy初始化，然后赋值给AndroidLogAdapter的FormatStrategy。PrettyFormatStrategy类对Logger来说是核心类，因为所有日志的打印控制主要也在此类实现，接下来我们会说到。</p>\n<p><strong>2.Logger打印日志</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.d(<span class=\"string\">\"Hello world!\"</span>);<span class=\"comment\">//2.debug日志</span></div><div class=\"line\">Logger.json(<span class=\"string\">\"&#123; \\\"key\\\": 3, \\\"value\\\": something&#125;\"</span>);<span class=\"comment\">//3.Json日志</span></div></pre></td></tr></table></figure></p>\n<p><strong>i.debug日志，一般日志打印</strong><br>首先，我们来看一般日志，debug日志,进入Logger源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Printer printer = <span class=\"keyword\">new</span> LoggerPrinter();</div><div class=\"line\">  .....</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.d(message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">    printer.d(object);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">e</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.e(<span class=\"keyword\">null</span>, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">e</span><span class=\"params\">(Throwable throwable, String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.e(throwable, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要是执行printer中的方法，我们继续看LoggerPrinter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Printer</span> </span>&#123;</div><div class=\"line\">   ......</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    log(DEBUG, <span class=\"keyword\">null</span>, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">    log(DEBUG, <span class=\"keyword\">null</span>, Utils.toString(object));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"keyword\">for</span> (LogAdapter adapter : logAdapters) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (adapter.isLoggable(priority, tag))&#123;</div><div class=\"line\">        adapter.log(priority, tag, message);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，主要就是遍历LogAdapters列表，因为adapter是不同的适配器，不同适配器有不同的打印日志信息格式。从Logger的初始化，我们知道传入的是AndroidLogAdapter并且AndroidLogAdapter中主要执行的是PrettyFormatStrategy中的log方法，这里我们直接看PrettyFormatStrategy中的log方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String onceOnlyTag, String message)</span> </span>&#123;</div><div class=\"line\">  String tag = formatTag(onceOnlyTag);</div><div class=\"line\"></div><div class=\"line\">  logTopBorder(priority, tag);<span class=\"comment\">//1.Log顶端的线格式</span></div><div class=\"line\">  logHeaderContent(priority, tag, methodCount);<span class=\"comment\">//2.log头部内容</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//get bytes of message with system's default charset (which is UTF-8 for Android)</span></div><div class=\"line\">  <span class=\"keyword\">byte</span>[] bytes = message.getBytes();</div><div class=\"line\">  <span class=\"keyword\">int</span> length = bytes.length;</div><div class=\"line\">  <span class=\"keyword\">if</span> (length &lt;= CHUNK_SIZE) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (methodCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      logDivider(priority, tag);<span class=\"comment\">//日志分界线</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    logContent(priority, tag, message);<span class=\"comment\">//3.log日志内容</span></div><div class=\"line\">    logBottomBorder(priority, tag);<span class=\"comment\">//4.log底端线格式</span></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (methodCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    logDivider(priority, tag);<span class=\"comment\">//日志分界线</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i += CHUNK_SIZE) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = Math.min(length - i, CHUNK_SIZE);</div><div class=\"line\">    <span class=\"comment\">//create a new String with system's default charset (which is UTF-8 for Android)</span></div><div class=\"line\">    logContent(priority, tag, <span class=\"keyword\">new</span> String(bytes, i, count));<span class=\"comment\">//5.log日志内容</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  logBottomBorder(priority, tag);<span class=\"comment\">//6.log底端线格式</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法是Logger框架打印日志的核心方法，上面图片中的日志，主要就是通过这个方法控制打印的。让我们来看相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrettyFormatStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> TOP_LEFT_CORNER = <span class=\"string\">'┌'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> BOTTOM_LEFT_CORNER = <span class=\"string\">'└'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> MIDDLE_CORNER = <span class=\"string\">'├'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> HORIZONTAL_LINE = <span class=\"string\">'│'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOUBLE_DIVIDER = <span class=\"string\">\"────────────────────────────────────────────────────────\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SINGLE_DIVIDER = <span class=\"string\">\"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TOP_BORDER = TOP_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BOTTOM_BORDER = BOTTOM_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MIDDLE_BORDER = MIDDLE_CORNER + SINGLE_DIVIDER + SINGLE_DIVIDER;</div><div class=\"line\">  .....</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logTopBorder</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, TOP_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logBottomBorder</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, BOTTOM_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logDivider</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, MIDDLE_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logContent</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">    String[] lines = chunk.split(System.getProperty(<span class=\"string\">\"line.separator\"</span>));<span class=\"comment\">//核心方法</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (String line : lines) &#123;</div><div class=\"line\">      logChunk(logType, tag, HORIZONTAL_LINE + <span class=\"string\">\" \"</span> + line);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logChunk</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">    logStrategy.log(priority, tag, chunk);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，最后都调用logChunk()方法，最后主要也是调用了logStrategy的log方法，通过Logger初始化，知logStrategy就是LogcatLogStrategy类,我们来看LogcatLogStrategy中的log方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogcatLogStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message)</span> </span>&#123;</div><div class=\"line\">    Log.println(priority, tag, message);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要调用了android原生的打印日志方法，从而日志就被打印在logCat中了。到这里，一般日志打印就介绍完了，其他日志可以类推的，这里不介绍了。</p>\n<p><strong>ii.Json日志的打印</strong></p>\n<p>打印调用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.json(<span class=\"string\">\"&#123; \\\"key\\\": 3, \\\"value\\\": something&#125;\"</span>);<span class=\"comment\">//3.Json日志</span></div></pre></td></tr></table></figure>\n<p>从debug日志打印分析中，我们知道PrettyFormatStrategy的log类为打印日志核心方法，对于json日志打印，主要是打印内容的区别，其他打印没有区别，所以这里主要看看打印日志的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logContent</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">  String[] lines = chunk.split(System.getProperty(<span class=\"string\">\"line.separator\"</span>));<span class=\"comment\">//核心方法</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (String line : lines) &#123;</div><div class=\"line\">    logChunk(logType, tag, HORIZONTAL_LINE + <span class=\"string\">\" \"</span> + line);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里知道，对打印内容chunk进行了分割，主要以System.getProperty(“line.separator”)即换行符\\n进行分割。从打印Json内容中，我们没有发现换行符，这里需要看看最初调用的方法。由Logger初始化，我们知Logger.json()方法主要就是调用LoggerPrinter中的json方法，这里让我们来看LoggerPrinter.json()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">json</span><span class=\"params\">(String json)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (Utils.isEmpty(json)) &#123;</div><div class=\"line\">     d(<span class=\"string\">\"Empty/Null json content\"</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     json = json.trim();</div><div class=\"line\">     <span class=\"keyword\">if</span> (json.startsWith(<span class=\"string\">\"&#123;\"</span>)) &#123;</div><div class=\"line\">       JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject(json);</div><div class=\"line\">       String message = jsonObject.toString(JSON_INDENT);<span class=\"comment\">//1</span></div><div class=\"line\">       d(message);</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (json.startsWith(<span class=\"string\">\"[\"</span>)) &#123;</div><div class=\"line\">       JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray(json);</div><div class=\"line\">       String message = jsonArray.toString(JSON_INDENT);<span class=\"comment\">//2.</span></div><div class=\"line\">       d(message);</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     e(<span class=\"string\">\"Invalid Json\"</span>);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">     e(<span class=\"string\">\"Invalid Json\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过调试，知道就是在注释中的位置，在进行转化的时候，字符串”{ \\”key\\”: 3, \\”value\\”: something}”转为”{\\n”key”: 3,\\n”value”: something\\n}”，从而在打印的时候，就可以分行打印键值对。这样也就再打印json的时候可以分行显示。</p>\n<p>到这里，日志Logger框架原理分析就讲解完。其中logger框架还支持打印xml，具体原理如何，这里不做介绍了。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>Logger日志框架，让Log日志变得整洁，简单，易看，一大功德。其中PrettyFormatStrategy通过静态内部类实现了Logger显示内容配置方式值得借鉴。</p>\n<h1 id=\"四、相关参考文档\"><a href=\"#四、相关参考文档\" class=\"headerlink\" title=\"四、相关参考文档\"></a>四、相关参考文档</h1><p><a href=\"https://github.com/orhanobut/logger/blob/master/README.md\" target=\"_blank\" rel=\"external\">Looger官方介绍</a></p>\n","excerpt":"<hr>\n<p>在移动软件开发中，我们经常会用到很多框架，如网络框架retrofit，图片加载框架glide，数据库框架litepal，日志框架Logger等。这些框架对应用都很重要，日志框架也是其中重要的一部分。因为很多操作如调试，优化，修改bug等都需要通过日志来验证我们的想法，所以日志框架就成项目的必需。本篇博文将会介绍Logger日志框架，主要从源码的角度分析。</p>\n<h1 id=\"一、什么是Logger框架？\"><a href=\"#一、什么是Logger框架？\" class=\"headerlink\" title=\"一、什么是Logger框架？\"></a>一、什么是Logger框架？</h1><p>Simple, pretty and powerful logger for android。简单，功能强大日志框架，专为Android。</p>\n<p>Logger有多强大呢？先让我们来看一张打印日志图：</p>\n<p><img src=\"/assets/img/tech_logger_output.png\" alt=\"\"><br>","more":"<br>从此图，就可看出Logger打印日志相当强大。Logger框架原理图：</p>\n<p><img src=\"/assets/img/tech_loger_framwork.png\" alt=\"\"></p>\n<h1 id=\"二、Logger源码解析-Json\"><a href=\"#二、Logger源码解析-Json\" class=\"headerlink\" title=\"二、Logger源码解析(Json)\"></a>二、Logger源码解析(Json)</h1><p>Logger源码地址：<a href=\"https://github.com/orhanobut/logger\">https://github.com/orhanobut/logger</a></p>\n<p>本篇博文主要采用版本V2.1.1的源码。</p>\n<p><strong>1.Logger初始化</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.addLogAdapter(<span class=\"keyword\">new</span> AndroidLogAdapter());<span class=\"comment\">//1.初始化</span></div></pre></td></tr></table></figure></p>\n<p>打印结果类似上面的效果图。我们先来看注释1初始化，进入Logger类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * But more pretty, simple and powerful</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Printer printer = <span class=\"keyword\">new</span> LoggerPrinter();</div><div class=\"line\">  ......</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addLogAdapter</span><span class=\"params\">(LogAdapter adapter)</span> </span>&#123;</div><div class=\"line\">    printer.addAdapter(adapter);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Logger的静态方法，主要就是向printer中添加了一个Adapter，通过定义我们知道printer为LoggerPrinter,我们继续看看LoggerPrinter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Printer</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;LogAdapter&gt; logAdapters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  ......</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAdapter</span><span class=\"params\">(LogAdapter adapter)</span> </span>&#123;</div><div class=\"line\">    logAdapters.add(adapter);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从方法名addLogAdapter就知向LogAdapter列表添加LogAdapter,源码下来也的确如此，但这LogAdapters有啥用呢？后面会说到。让我们再来看看AndroidLogAdapter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidLogAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FormatStrategy formatStrategy;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndroidLogAdapter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatStrategy = PrettyFormatStrategy.newBuilder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndroidLogAdapter</span><span class=\"params\">(FormatStrategy formatStrategy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.formatStrategy = formatStrategy;</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AndroidLogAdapter中初始化了FormatStrategy，这类有啥用呢？让我们来看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>FormatStrategy就是一接口，应该是打印日志的。我们来看看他的实现类PrettyFormatStrategy.newBuilder().build(),继续看PrettyFormatStrategy源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrettyFormatStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> methodCount;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> methodOffset;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> showThreadInfo;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LogStrategy logStrategy;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String tag;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PrettyFormatStrategy</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">    methodCount = builder.methodCount;</div><div class=\"line\">    methodOffset = builder.methodOffset;</div><div class=\"line\">    showThreadInfo = builder.showThreadInfo;</div><div class=\"line\">    logStrategy = builder.logStrategy;</div><div class=\"line\">    tag = builder.tag;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PrettyFormatStrategy <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (logStrategy == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        logStrategy = <span class=\"keyword\">new</span> LogcatLogStrategy();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrettyFormatStrategy(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，主要就是对PrettyFormatStrategy初始化，然后赋值给AndroidLogAdapter的FormatStrategy。PrettyFormatStrategy类对Logger来说是核心类，因为所有日志的打印控制主要也在此类实现，接下来我们会说到。</p>\n<p><strong>2.Logger打印日志</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.d(<span class=\"string\">\"Hello world!\"</span>);<span class=\"comment\">//2.debug日志</span></div><div class=\"line\">Logger.json(<span class=\"string\">\"&#123; \\\"key\\\": 3, \\\"value\\\": something&#125;\"</span>);<span class=\"comment\">//3.Json日志</span></div></pre></td></tr></table></figure></p>\n<p><strong>i.debug日志，一般日志打印</strong><br>首先，我们来看一般日志，debug日志,进入Logger源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Printer printer = <span class=\"keyword\">new</span> LoggerPrinter();</div><div class=\"line\">  .....</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.d(message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">    printer.d(object);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">e</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.e(<span class=\"keyword\">null</span>, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">e</span><span class=\"params\">(Throwable throwable, String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    printer.e(throwable, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要是执行printer中的方法，我们继续看LoggerPrinter<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerPrinter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Printer</span> </span>&#123;</div><div class=\"line\">   ......</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(String message, Object... args)</span> </span>&#123;</div><div class=\"line\">    log(DEBUG, <span class=\"keyword\">null</span>, message, args);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">d</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">    log(DEBUG, <span class=\"keyword\">null</span>, Utils.toString(object));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message, Throwable throwable)</span> </span>&#123;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"keyword\">for</span> (LogAdapter adapter : logAdapters) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (adapter.isLoggable(priority, tag))&#123;</div><div class=\"line\">        adapter.log(priority, tag, message);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，主要就是遍历LogAdapters列表，因为adapter是不同的适配器，不同适配器有不同的打印日志信息格式。从Logger的初始化，我们知道传入的是AndroidLogAdapter并且AndroidLogAdapter中主要执行的是PrettyFormatStrategy中的log方法，这里我们直接看PrettyFormatStrategy中的log方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String onceOnlyTag, String message)</span> </span>&#123;</div><div class=\"line\">  String tag = formatTag(onceOnlyTag);</div><div class=\"line\"></div><div class=\"line\">  logTopBorder(priority, tag);<span class=\"comment\">//1.Log顶端的线格式</span></div><div class=\"line\">  logHeaderContent(priority, tag, methodCount);<span class=\"comment\">//2.log头部内容</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//get bytes of message with system's default charset (which is UTF-8 for Android)</span></div><div class=\"line\">  <span class=\"keyword\">byte</span>[] bytes = message.getBytes();</div><div class=\"line\">  <span class=\"keyword\">int</span> length = bytes.length;</div><div class=\"line\">  <span class=\"keyword\">if</span> (length &lt;= CHUNK_SIZE) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (methodCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      logDivider(priority, tag);<span class=\"comment\">//日志分界线</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    logContent(priority, tag, message);<span class=\"comment\">//3.log日志内容</span></div><div class=\"line\">    logBottomBorder(priority, tag);<span class=\"comment\">//4.log底端线格式</span></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (methodCount &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    logDivider(priority, tag);<span class=\"comment\">//日志分界线</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i += CHUNK_SIZE) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> count = Math.min(length - i, CHUNK_SIZE);</div><div class=\"line\">    <span class=\"comment\">//create a new String with system's default charset (which is UTF-8 for Android)</span></div><div class=\"line\">    logContent(priority, tag, <span class=\"keyword\">new</span> String(bytes, i, count));<span class=\"comment\">//5.log日志内容</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  logBottomBorder(priority, tag);<span class=\"comment\">//6.log底端线格式</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法是Logger框架打印日志的核心方法，上面图片中的日志，主要就是通过这个方法控制打印的。让我们来看相关方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrettyFormatStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">FormatStrategy</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> TOP_LEFT_CORNER = <span class=\"string\">'┌'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> BOTTOM_LEFT_CORNER = <span class=\"string\">'└'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> MIDDLE_CORNER = <span class=\"string\">'├'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> HORIZONTAL_LINE = <span class=\"string\">'│'</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOUBLE_DIVIDER = <span class=\"string\">\"────────────────────────────────────────────────────────\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SINGLE_DIVIDER = <span class=\"string\">\"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TOP_BORDER = TOP_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BOTTOM_BORDER = BOTTOM_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MIDDLE_BORDER = MIDDLE_CORNER + SINGLE_DIVIDER + SINGLE_DIVIDER;</div><div class=\"line\">  .....</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logTopBorder</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, TOP_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logBottomBorder</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, BOTTOM_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logDivider</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag)</span> </span>&#123;</div><div class=\"line\">    logChunk(logType, tag, MIDDLE_BORDER);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logContent</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">    String[] lines = chunk.split(System.getProperty(<span class=\"string\">\"line.separator\"</span>));<span class=\"comment\">//核心方法</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (String line : lines) &#123;</div><div class=\"line\">      logChunk(logType, tag, HORIZONTAL_LINE + <span class=\"string\">\" \"</span> + line);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logChunk</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">    logStrategy.log(priority, tag, chunk);</div><div class=\"line\">  &#125;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，最后都调用logChunk()方法，最后主要也是调用了logStrategy的log方法，通过Logger初始化，知logStrategy就是LogcatLogStrategy类,我们来看LogcatLogStrategy中的log方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogcatLogStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title\">LogStrategy</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">int</span> priority, String tag, String message)</span> </span>&#123;</div><div class=\"line\">    Log.println(priority, tag, message);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要调用了android原生的打印日志方法，从而日志就被打印在logCat中了。到这里，一般日志打印就介绍完了，其他日志可以类推的，这里不介绍了。</p>\n<p><strong>ii.Json日志的打印</strong></p>\n<p>打印调用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Logger.json(<span class=\"string\">\"&#123; \\\"key\\\": 3, \\\"value\\\": something&#125;\"</span>);<span class=\"comment\">//3.Json日志</span></div></pre></td></tr></table></figure>\n<p>从debug日志打印分析中，我们知道PrettyFormatStrategy的log类为打印日志核心方法，对于json日志打印，主要是打印内容的区别，其他打印没有区别，所以这里主要看看打印日志的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">logContent</span><span class=\"params\">(<span class=\"keyword\">int</span> logType, String tag, String chunk)</span> </span>&#123;</div><div class=\"line\">  String[] lines = chunk.split(System.getProperty(<span class=\"string\">\"line.separator\"</span>));<span class=\"comment\">//核心方法</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (String line : lines) &#123;</div><div class=\"line\">    logChunk(logType, tag, HORIZONTAL_LINE + <span class=\"string\">\" \"</span> + line);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里知道，对打印内容chunk进行了分割，主要以System.getProperty(“line.separator”)即换行符\\n进行分割。从打印Json内容中，我们没有发现换行符，这里需要看看最初调用的方法。由Logger初始化，我们知Logger.json()方法主要就是调用LoggerPrinter中的json方法，这里让我们来看LoggerPrinter.json()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">json</span><span class=\"params\">(String json)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (Utils.isEmpty(json)) &#123;</div><div class=\"line\">     d(<span class=\"string\">\"Empty/Null json content\"</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     json = json.trim();</div><div class=\"line\">     <span class=\"keyword\">if</span> (json.startsWith(<span class=\"string\">\"&#123;\"</span>)) &#123;</div><div class=\"line\">       JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject(json);</div><div class=\"line\">       String message = jsonObject.toString(JSON_INDENT);<span class=\"comment\">//1</span></div><div class=\"line\">       d(message);</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (json.startsWith(<span class=\"string\">\"[\"</span>)) &#123;</div><div class=\"line\">       JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray(json);</div><div class=\"line\">       String message = jsonArray.toString(JSON_INDENT);<span class=\"comment\">//2.</span></div><div class=\"line\">       d(message);</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     e(<span class=\"string\">\"Invalid Json\"</span>);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">     e(<span class=\"string\">\"Invalid Json\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过调试，知道就是在注释中的位置，在进行转化的时候，字符串”{ \\”key\\”: 3, \\”value\\”: something}”转为”{\\n”key”: 3,\\n”value”: something\\n}”，从而在打印的时候，就可以分行打印键值对。这样也就再打印json的时候可以分行显示。</p>\n<p>到这里，日志Logger框架原理分析就讲解完。其中logger框架还支持打印xml，具体原理如何，这里不做介绍了。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>Logger日志框架，让Log日志变得整洁，简单，易看，一大功德。其中PrettyFormatStrategy通过静态内部类实现了Logger显示内容配置方式值得借鉴。</p>\n<h1 id=\"四、相关参考文档\"><a href=\"#四、相关参考文档\" class=\"headerlink\" title=\"四、相关参考文档\"></a>四、相关参考文档</h1><p><a href=\"https://github.com/orhanobut/logger/blob/master/README.md\">Looger官方介绍</a></p>"},{"layout":"post","title":"LeakCanary框架源码解析","date":"2017-11-16T09:43:41.000Z","comments":1,"_content":"---\n如果我们开发的程序，出现内存泄漏，导致程序奔溃，造成用户卸载APP。这样的结果,是我们不想见到的。作为一名向上的程序员，如何避免内存泄漏，这就成为必须要解决的问题。良心企业Square,开源了LeakCanary框架，可以轻松集成，让检测内存泄漏变得十分容易。\n\n**什么是内存泄漏？**\n内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n# 一、什么是LeakCanary?\nLeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。\n\nLeakCanary源码地址：[https://github.com/square/leakcanary](https://github.com/square/leakcanary)\n\n# 二、LeakCanary源码解析\n\n**1.LeakCanary入口**\n\n```java\npublic class ExampleApplication extends Application {\n  @Override public void onCreate() {\n    super.onCreate();\n\n    LeakCanary.install(this);//1.核心方法\n\n  }\n}\n\n```\n<!-- more -->\n进入LeakCanary类\n```java\n  /**\n   * Creates a {@link RefWatcher} that works out of the box, and starts watching activity\n   * references (on ICS+).\n   */\n  public static RefWatcher install(Application application) {\n    return refWatcher(application).listenerServiceClass(DisplayLeakService.class)\n        .excludedRefs(AndroidExcludedRefs.createAppDefaults().build())\n        .buildAndInstall();\n  }\n\n  /** Builder to create a customized {@link RefWatcher} with appropriate Android defaults. */\n  public static AndroidRefWatcherBuilder refWatcher(Context context) {\n    return new AndroidRefWatcherBuilder(context);\n  }\n\n```\nrefWatcher()返回AndroidRefWatcherBuilder对象，listenerServiceClass、excludedRefs和buildAndInstall皆为\nAndroidRefWatcherBuilder的方法。这里我们先看AndroidRefWatcherBuilder中的buildAndInstall的方法\n\n```java\n  /**\n   * Creates a {@link RefWatcher} instance and starts watching activity references (on ICS+).\n   */\n  public RefWatcher buildAndInstall() {\n    RefWatcher refWatcher = build();\n    if (refWatcher != DISABLED) {\n      LeakCanary.enableDisplayLeakActivity(context);\n      ActivityRefWatcher.install((Application) context, refWatcher);//2.核心方法\n    }\n    return refWatcher;\n  }\n```\n这里创建了RefWatcher，并把其传给了ActivityRefWatcher。进入ActivityRefWatcher类\n```java\n  public static void install(Application application, RefWatcher refWatcher) {\n    new ActivityRefWatcher(application, refWatcher).watchActivities();\n  }\n\n  /**\n   * Constructs an {@link ActivityRefWatcher} that will make sure the activities are not leaking\n   * after they have been destroyed.\n   */\n  public ActivityRefWatcher(Application application, RefWatcher refWatcher) {\n    this.application = checkNotNull(application, \"application\");\n    this.refWatcher = checkNotNull(refWatcher, \"refWatcher\");\n  }\n```\n创建ActivityRefWatcher类的对象，并且调用了watchActivities()方法，我们继续看\n```java\n private final Application.ActivityLifecycleCallbacks lifecycleCallbacks =\n      new Application.ActivityLifecycleCallbacks() {\n        @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n        }\n\n        @Override public void onActivityStarted(Activity activity) {\n        }\n\n        @Override public void onActivityResumed(Activity activity) {\n        }\n\n        @Override public void onActivityPaused(Activity activity) {\n        }\n\n        @Override public void onActivityStopped(Activity activity) {\n        }\n\n        @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n\n        @Override public void onActivityDestroyed(Activity activity) {\n          ActivityRefWatcher.this.onActivityDestroyed(activity);//3.核心方法\n        }\n      };\n\n\n  public void watchActivities() {\n    // Make sure you don't get installed twice.\n    stopWatchingActivities();\n    application.registerActivityLifecycleCallbacks(lifecycleCallbacks);//4.核心方法，设置监听所有Activity的生命周期\n  }\n```\n**application.registerActivityLifecycleCallbacks(lifecycleCallbacks)，设置监听了应用Activity的生命周期，可以监听所有Activity**。当Activity调onDestory方法时，都会调 ActivityRefWatcher.this.onActivityDestroyed(activity)，我们继续看\n```java\n  void onActivityDestroyed(Activity activity) {\n    refWatcher.watch(activity);//5.核心方法\n  }\n```\n**2.核心类RefWatcher**\n```java\n  /**\n   * Identical to {@link #watch(Object, String)} with an empty string reference name.\n   *\n   * @see #watch(Object, String)\n   */\n  public void watch(Object watchedReference) {\n    watch(watchedReference, \"\");\n  }\n\n  /**\n   * Watches the provided references and checks if it can be GCed. This method is non blocking,\n   * the check is done on the {@link WatchExecutor} this {@link RefWatcher} has been constructed\n   * with.\n   *\n   * @param referenceName An logical identifier for the watched object.\n   */\n  public void watch(Object watchedReference, String referenceName) {\n    if (this == DISABLED) {\n      return;\n    }\n    checkNotNull(watchedReference, \"watchedReference\");\n    checkNotNull(referenceName, \"referenceName\");\n    final long watchStartNanoTime = System.nanoTime();\n    String key = UUID.randomUUID().toString();\n    retainedKeys.add(key);\n    final KeyedWeakReference reference =\n        new KeyedWeakReference(watchedReference, key, referenceName, queue);//6.核心方法\n\n    ensureGoneAsync(watchStartNanoTime, reference);//7.核心方法\n  }\n```\n这里对watchedReference即Activity对象建立了一个弱应用KeyedWeakReference，并且对KeyedWeakReference加了一个引用队列queue（ReferenceQueue）。当KeyedWeakReference对象可以回收时，会添加到ReferenceQueue中，我们继续\n```java\n  private void ensureGoneAsync(final long watchStartNanoTime, final KeyedWeakReference reference) {\n    watchExecutor.execute(new Retryable() {\n      @Override public Retryable.Result run() {\n        return ensureGone(reference, watchStartNanoTime);//8.核心方法\n      }\n    });\n  }\n```\n通过watchExecutor开启了一个线程，执行ensureGone。**ensureGone方法可以说是LeakCanary框架最最核心的方法，核心原理都在这里。**\n```java\n@SuppressWarnings(\"ReferenceEquality\") // Explicitly checking for named null.\n  Retryable.Result ensureGone(final KeyedWeakReference reference, final long watchStartNanoTime) {\n    long gcStartNanoTime = System.nanoTime();\n    long watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);\n\n    removeWeaklyReachableReferences();//i.回收弱引用和删除key\n\n    if (debuggerControl.isDebuggerAttached()) {\n      // The debugger can create false leaks.\n      return RETRY;\n    }\n    if (gone(reference)) {//ii.判断弱引用是否回收，若回收true,不存在泄漏\n      return DONE;\n    }\n    gcTrigger.runGc();//iii.手动GC\n    removeWeaklyReachableReferences();//iv.再次回收弱引用和删除key\n    if (!gone(reference)) {//v.再判断弱引用是否回收，若回收true,不存在泄漏，false则存在泄漏\n      long startDumpHeap = System.nanoTime();\n      long gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);\n\n      File heapDumpFile = heapDumper.dumpHeap();\n      if (heapDumpFile == RETRY_LATER) {\n        // Could not dump the heap.\n        return RETRY;\n      }\n      long heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);\n      heapdumpListener.analyze(//vi.分析Hprof文件,找出泄漏的最短\n          new HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,\n              gcDurationMs, heapDumpDurationMs));\n    }\n    return DONE;\n  }\n\n  private boolean gone(KeyedWeakReference reference) {\n    return !retainedKeys.contains(reference.key);\n  }\n\n  private void removeWeaklyReachableReferences() {\n    // WeakReferences are enqueued as soon as the object to which they point to becomes weakly\n    // reachable. This is before finalization or garbage collection has actually happened.\n    KeyedWeakReference ref;\n    while ((ref = (KeyedWeakReference) queue.poll()) != null) {\n      retainedKeys.remove(ref.key);\n    }\n  }\n```\n其中，方法removeWeaklyReachableReferences()是回收弱引用及删除key，方法gone(reference)判断弱引用对象是否被回收。\n\n\n如代码中的注释，通过多次判断Activity的弱应用是否被回收，判断Activity是否内存泄漏。如泄漏，生成Hprof文件，通过Square的haha开源库分析泄漏引用链，从而将其应用链传给界面展示出来，让开发者知道。\n\n到此，LeakCanary原理分析就告一段落了。如果你还想知道LeakCanary是怎么找到泄漏引用链，并传给界面展示的，你还可以继续分析 heapdumpListener.analyze();入口地方AndroidRefWatcherBuilder中的listenerServiceClass的方法与DisplayLeakService类。\n\n# 三、总结\n通过阅读LeakCanary框架的源码，知LeakCanary框架原理还是比较简单的，主要就是通过Activity弱引用(KeyedWeakReference)是否被回收，来判断是否内存是否泄漏。\n\n\n# 四、相关及参考文档\n[LeakCanary 中文使用说明](https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/)\n\n[LeakCanary核心原理源码浅析](http://blog.csdn.net/cloud_huan/article/details/53081120)\n\n[LeakCanary 原理浅析](http://www.jianshu.com/p/3f1a1cc1e964)\n\n[leakcanary原理分析与AppsFly内存泄漏](http://blog.csdn.net/ahong222/article/details/52295844)\n\n[十分钟理解Java中的弱引用](http://www.importnew.com/21206.html)\n\n\n\n\n","source":"_posts/tech_leakcanary.md","raw":"---\nlayout: post\ntitle: \"LeakCanary框架源码解析\"\ndate: 11/16/2017 5:43:41 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 开源框架源码解析\n\t- LeakCanary框架源码分析\n---\n---\n如果我们开发的程序，出现内存泄漏，导致程序奔溃，造成用户卸载APP。这样的结果,是我们不想见到的。作为一名向上的程序员，如何避免内存泄漏，这就成为必须要解决的问题。良心企业Square,开源了LeakCanary框架，可以轻松集成，让检测内存泄漏变得十分容易。\n\n**什么是内存泄漏？**\n内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n# 一、什么是LeakCanary?\nLeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。\n\nLeakCanary源码地址：[https://github.com/square/leakcanary](https://github.com/square/leakcanary)\n\n# 二、LeakCanary源码解析\n\n**1.LeakCanary入口**\n\n```java\npublic class ExampleApplication extends Application {\n  @Override public void onCreate() {\n    super.onCreate();\n\n    LeakCanary.install(this);//1.核心方法\n\n  }\n}\n\n```\n<!-- more -->\n进入LeakCanary类\n```java\n  /**\n   * Creates a {@link RefWatcher} that works out of the box, and starts watching activity\n   * references (on ICS+).\n   */\n  public static RefWatcher install(Application application) {\n    return refWatcher(application).listenerServiceClass(DisplayLeakService.class)\n        .excludedRefs(AndroidExcludedRefs.createAppDefaults().build())\n        .buildAndInstall();\n  }\n\n  /** Builder to create a customized {@link RefWatcher} with appropriate Android defaults. */\n  public static AndroidRefWatcherBuilder refWatcher(Context context) {\n    return new AndroidRefWatcherBuilder(context);\n  }\n\n```\nrefWatcher()返回AndroidRefWatcherBuilder对象，listenerServiceClass、excludedRefs和buildAndInstall皆为\nAndroidRefWatcherBuilder的方法。这里我们先看AndroidRefWatcherBuilder中的buildAndInstall的方法\n\n```java\n  /**\n   * Creates a {@link RefWatcher} instance and starts watching activity references (on ICS+).\n   */\n  public RefWatcher buildAndInstall() {\n    RefWatcher refWatcher = build();\n    if (refWatcher != DISABLED) {\n      LeakCanary.enableDisplayLeakActivity(context);\n      ActivityRefWatcher.install((Application) context, refWatcher);//2.核心方法\n    }\n    return refWatcher;\n  }\n```\n这里创建了RefWatcher，并把其传给了ActivityRefWatcher。进入ActivityRefWatcher类\n```java\n  public static void install(Application application, RefWatcher refWatcher) {\n    new ActivityRefWatcher(application, refWatcher).watchActivities();\n  }\n\n  /**\n   * Constructs an {@link ActivityRefWatcher} that will make sure the activities are not leaking\n   * after they have been destroyed.\n   */\n  public ActivityRefWatcher(Application application, RefWatcher refWatcher) {\n    this.application = checkNotNull(application, \"application\");\n    this.refWatcher = checkNotNull(refWatcher, \"refWatcher\");\n  }\n```\n创建ActivityRefWatcher类的对象，并且调用了watchActivities()方法，我们继续看\n```java\n private final Application.ActivityLifecycleCallbacks lifecycleCallbacks =\n      new Application.ActivityLifecycleCallbacks() {\n        @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n        }\n\n        @Override public void onActivityStarted(Activity activity) {\n        }\n\n        @Override public void onActivityResumed(Activity activity) {\n        }\n\n        @Override public void onActivityPaused(Activity activity) {\n        }\n\n        @Override public void onActivityStopped(Activity activity) {\n        }\n\n        @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n\n        @Override public void onActivityDestroyed(Activity activity) {\n          ActivityRefWatcher.this.onActivityDestroyed(activity);//3.核心方法\n        }\n      };\n\n\n  public void watchActivities() {\n    // Make sure you don't get installed twice.\n    stopWatchingActivities();\n    application.registerActivityLifecycleCallbacks(lifecycleCallbacks);//4.核心方法，设置监听所有Activity的生命周期\n  }\n```\n**application.registerActivityLifecycleCallbacks(lifecycleCallbacks)，设置监听了应用Activity的生命周期，可以监听所有Activity**。当Activity调onDestory方法时，都会调 ActivityRefWatcher.this.onActivityDestroyed(activity)，我们继续看\n```java\n  void onActivityDestroyed(Activity activity) {\n    refWatcher.watch(activity);//5.核心方法\n  }\n```\n**2.核心类RefWatcher**\n```java\n  /**\n   * Identical to {@link #watch(Object, String)} with an empty string reference name.\n   *\n   * @see #watch(Object, String)\n   */\n  public void watch(Object watchedReference) {\n    watch(watchedReference, \"\");\n  }\n\n  /**\n   * Watches the provided references and checks if it can be GCed. This method is non blocking,\n   * the check is done on the {@link WatchExecutor} this {@link RefWatcher} has been constructed\n   * with.\n   *\n   * @param referenceName An logical identifier for the watched object.\n   */\n  public void watch(Object watchedReference, String referenceName) {\n    if (this == DISABLED) {\n      return;\n    }\n    checkNotNull(watchedReference, \"watchedReference\");\n    checkNotNull(referenceName, \"referenceName\");\n    final long watchStartNanoTime = System.nanoTime();\n    String key = UUID.randomUUID().toString();\n    retainedKeys.add(key);\n    final KeyedWeakReference reference =\n        new KeyedWeakReference(watchedReference, key, referenceName, queue);//6.核心方法\n\n    ensureGoneAsync(watchStartNanoTime, reference);//7.核心方法\n  }\n```\n这里对watchedReference即Activity对象建立了一个弱应用KeyedWeakReference，并且对KeyedWeakReference加了一个引用队列queue（ReferenceQueue）。当KeyedWeakReference对象可以回收时，会添加到ReferenceQueue中，我们继续\n```java\n  private void ensureGoneAsync(final long watchStartNanoTime, final KeyedWeakReference reference) {\n    watchExecutor.execute(new Retryable() {\n      @Override public Retryable.Result run() {\n        return ensureGone(reference, watchStartNanoTime);//8.核心方法\n      }\n    });\n  }\n```\n通过watchExecutor开启了一个线程，执行ensureGone。**ensureGone方法可以说是LeakCanary框架最最核心的方法，核心原理都在这里。**\n```java\n@SuppressWarnings(\"ReferenceEquality\") // Explicitly checking for named null.\n  Retryable.Result ensureGone(final KeyedWeakReference reference, final long watchStartNanoTime) {\n    long gcStartNanoTime = System.nanoTime();\n    long watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);\n\n    removeWeaklyReachableReferences();//i.回收弱引用和删除key\n\n    if (debuggerControl.isDebuggerAttached()) {\n      // The debugger can create false leaks.\n      return RETRY;\n    }\n    if (gone(reference)) {//ii.判断弱引用是否回收，若回收true,不存在泄漏\n      return DONE;\n    }\n    gcTrigger.runGc();//iii.手动GC\n    removeWeaklyReachableReferences();//iv.再次回收弱引用和删除key\n    if (!gone(reference)) {//v.再判断弱引用是否回收，若回收true,不存在泄漏，false则存在泄漏\n      long startDumpHeap = System.nanoTime();\n      long gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);\n\n      File heapDumpFile = heapDumper.dumpHeap();\n      if (heapDumpFile == RETRY_LATER) {\n        // Could not dump the heap.\n        return RETRY;\n      }\n      long heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);\n      heapdumpListener.analyze(//vi.分析Hprof文件,找出泄漏的最短\n          new HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,\n              gcDurationMs, heapDumpDurationMs));\n    }\n    return DONE;\n  }\n\n  private boolean gone(KeyedWeakReference reference) {\n    return !retainedKeys.contains(reference.key);\n  }\n\n  private void removeWeaklyReachableReferences() {\n    // WeakReferences are enqueued as soon as the object to which they point to becomes weakly\n    // reachable. This is before finalization or garbage collection has actually happened.\n    KeyedWeakReference ref;\n    while ((ref = (KeyedWeakReference) queue.poll()) != null) {\n      retainedKeys.remove(ref.key);\n    }\n  }\n```\n其中，方法removeWeaklyReachableReferences()是回收弱引用及删除key，方法gone(reference)判断弱引用对象是否被回收。\n\n\n如代码中的注释，通过多次判断Activity的弱应用是否被回收，判断Activity是否内存泄漏。如泄漏，生成Hprof文件，通过Square的haha开源库分析泄漏引用链，从而将其应用链传给界面展示出来，让开发者知道。\n\n到此，LeakCanary原理分析就告一段落了。如果你还想知道LeakCanary是怎么找到泄漏引用链，并传给界面展示的，你还可以继续分析 heapdumpListener.analyze();入口地方AndroidRefWatcherBuilder中的listenerServiceClass的方法与DisplayLeakService类。\n\n# 三、总结\n通过阅读LeakCanary框架的源码，知LeakCanary框架原理还是比较简单的，主要就是通过Activity弱引用(KeyedWeakReference)是否被回收，来判断是否内存是否泄漏。\n\n\n# 四、相关及参考文档\n[LeakCanary 中文使用说明](https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/)\n\n[LeakCanary核心原理源码浅析](http://blog.csdn.net/cloud_huan/article/details/53081120)\n\n[LeakCanary 原理浅析](http://www.jianshu.com/p/3f1a1cc1e964)\n\n[leakcanary原理分析与AppsFly内存泄漏](http://blog.csdn.net/ahong222/article/details/52295844)\n\n[十分钟理解Java中的弱引用](http://www.importnew.com/21206.html)\n\n\n\n\n","slug":"tech_leakcanary","published":1,"updated":"2019-06-27T08:15:15.341Z","photos":[],"link":"","_id":"cjxfjaes4003rystgs6wd77e8","content":"<hr>\n<p>如果我们开发的程序，出现内存泄漏，导致程序奔溃，造成用户卸载APP。这样的结果,是我们不想见到的。作为一名向上的程序员，如何避免内存泄漏，这就成为必须要解决的问题。良心企业Square,开源了LeakCanary框架，可以轻松集成，让检测内存泄漏变得十分容易。</p>\n<p><strong>什么是内存泄漏？</strong><br>内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<h1 id=\"一、什么是LeakCanary\"><a href=\"#一、什么是LeakCanary\" class=\"headerlink\" title=\"一、什么是LeakCanary?\"></a>一、什么是LeakCanary?</h1><p>LeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。</p>\n<p>LeakCanary源码地址：<a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a></p>\n<h1 id=\"二、LeakCanary源码解析\"><a href=\"#二、LeakCanary源码解析\" class=\"headerlink\" title=\"二、LeakCanary源码解析\"></a>二、LeakCanary源码解析</h1><p><strong>1.LeakCanary入口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>进入LeakCanary类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; that works out of the box, and starts watching activity</div><div class=\"line\"> * references (on ICS+).</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RefWatcher <span class=\"title\">install</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> refWatcher(application).listenerServiceClass(DisplayLeakService.class)</div><div class=\"line\">      .excludedRefs(AndroidExcludedRefs.createAppDefaults().build())</div><div class=\"line\">      .buildAndInstall();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Builder to create a customized &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; with appropriate Android defaults. */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AndroidRefWatcherBuilder <span class=\"title\">refWatcher</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidRefWatcherBuilder(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>refWatcher()返回AndroidRefWatcherBuilder对象，listenerServiceClass、excludedRefs和buildAndInstall皆为<br>AndroidRefWatcherBuilder的方法。这里我们先看AndroidRefWatcherBuilder中的buildAndInstall的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Creates a &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; instance and starts watching activity references (on ICS+).</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RefWatcher <span class=\"title\">buildAndInstall</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  RefWatcher refWatcher = build();</div><div class=\"line\">  <span class=\"keyword\">if</span> (refWatcher != DISABLED) &#123;</div><div class=\"line\">    LeakCanary.enableDisplayLeakActivity(context);</div><div class=\"line\">    ActivityRefWatcher.install((Application) context, refWatcher);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> refWatcher;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里创建了RefWatcher，并把其传给了ActivityRefWatcher。进入ActivityRefWatcher类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">install</span><span class=\"params\">(Application application, RefWatcher refWatcher)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> ActivityRefWatcher(application, refWatcher).watchActivities();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Constructs an &#123;<span class=\"doctag\">@link</span> ActivityRefWatcher&#125; that will make sure the activities are not leaking</div><div class=\"line\"> * after they have been destroyed.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityRefWatcher</span><span class=\"params\">(Application application, RefWatcher refWatcher)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.application = checkNotNull(application, <span class=\"string\">\"application\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.refWatcher = checkNotNull(refWatcher, <span class=\"string\">\"refWatcher\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建ActivityRefWatcher类的对象，并且调用了watchActivities()方法，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Application.ActivityLifecycleCallbacks lifecycleCallbacks =</div><div class=\"line\">     <span class=\"keyword\">new</span> Application.ActivityLifecycleCallbacks() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStarted</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResumed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">         ActivityRefWatcher.<span class=\"keyword\">this</span>.onActivityDestroyed(activity);<span class=\"comment\">//3.核心方法</span></div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watchActivities</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure you don't get installed twice.</span></div><div class=\"line\">   stopWatchingActivities();</div><div class=\"line\">   application.registerActivityLifecycleCallbacks(lifecycleCallbacks);<span class=\"comment\">//4.核心方法，设置监听所有Activity的生命周期</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>application.registerActivityLifecycleCallbacks(lifecycleCallbacks)，设置监听了应用Activity的生命周期，可以监听所有Activity</strong>。当Activity调onDestory方法时，都会调 ActivityRefWatcher.this.onActivityDestroyed(activity)，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">  refWatcher.watch(activity);<span class=\"comment\">//5.核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.核心类RefWatcher</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Identical to &#123;<span class=\"doctag\">@link</span> #watch(Object, String)&#125; with an empty string reference name.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #watch(Object, String)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">(Object watchedReference)</span> </span>&#123;</div><div class=\"line\">  watch(watchedReference, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Watches the provided references and checks if it can be GCed. This method is non blocking,</div><div class=\"line\"> * the check is done on the &#123;<span class=\"doctag\">@link</span> WatchExecutor&#125; this &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; has been constructed</div><div class=\"line\"> * with.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> referenceName An logical identifier for the watched object.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">(Object watchedReference, String referenceName)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == DISABLED) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  checkNotNull(watchedReference, <span class=\"string\">\"watchedReference\"</span>);</div><div class=\"line\">  checkNotNull(referenceName, <span class=\"string\">\"referenceName\"</span>);</div><div class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime = System.nanoTime();</div><div class=\"line\">  String key = UUID.randomUUID().toString();</div><div class=\"line\">  retainedKeys.add(key);</div><div class=\"line\">  <span class=\"keyword\">final</span> KeyedWeakReference reference =</div><div class=\"line\">      <span class=\"keyword\">new</span> KeyedWeakReference(watchedReference, key, referenceName, queue);<span class=\"comment\">//6.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  ensureGoneAsync(watchStartNanoTime, reference);<span class=\"comment\">//7.核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里对watchedReference即Activity对象建立了一个弱应用KeyedWeakReference，并且对KeyedWeakReference加了一个引用队列queue（ReferenceQueue）。当KeyedWeakReference对象可以回收时，会添加到ReferenceQueue中，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureGoneAsync</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime, <span class=\"keyword\">final</span> KeyedWeakReference reference)</span> </span>&#123;</div><div class=\"line\">  watchExecutor.execute(<span class=\"keyword\">new</span> Retryable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> Retryable.<span class=\"function\">Result <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ensureGone(reference, watchStartNanoTime);<span class=\"comment\">//8.核心方法</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过watchExecutor开启了一个线程，执行ensureGone。<strong>ensureGone方法可以说是LeakCanary框架最最核心的方法，核心原理都在这里。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"ReferenceEquality\"</span>) <span class=\"comment\">// Explicitly checking for named null.</span></div><div class=\"line\">  Retryable.<span class=\"function\">Result <span class=\"title\">ensureGone</span><span class=\"params\">(<span class=\"keyword\">final</span> KeyedWeakReference reference, <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> gcStartNanoTime = System.nanoTime();</div><div class=\"line\">    <span class=\"keyword\">long</span> watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);</div><div class=\"line\"></div><div class=\"line\">    removeWeaklyReachableReferences();<span class=\"comment\">//i.回收弱引用和删除key</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (debuggerControl.isDebuggerAttached()) &#123;</div><div class=\"line\">      <span class=\"comment\">// The debugger can create false leaks.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> RETRY;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (gone(reference)) &#123;<span class=\"comment\">//ii.判断弱引用是否回收，若回收true,不存在泄漏</span></div><div class=\"line\">      <span class=\"keyword\">return</span> DONE;</div><div class=\"line\">    &#125;</div><div class=\"line\">    gcTrigger.runGc();<span class=\"comment\">//iii.手动GC</span></div><div class=\"line\">    removeWeaklyReachableReferences();<span class=\"comment\">//iv.再次回收弱引用和删除key</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!gone(reference)) &#123;<span class=\"comment\">//v.再判断弱引用是否回收，若回收true,不存在泄漏，false则存在泄漏</span></div><div class=\"line\">      <span class=\"keyword\">long</span> startDumpHeap = System.nanoTime();</div><div class=\"line\">      <span class=\"keyword\">long</span> gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);</div><div class=\"line\"></div><div class=\"line\">      File heapDumpFile = heapDumper.dumpHeap();</div><div class=\"line\">      <span class=\"keyword\">if</span> (heapDumpFile == RETRY_LATER) &#123;</div><div class=\"line\">        <span class=\"comment\">// Could not dump the heap.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> RETRY;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">long</span> heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);</div><div class=\"line\">      heapdumpListener.analyze(<span class=\"comment\">//vi.分析Hprof文件,找出泄漏的最短</span></div><div class=\"line\">          <span class=\"keyword\">new</span> HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,</div><div class=\"line\">              gcDurationMs, heapDumpDurationMs));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> DONE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gone</span><span class=\"params\">(KeyedWeakReference reference)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !retainedKeys.contains(reference.key);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWeaklyReachableReferences</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span></div><div class=\"line\">    <span class=\"comment\">// reachable. This is before finalization or garbage collection has actually happened.</span></div><div class=\"line\">    KeyedWeakReference ref;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((ref = (KeyedWeakReference) queue.poll()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      retainedKeys.remove(ref.key);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>其中，方法removeWeaklyReachableReferences()是回收弱引用及删除key，方法gone(reference)判断弱引用对象是否被回收。</p>\n<p>如代码中的注释，通过多次判断Activity的弱应用是否被回收，判断Activity是否内存泄漏。如泄漏，生成Hprof文件，通过Square的haha开源库分析泄漏引用链，从而将其应用链传给界面展示出来，让开发者知道。</p>\n<p>到此，LeakCanary原理分析就告一段落了。如果你还想知道LeakCanary是怎么找到泄漏引用链，并传给界面展示的，你还可以继续分析 heapdumpListener.analyze();入口地方AndroidRefWatcherBuilder中的listenerServiceClass的方法与DisplayLeakService类。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>通过阅读LeakCanary框架的源码，知LeakCanary框架原理还是比较简单的，主要就是通过Activity弱引用(KeyedWeakReference)是否被回收，来判断是否内存是否泄漏。</p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\" target=\"_blank\" rel=\"external\">LeakCanary 中文使用说明</a></p>\n<p><a href=\"http://blog.csdn.net/cloud_huan/article/details/53081120\" target=\"_blank\" rel=\"external\">LeakCanary核心原理源码浅析</a></p>\n<p><a href=\"http://www.jianshu.com/p/3f1a1cc1e964\" target=\"_blank\" rel=\"external\">LeakCanary 原理浅析</a></p>\n<p><a href=\"http://blog.csdn.net/ahong222/article/details/52295844\" target=\"_blank\" rel=\"external\">leakcanary原理分析与AppsFly内存泄漏</a></p>\n<p><a href=\"http://www.importnew.com/21206.html\" target=\"_blank\" rel=\"external\">十分钟理解Java中的弱引用</a></p>\n","excerpt":"<hr>\n<p>如果我们开发的程序，出现内存泄漏，导致程序奔溃，造成用户卸载APP。这样的结果,是我们不想见到的。作为一名向上的程序员，如何避免内存泄漏，这就成为必须要解决的问题。良心企业Square,开源了LeakCanary框架，可以轻松集成，让检测内存泄漏变得十分容易。</p>\n<p><strong>什么是内存泄漏？</strong><br>内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<h1 id=\"一、什么是LeakCanary\"><a href=\"#一、什么是LeakCanary\" class=\"headerlink\" title=\"一、什么是LeakCanary?\"></a>一、什么是LeakCanary?</h1><p>LeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。</p>\n<p>LeakCanary源码地址：<a href=\"https://github.com/square/leakcanary\">https://github.com/square/leakcanary</a></p>\n<h1 id=\"二、LeakCanary源码解析\"><a href=\"#二、LeakCanary源码解析\" class=\"headerlink\" title=\"二、LeakCanary源码解析\"></a>二、LeakCanary源码解析</h1><p><strong>1.LeakCanary入口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\"></div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>进入LeakCanary类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Creates a &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; that works out of the box, and starts watching activity</div><div class=\"line\"> * references (on ICS+).</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RefWatcher <span class=\"title\">install</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> refWatcher(application).listenerServiceClass(DisplayLeakService.class)</div><div class=\"line\">      .excludedRefs(AndroidExcludedRefs.createAppDefaults().build())</div><div class=\"line\">      .buildAndInstall();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Builder to create a customized &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; with appropriate Android defaults. */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AndroidRefWatcherBuilder <span class=\"title\">refWatcher</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndroidRefWatcherBuilder(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>refWatcher()返回AndroidRefWatcherBuilder对象，listenerServiceClass、excludedRefs和buildAndInstall皆为<br>AndroidRefWatcherBuilder的方法。这里我们先看AndroidRefWatcherBuilder中的buildAndInstall的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Creates a &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; instance and starts watching activity references (on ICS+).</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RefWatcher <span class=\"title\">buildAndInstall</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  RefWatcher refWatcher = build();</div><div class=\"line\">  <span class=\"keyword\">if</span> (refWatcher != DISABLED) &#123;</div><div class=\"line\">    LeakCanary.enableDisplayLeakActivity(context);</div><div class=\"line\">    ActivityRefWatcher.install((Application) context, refWatcher);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> refWatcher;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里创建了RefWatcher，并把其传给了ActivityRefWatcher。进入ActivityRefWatcher类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">install</span><span class=\"params\">(Application application, RefWatcher refWatcher)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> ActivityRefWatcher(application, refWatcher).watchActivities();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Constructs an &#123;<span class=\"doctag\">@link</span> ActivityRefWatcher&#125; that will make sure the activities are not leaking</div><div class=\"line\"> * after they have been destroyed.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityRefWatcher</span><span class=\"params\">(Application application, RefWatcher refWatcher)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.application = checkNotNull(application, <span class=\"string\">\"application\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.refWatcher = checkNotNull(refWatcher, <span class=\"string\">\"refWatcher\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>创建ActivityRefWatcher类的对象，并且调用了watchActivities()方法，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Application.ActivityLifecycleCallbacks lifecycleCallbacks =</div><div class=\"line\">     <span class=\"keyword\">new</span> Application.ActivityLifecycleCallbacks() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStarted</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResumed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> </span>&#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">         ActivityRefWatcher.<span class=\"keyword\">this</span>.onActivityDestroyed(activity);<span class=\"comment\">//3.核心方法</span></div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watchActivities</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Make sure you don't get installed twice.</span></div><div class=\"line\">   stopWatchingActivities();</div><div class=\"line\">   application.registerActivityLifecycleCallbacks(lifecycleCallbacks);<span class=\"comment\">//4.核心方法，设置监听所有Activity的生命周期</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>application.registerActivityLifecycleCallbacks(lifecycleCallbacks)，设置监听了应用Activity的生命周期，可以监听所有Activity</strong>。当Activity调onDestory方法时，都会调 ActivityRefWatcher.this.onActivityDestroyed(activity)，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">  refWatcher.watch(activity);<span class=\"comment\">//5.核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.核心类RefWatcher</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Identical to &#123;<span class=\"doctag\">@link</span> #watch(Object, String)&#125; with an empty string reference name.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@see</span> #watch(Object, String)</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">(Object watchedReference)</span> </span>&#123;</div><div class=\"line\">  watch(watchedReference, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Watches the provided references and checks if it can be GCed. This method is non blocking,</div><div class=\"line\"> * the check is done on the &#123;<span class=\"doctag\">@link</span> WatchExecutor&#125; this &#123;<span class=\"doctag\">@link</span> RefWatcher&#125; has been constructed</div><div class=\"line\"> * with.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> referenceName An logical identifier for the watched object.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">(Object watchedReference, String referenceName)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == DISABLED) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  checkNotNull(watchedReference, <span class=\"string\">\"watchedReference\"</span>);</div><div class=\"line\">  checkNotNull(referenceName, <span class=\"string\">\"referenceName\"</span>);</div><div class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime = System.nanoTime();</div><div class=\"line\">  String key = UUID.randomUUID().toString();</div><div class=\"line\">  retainedKeys.add(key);</div><div class=\"line\">  <span class=\"keyword\">final</span> KeyedWeakReference reference =</div><div class=\"line\">      <span class=\"keyword\">new</span> KeyedWeakReference(watchedReference, key, referenceName, queue);<span class=\"comment\">//6.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  ensureGoneAsync(watchStartNanoTime, reference);<span class=\"comment\">//7.核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里对watchedReference即Activity对象建立了一个弱应用KeyedWeakReference，并且对KeyedWeakReference加了一个引用队列queue（ReferenceQueue）。当KeyedWeakReference对象可以回收时，会添加到ReferenceQueue中，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureGoneAsync</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime, <span class=\"keyword\">final</span> KeyedWeakReference reference)</span> </span>&#123;</div><div class=\"line\">  watchExecutor.execute(<span class=\"keyword\">new</span> Retryable() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> Retryable.<span class=\"function\">Result <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> ensureGone(reference, watchStartNanoTime);<span class=\"comment\">//8.核心方法</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过watchExecutor开启了一个线程，执行ensureGone。<strong>ensureGone方法可以说是LeakCanary框架最最核心的方法，核心原理都在这里。</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"ReferenceEquality\"</span>) <span class=\"comment\">// Explicitly checking for named null.</span></div><div class=\"line\">  Retryable.<span class=\"function\">Result <span class=\"title\">ensureGone</span><span class=\"params\">(<span class=\"keyword\">final</span> KeyedWeakReference reference, <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> gcStartNanoTime = System.nanoTime();</div><div class=\"line\">    <span class=\"keyword\">long</span> watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);</div><div class=\"line\"></div><div class=\"line\">    removeWeaklyReachableReferences();<span class=\"comment\">//i.回收弱引用和删除key</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (debuggerControl.isDebuggerAttached()) &#123;</div><div class=\"line\">      <span class=\"comment\">// The debugger can create false leaks.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> RETRY;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (gone(reference)) &#123;<span class=\"comment\">//ii.判断弱引用是否回收，若回收true,不存在泄漏</span></div><div class=\"line\">      <span class=\"keyword\">return</span> DONE;</div><div class=\"line\">    &#125;</div><div class=\"line\">    gcTrigger.runGc();<span class=\"comment\">//iii.手动GC</span></div><div class=\"line\">    removeWeaklyReachableReferences();<span class=\"comment\">//iv.再次回收弱引用和删除key</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!gone(reference)) &#123;<span class=\"comment\">//v.再判断弱引用是否回收，若回收true,不存在泄漏，false则存在泄漏</span></div><div class=\"line\">      <span class=\"keyword\">long</span> startDumpHeap = System.nanoTime();</div><div class=\"line\">      <span class=\"keyword\">long</span> gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);</div><div class=\"line\"></div><div class=\"line\">      File heapDumpFile = heapDumper.dumpHeap();</div><div class=\"line\">      <span class=\"keyword\">if</span> (heapDumpFile == RETRY_LATER) &#123;</div><div class=\"line\">        <span class=\"comment\">// Could not dump the heap.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> RETRY;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">long</span> heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);</div><div class=\"line\">      heapdumpListener.analyze(<span class=\"comment\">//vi.分析Hprof文件,找出泄漏的最短</span></div><div class=\"line\">          <span class=\"keyword\">new</span> HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,</div><div class=\"line\">              gcDurationMs, heapDumpDurationMs));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> DONE;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gone</span><span class=\"params\">(KeyedWeakReference reference)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !retainedKeys.contains(reference.key);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWeaklyReachableReferences</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span></div><div class=\"line\">    <span class=\"comment\">// reachable. This is before finalization or garbage collection has actually happened.</span></div><div class=\"line\">    KeyedWeakReference ref;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((ref = (KeyedWeakReference) queue.poll()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      retainedKeys.remove(ref.key);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>其中，方法removeWeaklyReachableReferences()是回收弱引用及删除key，方法gone(reference)判断弱引用对象是否被回收。</p>\n<p>如代码中的注释，通过多次判断Activity的弱应用是否被回收，判断Activity是否内存泄漏。如泄漏，生成Hprof文件，通过Square的haha开源库分析泄漏引用链，从而将其应用链传给界面展示出来，让开发者知道。</p>\n<p>到此，LeakCanary原理分析就告一段落了。如果你还想知道LeakCanary是怎么找到泄漏引用链，并传给界面展示的，你还可以继续分析 heapdumpListener.analyze();入口地方AndroidRefWatcherBuilder中的listenerServiceClass的方法与DisplayLeakService类。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>通过阅读LeakCanary框架的源码，知LeakCanary框架原理还是比较简单的，主要就是通过Activity弱引用(KeyedWeakReference)是否被回收，来判断是否内存是否泄漏。</p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\">LeakCanary 中文使用说明</a></p>\n<p><a href=\"http://blog.csdn.net/cloud_huan/article/details/53081120\">LeakCanary核心原理源码浅析</a></p>\n<p><a href=\"http://www.jianshu.com/p/3f1a1cc1e964\">LeakCanary 原理浅析</a></p>\n<p><a href=\"http://blog.csdn.net/ahong222/article/details/52295844\">leakcanary原理分析与AppsFly内存泄漏</a></p>\n<p><a href=\"http://www.importnew.com/21206.html\">十分钟理解Java中的弱引用</a></p>"},{"layout":"post","title":"你本是一个肉体，是什么驱使你前行[4]","date":"2017-10-16T08:09:50.000Z","comments":1,"_content":"---\n文/丹尼尔\n\n**生活最大的危险，就是空虚的心灵。**\n\n罗曼 • 罗兰说：「**生活最沉重的负担不是工作，而是无聊。**」每个人要对自己的生活负责。一个人至少拥有一个梦想，才能让自己有动力和激情去坚持。生活的理想，就是为了理想的生活。**追求不同的生活方式，是对人生做加法。追求更好的生活品质，则是对人生做减法。**\n\n不知道你是在做人生加法，还是人生减法？年轻的时候，绝大部分人会有很多想法，什么都想要，什么都想尝试。人到中年时，才会发现人的精力极其有限，一生中只要做好一两件事情，并且做漂亮了，就足以。**当一个人抵达生活的极限后，就会删繁就简，让生命变得更加纯粹，更有效率地追求人生中最让自己感到愉悦的事。**\n\n**好的生活，不是贵价格，而是贵品质；不是贵物质，而是贵精神。**生活不是越复杂越好，而是越简约越好。化繁为简，便是一种高品质的生活方式。最完美的生活品质，往往讲究一个人长期健康稳定的发展，至少是以下三位一体的生活方式：**拥有思想的读书生活，开阔见识的旅行生活，健康身体的运动生活。**\n<!-- more -->\n# 读书的生活方式\n\n\n俗话说：一日不读书，无人看得出；一周不读书，开始会爆粗；一月不读书，智商输给猪。读书能使人心明眼亮。这就意味着不读书的人如同瞎子。正如《圣经》所言，「**眼睛就是身上的灯。眼睛若明亮，全身就光明；眼睛若昏花，全身就黑暗。**」你的思想，就是你这个人的眼睛。没有知识的获取和积累，思想和精神就是空洞的。不读书的人，思想会停止。\n\n**读书的目的不是为了反驳别人，而是为了丰富自己。读书能获得工作技能，提高个人素质，培养思想深度，和满足精神需求等。**读书是在别人思想的引导下，建立自己的思想。读书不要贪多，而在于精读，并且在读的时候学会思考。**独立性，才是一个人读书所带来最重要的品质。一个人一旦缺乏思考力，就不会有判断力，也就更不会有鉴别力。**\n\n在纸醉金迷的好莱坞，失去鉴别力的人，很容易迷失在烟酒和药物等等的花花世界里。性感女神梦露，却有着另一份与她外表完全不符的生活：读书。梦露这一生读了很多书，她的书单足以秒杀某些现代文学博士。阅读，成了她学习的最好方式。在闪光灯前，她媚得不可一世，但在真正的独处时，是读书让她的美丽安静地绽放。\n\n当你通过读书，思想有了深度和高度，看问题的角度也就不同，所追求的境界自然也会不同。本杰明·富兰克林说，「向知识投资付出的利息最少。」而我则说，向知识投资是回报率最高的无形资产。**越读书越有气质，越读书越有内涵，越读书越有智慧，越读书越有品位。这些看不见的修养和品位，都会悄无声息地融在你的生活中。**\n\n**你的思想有多高度，你的生活品位相应地就有多好。**\n\n\n# 旅行的生活方式\n\n\n如果人生是一场旅行的话，那么旅行便是另一种方式的读书。奥古斯狄尼斯说，「**世界是一本书，而不旅行的人们只读了其中的一页。**」旅行的意义是什么？有人说，它能增加你人生的视野。有人说，它能增加你人生的维度。这些都没错。**旅行的真正意义，不是看见新的风景，而是用新的眼光看待自己。**旅行是唯一花了钱，却让你内心变得更富有的事物。\n\n很多人说，身边的世界很小，都早已厌倦。外面的世界很大，应该出去看看。**如果逃离旧的环境却没有改变旧的心境，那么所谓的新自由也只不过是一种假自由。**装装样子，自欺欺人。旅行并不是为了让你逃避现实，而是让你更好的认识自己和这个世界。旅行总让人谦卑，因为你会看到人的渺小，世界的伟大。**旅行最大的魅力，在于不断地探索未知的世界。**\n\n在伟大的摄影师布列松的作品中，总会发现他在不同国家，不同城市的街头走走停停，来记录所看到的一切。这种不疾不徐，波澜不惊的生活状态，就像人生一样。自出生那一刻起，我们每个人便开始了慢慢的人生旅程。人生是一段旅程，在旅行中遇到的每一个人，每一个景色，都有可能成为一生中难忘的风景。人生的丰富多彩，也体现在不同的旅行中。\n\n旅行也是热爱生活的一种特别表现。从不出门的人，内心必定是满腹偏见。**旅行的真谛，不是运动，而是带着你的灵魂，去寻找生命的真光。当你看过的世界越少，你的眼界也会越狭小。**当你看过的世界越多，你的眼界就会越宽广。**一个经常旅行的人，一定有博学多才的知识，坚持不懈的性格，善解人意的心态，和独具慧眼的审美。**\n\n**你的见识有多宽广，你的审美品位相应地就有多美。**\n\n# 运动的生活方式\n\n\n现今的社会，物质生活日益丰富，工作压力日益增大，交际应酬日益频繁，然而身体却日渐虚弱。正如很多人都曾听说的：三十五岁以前拿身体换钱，三十五岁以后拿钱换身体。**理想生活离不开健康，而保持健康的最好方式就是运动**。一个健康的身体，才能享受生命带来的种种美好，才能把这种美好延续得更长。这才是最重要的生活品质。\n\n如今，越来越多的中国人开始追求健康的生活方式，一些人选择在户外跑步、骑车、在草地上晒太阳，还有一些人会去健身房锻炼，游泳馆游泳等等。你可能会觉得他们很会享受生活，很悠闲。也许运动占据了他们相当一部分工资和时间，但健康的身体是持续赚钱的条件和能力。「运动」不再是高中时期应付要做的广播体操，而是每日清晨带上耳机对身体的放空。\n\n对于跑者而言，跑步旅行或许是一个很不错的选择。这就是为什么丹先生选择马拉松，而且只对海外赛事感兴趣，尤其世界马拉松六大满贯：芝加哥、纽约、柏林、东京、伦敦、波士顿。每次参赛，可以一边跑步，一边欣赏美景。赛后，还可以计划自己的个人旅行。既可以锻炼身体，同时又可以旅行，路上还可以看看书，这便是一举三得的生活方式。\n\n**当你爱上运动之后，你可能会不再腰酸背痛，还省了很多去医院的钱；你可能会慢慢戒掉了手机癌，认识了各行各业的新朋友；你可能会无法和同龄人一起变老，因为运动可以延缓衰老；你可能会对生活越来越有追求了，也提高了对生活品质的要求。**\n\n**你的身体有多健康，你的生活品质相应地就有多高。**\n\n在所有的生活方式中，运动健身是最时尚健康的生活方式。而你会发现，一个有生活品质的人绝对会科学运动，智能手表、专业的运动服饰缺一不可，而对服装搭配有极强要求的人，也会对智能手表的外观有着更高要求，这也是 Nokia Steel 智能腕表被大家喜爱的原因。它除了带有运动及睡眠监测功能，还是一款适合各种场合佩戴的时尚手表，运动时尚两不误，是追求品质生活人士的绝佳首选。\n\n**生活得有品位的人，并不是那些年岁活得最长的人，而是真正热爱生活的人。**如果你爱生活，那么生活就会爱你。一个集才华与美貌于一身，有高度的思想，有眼界的见识，并且热爱健康生活的人，才是最高品位的生活方式。\n\n**你的思维模式，决定了你的生活方式。而你的生活方式，决定了你的生活品质。**","source":"_posts/think_body_and_soul_4.md","raw":"---\nlayout: post\ntitle: \"你本是一个肉体，是什么驱使你前行[4]\"\ndate:  10/16/2017 4:09:50 PM \ncomments: true\ntags: \n\t- 技术 \n\t- 随想\n\t- 你本是一个肉体，是什么驱使你前行\n---\n---\n文/丹尼尔\n\n**生活最大的危险，就是空虚的心灵。**\n\n罗曼 • 罗兰说：「**生活最沉重的负担不是工作，而是无聊。**」每个人要对自己的生活负责。一个人至少拥有一个梦想，才能让自己有动力和激情去坚持。生活的理想，就是为了理想的生活。**追求不同的生活方式，是对人生做加法。追求更好的生活品质，则是对人生做减法。**\n\n不知道你是在做人生加法，还是人生减法？年轻的时候，绝大部分人会有很多想法，什么都想要，什么都想尝试。人到中年时，才会发现人的精力极其有限，一生中只要做好一两件事情，并且做漂亮了，就足以。**当一个人抵达生活的极限后，就会删繁就简，让生命变得更加纯粹，更有效率地追求人生中最让自己感到愉悦的事。**\n\n**好的生活，不是贵价格，而是贵品质；不是贵物质，而是贵精神。**生活不是越复杂越好，而是越简约越好。化繁为简，便是一种高品质的生活方式。最完美的生活品质，往往讲究一个人长期健康稳定的发展，至少是以下三位一体的生活方式：**拥有思想的读书生活，开阔见识的旅行生活，健康身体的运动生活。**\n<!-- more -->\n# 读书的生活方式\n\n\n俗话说：一日不读书，无人看得出；一周不读书，开始会爆粗；一月不读书，智商输给猪。读书能使人心明眼亮。这就意味着不读书的人如同瞎子。正如《圣经》所言，「**眼睛就是身上的灯。眼睛若明亮，全身就光明；眼睛若昏花，全身就黑暗。**」你的思想，就是你这个人的眼睛。没有知识的获取和积累，思想和精神就是空洞的。不读书的人，思想会停止。\n\n**读书的目的不是为了反驳别人，而是为了丰富自己。读书能获得工作技能，提高个人素质，培养思想深度，和满足精神需求等。**读书是在别人思想的引导下，建立自己的思想。读书不要贪多，而在于精读，并且在读的时候学会思考。**独立性，才是一个人读书所带来最重要的品质。一个人一旦缺乏思考力，就不会有判断力，也就更不会有鉴别力。**\n\n在纸醉金迷的好莱坞，失去鉴别力的人，很容易迷失在烟酒和药物等等的花花世界里。性感女神梦露，却有着另一份与她外表完全不符的生活：读书。梦露这一生读了很多书，她的书单足以秒杀某些现代文学博士。阅读，成了她学习的最好方式。在闪光灯前，她媚得不可一世，但在真正的独处时，是读书让她的美丽安静地绽放。\n\n当你通过读书，思想有了深度和高度，看问题的角度也就不同，所追求的境界自然也会不同。本杰明·富兰克林说，「向知识投资付出的利息最少。」而我则说，向知识投资是回报率最高的无形资产。**越读书越有气质，越读书越有内涵，越读书越有智慧，越读书越有品位。这些看不见的修养和品位，都会悄无声息地融在你的生活中。**\n\n**你的思想有多高度，你的生活品位相应地就有多好。**\n\n\n# 旅行的生活方式\n\n\n如果人生是一场旅行的话，那么旅行便是另一种方式的读书。奥古斯狄尼斯说，「**世界是一本书，而不旅行的人们只读了其中的一页。**」旅行的意义是什么？有人说，它能增加你人生的视野。有人说，它能增加你人生的维度。这些都没错。**旅行的真正意义，不是看见新的风景，而是用新的眼光看待自己。**旅行是唯一花了钱，却让你内心变得更富有的事物。\n\n很多人说，身边的世界很小，都早已厌倦。外面的世界很大，应该出去看看。**如果逃离旧的环境却没有改变旧的心境，那么所谓的新自由也只不过是一种假自由。**装装样子，自欺欺人。旅行并不是为了让你逃避现实，而是让你更好的认识自己和这个世界。旅行总让人谦卑，因为你会看到人的渺小，世界的伟大。**旅行最大的魅力，在于不断地探索未知的世界。**\n\n在伟大的摄影师布列松的作品中，总会发现他在不同国家，不同城市的街头走走停停，来记录所看到的一切。这种不疾不徐，波澜不惊的生活状态，就像人生一样。自出生那一刻起，我们每个人便开始了慢慢的人生旅程。人生是一段旅程，在旅行中遇到的每一个人，每一个景色，都有可能成为一生中难忘的风景。人生的丰富多彩，也体现在不同的旅行中。\n\n旅行也是热爱生活的一种特别表现。从不出门的人，内心必定是满腹偏见。**旅行的真谛，不是运动，而是带着你的灵魂，去寻找生命的真光。当你看过的世界越少，你的眼界也会越狭小。**当你看过的世界越多，你的眼界就会越宽广。**一个经常旅行的人，一定有博学多才的知识，坚持不懈的性格，善解人意的心态，和独具慧眼的审美。**\n\n**你的见识有多宽广，你的审美品位相应地就有多美。**\n\n# 运动的生活方式\n\n\n现今的社会，物质生活日益丰富，工作压力日益增大，交际应酬日益频繁，然而身体却日渐虚弱。正如很多人都曾听说的：三十五岁以前拿身体换钱，三十五岁以后拿钱换身体。**理想生活离不开健康，而保持健康的最好方式就是运动**。一个健康的身体，才能享受生命带来的种种美好，才能把这种美好延续得更长。这才是最重要的生活品质。\n\n如今，越来越多的中国人开始追求健康的生活方式，一些人选择在户外跑步、骑车、在草地上晒太阳，还有一些人会去健身房锻炼，游泳馆游泳等等。你可能会觉得他们很会享受生活，很悠闲。也许运动占据了他们相当一部分工资和时间，但健康的身体是持续赚钱的条件和能力。「运动」不再是高中时期应付要做的广播体操，而是每日清晨带上耳机对身体的放空。\n\n对于跑者而言，跑步旅行或许是一个很不错的选择。这就是为什么丹先生选择马拉松，而且只对海外赛事感兴趣，尤其世界马拉松六大满贯：芝加哥、纽约、柏林、东京、伦敦、波士顿。每次参赛，可以一边跑步，一边欣赏美景。赛后，还可以计划自己的个人旅行。既可以锻炼身体，同时又可以旅行，路上还可以看看书，这便是一举三得的生活方式。\n\n**当你爱上运动之后，你可能会不再腰酸背痛，还省了很多去医院的钱；你可能会慢慢戒掉了手机癌，认识了各行各业的新朋友；你可能会无法和同龄人一起变老，因为运动可以延缓衰老；你可能会对生活越来越有追求了，也提高了对生活品质的要求。**\n\n**你的身体有多健康，你的生活品质相应地就有多高。**\n\n在所有的生活方式中，运动健身是最时尚健康的生活方式。而你会发现，一个有生活品质的人绝对会科学运动，智能手表、专业的运动服饰缺一不可，而对服装搭配有极强要求的人，也会对智能手表的外观有着更高要求，这也是 Nokia Steel 智能腕表被大家喜爱的原因。它除了带有运动及睡眠监测功能，还是一款适合各种场合佩戴的时尚手表，运动时尚两不误，是追求品质生活人士的绝佳首选。\n\n**生活得有品位的人，并不是那些年岁活得最长的人，而是真正热爱生活的人。**如果你爱生活，那么生活就会爱你。一个集才华与美貌于一身，有高度的思想，有眼界的见识，并且热爱健康生活的人，才是最高品位的生活方式。\n\n**你的思维模式，决定了你的生活方式。而你的生活方式，决定了你的生活品质。**","slug":"think_body_and_soul_4","published":1,"updated":"2019-06-27T08:15:15.349Z","photos":[],"link":"","_id":"cjxfjaes5003uystgzeoy7r7z","content":"<hr>\n<p>文/丹尼尔</p>\n<p><strong>生活最大的危险，就是空虚的心灵。</strong></p>\n<p>罗曼 • 罗兰说：「<strong>生活最沉重的负担不是工作，而是无聊。</strong>」每个人要对自己的生活负责。一个人至少拥有一个梦想，才能让自己有动力和激情去坚持。生活的理想，就是为了理想的生活。<strong>追求不同的生活方式，是对人生做加法。追求更好的生活品质，则是对人生做减法。</strong></p>\n<p>不知道你是在做人生加法，还是人生减法？年轻的时候，绝大部分人会有很多想法，什么都想要，什么都想尝试。人到中年时，才会发现人的精力极其有限，一生中只要做好一两件事情，并且做漂亮了，就足以。<strong>当一个人抵达生活的极限后，就会删繁就简，让生命变得更加纯粹，更有效率地追求人生中最让自己感到愉悦的事。</strong></p>\n<p><strong>好的生活，不是贵价格，而是贵品质；不是贵物质，而是贵精神。</strong>生活不是越复杂越好，而是越简约越好。化繁为简，便是一种高品质的生活方式。最完美的生活品质，往往讲究一个人长期健康稳定的发展，至少是以下三位一体的生活方式：<strong>拥有思想的读书生活，开阔见识的旅行生活，健康身体的运动生活。</strong><br><a id=\"more\"></a></p>\n<h1 id=\"读书的生活方式\"><a href=\"#读书的生活方式\" class=\"headerlink\" title=\"读书的生活方式\"></a>读书的生活方式</h1><p>俗话说：一日不读书，无人看得出；一周不读书，开始会爆粗；一月不读书，智商输给猪。读书能使人心明眼亮。这就意味着不读书的人如同瞎子。正如《圣经》所言，「<strong>眼睛就是身上的灯。眼睛若明亮，全身就光明；眼睛若昏花，全身就黑暗。</strong>」你的思想，就是你这个人的眼睛。没有知识的获取和积累，思想和精神就是空洞的。不读书的人，思想会停止。</p>\n<p><strong>读书的目的不是为了反驳别人，而是为了丰富自己。读书能获得工作技能，提高个人素质，培养思想深度，和满足精神需求等。</strong>读书是在别人思想的引导下，建立自己的思想。读书不要贪多，而在于精读，并且在读的时候学会思考。<strong>独立性，才是一个人读书所带来最重要的品质。一个人一旦缺乏思考力，就不会有判断力，也就更不会有鉴别力。</strong></p>\n<p>在纸醉金迷的好莱坞，失去鉴别力的人，很容易迷失在烟酒和药物等等的花花世界里。性感女神梦露，却有着另一份与她外表完全不符的生活：读书。梦露这一生读了很多书，她的书单足以秒杀某些现代文学博士。阅读，成了她学习的最好方式。在闪光灯前，她媚得不可一世，但在真正的独处时，是读书让她的美丽安静地绽放。</p>\n<p>当你通过读书，思想有了深度和高度，看问题的角度也就不同，所追求的境界自然也会不同。本杰明·富兰克林说，「向知识投资付出的利息最少。」而我则说，向知识投资是回报率最高的无形资产。<strong>越读书越有气质，越读书越有内涵，越读书越有智慧，越读书越有品位。这些看不见的修养和品位，都会悄无声息地融在你的生活中。</strong></p>\n<p><strong>你的思想有多高度，你的生活品位相应地就有多好。</strong></p>\n<h1 id=\"旅行的生活方式\"><a href=\"#旅行的生活方式\" class=\"headerlink\" title=\"旅行的生活方式\"></a>旅行的生活方式</h1><p>如果人生是一场旅行的话，那么旅行便是另一种方式的读书。奥古斯狄尼斯说，「<strong>世界是一本书，而不旅行的人们只读了其中的一页。</strong>」旅行的意义是什么？有人说，它能增加你人生的视野。有人说，它能增加你人生的维度。这些都没错。<strong>旅行的真正意义，不是看见新的风景，而是用新的眼光看待自己。</strong>旅行是唯一花了钱，却让你内心变得更富有的事物。</p>\n<p>很多人说，身边的世界很小，都早已厌倦。外面的世界很大，应该出去看看。<strong>如果逃离旧的环境却没有改变旧的心境，那么所谓的新自由也只不过是一种假自由。</strong>装装样子，自欺欺人。旅行并不是为了让你逃避现实，而是让你更好的认识自己和这个世界。旅行总让人谦卑，因为你会看到人的渺小，世界的伟大。<strong>旅行最大的魅力，在于不断地探索未知的世界。</strong></p>\n<p>在伟大的摄影师布列松的作品中，总会发现他在不同国家，不同城市的街头走走停停，来记录所看到的一切。这种不疾不徐，波澜不惊的生活状态，就像人生一样。自出生那一刻起，我们每个人便开始了慢慢的人生旅程。人生是一段旅程，在旅行中遇到的每一个人，每一个景色，都有可能成为一生中难忘的风景。人生的丰富多彩，也体现在不同的旅行中。</p>\n<p>旅行也是热爱生活的一种特别表现。从不出门的人，内心必定是满腹偏见。<strong>旅行的真谛，不是运动，而是带着你的灵魂，去寻找生命的真光。当你看过的世界越少，你的眼界也会越狭小。</strong>当你看过的世界越多，你的眼界就会越宽广。<strong>一个经常旅行的人，一定有博学多才的知识，坚持不懈的性格，善解人意的心态，和独具慧眼的审美。</strong></p>\n<p><strong>你的见识有多宽广，你的审美品位相应地就有多美。</strong></p>\n<h1 id=\"运动的生活方式\"><a href=\"#运动的生活方式\" class=\"headerlink\" title=\"运动的生活方式\"></a>运动的生活方式</h1><p>现今的社会，物质生活日益丰富，工作压力日益增大，交际应酬日益频繁，然而身体却日渐虚弱。正如很多人都曾听说的：三十五岁以前拿身体换钱，三十五岁以后拿钱换身体。<strong>理想生活离不开健康，而保持健康的最好方式就是运动</strong>。一个健康的身体，才能享受生命带来的种种美好，才能把这种美好延续得更长。这才是最重要的生活品质。</p>\n<p>如今，越来越多的中国人开始追求健康的生活方式，一些人选择在户外跑步、骑车、在草地上晒太阳，还有一些人会去健身房锻炼，游泳馆游泳等等。你可能会觉得他们很会享受生活，很悠闲。也许运动占据了他们相当一部分工资和时间，但健康的身体是持续赚钱的条件和能力。「运动」不再是高中时期应付要做的广播体操，而是每日清晨带上耳机对身体的放空。</p>\n<p>对于跑者而言，跑步旅行或许是一个很不错的选择。这就是为什么丹先生选择马拉松，而且只对海外赛事感兴趣，尤其世界马拉松六大满贯：芝加哥、纽约、柏林、东京、伦敦、波士顿。每次参赛，可以一边跑步，一边欣赏美景。赛后，还可以计划自己的个人旅行。既可以锻炼身体，同时又可以旅行，路上还可以看看书，这便是一举三得的生活方式。</p>\n<p><strong>当你爱上运动之后，你可能会不再腰酸背痛，还省了很多去医院的钱；你可能会慢慢戒掉了手机癌，认识了各行各业的新朋友；你可能会无法和同龄人一起变老，因为运动可以延缓衰老；你可能会对生活越来越有追求了，也提高了对生活品质的要求。</strong></p>\n<p><strong>你的身体有多健康，你的生活品质相应地就有多高。</strong></p>\n<p>在所有的生活方式中，运动健身是最时尚健康的生活方式。而你会发现，一个有生活品质的人绝对会科学运动，智能手表、专业的运动服饰缺一不可，而对服装搭配有极强要求的人，也会对智能手表的外观有着更高要求，这也是 Nokia Steel 智能腕表被大家喜爱的原因。它除了带有运动及睡眠监测功能，还是一款适合各种场合佩戴的时尚手表，运动时尚两不误，是追求品质生活人士的绝佳首选。</p>\n<p><strong>生活得有品位的人，并不是那些年岁活得最长的人，而是真正热爱生活的人。</strong>如果你爱生活，那么生活就会爱你。一个集才华与美貌于一身，有高度的思想，有眼界的见识，并且热爱健康生活的人，才是最高品位的生活方式。</p>\n<p><strong>你的思维模式，决定了你的生活方式。而你的生活方式，决定了你的生活品质。</strong></p>\n","excerpt":"<hr>\n<p>文/丹尼尔</p>\n<p><strong>生活最大的危险，就是空虚的心灵。</strong></p>\n<p>罗曼 • 罗兰说：「<strong>生活最沉重的负担不是工作，而是无聊。</strong>」每个人要对自己的生活负责。一个人至少拥有一个梦想，才能让自己有动力和激情去坚持。生活的理想，就是为了理想的生活。<strong>追求不同的生活方式，是对人生做加法。追求更好的生活品质，则是对人生做减法。</strong></p>\n<p>不知道你是在做人生加法，还是人生减法？年轻的时候，绝大部分人会有很多想法，什么都想要，什么都想尝试。人到中年时，才会发现人的精力极其有限，一生中只要做好一两件事情，并且做漂亮了，就足以。<strong>当一个人抵达生活的极限后，就会删繁就简，让生命变得更加纯粹，更有效率地追求人生中最让自己感到愉悦的事。</strong></p>\n<p><strong>好的生活，不是贵价格，而是贵品质；不是贵物质，而是贵精神。</strong>生活不是越复杂越好，而是越简约越好。化繁为简，便是一种高品质的生活方式。最完美的生活品质，往往讲究一个人长期健康稳定的发展，至少是以下三位一体的生活方式：<strong>拥有思想的读书生活，开阔见识的旅行生活，健康身体的运动生活。</strong><br>","more":"</p>\n<h1 id=\"读书的生活方式\"><a href=\"#读书的生活方式\" class=\"headerlink\" title=\"读书的生活方式\"></a>读书的生活方式</h1><p>俗话说：一日不读书，无人看得出；一周不读书，开始会爆粗；一月不读书，智商输给猪。读书能使人心明眼亮。这就意味着不读书的人如同瞎子。正如《圣经》所言，「<strong>眼睛就是身上的灯。眼睛若明亮，全身就光明；眼睛若昏花，全身就黑暗。</strong>」你的思想，就是你这个人的眼睛。没有知识的获取和积累，思想和精神就是空洞的。不读书的人，思想会停止。</p>\n<p><strong>读书的目的不是为了反驳别人，而是为了丰富自己。读书能获得工作技能，提高个人素质，培养思想深度，和满足精神需求等。</strong>读书是在别人思想的引导下，建立自己的思想。读书不要贪多，而在于精读，并且在读的时候学会思考。<strong>独立性，才是一个人读书所带来最重要的品质。一个人一旦缺乏思考力，就不会有判断力，也就更不会有鉴别力。</strong></p>\n<p>在纸醉金迷的好莱坞，失去鉴别力的人，很容易迷失在烟酒和药物等等的花花世界里。性感女神梦露，却有着另一份与她外表完全不符的生活：读书。梦露这一生读了很多书，她的书单足以秒杀某些现代文学博士。阅读，成了她学习的最好方式。在闪光灯前，她媚得不可一世，但在真正的独处时，是读书让她的美丽安静地绽放。</p>\n<p>当你通过读书，思想有了深度和高度，看问题的角度也就不同，所追求的境界自然也会不同。本杰明·富兰克林说，「向知识投资付出的利息最少。」而我则说，向知识投资是回报率最高的无形资产。<strong>越读书越有气质，越读书越有内涵，越读书越有智慧，越读书越有品位。这些看不见的修养和品位，都会悄无声息地融在你的生活中。</strong></p>\n<p><strong>你的思想有多高度，你的生活品位相应地就有多好。</strong></p>\n<h1 id=\"旅行的生活方式\"><a href=\"#旅行的生活方式\" class=\"headerlink\" title=\"旅行的生活方式\"></a>旅行的生活方式</h1><p>如果人生是一场旅行的话，那么旅行便是另一种方式的读书。奥古斯狄尼斯说，「<strong>世界是一本书，而不旅行的人们只读了其中的一页。</strong>」旅行的意义是什么？有人说，它能增加你人生的视野。有人说，它能增加你人生的维度。这些都没错。<strong>旅行的真正意义，不是看见新的风景，而是用新的眼光看待自己。</strong>旅行是唯一花了钱，却让你内心变得更富有的事物。</p>\n<p>很多人说，身边的世界很小，都早已厌倦。外面的世界很大，应该出去看看。<strong>如果逃离旧的环境却没有改变旧的心境，那么所谓的新自由也只不过是一种假自由。</strong>装装样子，自欺欺人。旅行并不是为了让你逃避现实，而是让你更好的认识自己和这个世界。旅行总让人谦卑，因为你会看到人的渺小，世界的伟大。<strong>旅行最大的魅力，在于不断地探索未知的世界。</strong></p>\n<p>在伟大的摄影师布列松的作品中，总会发现他在不同国家，不同城市的街头走走停停，来记录所看到的一切。这种不疾不徐，波澜不惊的生活状态，就像人生一样。自出生那一刻起，我们每个人便开始了慢慢的人生旅程。人生是一段旅程，在旅行中遇到的每一个人，每一个景色，都有可能成为一生中难忘的风景。人生的丰富多彩，也体现在不同的旅行中。</p>\n<p>旅行也是热爱生活的一种特别表现。从不出门的人，内心必定是满腹偏见。<strong>旅行的真谛，不是运动，而是带着你的灵魂，去寻找生命的真光。当你看过的世界越少，你的眼界也会越狭小。</strong>当你看过的世界越多，你的眼界就会越宽广。<strong>一个经常旅行的人，一定有博学多才的知识，坚持不懈的性格，善解人意的心态，和独具慧眼的审美。</strong></p>\n<p><strong>你的见识有多宽广，你的审美品位相应地就有多美。</strong></p>\n<h1 id=\"运动的生活方式\"><a href=\"#运动的生活方式\" class=\"headerlink\" title=\"运动的生活方式\"></a>运动的生活方式</h1><p>现今的社会，物质生活日益丰富，工作压力日益增大，交际应酬日益频繁，然而身体却日渐虚弱。正如很多人都曾听说的：三十五岁以前拿身体换钱，三十五岁以后拿钱换身体。<strong>理想生活离不开健康，而保持健康的最好方式就是运动</strong>。一个健康的身体，才能享受生命带来的种种美好，才能把这种美好延续得更长。这才是最重要的生活品质。</p>\n<p>如今，越来越多的中国人开始追求健康的生活方式，一些人选择在户外跑步、骑车、在草地上晒太阳，还有一些人会去健身房锻炼，游泳馆游泳等等。你可能会觉得他们很会享受生活，很悠闲。也许运动占据了他们相当一部分工资和时间，但健康的身体是持续赚钱的条件和能力。「运动」不再是高中时期应付要做的广播体操，而是每日清晨带上耳机对身体的放空。</p>\n<p>对于跑者而言，跑步旅行或许是一个很不错的选择。这就是为什么丹先生选择马拉松，而且只对海外赛事感兴趣，尤其世界马拉松六大满贯：芝加哥、纽约、柏林、东京、伦敦、波士顿。每次参赛，可以一边跑步，一边欣赏美景。赛后，还可以计划自己的个人旅行。既可以锻炼身体，同时又可以旅行，路上还可以看看书，这便是一举三得的生活方式。</p>\n<p><strong>当你爱上运动之后，你可能会不再腰酸背痛，还省了很多去医院的钱；你可能会慢慢戒掉了手机癌，认识了各行各业的新朋友；你可能会无法和同龄人一起变老，因为运动可以延缓衰老；你可能会对生活越来越有追求了，也提高了对生活品质的要求。</strong></p>\n<p><strong>你的身体有多健康，你的生活品质相应地就有多高。</strong></p>\n<p>在所有的生活方式中，运动健身是最时尚健康的生活方式。而你会发现，一个有生活品质的人绝对会科学运动，智能手表、专业的运动服饰缺一不可，而对服装搭配有极强要求的人，也会对智能手表的外观有着更高要求，这也是 Nokia Steel 智能腕表被大家喜爱的原因。它除了带有运动及睡眠监测功能，还是一款适合各种场合佩戴的时尚手表，运动时尚两不误，是追求品质生活人士的绝佳首选。</p>\n<p><strong>生活得有品位的人，并不是那些年岁活得最长的人，而是真正热爱生活的人。</strong>如果你爱生活，那么生活就会爱你。一个集才华与美貌于一身，有高度的思想，有眼界的见识，并且热爱健康生活的人，才是最高品位的生活方式。</p>\n<p><strong>你的思维模式，决定了你的生活方式。而你的生活方式，决定了你的生活品质。</strong></p>"},{"layout":"post","title":"DecorView绘制流程源码分析","date":"2018-01-05T09:24:04.000Z","comments":1,"_content":"---\n通过[Activiyt布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)和[Activiyt布局加载流程源码分析(II)](http://blog.csdn.net/awenyini/article/details/78964353)两篇博文，我们知道，首先，Activity的布局内容被加载进入装饰器DecorView中，然后WindowManager将DecorView添加到PhoneWindow中，也即Window中，最后ViewRootImpl对DecorView进行绘制操作，将其内容显示到手机上。但前两篇博文中，对于DecorView的绘制原理，没有作详细说明，所以本篇博文重在梳理这部分逻辑。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **DecorView：**是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View和Activity布局。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **Choreographer：**是\"舞蹈指挥\"者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。\n- **DisplayEventReceiver：**是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。\n- **FrameDisplayEventReceiver：** Choreographer的内部类，也是DisplayEventReceiver具体实现类。\n\n在说DecorView的绘制之前，我们先来说说Android的绘制原理，这样方便我们理解后面内容。\n\n# 一、Android的绘制原理简介\nAndroid系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。为什么是16ms, 因为Android设定的刷新率是60FPS(Frame Per Second), 也就是每秒60帧的刷新率, 约合16ms刷新一次。如下图所示：\n<!-- more -->\n![](/assets/img/tech_android_draw_flow.png)\n\n\n\n# 二、DecorView绘制原理分析\n在Activity布局加载流程分析中，我们知道DecorView被添加进入了WindowManager,并且最后ViewRootImpl通过setView()方法开始绘制DecorView，所以下面我们就来看看ViewRootImpl的setView()方法\n```java\n public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n        synchronized (this) {\n            if (mView == null) {\n                mView = view;//1.DecorView赋值为mView\n                mFallbackEventHandler.setView(view);\n                ......\n                \n                requestLayout();//2.DecorView的绘制\n                \n                if ((mWindowAttributes.inputFeatures\n                        & WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {\n                    mInputChannel = new InputChannel();\n                }\n                try {\n                    mOrigWindowType = mWindowAttributes.type;\n                    mAttachInfo.mRecomputeGlobalAttributes = true;\n                    collectViewAttributes();\n\n                    //3.Window的权限判断，主要是Window添加的控制，由于本篇博文重在DecorView绘制，所以这里将不会分析\n                    res = sWindowSession.add(mWindow, mSeq, mWindowAttributes,\n                            getHostVisibility(), mAttachInfo.mContentInsets,\n                            mInputChannel);\n\n                } catch (RemoteException e) {\n                    mAdded = false;\n                    mView = null;\n                    mAttachInfo.mRootView = null;\n                    mInputChannel = null;\n                    mFallbackEventHandler.setView(null);\n                    unscheduleTraversals();\n                    setAccessibilityFocus(null, null);\n                    throw new RuntimeException(\"Adding window failed\", e);\n                } finally {\n                    if (restore) {\n                        attrs.restore();\n                    }\n                }\n                \n               ........\n            }\n        }\n    }\n```\n首先，我们来关注一下注释1，这里主要是对mView进行赋值DecorView，mView是ViewRootImpl的属性变量，这里需要注意一下，因为后面绘制需要用到。我们再来看注释2，ViewRootImpl的requestLayout()方法，我们具体来看看其方法逻辑\n```java\n    public void requestLayout() {\n        checkThread();\n        mLayoutRequested = true;\n        scheduleTraversals();//核心方法\n    }\n```\n这里我们直接来看核心方法scheduleTraversals()\n```java\n    void scheduleTraversals() {\n        if (!mTraversalScheduled) {\n            mTraversalScheduled = true;\n            mTraversalBarrier = mHandler.getLooper().postSyncBarrier();\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n            scheduleConsumeBatchedInput();\n        }\n    }\n```\n这里我们需要特别关注mChoreographer，即Choreographer类，从字面意思来说是“舞蹈指挥”者，是Android绘制原理的核心类，控制Android显示帧的绘制。关于Choreographer类，这里不做过多的分析，想了解其原理的同学，可以看看博文[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)。\n\n由Android绘制原理，我们知道每隔16ms,Android系统就会发出垂直信号VSYNC脉冲重绘我们的界面，而Choreographer中postCallback()方法主要功能就是向系统添加回调并加入绘制帧，从而实现View的绘制。这里我们来看看添加的回调mTraversalRunnable\n```java\n   final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();//核心方法\n        }\n    }\n    final TraversalRunnable mTraversalRunnable = new TraversalRunnable();\n```\n我们继续来看doTraversal()方法\n```java\n    void doTraversal() {\n        if (mTraversalScheduled) {\n            mTraversalScheduled = false;\n            mHandler.getLooper().removeSyncBarrier(mTraversalBarrier);\n\n            if (mProfile) {\n                Debug.startMethodTracing(\"ViewAncestor\");\n            }\n\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"performTraversals\");\n            try {\n                performTraversals();//核心方法\n            } finally {\n                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n            }\n\n            if (mProfile) {\n                Debug.stopMethodTracing();\n                mProfile = false;\n            }\n        }\n    }\n```\n我们继续分析方法performTraversals()\n```java\n   private void performTraversals() {\n        \n            .......//1.代码省略。省略主要内容，Surface和SurfaceHolder初始化及条件判断\n\n            if (!mStopped) {\n                boolean focusChangedDueToTouchMode = ensureTouchModeLocally(\n                        (relayoutResult&WindowManagerImpl.RELAYOUT_RES_IN_TOUCH_MODE) != 0);\n                if (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()\n                        || mHeight != host.getMeasuredHeight() || contentInsetsChanged) {\n                    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n                    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    \n                 \n                    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);//2.执行View的宽高测量\n    \n                    ........\n    \n                    layoutRequested = true;\n                }\n            }\n        }\n\n        final boolean didLayout = layoutRequested && !mStopped;\n        boolean triggerGlobalLayoutListener = didLayout\n                || attachInfo.mRecomputeGlobalAttributes;\n        if (didLayout) {\n\n            performLayout();//3.执行View的布局\n\n            .....\n        }\n\n        ......\n\n        boolean cancelDraw = attachInfo.mTreeObserver.dispatchOnPreDraw() ||\n                viewVisibility != View.VISIBLE;\n\n        if (!cancelDraw && !newSurface) {\n            if (!skipDraw || mReportNextDraw) {\n                ........\n                performDraw();//执行View绘制\n            }\n        } else {\n           ........\n        }\n    }\n```\n此方法，可以说是Android系统绘制的核心方法。**View绘制原理的三大流程:View的测量onMeasure -> View的布局onLayout -> View的绘制onDraw，**都在此方法中提现出来了。下面我们一一来看一下相关方法，首先我们来看一下performMeasure()方法\n```java\n    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"measure\");\n        try {\n            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);//核心方法\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n根据上面的分析，我们知道mView就是DecorView,所以这里就是调用DecorView的measure()方法。由[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)博文，我们知道DecorView是继承至FrameLayout,而FrameLayout又继承至ViewGroup，ViewGroup又继承至View,所以这里的measure()方法就是调用View中的measure()方法，具体怎么调用，这里不细说了，想了解的同学可以看看这篇博文[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)。下面让我们来看看performLayout()方法\n```java\n private void performLayout() {\n        mLayoutRequested = false;\n        mScrollMayChange = true;\n\n        final View host = mView;\n        if (DEBUG_ORIENTATION || DEBUG_LAYOUT) {\n            Log.v(TAG, \"Laying out \" + host + \" to (\" +\n                    host.getMeasuredWidth() + \", \" + host.getMeasuredHeight() + \")\");\n        }\n\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"layout\");\n        try {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n这里逻辑与测量measure类似，也就是调用DecorView的layout方法，具体View的布局控制细节略。我们再来看看performDraw()方法\n```java\n private void performDraw() {\n        if (!mAttachInfo.mScreenOn && !mReportNextDraw) {\n            return;\n        }\n\n        final boolean fullRedrawNeeded = mFullRedrawNeeded;\n        mFullRedrawNeeded = false;\n\n        mIsDrawing = true;\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"draw\");\n        try {\n            draw(fullRedrawNeeded);//核心方法\n        } finally {\n            mIsDrawing = false;\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n        ......\n    }\n\n```\n我们继续来看看draw()方法\n```java\n private void draw(boolean fullRedrawNeeded) {\n        Surface surface = mSurface;\n        .......\n\n        if (!dirty.isEmpty() || mIsAnimating) {\n            if (attachInfo.mHardwareRenderer != null && attachInfo.mHardwareRenderer.isEnabled()) {\n                // Draw with hardware renderer.\n                mIsAnimating = false;\n                mHardwareYOffset = yoff;\n                mResizeAlpha = resizeAlpha;\n\n                mCurrentDirty.set(dirty);\n                mCurrentDirty.union(mPreviousDirty);\n                mPreviousDirty.set(dirty);\n                dirty.setEmpty();\n\n                //1.Hardware渲染(Hardware加速)\n                if (attachInfo.mHardwareRenderer.draw(mView, attachInfo, this,animating ? null :mCurrentDirty)) {\n                    mPreviousDirty.set(0, 0, mWidth, mHeight);\n                }\n\n            } else if (!drawSoftware(surface, attachInfo, yoff, scalingRequired, dirty)) {//2.Software渲染\n                return;\n            }\n        }\n        if (animating) {\n            mFullRedrawNeeded = true;\n            scheduleTraversals();\n        }\n    }\n```\n这里的绘制方法涉及到两种绘制方式，分别为Hardware渲染(硬件加速)和Software渲染，关于选择那种绘制方式，这里还需要回溯到ViewRootImpl的setView()方法,我们再来看看此方法\n```java\n /**\n     * We have one child\n     */\n    public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n        synchronized (this) {\n            if (mView == null) {\n                mView = view;\n\n                ......\n\n                if (view instanceof RootViewSurfaceTaker) {//1.mSurfaceHolder赋值\n                    mSurfaceHolderCallback =\n                            ((RootViewSurfaceTaker)view).willYouTakeTheSurface();\n                    if (mSurfaceHolderCallback != null) {\n                        mSurfaceHolder = new TakenSurfaceHolder();\n                        mSurfaceHolder.setFormat(PixelFormat.UNKNOWN);\n                    }\n                }\n\n                ........\n\n                if (mSurfaceHolder == null) {//2.是否需要硬件加速\n                    enableHardwareAcceleration(mView.getContext(), attrs);\n                }\n            .......\n       }\n}\n```\n我们知道DecorView是实现了RootViewSurfaceTaker接口的，所以当View为DecorView时，就不会开启硬件加速，不会走Hardware渲染，而其他的View会选择Hardware渲染。因为WindowManager添加的View可能使DecorView，也可能不是DecorView，也可能是一般的View。我们来看看enableHardwareAcceleration()方法\n```java\n  private void enableHardwareAcceleration(Context context, WindowManager.LayoutParams attrs) {\n        mAttachInfo.mHardwareAccelerated = false;\n        mAttachInfo.mHardwareAccelerationRequested = false;\n\n        if (mTranslator != null) return;\n\n        final boolean hardwareAccelerated = \n                (attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;\n\n        if (hardwareAccelerated) {\n            if (!HardwareRenderer.isAvailable()) {\n                return;\n            }\n\n            final boolean fakeHwAccelerated = (attrs.privateFlags &\n                    WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED) != 0;\n            final boolean forceHwAccelerated = (attrs.privateFlags &\n                    WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED) != 0;\n\n            if (!HardwareRenderer.sRendererDisabled || (HardwareRenderer.sSystemRendererDisabled\n                    && forceHwAccelerated)) {\n                ........\n                final boolean translucent = attrs.format != PixelFormat.OPAQUE;\n                mAttachInfo.mHardwareRenderer = HardwareRenderer.createGlRenderer(2, translucent);//核心方法\n                mAttachInfo.mHardwareAccelerated = mAttachInfo.mHardwareAccelerationRequested\n                        = mAttachInfo.mHardwareRenderer != null;\n\n            } else if (fakeHwAccelerated) {\n\n                mAttachInfo.mHardwareAccelerationRequested = true;\n            }\n        }\n    }\n```\n这方法主要是对mAttachInfo.mHardwareRenderer进行赋值，从而在performDraw()方法中可以执行绘制。下面我们来看看上面的绘制方式1，Hardware渲染(硬件加速)，由上知主要是通过attachInfo.mHardwareRenderer.draw()绘制，所以我们来看看HardwareRenderer中的draw()方法\n```java\n  @Override\n        boolean draw(View view, View.AttachInfo attachInfo, HardwareDrawCallbacks callbacks,\n                Rect dirty) {\n            if (canDraw()) {\n               .......\n\n                    try {\n                        .......\n\n                        DisplayList displayList;//渲染列表\n\n                        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"getDisplayList\");\n                        try {\n                            displayList = view.getDisplayList();\n                        } finally {\n                            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n                        }\n\n                       .......\n\n                        if (displayList != null) {\n                            .....\n                            try {\n                                status |= canvas.drawDisplayList(displayList, mRedrawClip,\n                                        DisplayList.FLAG_CLIP_CHILDREN);\n                            } finally {\n                                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n                            }\n\n                            .....\n\n                            handleFunctorStatus(attachInfo, status);\n                        } else {\n                            view.draw(canvas);//核心方法\n                        }\n                    } finally {\n                       ....\n                    }\n\n                    ......\n\n                    return dirty == null;\n                }\n            }\n\n            return false;\n        }\n```\n当displayList为空的时候，也就会调用 view.draw(canvas)方法，即DeocorView的draw()方法。关于DisplayList这里也不细说，它主要是View中的显示列表记录，具体作用这里不作详述了。我们再来看看第二种绘制方式SoftWare渲染,drawSoftware()方法\n```java\n private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int yoff,\n            boolean scalingRequired, Rect dirty) {\n\n        // Draw with software renderer.\n        Canvas canvas;\n        try {\n            .......\n\n            canvas = mSurface.lockCanvas(dirty);\n\n           ......\n          \n        } catch (Surface.OutOfResourcesException e) {\n           .....\n        } catch (IllegalArgumentException e) {\n          .....\n        }\n\n        try {\n            .......\n            try {\n\n               ......\n\n                mView.draw(canvas);//核心方法\n\n                drawAccessibilityFocusedDrawableIfNeeded(canvas);\n            } finally {\n                if (!attachInfo.mSetIgnoreDirtyState) {\n                    // Only clear the flag if it was not set during the mView.draw() call\n                    attachInfo.mIgnoreDirtyState = false;\n                }\n            }\n        } finally {\n          .....\n        }\n        return true;\n    }\n```\n这里发现，最后也还是调用DecorView的draw方法，具体流程也与measure和layout类似。可以说两种绘制方式最后也还是调用了View的draw方法，可以说是殊途同归。\n\n到这里我们就把添加的回调绘制帧mTraversalRunnable这个说完了。上面说到，Choreographer通过postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)方法向系统添加回调并加入绘制帧，然后Android系统通过16ms间隔脉冲实现帧的绘制，从而才将布局内容显示到手机上。\n\n说到这里，DecorView的绘制流程我们就说完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)\n\n[Android App卡顿分析，以及使用Choreographer进行帧率统计监测](https://www.jianshu.com/p/6a680186b95f)\n\n[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)\n\n\n\n\n\n","source":"_posts/tech_android_framework_activity_decorview.md","raw":"---\nlayout: post\ntitle: \"DecorView绘制流程源码分析\"\ndate: 1/5/2018 5:24:04 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- DecorView绘制流程\n\t- Android框架源码解析\n---\n---\n通过[Activiyt布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)和[Activiyt布局加载流程源码分析(II)](http://blog.csdn.net/awenyini/article/details/78964353)两篇博文，我们知道，首先，Activity的布局内容被加载进入装饰器DecorView中，然后WindowManager将DecorView添加到PhoneWindow中，也即Window中，最后ViewRootImpl对DecorView进行绘制操作，将其内容显示到手机上。但前两篇博文中，对于DecorView的绘制原理，没有作详细说明，所以本篇博文重在梳理这部分逻辑。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **DecorView：**是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View和Activity布局。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **Choreographer：**是\"舞蹈指挥\"者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。\n- **DisplayEventReceiver：**是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。\n- **FrameDisplayEventReceiver：** Choreographer的内部类，也是DisplayEventReceiver具体实现类。\n\n在说DecorView的绘制之前，我们先来说说Android的绘制原理，这样方便我们理解后面内容。\n\n# 一、Android的绘制原理简介\nAndroid系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。为什么是16ms, 因为Android设定的刷新率是60FPS(Frame Per Second), 也就是每秒60帧的刷新率, 约合16ms刷新一次。如下图所示：\n<!-- more -->\n![](/assets/img/tech_android_draw_flow.png)\n\n\n\n# 二、DecorView绘制原理分析\n在Activity布局加载流程分析中，我们知道DecorView被添加进入了WindowManager,并且最后ViewRootImpl通过setView()方法开始绘制DecorView，所以下面我们就来看看ViewRootImpl的setView()方法\n```java\n public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n        synchronized (this) {\n            if (mView == null) {\n                mView = view;//1.DecorView赋值为mView\n                mFallbackEventHandler.setView(view);\n                ......\n                \n                requestLayout();//2.DecorView的绘制\n                \n                if ((mWindowAttributes.inputFeatures\n                        & WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {\n                    mInputChannel = new InputChannel();\n                }\n                try {\n                    mOrigWindowType = mWindowAttributes.type;\n                    mAttachInfo.mRecomputeGlobalAttributes = true;\n                    collectViewAttributes();\n\n                    //3.Window的权限判断，主要是Window添加的控制，由于本篇博文重在DecorView绘制，所以这里将不会分析\n                    res = sWindowSession.add(mWindow, mSeq, mWindowAttributes,\n                            getHostVisibility(), mAttachInfo.mContentInsets,\n                            mInputChannel);\n\n                } catch (RemoteException e) {\n                    mAdded = false;\n                    mView = null;\n                    mAttachInfo.mRootView = null;\n                    mInputChannel = null;\n                    mFallbackEventHandler.setView(null);\n                    unscheduleTraversals();\n                    setAccessibilityFocus(null, null);\n                    throw new RuntimeException(\"Adding window failed\", e);\n                } finally {\n                    if (restore) {\n                        attrs.restore();\n                    }\n                }\n                \n               ........\n            }\n        }\n    }\n```\n首先，我们来关注一下注释1，这里主要是对mView进行赋值DecorView，mView是ViewRootImpl的属性变量，这里需要注意一下，因为后面绘制需要用到。我们再来看注释2，ViewRootImpl的requestLayout()方法，我们具体来看看其方法逻辑\n```java\n    public void requestLayout() {\n        checkThread();\n        mLayoutRequested = true;\n        scheduleTraversals();//核心方法\n    }\n```\n这里我们直接来看核心方法scheduleTraversals()\n```java\n    void scheduleTraversals() {\n        if (!mTraversalScheduled) {\n            mTraversalScheduled = true;\n            mTraversalBarrier = mHandler.getLooper().postSyncBarrier();\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n            scheduleConsumeBatchedInput();\n        }\n    }\n```\n这里我们需要特别关注mChoreographer，即Choreographer类，从字面意思来说是“舞蹈指挥”者，是Android绘制原理的核心类，控制Android显示帧的绘制。关于Choreographer类，这里不做过多的分析，想了解其原理的同学，可以看看博文[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)。\n\n由Android绘制原理，我们知道每隔16ms,Android系统就会发出垂直信号VSYNC脉冲重绘我们的界面，而Choreographer中postCallback()方法主要功能就是向系统添加回调并加入绘制帧，从而实现View的绘制。这里我们来看看添加的回调mTraversalRunnable\n```java\n   final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();//核心方法\n        }\n    }\n    final TraversalRunnable mTraversalRunnable = new TraversalRunnable();\n```\n我们继续来看doTraversal()方法\n```java\n    void doTraversal() {\n        if (mTraversalScheduled) {\n            mTraversalScheduled = false;\n            mHandler.getLooper().removeSyncBarrier(mTraversalBarrier);\n\n            if (mProfile) {\n                Debug.startMethodTracing(\"ViewAncestor\");\n            }\n\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"performTraversals\");\n            try {\n                performTraversals();//核心方法\n            } finally {\n                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n            }\n\n            if (mProfile) {\n                Debug.stopMethodTracing();\n                mProfile = false;\n            }\n        }\n    }\n```\n我们继续分析方法performTraversals()\n```java\n   private void performTraversals() {\n        \n            .......//1.代码省略。省略主要内容，Surface和SurfaceHolder初始化及条件判断\n\n            if (!mStopped) {\n                boolean focusChangedDueToTouchMode = ensureTouchModeLocally(\n                        (relayoutResult&WindowManagerImpl.RELAYOUT_RES_IN_TOUCH_MODE) != 0);\n                if (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()\n                        || mHeight != host.getMeasuredHeight() || contentInsetsChanged) {\n                    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\n                    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\n    \n                 \n                    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);//2.执行View的宽高测量\n    \n                    ........\n    \n                    layoutRequested = true;\n                }\n            }\n        }\n\n        final boolean didLayout = layoutRequested && !mStopped;\n        boolean triggerGlobalLayoutListener = didLayout\n                || attachInfo.mRecomputeGlobalAttributes;\n        if (didLayout) {\n\n            performLayout();//3.执行View的布局\n\n            .....\n        }\n\n        ......\n\n        boolean cancelDraw = attachInfo.mTreeObserver.dispatchOnPreDraw() ||\n                viewVisibility != View.VISIBLE;\n\n        if (!cancelDraw && !newSurface) {\n            if (!skipDraw || mReportNextDraw) {\n                ........\n                performDraw();//执行View绘制\n            }\n        } else {\n           ........\n        }\n    }\n```\n此方法，可以说是Android系统绘制的核心方法。**View绘制原理的三大流程:View的测量onMeasure -> View的布局onLayout -> View的绘制onDraw，**都在此方法中提现出来了。下面我们一一来看一下相关方法，首先我们来看一下performMeasure()方法\n```java\n    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"measure\");\n        try {\n            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);//核心方法\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n根据上面的分析，我们知道mView就是DecorView,所以这里就是调用DecorView的measure()方法。由[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)博文，我们知道DecorView是继承至FrameLayout,而FrameLayout又继承至ViewGroup，ViewGroup又继承至View,所以这里的measure()方法就是调用View中的measure()方法，具体怎么调用，这里不细说了，想了解的同学可以看看这篇博文[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)。下面让我们来看看performLayout()方法\n```java\n private void performLayout() {\n        mLayoutRequested = false;\n        mScrollMayChange = true;\n\n        final View host = mView;\n        if (DEBUG_ORIENTATION || DEBUG_LAYOUT) {\n            Log.v(TAG, \"Laying out \" + host + \" to (\" +\n                    host.getMeasuredWidth() + \", \" + host.getMeasuredHeight() + \")\");\n        }\n\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"layout\");\n        try {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n这里逻辑与测量measure类似，也就是调用DecorView的layout方法，具体View的布局控制细节略。我们再来看看performDraw()方法\n```java\n private void performDraw() {\n        if (!mAttachInfo.mScreenOn && !mReportNextDraw) {\n            return;\n        }\n\n        final boolean fullRedrawNeeded = mFullRedrawNeeded;\n        mFullRedrawNeeded = false;\n\n        mIsDrawing = true;\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"draw\");\n        try {\n            draw(fullRedrawNeeded);//核心方法\n        } finally {\n            mIsDrawing = false;\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n        ......\n    }\n\n```\n我们继续来看看draw()方法\n```java\n private void draw(boolean fullRedrawNeeded) {\n        Surface surface = mSurface;\n        .......\n\n        if (!dirty.isEmpty() || mIsAnimating) {\n            if (attachInfo.mHardwareRenderer != null && attachInfo.mHardwareRenderer.isEnabled()) {\n                // Draw with hardware renderer.\n                mIsAnimating = false;\n                mHardwareYOffset = yoff;\n                mResizeAlpha = resizeAlpha;\n\n                mCurrentDirty.set(dirty);\n                mCurrentDirty.union(mPreviousDirty);\n                mPreviousDirty.set(dirty);\n                dirty.setEmpty();\n\n                //1.Hardware渲染(Hardware加速)\n                if (attachInfo.mHardwareRenderer.draw(mView, attachInfo, this,animating ? null :mCurrentDirty)) {\n                    mPreviousDirty.set(0, 0, mWidth, mHeight);\n                }\n\n            } else if (!drawSoftware(surface, attachInfo, yoff, scalingRequired, dirty)) {//2.Software渲染\n                return;\n            }\n        }\n        if (animating) {\n            mFullRedrawNeeded = true;\n            scheduleTraversals();\n        }\n    }\n```\n这里的绘制方法涉及到两种绘制方式，分别为Hardware渲染(硬件加速)和Software渲染，关于选择那种绘制方式，这里还需要回溯到ViewRootImpl的setView()方法,我们再来看看此方法\n```java\n /**\n     * We have one child\n     */\n    public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n        synchronized (this) {\n            if (mView == null) {\n                mView = view;\n\n                ......\n\n                if (view instanceof RootViewSurfaceTaker) {//1.mSurfaceHolder赋值\n                    mSurfaceHolderCallback =\n                            ((RootViewSurfaceTaker)view).willYouTakeTheSurface();\n                    if (mSurfaceHolderCallback != null) {\n                        mSurfaceHolder = new TakenSurfaceHolder();\n                        mSurfaceHolder.setFormat(PixelFormat.UNKNOWN);\n                    }\n                }\n\n                ........\n\n                if (mSurfaceHolder == null) {//2.是否需要硬件加速\n                    enableHardwareAcceleration(mView.getContext(), attrs);\n                }\n            .......\n       }\n}\n```\n我们知道DecorView是实现了RootViewSurfaceTaker接口的，所以当View为DecorView时，就不会开启硬件加速，不会走Hardware渲染，而其他的View会选择Hardware渲染。因为WindowManager添加的View可能使DecorView，也可能不是DecorView，也可能是一般的View。我们来看看enableHardwareAcceleration()方法\n```java\n  private void enableHardwareAcceleration(Context context, WindowManager.LayoutParams attrs) {\n        mAttachInfo.mHardwareAccelerated = false;\n        mAttachInfo.mHardwareAccelerationRequested = false;\n\n        if (mTranslator != null) return;\n\n        final boolean hardwareAccelerated = \n                (attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;\n\n        if (hardwareAccelerated) {\n            if (!HardwareRenderer.isAvailable()) {\n                return;\n            }\n\n            final boolean fakeHwAccelerated = (attrs.privateFlags &\n                    WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED) != 0;\n            final boolean forceHwAccelerated = (attrs.privateFlags &\n                    WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED) != 0;\n\n            if (!HardwareRenderer.sRendererDisabled || (HardwareRenderer.sSystemRendererDisabled\n                    && forceHwAccelerated)) {\n                ........\n                final boolean translucent = attrs.format != PixelFormat.OPAQUE;\n                mAttachInfo.mHardwareRenderer = HardwareRenderer.createGlRenderer(2, translucent);//核心方法\n                mAttachInfo.mHardwareAccelerated = mAttachInfo.mHardwareAccelerationRequested\n                        = mAttachInfo.mHardwareRenderer != null;\n\n            } else if (fakeHwAccelerated) {\n\n                mAttachInfo.mHardwareAccelerationRequested = true;\n            }\n        }\n    }\n```\n这方法主要是对mAttachInfo.mHardwareRenderer进行赋值，从而在performDraw()方法中可以执行绘制。下面我们来看看上面的绘制方式1，Hardware渲染(硬件加速)，由上知主要是通过attachInfo.mHardwareRenderer.draw()绘制，所以我们来看看HardwareRenderer中的draw()方法\n```java\n  @Override\n        boolean draw(View view, View.AttachInfo attachInfo, HardwareDrawCallbacks callbacks,\n                Rect dirty) {\n            if (canDraw()) {\n               .......\n\n                    try {\n                        .......\n\n                        DisplayList displayList;//渲染列表\n\n                        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"getDisplayList\");\n                        try {\n                            displayList = view.getDisplayList();\n                        } finally {\n                            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n                        }\n\n                       .......\n\n                        if (displayList != null) {\n                            .....\n                            try {\n                                status |= canvas.drawDisplayList(displayList, mRedrawClip,\n                                        DisplayList.FLAG_CLIP_CHILDREN);\n                            } finally {\n                                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n                            }\n\n                            .....\n\n                            handleFunctorStatus(attachInfo, status);\n                        } else {\n                            view.draw(canvas);//核心方法\n                        }\n                    } finally {\n                       ....\n                    }\n\n                    ......\n\n                    return dirty == null;\n                }\n            }\n\n            return false;\n        }\n```\n当displayList为空的时候，也就会调用 view.draw(canvas)方法，即DeocorView的draw()方法。关于DisplayList这里也不细说，它主要是View中的显示列表记录，具体作用这里不作详述了。我们再来看看第二种绘制方式SoftWare渲染,drawSoftware()方法\n```java\n private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int yoff,\n            boolean scalingRequired, Rect dirty) {\n\n        // Draw with software renderer.\n        Canvas canvas;\n        try {\n            .......\n\n            canvas = mSurface.lockCanvas(dirty);\n\n           ......\n          \n        } catch (Surface.OutOfResourcesException e) {\n           .....\n        } catch (IllegalArgumentException e) {\n          .....\n        }\n\n        try {\n            .......\n            try {\n\n               ......\n\n                mView.draw(canvas);//核心方法\n\n                drawAccessibilityFocusedDrawableIfNeeded(canvas);\n            } finally {\n                if (!attachInfo.mSetIgnoreDirtyState) {\n                    // Only clear the flag if it was not set during the mView.draw() call\n                    attachInfo.mIgnoreDirtyState = false;\n                }\n            }\n        } finally {\n          .....\n        }\n        return true;\n    }\n```\n这里发现，最后也还是调用DecorView的draw方法，具体流程也与measure和layout类似。可以说两种绘制方式最后也还是调用了View的draw方法，可以说是殊途同归。\n\n到这里我们就把添加的回调绘制帧mTraversalRunnable这个说完了。上面说到，Choreographer通过postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)方法向系统添加回调并加入绘制帧，然后Android系统通过16ms间隔脉冲实现帧的绘制，从而才将布局内容显示到手机上。\n\n说到这里，DecorView的绘制流程我们就说完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)\n\n[Android App卡顿分析，以及使用Choreographer进行帧率统计监测](https://www.jianshu.com/p/6a680186b95f)\n\n[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)\n\n\n\n\n\n","slug":"tech_android_framework_activity_decorview","published":1,"updated":"2019-06-27T08:15:15.303Z","photos":[],"link":"","_id":"cjxfjaest004rystgllq2cjqg","content":"<hr>\n<p>通过<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activiyt布局加载流程源码分析(I)</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/78964353\" target=\"_blank\" rel=\"external\">Activiyt布局加载流程源码分析(II)</a>两篇博文，我们知道，首先，Activity的布局内容被加载进入装饰器DecorView中，然后WindowManager将DecorView添加到PhoneWindow中，也即Window中，最后ViewRootImpl对DecorView进行绘制操作，将其内容显示到手机上。但前两篇博文中，对于DecorView的绘制原理，没有作详细说明，所以本篇博文重在梳理这部分逻辑。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>DecorView：</strong>是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View和Activity布局。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>Choreographer：</strong>是”舞蹈指挥”者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。</li>\n<li><strong>DisplayEventReceiver：</strong>是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。</li>\n<li><strong>FrameDisplayEventReceiver：</strong> Choreographer的内部类，也是DisplayEventReceiver具体实现类。</li>\n</ul>\n<p>在说DecorView的绘制之前，我们先来说说Android的绘制原理，这样方便我们理解后面内容。</p>\n<h1 id=\"一、Android的绘制原理简介\"><a href=\"#一、Android的绘制原理简介\" class=\"headerlink\" title=\"一、Android的绘制原理简介\"></a>一、Android的绘制原理简介</h1><p>Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。为什么是16ms, 因为Android设定的刷新率是60FPS(Frame Per Second), 也就是每秒60帧的刷新率, 约合16ms刷新一次。如下图所示：<br><a id=\"more\"></a><br><img src=\"/assets/img/tech_android_draw_flow.png\" alt=\"\"></p>\n<h1 id=\"二、DecorView绘制原理分析\"><a href=\"#二、DecorView绘制原理分析\" class=\"headerlink\" title=\"二、DecorView绘制原理分析\"></a>二、DecorView绘制原理分析</h1><p>在Activity布局加载流程分析中，我们知道DecorView被添加进入了WindowManager,并且最后ViewRootImpl通过setView()方法开始绘制DecorView，所以下面我们就来看看ViewRootImpl的setView()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setView</span><span class=\"params\">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               mView = view;<span class=\"comment\">//1.DecorView赋值为mView</span></div><div class=\"line\">               mFallbackEventHandler.setView(view);</div><div class=\"line\">               ......</div><div class=\"line\">               </div><div class=\"line\">               requestLayout();<span class=\"comment\">//2.DecorView的绘制</span></div><div class=\"line\">               </div><div class=\"line\">               <span class=\"keyword\">if</span> ((mWindowAttributes.inputFeatures</div><div class=\"line\">                       &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   mInputChannel = <span class=\"keyword\">new</span> InputChannel();</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   mOrigWindowType = mWindowAttributes.type;</div><div class=\"line\">                   mAttachInfo.mRecomputeGlobalAttributes = <span class=\"keyword\">true</span>;</div><div class=\"line\">                   collectViewAttributes();</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"comment\">//3.Window的权限判断，主要是Window添加的控制，由于本篇博文重在DecorView绘制，所以这里将不会分析</span></div><div class=\"line\">                   res = sWindowSession.add(mWindow, mSeq, mWindowAttributes,</div><div class=\"line\">                           getHostVisibility(), mAttachInfo.mContentInsets,</div><div class=\"line\">                           mInputChannel);</div><div class=\"line\"></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                   mAdded = <span class=\"keyword\">false</span>;</div><div class=\"line\">                   mView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mAttachInfo.mRootView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mInputChannel = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mFallbackEventHandler.setView(<span class=\"keyword\">null</span>);</div><div class=\"line\">                   unscheduleTraversals();</div><div class=\"line\">                   setAccessibilityFocus(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">                   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Adding window failed\"</span>, e);</div><div class=\"line\">               &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (restore) &#123;</div><div class=\"line\">                       attrs.restore();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               </div><div class=\"line\">              ........</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>首先，我们来关注一下注释1，这里主要是对mView进行赋值DecorView，mView是ViewRootImpl的属性变量，这里需要注意一下，因为后面绘制需要用到。我们再来看注释2，ViewRootImpl的requestLayout()方法，我们具体来看看其方法逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    checkThread();</div><div class=\"line\">    mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">    scheduleTraversals();<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们直接来看核心方法scheduleTraversals()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mTraversalBarrier = mHandler.getLooper().postSyncBarrier();</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</div><div class=\"line\">        scheduleConsumeBatchedInput();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们需要特别关注mChoreographer，即Choreographer类，从字面意思来说是“舞蹈指挥”者，是Android绘制原理的核心类，控制Android显示帧的绘制。关于Choreographer类，这里不做过多的分析，想了解其原理的同学，可以看看博文<a href=\"https://www.jianshu.com/p/996bca12eb1d\" target=\"_blank\" rel=\"external\">Android Choreographer 源码分析</a>。</p>\n<p>由Android绘制原理，我们知道每隔16ms,Android系统就会发出垂直信号VSYNC脉冲重绘我们的界面，而Choreographer中postCallback()方法主要功能就是向系统添加回调并加入绘制帧，从而实现View的绘制。这里我们来看看添加的回调mTraversalRunnable<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         doTraversal();<span class=\"comment\">//核心方法</span></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">final</span> TraversalRunnable mTraversalRunnable = <span class=\"keyword\">new</span> TraversalRunnable();</div></pre></td></tr></table></figure></p>\n<p>我们继续来看doTraversal()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTraversal</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">false</span>;</div><div class=\"line\">        mHandler.getLooper().removeSyncBarrier(mTraversalBarrier);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mProfile) &#123;</div><div class=\"line\">            Debug.startMethodTracing(<span class=\"string\">\"ViewAncestor\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"performTraversals\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            performTraversals();<span class=\"comment\">//核心方法</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mProfile) &#123;</div><div class=\"line\">            Debug.stopMethodTracing();</div><div class=\"line\">            mProfile = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续分析方法performTraversals()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\">         .......<span class=\"comment\">//1.代码省略。省略主要内容，Surface和SurfaceHolder初始化及条件判断</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (!mStopped) &#123;</div><div class=\"line\">             <span class=\"keyword\">boolean</span> focusChangedDueToTouchMode = ensureTouchModeLocally(</div><div class=\"line\">                     (relayoutResult&amp;WindowManagerImpl.RELAYOUT_RES_IN_TOUCH_MODE) != <span class=\"number\">0</span>);</div><div class=\"line\">             <span class=\"keyword\">if</span> (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()</div><div class=\"line\">                     || mHeight != host.getMeasuredHeight() || contentInsetsChanged) &#123;</div><div class=\"line\">                 <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">                 <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"> </div><div class=\"line\">              </div><div class=\"line\">                 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);<span class=\"comment\">//2.执行View的宽高测量</span></div><div class=\"line\"> </div><div class=\"line\">                 ........</div><div class=\"line\"> </div><div class=\"line\">                 layoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> didLayout = layoutRequested &amp;&amp; !mStopped;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> triggerGlobalLayoutListener = didLayout</div><div class=\"line\">             || attachInfo.mRecomputeGlobalAttributes;</div><div class=\"line\">     <span class=\"keyword\">if</span> (didLayout) &#123;</div><div class=\"line\"></div><div class=\"line\">         performLayout();<span class=\"comment\">//3.执行View的布局</span></div><div class=\"line\"></div><div class=\"line\">         .....</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> cancelDraw = attachInfo.mTreeObserver.dispatchOnPreDraw() ||</div><div class=\"line\">             viewVisibility != View.VISIBLE;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (!cancelDraw &amp;&amp; !newSurface) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!skipDraw || mReportNextDraw) &#123;</div><div class=\"line\">             ........</div><div class=\"line\">             performDraw();<span class=\"comment\">//执行View绘制</span></div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ........</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法，可以说是Android系统绘制的核心方法。<strong>View绘制原理的三大流程:View的测量onMeasure -&gt; View的布局onLayout -&gt; View的绘制onDraw，</strong>都在此方法中提现出来了。下面我们一一来看一下相关方法，首先我们来看一下performMeasure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"measure\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);<span class=\"comment\">//核心方法</span></div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据上面的分析，我们知道mView就是DecorView,所以这里就是调用DecorView的measure()方法。由<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>博文，我们知道DecorView是继承至FrameLayout,而FrameLayout又继承至ViewGroup，ViewGroup又继承至View,所以这里的measure()方法就是调用View中的measure()方法，具体怎么调用，这里不细说了，想了解的同学可以看看这篇博文<a href=\"http://blog.csdn.net/u014316462/article/details/52054352\" target=\"_blank\" rel=\"external\">View的绘制原理</a>。下面让我们来看看performLayout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       mLayoutRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\">       mScrollMayChange = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) &#123;</div><div class=\"line\">           Log.v(TAG, <span class=\"string\">\"Laying out \"</span> + host + <span class=\"string\">\" to (\"</span> +</div><div class=\"line\">                   host.getMeasuredWidth() + <span class=\"string\">\", \"</span> + host.getMeasuredHeight() + <span class=\"string\">\")\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里逻辑与测量measure类似，也就是调用DecorView的layout方法，具体View的布局控制细节略。我们再来看看performDraw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performDraw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mAttachInfo.mScreenOn &amp;&amp; !mReportNextDraw) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> fullRedrawNeeded = mFullRedrawNeeded;</div><div class=\"line\">       mFullRedrawNeeded = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       mIsDrawing = <span class=\"keyword\">true</span>;</div><div class=\"line\">       Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"draw\"</span>);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           draw(fullRedrawNeeded);<span class=\"comment\">//核心方法</span></div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           mIsDrawing = <span class=\"keyword\">false</span>;</div><div class=\"line\">           Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">       &#125;</div><div class=\"line\">       ......</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续来看看draw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fullRedrawNeeded)</span> </span>&#123;</div><div class=\"line\">       Surface surface = mSurface;</div><div class=\"line\">       .......</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (!dirty.isEmpty() || mIsAnimating) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (attachInfo.mHardwareRenderer != <span class=\"keyword\">null</span> &amp;&amp; attachInfo.mHardwareRenderer.isEnabled()) &#123;</div><div class=\"line\">               <span class=\"comment\">// Draw with hardware renderer.</span></div><div class=\"line\">               mIsAnimating = <span class=\"keyword\">false</span>;</div><div class=\"line\">               mHardwareYOffset = yoff;</div><div class=\"line\">               mResizeAlpha = resizeAlpha;</div><div class=\"line\"></div><div class=\"line\">               mCurrentDirty.set(dirty);</div><div class=\"line\">               mCurrentDirty.union(mPreviousDirty);</div><div class=\"line\">               mPreviousDirty.set(dirty);</div><div class=\"line\">               dirty.setEmpty();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">//1.Hardware渲染(Hardware加速)</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (attachInfo.mHardwareRenderer.draw(mView, attachInfo, <span class=\"keyword\">this</span>,animating ? <span class=\"keyword\">null</span> :mCurrentDirty)) &#123;</div><div class=\"line\">                   mPreviousDirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mWidth, mHeight);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!drawSoftware(surface, attachInfo, yoff, scalingRequired, dirty)) &#123;<span class=\"comment\">//2.Software渲染</span></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (animating) &#123;</div><div class=\"line\">           mFullRedrawNeeded = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的绘制方法涉及到两种绘制方式，分别为Hardware渲染(硬件加速)和Software渲染，关于选择那种绘制方式，这里还需要回溯到ViewRootImpl的setView()方法,我们再来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">     * We have one child</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setView</span><span class=\"params\">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mView = view;</div><div class=\"line\"></div><div class=\"line\">                ......</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> RootViewSurfaceTaker) &#123;<span class=\"comment\">//1.mSurfaceHolder赋值</span></div><div class=\"line\">                    mSurfaceHolderCallback =</div><div class=\"line\">                            ((RootViewSurfaceTaker)view).willYouTakeTheSurface();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mSurfaceHolderCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mSurfaceHolder = <span class=\"keyword\">new</span> TakenSurfaceHolder();</div><div class=\"line\">                        mSurfaceHolder.setFormat(PixelFormat.UNKNOWN);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                ........</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mSurfaceHolder == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//2.是否需要硬件加速</span></div><div class=\"line\">                    enableHardwareAcceleration(mView.getContext(), attrs);</div><div class=\"line\">                &#125;</div><div class=\"line\">            .......</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们知道DecorView是实现了RootViewSurfaceTaker接口的，所以当View为DecorView时，就不会开启硬件加速，不会走Hardware渲染，而其他的View会选择Hardware渲染。因为WindowManager添加的View可能使DecorView，也可能不是DecorView，也可能是一般的View。我们来看看enableHardwareAcceleration()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">enableHardwareAcceleration</span><span class=\"params\">(Context context, WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">      mAttachInfo.mHardwareAccelerated = <span class=\"keyword\">false</span>;</div><div class=\"line\">      mAttachInfo.mHardwareAccelerationRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (mTranslator != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> hardwareAccelerated = </div><div class=\"line\">              (attrs.flags &amp; WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (hardwareAccelerated) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!HardwareRenderer.isAvailable()) &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> fakeHwAccelerated = (attrs.privateFlags &amp;</div><div class=\"line\">                  WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> forceHwAccelerated = (attrs.privateFlags &amp;</div><div class=\"line\">                  WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (!HardwareRenderer.sRendererDisabled || (HardwareRenderer.sSystemRendererDisabled</div><div class=\"line\">                  &amp;&amp; forceHwAccelerated)) &#123;</div><div class=\"line\">              ........</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> translucent = attrs.format != PixelFormat.OPAQUE;</div><div class=\"line\">              mAttachInfo.mHardwareRenderer = HardwareRenderer.createGlRenderer(<span class=\"number\">2</span>, translucent);<span class=\"comment\">//核心方法</span></div><div class=\"line\">              mAttachInfo.mHardwareAccelerated = mAttachInfo.mHardwareAccelerationRequested</div><div class=\"line\">                      = mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fakeHwAccelerated) &#123;</div><div class=\"line\"></div><div class=\"line\">              mAttachInfo.mHardwareAccelerationRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这方法主要是对mAttachInfo.mHardwareRenderer进行赋值，从而在performDraw()方法中可以执行绘制。下面我们来看看上面的绘制方式1，Hardware渲染(硬件加速)，由上知主要是通过attachInfo.mHardwareRenderer.draw()绘制，所以我们来看看HardwareRenderer中的draw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">draw</span><span class=\"params\">(View view, View.AttachInfo attachInfo, HardwareDrawCallbacks callbacks,</span></span></div><div class=\"line\">              Rect dirty) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (canDraw()) &#123;</div><div class=\"line\">             .......</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                      .......</div><div class=\"line\"></div><div class=\"line\">                      DisplayList displayList;<span class=\"comment\">//渲染列表</span></div><div class=\"line\"></div><div class=\"line\">                      Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"getDisplayList\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          displayList = view.getDisplayList();</div><div class=\"line\">                      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">                      &#125;</div><div class=\"line\"></div><div class=\"line\">                     .......</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"keyword\">if</span> (displayList != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                          .....</div><div class=\"line\">                          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                              status |= canvas.drawDisplayList(displayList, mRedrawClip,</div><div class=\"line\">                                      DisplayList.FLAG_CLIP_CHILDREN);</div><div class=\"line\">                          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                              Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">                          &#125;</div><div class=\"line\"></div><div class=\"line\">                          .....</div><div class=\"line\"></div><div class=\"line\">                          handleFunctorStatus(attachInfo, status);</div><div class=\"line\">                      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                          view.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                     ....</div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  ......</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">return</span> dirty == <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>当displayList为空的时候，也就会调用 view.draw(canvas)方法，即DeocorView的draw()方法。关于DisplayList这里也不细说，它主要是View中的显示列表记录，具体作用这里不作详述了。我们再来看看第二种绘制方式SoftWare渲染,drawSoftware()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawSoftware</span><span class=\"params\">(Surface surface, AttachInfo attachInfo, <span class=\"keyword\">int</span> yoff,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> scalingRequired, Rect dirty) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Draw with software renderer.</span></div><div class=\"line\">       Canvas canvas;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\"></div><div class=\"line\">           canvas = mSurface.lockCanvas(dirty);</div><div class=\"line\"></div><div class=\"line\">          ......</div><div class=\"line\">         </div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Surface.OutOfResourcesException e) &#123;</div><div class=\"line\">          .....</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\"></div><div class=\"line\">               mView.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">               drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class=\"line\">           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Only clear the flag if it was not set during the mView.draw() call</span></div><div class=\"line\">                   attachInfo.mIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里发现，最后也还是调用DecorView的draw方法，具体流程也与measure和layout类似。可以说两种绘制方式最后也还是调用了View的draw方法，可以说是殊途同归。</p>\n<p>到这里我们就把添加的回调绘制帧mTraversalRunnable这个说完了。上面说到，Choreographer通过postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)方法向系统添加回调并加入绘制帧，然后Android系统通过16ms间隔脉冲实现帧的绘制，从而才将布局内容显示到手机上。</p>\n<p>说到这里，DecorView的绘制流程我们就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"https://www.jianshu.com/p/996bca12eb1d\" target=\"_blank\" rel=\"external\">Android Choreographer 源码分析</a></p>\n<p><a href=\"https://www.jianshu.com/p/6a680186b95f\" target=\"_blank\" rel=\"external\">Android App卡顿分析，以及使用Choreographer进行帧率统计监测</a></p>\n<p><a href=\"http://blog.csdn.net/u014316462/article/details/52054352\" target=\"_blank\" rel=\"external\">View的绘制原理</a></p>\n","excerpt":"<hr>\n<p>通过<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activiyt布局加载流程源码分析(I)</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/78964353\">Activiyt布局加载流程源码分析(II)</a>两篇博文，我们知道，首先，Activity的布局内容被加载进入装饰器DecorView中，然后WindowManager将DecorView添加到PhoneWindow中，也即Window中，最后ViewRootImpl对DecorView进行绘制操作，将其内容显示到手机上。但前两篇博文中，对于DecorView的绘制原理，没有作详细说明，所以本篇博文重在梳理这部分逻辑。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>DecorView：</strong>是PhoneWindow中的一个内部类，也是Window的顶级View，主要负责装载各种View和Activity布局。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>Choreographer：</strong>是”舞蹈指挥”者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。</li>\n<li><strong>DisplayEventReceiver：</strong>是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。</li>\n<li><strong>FrameDisplayEventReceiver：</strong> Choreographer的内部类，也是DisplayEventReceiver具体实现类。</li>\n</ul>\n<p>在说DecorView的绘制之前，我们先来说说Android的绘制原理，这样方便我们理解后面内容。</p>\n<h1 id=\"一、Android的绘制原理简介\"><a href=\"#一、Android的绘制原理简介\" class=\"headerlink\" title=\"一、Android的绘制原理简介\"></a>一、Android的绘制原理简介</h1><p>Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。为什么是16ms, 因为Android设定的刷新率是60FPS(Frame Per Second), 也就是每秒60帧的刷新率, 约合16ms刷新一次。如下图所示：<br>","more":"<br><img src=\"/assets/img/tech_android_draw_flow.png\" alt=\"\"></p>\n<h1 id=\"二、DecorView绘制原理分析\"><a href=\"#二、DecorView绘制原理分析\" class=\"headerlink\" title=\"二、DecorView绘制原理分析\"></a>二、DecorView绘制原理分析</h1><p>在Activity布局加载流程分析中，我们知道DecorView被添加进入了WindowManager,并且最后ViewRootImpl通过setView()方法开始绘制DecorView，所以下面我们就来看看ViewRootImpl的setView()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setView</span><span class=\"params\">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               mView = view;<span class=\"comment\">//1.DecorView赋值为mView</span></div><div class=\"line\">               mFallbackEventHandler.setView(view);</div><div class=\"line\">               ......</div><div class=\"line\">               </div><div class=\"line\">               requestLayout();<span class=\"comment\">//2.DecorView的绘制</span></div><div class=\"line\">               </div><div class=\"line\">               <span class=\"keyword\">if</span> ((mWindowAttributes.inputFeatures</div><div class=\"line\">                       &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   mInputChannel = <span class=\"keyword\">new</span> InputChannel();</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   mOrigWindowType = mWindowAttributes.type;</div><div class=\"line\">                   mAttachInfo.mRecomputeGlobalAttributes = <span class=\"keyword\">true</span>;</div><div class=\"line\">                   collectViewAttributes();</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"comment\">//3.Window的权限判断，主要是Window添加的控制，由于本篇博文重在DecorView绘制，所以这里将不会分析</span></div><div class=\"line\">                   res = sWindowSession.add(mWindow, mSeq, mWindowAttributes,</div><div class=\"line\">                           getHostVisibility(), mAttachInfo.mContentInsets,</div><div class=\"line\">                           mInputChannel);</div><div class=\"line\"></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                   mAdded = <span class=\"keyword\">false</span>;</div><div class=\"line\">                   mView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mAttachInfo.mRootView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mInputChannel = <span class=\"keyword\">null</span>;</div><div class=\"line\">                   mFallbackEventHandler.setView(<span class=\"keyword\">null</span>);</div><div class=\"line\">                   unscheduleTraversals();</div><div class=\"line\">                   setAccessibilityFocus(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">                   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Adding window failed\"</span>, e);</div><div class=\"line\">               &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (restore) &#123;</div><div class=\"line\">                       attrs.restore();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               </div><div class=\"line\">              ........</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>首先，我们来关注一下注释1，这里主要是对mView进行赋值DecorView，mView是ViewRootImpl的属性变量，这里需要注意一下，因为后面绘制需要用到。我们再来看注释2，ViewRootImpl的requestLayout()方法，我们具体来看看其方法逻辑<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    checkThread();</div><div class=\"line\">    mLayoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">    scheduleTraversals();<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们直接来看核心方法scheduleTraversals()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mTraversalBarrier = mHandler.getLooper().postSyncBarrier();</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</div><div class=\"line\">        scheduleConsumeBatchedInput();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们需要特别关注mChoreographer，即Choreographer类，从字面意思来说是“舞蹈指挥”者，是Android绘制原理的核心类，控制Android显示帧的绘制。关于Choreographer类，这里不做过多的分析，想了解其原理的同学，可以看看博文<a href=\"https://www.jianshu.com/p/996bca12eb1d\">Android Choreographer 源码分析</a>。</p>\n<p>由Android绘制原理，我们知道每隔16ms,Android系统就会发出垂直信号VSYNC脉冲重绘我们的界面，而Choreographer中postCallback()方法主要功能就是向系统添加回调并加入绘制帧，从而实现View的绘制。这里我们来看看添加的回调mTraversalRunnable<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         doTraversal();<span class=\"comment\">//核心方法</span></div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">final</span> TraversalRunnable mTraversalRunnable = <span class=\"keyword\">new</span> TraversalRunnable();</div></pre></td></tr></table></figure></p>\n<p>我们继续来看doTraversal()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTraversal</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">false</span>;</div><div class=\"line\">        mHandler.getLooper().removeSyncBarrier(mTraversalBarrier);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mProfile) &#123;</div><div class=\"line\">            Debug.startMethodTracing(<span class=\"string\">\"ViewAncestor\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"performTraversals\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            performTraversals();<span class=\"comment\">//核心方法</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mProfile) &#123;</div><div class=\"line\">            Debug.stopMethodTracing();</div><div class=\"line\">            mProfile = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续分析方法performTraversals()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\">         .......<span class=\"comment\">//1.代码省略。省略主要内容，Surface和SurfaceHolder初始化及条件判断</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (!mStopped) &#123;</div><div class=\"line\">             <span class=\"keyword\">boolean</span> focusChangedDueToTouchMode = ensureTouchModeLocally(</div><div class=\"line\">                     (relayoutResult&amp;WindowManagerImpl.RELAYOUT_RES_IN_TOUCH_MODE) != <span class=\"number\">0</span>);</div><div class=\"line\">             <span class=\"keyword\">if</span> (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()</div><div class=\"line\">                     || mHeight != host.getMeasuredHeight() || contentInsetsChanged) &#123;</div><div class=\"line\">                 <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">                 <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\"> </div><div class=\"line\">              </div><div class=\"line\">                 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);<span class=\"comment\">//2.执行View的宽高测量</span></div><div class=\"line\"> </div><div class=\"line\">                 ........</div><div class=\"line\"> </div><div class=\"line\">                 layoutRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> didLayout = layoutRequested &amp;&amp; !mStopped;</div><div class=\"line\">     <span class=\"keyword\">boolean</span> triggerGlobalLayoutListener = didLayout</div><div class=\"line\">             || attachInfo.mRecomputeGlobalAttributes;</div><div class=\"line\">     <span class=\"keyword\">if</span> (didLayout) &#123;</div><div class=\"line\"></div><div class=\"line\">         performLayout();<span class=\"comment\">//3.执行View的布局</span></div><div class=\"line\"></div><div class=\"line\">         .....</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> cancelDraw = attachInfo.mTreeObserver.dispatchOnPreDraw() ||</div><div class=\"line\">             viewVisibility != View.VISIBLE;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (!cancelDraw &amp;&amp; !newSurface) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!skipDraw || mReportNextDraw) &#123;</div><div class=\"line\">             ........</div><div class=\"line\">             performDraw();<span class=\"comment\">//执行View绘制</span></div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        ........</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法，可以说是Android系统绘制的核心方法。<strong>View绘制原理的三大流程:View的测量onMeasure -&gt; View的布局onLayout -&gt; View的绘制onDraw，</strong>都在此方法中提现出来了。下面我们一一来看一下相关方法，首先我们来看一下performMeasure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"measure\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);<span class=\"comment\">//核心方法</span></div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>根据上面的分析，我们知道mView就是DecorView,所以这里就是调用DecorView的measure()方法。由<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>博文，我们知道DecorView是继承至FrameLayout,而FrameLayout又继承至ViewGroup，ViewGroup又继承至View,所以这里的measure()方法就是调用View中的measure()方法，具体怎么调用，这里不细说了，想了解的同学可以看看这篇博文<a href=\"http://blog.csdn.net/u014316462/article/details/52054352\">View的绘制原理</a>。下面让我们来看看performLayout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       mLayoutRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\">       mScrollMayChange = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) &#123;</div><div class=\"line\">           Log.v(TAG, <span class=\"string\">\"Laying out \"</span> + host + <span class=\"string\">\" to (\"</span> +</div><div class=\"line\">                   host.getMeasuredWidth() + <span class=\"string\">\", \"</span> + host.getMeasuredHeight() + <span class=\"string\">\")\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里逻辑与测量measure类似，也就是调用DecorView的layout方法，具体View的布局控制细节略。我们再来看看performDraw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performDraw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!mAttachInfo.mScreenOn &amp;&amp; !mReportNextDraw) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> fullRedrawNeeded = mFullRedrawNeeded;</div><div class=\"line\">       mFullRedrawNeeded = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       mIsDrawing = <span class=\"keyword\">true</span>;</div><div class=\"line\">       Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"draw\"</span>);</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           draw(fullRedrawNeeded);<span class=\"comment\">//核心方法</span></div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           mIsDrawing = <span class=\"keyword\">false</span>;</div><div class=\"line\">           Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">       &#125;</div><div class=\"line\">       ......</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续来看看draw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fullRedrawNeeded)</span> </span>&#123;</div><div class=\"line\">       Surface surface = mSurface;</div><div class=\"line\">       .......</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (!dirty.isEmpty() || mIsAnimating) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (attachInfo.mHardwareRenderer != <span class=\"keyword\">null</span> &amp;&amp; attachInfo.mHardwareRenderer.isEnabled()) &#123;</div><div class=\"line\">               <span class=\"comment\">// Draw with hardware renderer.</span></div><div class=\"line\">               mIsAnimating = <span class=\"keyword\">false</span>;</div><div class=\"line\">               mHardwareYOffset = yoff;</div><div class=\"line\">               mResizeAlpha = resizeAlpha;</div><div class=\"line\"></div><div class=\"line\">               mCurrentDirty.set(dirty);</div><div class=\"line\">               mCurrentDirty.union(mPreviousDirty);</div><div class=\"line\">               mPreviousDirty.set(dirty);</div><div class=\"line\">               dirty.setEmpty();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">//1.Hardware渲染(Hardware加速)</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (attachInfo.mHardwareRenderer.draw(mView, attachInfo, <span class=\"keyword\">this</span>,animating ? <span class=\"keyword\">null</span> :mCurrentDirty)) &#123;</div><div class=\"line\">                   mPreviousDirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mWidth, mHeight);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!drawSoftware(surface, attachInfo, yoff, scalingRequired, dirty)) &#123;<span class=\"comment\">//2.Software渲染</span></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (animating) &#123;</div><div class=\"line\">           mFullRedrawNeeded = <span class=\"keyword\">true</span>;</div><div class=\"line\">           scheduleTraversals();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里的绘制方法涉及到两种绘制方式，分别为Hardware渲染(硬件加速)和Software渲染，关于选择那种绘制方式，这里还需要回溯到ViewRootImpl的setView()方法,我们再来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">     * We have one child</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setView</span><span class=\"params\">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mView = view;</div><div class=\"line\"></div><div class=\"line\">                ......</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> RootViewSurfaceTaker) &#123;<span class=\"comment\">//1.mSurfaceHolder赋值</span></div><div class=\"line\">                    mSurfaceHolderCallback =</div><div class=\"line\">                            ((RootViewSurfaceTaker)view).willYouTakeTheSurface();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mSurfaceHolderCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mSurfaceHolder = <span class=\"keyword\">new</span> TakenSurfaceHolder();</div><div class=\"line\">                        mSurfaceHolder.setFormat(PixelFormat.UNKNOWN);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                ........</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (mSurfaceHolder == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//2.是否需要硬件加速</span></div><div class=\"line\">                    enableHardwareAcceleration(mView.getContext(), attrs);</div><div class=\"line\">                &#125;</div><div class=\"line\">            .......</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们知道DecorView是实现了RootViewSurfaceTaker接口的，所以当View为DecorView时，就不会开启硬件加速，不会走Hardware渲染，而其他的View会选择Hardware渲染。因为WindowManager添加的View可能使DecorView，也可能不是DecorView，也可能是一般的View。我们来看看enableHardwareAcceleration()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">enableHardwareAcceleration</span><span class=\"params\">(Context context, WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">      mAttachInfo.mHardwareAccelerated = <span class=\"keyword\">false</span>;</div><div class=\"line\">      mAttachInfo.mHardwareAccelerationRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (mTranslator != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> hardwareAccelerated = </div><div class=\"line\">              (attrs.flags &amp; WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (hardwareAccelerated) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!HardwareRenderer.isAvailable()) &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> fakeHwAccelerated = (attrs.privateFlags &amp;</div><div class=\"line\">                  WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> forceHwAccelerated = (attrs.privateFlags &amp;</div><div class=\"line\">                  WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (!HardwareRenderer.sRendererDisabled || (HardwareRenderer.sSystemRendererDisabled</div><div class=\"line\">                  &amp;&amp; forceHwAccelerated)) &#123;</div><div class=\"line\">              ........</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> translucent = attrs.format != PixelFormat.OPAQUE;</div><div class=\"line\">              mAttachInfo.mHardwareRenderer = HardwareRenderer.createGlRenderer(<span class=\"number\">2</span>, translucent);<span class=\"comment\">//核心方法</span></div><div class=\"line\">              mAttachInfo.mHardwareAccelerated = mAttachInfo.mHardwareAccelerationRequested</div><div class=\"line\">                      = mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fakeHwAccelerated) &#123;</div><div class=\"line\"></div><div class=\"line\">              mAttachInfo.mHardwareAccelerationRequested = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这方法主要是对mAttachInfo.mHardwareRenderer进行赋值，从而在performDraw()方法中可以执行绘制。下面我们来看看上面的绘制方式1，Hardware渲染(硬件加速)，由上知主要是通过attachInfo.mHardwareRenderer.draw()绘制，所以我们来看看HardwareRenderer中的draw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">draw</span><span class=\"params\">(View view, View.AttachInfo attachInfo, HardwareDrawCallbacks callbacks,</div><div class=\"line\">              Rect dirty)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (canDraw()) &#123;</div><div class=\"line\">             .......</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                      .......</div><div class=\"line\"></div><div class=\"line\">                      DisplayList displayList;<span class=\"comment\">//渲染列表</span></div><div class=\"line\"></div><div class=\"line\">                      Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"getDisplayList\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          displayList = view.getDisplayList();</div><div class=\"line\">                      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">                      &#125;</div><div class=\"line\"></div><div class=\"line\">                     .......</div><div class=\"line\"></div><div class=\"line\">                      <span class=\"keyword\">if</span> (displayList != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                          .....</div><div class=\"line\">                          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                              status |= canvas.drawDisplayList(displayList, mRedrawClip,</div><div class=\"line\">                                      DisplayList.FLAG_CLIP_CHILDREN);</div><div class=\"line\">                          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                              Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">                          &#125;</div><div class=\"line\"></div><div class=\"line\">                          .....</div><div class=\"line\"></div><div class=\"line\">                          handleFunctorStatus(attachInfo, status);</div><div class=\"line\">                      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                          view.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                     ....</div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  ......</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">return</span> dirty == <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<p>当displayList为空的时候，也就会调用 view.draw(canvas)方法，即DeocorView的draw()方法。关于DisplayList这里也不细说，它主要是View中的显示列表记录，具体作用这里不作详述了。我们再来看看第二种绘制方式SoftWare渲染,drawSoftware()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawSoftware</span><span class=\"params\">(Surface surface, AttachInfo attachInfo, <span class=\"keyword\">int</span> yoff,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> scalingRequired, Rect dirty)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Draw with software renderer.</span></div><div class=\"line\">       Canvas canvas;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\"></div><div class=\"line\">           canvas = mSurface.lockCanvas(dirty);</div><div class=\"line\"></div><div class=\"line\">          ......</div><div class=\"line\">         </div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Surface.OutOfResourcesException e) &#123;</div><div class=\"line\">          .....</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\"></div><div class=\"line\">               mView.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">               drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class=\"line\">           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Only clear the flag if it was not set during the mView.draw() call</span></div><div class=\"line\">                   attachInfo.mIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里发现，最后也还是调用DecorView的draw方法，具体流程也与measure和layout类似。可以说两种绘制方式最后也还是调用了View的draw方法，可以说是殊途同归。</p>\n<p>到这里我们就把添加的回调绘制帧mTraversalRunnable这个说完了。上面说到，Choreographer通过postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null)方法向系统添加回调并加入绘制帧，然后Android系统通过16ms间隔脉冲实现帧的绘制，从而才将布局内容显示到手机上。</p>\n<p>说到这里，DecorView的绘制流程我们就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"https://www.jianshu.com/p/996bca12eb1d\">Android Choreographer 源码分析</a></p>\n<p><a href=\"https://www.jianshu.com/p/6a680186b95f\">Android App卡顿分析，以及使用Choreographer进行帧率统计监测</a></p>\n<p><a href=\"http://blog.csdn.net/u014316462/article/details/52054352\">View的绘制原理</a></p>"},{"layout":"post","title":"Activity布局加载流程源码分析(I)","date":"2017-12-29T11:20:32.000Z","comments":1,"_content":"---\n最近阅读Android源码，似乎有点发现新大陆的感觉。以前经常接触Android知识，在阅读源码中，开始变得豁然开朗。前两天才写完两篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)和[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)，今天，就急不可耐的想写写Activity布局加载流程，其实，也就是想趁热打铁，好好梳理梳理这部分知识。\n\n在开始梳理之前，我们需要了解一些概念，如：\n\n- **Window：** 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **WindowManager：** 是Window的管理类，管理着Window的添加、更新和删除。\n- **WindowManagerService(AMS)：**是系统窗口管理服务类，具体管理着系统各种各样的Window.\n- **DecorView：**是Window的顶级View，主要负责装载各种View。\n\n# 一、Activity布局加载分析\n我们知道，设置Activity布局内容，主要是在Activity的onCreate()中调用setContentView()方法，下面让我们来看看此方法\n```java\n   \n    public void setContentView(int layoutResID) {\n        getWindow().setContentView(layoutResID);//核心代码\n        initActionBar();\n    }\n```\n<!-- more -->\n\n这里主要调用了getWindow().setContentView()方法，我们来看看Activity中getWindow()\n```java\n    public Window getWindow() {\n        return mWindow;\n    }\n```\n由此知mWindow是Activity一个属性变量，在前面Activity启动流程介绍中，我们知道在Activity启动前都会先调用attach()，而这mWindow就是在attach初始化的时候赋值的，我们来看看Activity的attach源码\n```java\n final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        attachBaseContext(context);\n        mFragments.attachActivity(this);\n        \n        mWindow = PolicyManager.makeNewWindow(this);//核心代码\n\n        ......\n\n        mUiThread = Thread.currentThread();\n        \n        mMainThread = aThread;\n        mInstrumentation = instr;\n        mToken = token;\n        mIdent = ident;\n        mApplication = application;\n        mIntent = intent;\n        mComponent = intent.getComponent();\n        mActivityInfo = info;\n        mTitle = title;\n        mParent = parent;\n        mEmbeddedID = id;\n        mLastNonConfigurationInstances = lastNonConfigurationInstances;\n\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n这里我们来关注一下PolicyManager.makeNewWindow(this)方法，创建Window，我们来看看PolicyManager类\n```java\npublic final class PolicyManager {  \n     \n   private static final String POLICY_IMPL_CLASS_NAME =  \n        \"com.android.internal.policy.impl.Policy\";  \n  \n    private static final IPolicy sPolicy;  \n  \n    static {  \n        try {  \n            Class policyClass = Class.forName(POLICY_IMPL_CLASS_NAME);  \n            sPolicy = (IPolicy)policyClass.newInstance();//反射初始化Policy\n\n        } catch (ClassNotFoundException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be loaded\", ex);  \n        } catch (InstantiationException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be instantiated\", ex);  \n        } catch (IllegalAccessException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be instantiated\", ex);  \n        }  \n    }  \n   \n    public static Window makeNewWindow(Context context) {  \n        return sPolicy.makeNewWindow(context); //核心方法\n    }  \n    .......\n}\n```\n由上易知，这里主要是通过反射初始化Policy，然后利用设计模式[里氏替换原则](http://blog.csdn.net/awenyini/article/details/78793233)调用Policy的makeNewWindow()方法，我们继续来看Policy中的方法\n```java\npublic class Policy implements IPolicy {  \n   \n    ........\n\n    public PhoneWindow makeNewWindow(Context context) {  \n        return new PhoneWindow(context);//核心代码\n    }  \n    ......\n}  \n```\n我们可以发现mWindow其实就是PhoneWindow,在Activity中getWindow().setContentView()方法，就是调用PhoneWindow中的setContentView方法，所以我们这里来看看PhoneWindow中的setContentView()方法\n```java\n    @Override\n    public void setContentView(int layoutResID) {\n        if (mContentParent == null){\n            installDecor();//1.安装装饰器\n        } else {\n            mContentParent.removeAllViews();\n        }\n        mLayoutInflater.inflate(layoutResID, mContentParent);//2.填充我们的布局文件\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n```\n从注释2,我们知道布局填充器mLayoutInflater向mContentParent填充我们的布局内容，而mContentParent是一个ViewGroup,它是怎么赋值的呢？这里我们要来看注释1，当mContentParent为空时，会安装装饰器，我们继续来看phoneWindow中installDecor()方法\n```java\n  private void installDecor() {\n        if (mDecor == null) {\n            mDecor = generateDecor();//1.生成装饰器\n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n        }\n        if (mContentParent == null) {\n            mContentParent = generateLayout(mDecor);//2.对填充我们布局的ViewGroup赋值\n\n            mDecor.makeOptionalFitsSystemWindows();\n\n            mTitleView = (TextView)findViewById(com.android.internal.R.id.title);\n            if (mTitleView != null) {\n                if ((getLocalFeatures() & (1 << FEATURE_NO_TITLE)) != 0) {\n                  .......\n                } else {\n                    mTitleView.setText(mTitle);//设置Activity的title\n                }\n            } else {\n                mActionBar = (ActionBarView) findViewById(com.android.internal.R.id.action_bar);\n                if (mActionBar != null) {\n                   .......mActionBar的处理\n                }\n            }\n        }\n    }\n```\n首先，我们先来看看注释1装饰器的生成方法generateDecor()\n```java\n    protected DecorView generateDecor() {\n        return new DecorView(getContext(), -1);\n    }\n```\n这里主要就是装饰器DecorView的初始化，我们再来看一下DecorView的源码\n```java\n   private final class DecorView extends FrameLayout implements RootViewSurfaceTaker {\n        ......\n\n        public DecorView(Context context, int featureId) {\n            super(context);\n            mFeatureId = featureId;\n        }\n       .......\n```\nDecorView类包括内容还有许多，这里就不介绍了，我们只需知道**DecorView是PhoneWindow的内部类，DecorView继承于FrameLayout，实现RootViewSurfaceTaker接口**。下面我们来看一下mContentParent的生成，即generateLayout(mDecor)方法\n```java\n protected ViewGroup generateLayout(DecorView decor) {\n        \n        .......//初始化一些window属性\n\n        // Inflate the window decor.\n\n        int layoutResource;\n        int features = getLocalFeatures();\n\n        //通过判断Activity的不同feature加载不同的系统默认布局\n        if ((features & ((1 << FEATURE_LEFT_ICON) | (1 << FEATURE_RIGHT_ICON))) != 0) {\n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogTitleIconsDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_title_icons;\n            }\n            \n            removeFeature(FEATURE_ACTION_BAR);\n           \n        } else if ((features & ((1 << FEATURE_PROGRESS) | (1 << FEATURE_INDETERMINATE_PROGRESS))) != 0\n                && (features & (1 << FEATURE_ACTION_BAR)) == 0) {\n            //带进度系统布局\n            layoutResource = com.android.internal.R.layout.screen_progress;\n            \n        } else if ((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) {      \n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogCustomTitleDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_custom_title;\n            }\n           \n            removeFeature(FEATURE_ACTION_BAR);\n        } else if ((features & (1 << FEATURE_NO_TITLE)) == 0) {\n            //无Titile系统布局\n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogTitleDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else if ((features & (1 << FEATURE_ACTION_BAR)) != 0) {\n                if ((features & (1 << FEATURE_ACTION_BAR_OVERLAY)) != 0) {\n                    layoutResource = com.android.internal.R.layout.screen_action_bar_overlay;\n                } else {\n                    layoutResource = com.android.internal.R.layout.screen_action_bar;\n                }\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_title;\n            }\n            \n        } else if ((features & (1 << FEATURE_ACTION_MODE_OVERLAY)) != 0) {\n            layoutResource = com.android.internal.R.layout.screen_simple_overlay_action_mode;\n        } else {\n           \n            layoutResource = com.android.internal.R.layout.screen_simple;//1.一般系统布局\n           \n        }\n\n        mDecor.startChanging();\n\n        View in = mLayoutInflater.inflate(layoutResource, null);\n        decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));//2.向装饰View加入系统布局View\n\n        ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);//3.获取我们Activity能填充的内容ViewGroup\n        ......\n        }\n\n        mDecor.finishChanging();\n\n        return contentParent;\n    }\n```\n这里我们来看一下，系统默认的几种Activity的头部布局xml文件，布局文件的源码位置为：android4.1.1_r1\\frameworks\\base\\core\\res\\res\\layout,我们挑两个文件来看一下：\n\n第一个screen_title.xml\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:fitsSystemWindows=\"true\">\n    <!-- Popout bar for action modes -->\n    <ViewStub android:id=\"@+id/action_mode_bar_stub\"\n              android:inflatedId=\"@+id/action_mode_bar\"\n              android:layout=\"@layout/action_mode_bar\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"wrap_content\" />\n    <FrameLayout\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"?android:attr/windowTitleSize\"\n        style=\"?android:attr/windowTitleBackgroundStyle\">\n        <TextView android:id=\"@android:id/title\" \n            style=\"?android:attr/windowTitleStyle\"\n            android:background=\"@null\"\n            android:fadingEdge=\"horizontal\"\n            android:gravity=\"center_vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </FrameLayout>\n    <FrameLayout android:id=\"@android:id/content\"\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"0dip\"\n        android:layout_weight=\"1\"\n        android:foregroundGravity=\"fill_horizontal|top\"\n        android:foreground=\"?android:attr/windowContentOverlay\" />\n</LinearLayout>\n```\n第二个，screen_simple.xml\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\"\n    android:orientation=\"vertical\">\n    <ViewStub android:id=\"@+id/action_mode_bar_stub\"\n              android:inflatedId=\"@+id/action_mode_bar\"\n              android:layout=\"@layout/action_mode_bar\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"wrap_content\" />\n    <FrameLayout\n         android:id=\"@android:id/content\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         android:foregroundInsidePadding=\"false\"\n         android:foregroundGravity=\"fill_horizontal|top\"\n         android:foreground=\"?android:attr/windowContentOverlay\" />\n</LinearLayout>\n```\n通过对比，我们发现这两个布局文件都有一个共同id为@android:id/content的FrameLayout,其实这也就是我们Activity布局填充容器。我们还发现，这两个布局父布局都是一个线性布局LinearLayout，并且方向都是垂直的，这也验证了我们Activity内容布局一般都是状态栏的下边的模式。我们再来看后面的代码\n```java\n  View in = mLayoutInflater.inflate(layoutResource, null);\n  decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));//2.向装饰View加入系统布局View\n\n  ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);//3.获取我们Activity能填充的内容ViewGroup\n```\n这里向装饰器添加了系统布局View，并从系统布局View中获取了Activity填充内容的容器ViewGroup。其中ID_ANDROID_CONTENT就是com.android.internal.R.id.content，通过(ViewGroup)findViewById(ID_ANDROID_CONTENT)就获取了布局文件中的FrameLayout，即Activity内容填充布局的ViewGroup。这样我们再回到PhoneWindow的setContentView方法\n```java\n    @Override\n    public void setContentView(int layoutResID) {\n        if (mContentParent == null) {\n            installDecor();\n        } else {\n            mContentParent.removeAllViews();\n        }\n        mLayoutInflater.inflate(layoutResID, mContentParent);//核心代码\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n```\n现在mContentParent已经赋完值了，再通过布局填充器mLayoutInflater的inflate()方法，这样我们就把Activity的布局文件添加到装饰器上了。然而，现在虽然装饰器DecorView上已经有了Activity布局内容，但是是什么时候添加到Window上的呢？这里就需要了解[Activity的启动流程](http://blog.csdn.net/awenyini/article/details/78906030)，在Activity的启动流程最后几步会执行ActivityThread中handleLaunchActivity()方法，我们接着此方法继续分析\n```java\nprivate void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n      \n        .......\n\n        Activity a = performLaunchActivity(r, customIntent);//1.创建Activity实例\n\n        if (a != null) {\n            r.createdConfig = new Configuration(mConfiguration);\n            Bundle oldState = r.state;\n\n            handleResumeActivity(r.token, false, r.isForward);//2.调用Activity onResume方法\n\n            .......\n        } else {\n            .......\n        }\n    }\n```\n在注释1处，已经建立Activity的实例，并且执行Activity生命周期的attach()和onCreate()方法。我们知道setContentView()也就在onCreate()方法中调用的,所以这个时候，我们Activity布局文件内容已经装入了装饰器DecorView中，接下来就是把DecorView和Window关联起来，所以下面我们继续来看handleResumeActivity()方法\n```java\n final void handleResumeActivity(IBinder token, boolean clearHide, boolean isForward) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n\n        ActivityClientRecord r = performResumeActivity(token, clearHide);//1.执行Activity的onResume方法\n\n        if (r != null) {\n            final Activity a = r.activity;\n\n            ........\n            boolean willBeVisible = !a.mStartedActivity;\n            if (!willBeVisible) {\n                try {\n                    willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(a.getActivityToken());//2.Activity显示可见\n                } catch (RemoteException e) {\n                }\n            }\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);//3.通过WindowManager将DecorView加入Window,从而显示Window，Activity变为可见。\n                }\n            } else if (!willBeVisible) {\n                r.hideForNow = true;\n            }\n\n            cleanUpPendingRemoveWindows(r);\n\n            if (!r.activity.mFinished && willBeVisible&& r.activity.mDecor != null && !r.hideForNow) {\n             \n                WindowManager.LayoutParams l = r.window.getAttributes();\n                if ((l.softInputMode\n                        & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)\n                        != forwardBit) {\n                    l.softInputMode = (l.softInputMode\n                            & (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))\n                            | forwardBit;\n                    if (r.activity.mVisibleFromClient) {\n                        ViewManager wm = a.getWindowManager();\n                        View decor = r.window.getDecorView();\n                        wm.updateViewLayout(decor, l);//4.更新DecorView,更新Activity界面\n                    }\n                }\n                r.activity.mVisibleFromServer = true;\n                mNumVisibleActivities++;\n                if (r.activity.mVisibleFromClient) {\n                    r.activity.makeVisible();\n                }\n            }\n\n          .......\n\n        } else {\n          .......\n        }\n    }\n```\n在注释1处，调用performResumeActivity(token, clearHide)方法，实际上就是调用activity生命周期的onResume()方法。注释2处，通过Binder跨进程通信，调用ActivityManagerService中willActivityBeVisible()获取显示Activity的控制开关，从而在注释3处，通过WindowManager添加装饰器DecorView到Window,然后，再调用相关View的绘制流程，这样一个有布局的Activity就被加载出来了。\n\n到这里，Activity布局加载流程就是梳理完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n[ Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)\n\n[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)\n\n[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)\n","source":"_posts/tech_android_framework_activity_loadLayout_I.md","raw":"---\nlayout: post\ntitle: \"Activity布局加载流程源码分析(I)\"\ndate: 12/29/2017 7:20:32 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n最近阅读Android源码，似乎有点发现新大陆的感觉。以前经常接触Android知识，在阅读源码中，开始变得豁然开朗。前两天才写完两篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)和[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)，今天，就急不可耐的想写写Activity布局加载流程，其实，也就是想趁热打铁，好好梳理梳理这部分知识。\n\n在开始梳理之前，我们需要了解一些概念，如：\n\n- **Window：** 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **WindowManager：** 是Window的管理类，管理着Window的添加、更新和删除。\n- **WindowManagerService(AMS)：**是系统窗口管理服务类，具体管理着系统各种各样的Window.\n- **DecorView：**是Window的顶级View，主要负责装载各种View。\n\n# 一、Activity布局加载分析\n我们知道，设置Activity布局内容，主要是在Activity的onCreate()中调用setContentView()方法，下面让我们来看看此方法\n```java\n   \n    public void setContentView(int layoutResID) {\n        getWindow().setContentView(layoutResID);//核心代码\n        initActionBar();\n    }\n```\n<!-- more -->\n\n这里主要调用了getWindow().setContentView()方法，我们来看看Activity中getWindow()\n```java\n    public Window getWindow() {\n        return mWindow;\n    }\n```\n由此知mWindow是Activity一个属性变量，在前面Activity启动流程介绍中，我们知道在Activity启动前都会先调用attach()，而这mWindow就是在attach初始化的时候赋值的，我们来看看Activity的attach源码\n```java\n final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        attachBaseContext(context);\n        mFragments.attachActivity(this);\n        \n        mWindow = PolicyManager.makeNewWindow(this);//核心代码\n\n        ......\n\n        mUiThread = Thread.currentThread();\n        \n        mMainThread = aThread;\n        mInstrumentation = instr;\n        mToken = token;\n        mIdent = ident;\n        mApplication = application;\n        mIntent = intent;\n        mComponent = intent.getComponent();\n        mActivityInfo = info;\n        mTitle = title;\n        mParent = parent;\n        mEmbeddedID = id;\n        mLastNonConfigurationInstances = lastNonConfigurationInstances;\n\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n这里我们来关注一下PolicyManager.makeNewWindow(this)方法，创建Window，我们来看看PolicyManager类\n```java\npublic final class PolicyManager {  \n     \n   private static final String POLICY_IMPL_CLASS_NAME =  \n        \"com.android.internal.policy.impl.Policy\";  \n  \n    private static final IPolicy sPolicy;  \n  \n    static {  \n        try {  \n            Class policyClass = Class.forName(POLICY_IMPL_CLASS_NAME);  \n            sPolicy = (IPolicy)policyClass.newInstance();//反射初始化Policy\n\n        } catch (ClassNotFoundException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be loaded\", ex);  \n        } catch (InstantiationException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be instantiated\", ex);  \n        } catch (IllegalAccessException ex) {  \n            throw new RuntimeException(  \n                    POLICY_IMPL_CLASS_NAME + \" could not be instantiated\", ex);  \n        }  \n    }  \n   \n    public static Window makeNewWindow(Context context) {  \n        return sPolicy.makeNewWindow(context); //核心方法\n    }  \n    .......\n}\n```\n由上易知，这里主要是通过反射初始化Policy，然后利用设计模式[里氏替换原则](http://blog.csdn.net/awenyini/article/details/78793233)调用Policy的makeNewWindow()方法，我们继续来看Policy中的方法\n```java\npublic class Policy implements IPolicy {  \n   \n    ........\n\n    public PhoneWindow makeNewWindow(Context context) {  \n        return new PhoneWindow(context);//核心代码\n    }  \n    ......\n}  \n```\n我们可以发现mWindow其实就是PhoneWindow,在Activity中getWindow().setContentView()方法，就是调用PhoneWindow中的setContentView方法，所以我们这里来看看PhoneWindow中的setContentView()方法\n```java\n    @Override\n    public void setContentView(int layoutResID) {\n        if (mContentParent == null){\n            installDecor();//1.安装装饰器\n        } else {\n            mContentParent.removeAllViews();\n        }\n        mLayoutInflater.inflate(layoutResID, mContentParent);//2.填充我们的布局文件\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n```\n从注释2,我们知道布局填充器mLayoutInflater向mContentParent填充我们的布局内容，而mContentParent是一个ViewGroup,它是怎么赋值的呢？这里我们要来看注释1，当mContentParent为空时，会安装装饰器，我们继续来看phoneWindow中installDecor()方法\n```java\n  private void installDecor() {\n        if (mDecor == null) {\n            mDecor = generateDecor();//1.生成装饰器\n            mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n            mDecor.setIsRootNamespace(true);\n        }\n        if (mContentParent == null) {\n            mContentParent = generateLayout(mDecor);//2.对填充我们布局的ViewGroup赋值\n\n            mDecor.makeOptionalFitsSystemWindows();\n\n            mTitleView = (TextView)findViewById(com.android.internal.R.id.title);\n            if (mTitleView != null) {\n                if ((getLocalFeatures() & (1 << FEATURE_NO_TITLE)) != 0) {\n                  .......\n                } else {\n                    mTitleView.setText(mTitle);//设置Activity的title\n                }\n            } else {\n                mActionBar = (ActionBarView) findViewById(com.android.internal.R.id.action_bar);\n                if (mActionBar != null) {\n                   .......mActionBar的处理\n                }\n            }\n        }\n    }\n```\n首先，我们先来看看注释1装饰器的生成方法generateDecor()\n```java\n    protected DecorView generateDecor() {\n        return new DecorView(getContext(), -1);\n    }\n```\n这里主要就是装饰器DecorView的初始化，我们再来看一下DecorView的源码\n```java\n   private final class DecorView extends FrameLayout implements RootViewSurfaceTaker {\n        ......\n\n        public DecorView(Context context, int featureId) {\n            super(context);\n            mFeatureId = featureId;\n        }\n       .......\n```\nDecorView类包括内容还有许多，这里就不介绍了，我们只需知道**DecorView是PhoneWindow的内部类，DecorView继承于FrameLayout，实现RootViewSurfaceTaker接口**。下面我们来看一下mContentParent的生成，即generateLayout(mDecor)方法\n```java\n protected ViewGroup generateLayout(DecorView decor) {\n        \n        .......//初始化一些window属性\n\n        // Inflate the window decor.\n\n        int layoutResource;\n        int features = getLocalFeatures();\n\n        //通过判断Activity的不同feature加载不同的系统默认布局\n        if ((features & ((1 << FEATURE_LEFT_ICON) | (1 << FEATURE_RIGHT_ICON))) != 0) {\n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogTitleIconsDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_title_icons;\n            }\n            \n            removeFeature(FEATURE_ACTION_BAR);\n           \n        } else if ((features & ((1 << FEATURE_PROGRESS) | (1 << FEATURE_INDETERMINATE_PROGRESS))) != 0\n                && (features & (1 << FEATURE_ACTION_BAR)) == 0) {\n            //带进度系统布局\n            layoutResource = com.android.internal.R.layout.screen_progress;\n            \n        } else if ((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) {      \n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogCustomTitleDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_custom_title;\n            }\n           \n            removeFeature(FEATURE_ACTION_BAR);\n        } else if ((features & (1 << FEATURE_NO_TITLE)) == 0) {\n            //无Titile系统布局\n            if (mIsFloating) {\n                TypedValue res = new TypedValue();\n                getContext().getTheme().resolveAttribute(\n                        com.android.internal.R.attr.dialogTitleDecorLayout, res, true);\n                layoutResource = res.resourceId;\n            } else if ((features & (1 << FEATURE_ACTION_BAR)) != 0) {\n                if ((features & (1 << FEATURE_ACTION_BAR_OVERLAY)) != 0) {\n                    layoutResource = com.android.internal.R.layout.screen_action_bar_overlay;\n                } else {\n                    layoutResource = com.android.internal.R.layout.screen_action_bar;\n                }\n            } else {\n                layoutResource = com.android.internal.R.layout.screen_title;\n            }\n            \n        } else if ((features & (1 << FEATURE_ACTION_MODE_OVERLAY)) != 0) {\n            layoutResource = com.android.internal.R.layout.screen_simple_overlay_action_mode;\n        } else {\n           \n            layoutResource = com.android.internal.R.layout.screen_simple;//1.一般系统布局\n           \n        }\n\n        mDecor.startChanging();\n\n        View in = mLayoutInflater.inflate(layoutResource, null);\n        decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));//2.向装饰View加入系统布局View\n\n        ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);//3.获取我们Activity能填充的内容ViewGroup\n        ......\n        }\n\n        mDecor.finishChanging();\n\n        return contentParent;\n    }\n```\n这里我们来看一下，系统默认的几种Activity的头部布局xml文件，布局文件的源码位置为：android4.1.1_r1\\frameworks\\base\\core\\res\\res\\layout,我们挑两个文件来看一下：\n\n第一个screen_title.xml\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:fitsSystemWindows=\"true\">\n    <!-- Popout bar for action modes -->\n    <ViewStub android:id=\"@+id/action_mode_bar_stub\"\n              android:inflatedId=\"@+id/action_mode_bar\"\n              android:layout=\"@layout/action_mode_bar\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"wrap_content\" />\n    <FrameLayout\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"?android:attr/windowTitleSize\"\n        style=\"?android:attr/windowTitleBackgroundStyle\">\n        <TextView android:id=\"@android:id/title\" \n            style=\"?android:attr/windowTitleStyle\"\n            android:background=\"@null\"\n            android:fadingEdge=\"horizontal\"\n            android:gravity=\"center_vertical\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </FrameLayout>\n    <FrameLayout android:id=\"@android:id/content\"\n        android:layout_width=\"match_parent\" \n        android:layout_height=\"0dip\"\n        android:layout_weight=\"1\"\n        android:foregroundGravity=\"fill_horizontal|top\"\n        android:foreground=\"?android:attr/windowContentOverlay\" />\n</LinearLayout>\n```\n第二个，screen_simple.xml\n```java\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\"\n    android:orientation=\"vertical\">\n    <ViewStub android:id=\"@+id/action_mode_bar_stub\"\n              android:inflatedId=\"@+id/action_mode_bar\"\n              android:layout=\"@layout/action_mode_bar\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"wrap_content\" />\n    <FrameLayout\n         android:id=\"@android:id/content\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         android:foregroundInsidePadding=\"false\"\n         android:foregroundGravity=\"fill_horizontal|top\"\n         android:foreground=\"?android:attr/windowContentOverlay\" />\n</LinearLayout>\n```\n通过对比，我们发现这两个布局文件都有一个共同id为@android:id/content的FrameLayout,其实这也就是我们Activity布局填充容器。我们还发现，这两个布局父布局都是一个线性布局LinearLayout，并且方向都是垂直的，这也验证了我们Activity内容布局一般都是状态栏的下边的模式。我们再来看后面的代码\n```java\n  View in = mLayoutInflater.inflate(layoutResource, null);\n  decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));//2.向装饰View加入系统布局View\n\n  ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);//3.获取我们Activity能填充的内容ViewGroup\n```\n这里向装饰器添加了系统布局View，并从系统布局View中获取了Activity填充内容的容器ViewGroup。其中ID_ANDROID_CONTENT就是com.android.internal.R.id.content，通过(ViewGroup)findViewById(ID_ANDROID_CONTENT)就获取了布局文件中的FrameLayout，即Activity内容填充布局的ViewGroup。这样我们再回到PhoneWindow的setContentView方法\n```java\n    @Override\n    public void setContentView(int layoutResID) {\n        if (mContentParent == null) {\n            installDecor();\n        } else {\n            mContentParent.removeAllViews();\n        }\n        mLayoutInflater.inflate(layoutResID, mContentParent);//核心代码\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n```\n现在mContentParent已经赋完值了，再通过布局填充器mLayoutInflater的inflate()方法，这样我们就把Activity的布局文件添加到装饰器上了。然而，现在虽然装饰器DecorView上已经有了Activity布局内容，但是是什么时候添加到Window上的呢？这里就需要了解[Activity的启动流程](http://blog.csdn.net/awenyini/article/details/78906030)，在Activity的启动流程最后几步会执行ActivityThread中handleLaunchActivity()方法，我们接着此方法继续分析\n```java\nprivate void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n      \n        .......\n\n        Activity a = performLaunchActivity(r, customIntent);//1.创建Activity实例\n\n        if (a != null) {\n            r.createdConfig = new Configuration(mConfiguration);\n            Bundle oldState = r.state;\n\n            handleResumeActivity(r.token, false, r.isForward);//2.调用Activity onResume方法\n\n            .......\n        } else {\n            .......\n        }\n    }\n```\n在注释1处，已经建立Activity的实例，并且执行Activity生命周期的attach()和onCreate()方法。我们知道setContentView()也就在onCreate()方法中调用的,所以这个时候，我们Activity布局文件内容已经装入了装饰器DecorView中，接下来就是把DecorView和Window关联起来，所以下面我们继续来看handleResumeActivity()方法\n```java\n final void handleResumeActivity(IBinder token, boolean clearHide, boolean isForward) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n\n        ActivityClientRecord r = performResumeActivity(token, clearHide);//1.执行Activity的onResume方法\n\n        if (r != null) {\n            final Activity a = r.activity;\n\n            ........\n            boolean willBeVisible = !a.mStartedActivity;\n            if (!willBeVisible) {\n                try {\n                    willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(a.getActivityToken());//2.Activity显示可见\n                } catch (RemoteException e) {\n                }\n            }\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);//3.通过WindowManager将DecorView加入Window,从而显示Window，Activity变为可见。\n                }\n            } else if (!willBeVisible) {\n                r.hideForNow = true;\n            }\n\n            cleanUpPendingRemoveWindows(r);\n\n            if (!r.activity.mFinished && willBeVisible&& r.activity.mDecor != null && !r.hideForNow) {\n             \n                WindowManager.LayoutParams l = r.window.getAttributes();\n                if ((l.softInputMode\n                        & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)\n                        != forwardBit) {\n                    l.softInputMode = (l.softInputMode\n                            & (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))\n                            | forwardBit;\n                    if (r.activity.mVisibleFromClient) {\n                        ViewManager wm = a.getWindowManager();\n                        View decor = r.window.getDecorView();\n                        wm.updateViewLayout(decor, l);//4.更新DecorView,更新Activity界面\n                    }\n                }\n                r.activity.mVisibleFromServer = true;\n                mNumVisibleActivities++;\n                if (r.activity.mVisibleFromClient) {\n                    r.activity.makeVisible();\n                }\n            }\n\n          .......\n\n        } else {\n          .......\n        }\n    }\n```\n在注释1处，调用performResumeActivity(token, clearHide)方法，实际上就是调用activity生命周期的onResume()方法。注释2处，通过Binder跨进程通信，调用ActivityManagerService中willActivityBeVisible()获取显示Activity的控制开关，从而在注释3处，通过WindowManager添加装饰器DecorView到Window,然后，再调用相关View的绘制流程，这样一个有布局的Activity就被加载出来了。\n\n到这里，Activity布局加载流程就是梳理完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n[ Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)\n\n[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)\n\n[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)\n","slug":"tech_android_framework_activity_loadLayout_I","published":1,"updated":"2019-06-27T08:15:15.305Z","photos":[],"link":"","_id":"cjxfjaest004systg003w9n31","content":"<hr>\n<p>最近阅读Android源码，似乎有点发现新大陆的感觉。以前经常接触Android知识，在阅读源码中，开始变得豁然开朗。前两天才写完两篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/78915225\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(Launcher中)</a>，今天，就急不可耐的想写写Activity布局加载流程，其实，也就是想趁热打铁，好好梳理梳理这部分知识。</p>\n<p>在开始梳理之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>Window：</strong> 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。</li>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>WindowManager：</strong> 是Window的管理类，管理着Window的添加、更新和删除。</li>\n<li><strong>WindowManagerService(AMS)：</strong>是系统窗口管理服务类，具体管理着系统各种各样的Window.</li>\n<li><strong>DecorView：</strong>是Window的顶级View，主要负责装载各种View。</li>\n</ul>\n<h1 id=\"一、Activity布局加载分析\"><a href=\"#一、Activity布局加载分析\" class=\"headerlink\" title=\"一、Activity布局加载分析\"></a>一、Activity布局加载分析</h1><p>我们知道，设置Activity布局内容，主要是在Activity的onCreate()中调用setContentView()方法，下面让我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    getWindow().setContentView(layoutResID);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    initActionBar();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这里主要调用了getWindow().setContentView()方法，我们来看看Activity中getWindow()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Window <span class=\"title\">getWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此知mWindow是Activity一个属性变量，在前面Activity启动流程介绍中，我们知道在Activity启动前都会先调用attach()，而这mWindow就是在attach初始化的时候赋值的，我们来看看Activity的attach源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></div><div class=\"line\">           Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">           Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">           CharSequence title, Activity parent, String id,</div><div class=\"line\">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config) &#123;</div><div class=\"line\">       attachBaseContext(context);</div><div class=\"line\">       mFragments.attachActivity(<span class=\"keyword\">this</span>);</div><div class=\"line\">       </div><div class=\"line\">       mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">       ......</div><div class=\"line\"></div><div class=\"line\">       mUiThread = Thread.currentThread();</div><div class=\"line\">       </div><div class=\"line\">       mMainThread = aThread;</div><div class=\"line\">       mInstrumentation = instr;</div><div class=\"line\">       mToken = token;</div><div class=\"line\">       mIdent = ident;</div><div class=\"line\">       mApplication = application;</div><div class=\"line\">       mIntent = intent;</div><div class=\"line\">       mComponent = intent.getComponent();</div><div class=\"line\">       mActivityInfo = info;</div><div class=\"line\">       mTitle = title;</div><div class=\"line\">       mParent = parent;</div><div class=\"line\">       mEmbeddedID = id;</div><div class=\"line\">       mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class=\"line\"></div><div class=\"line\">       mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">               (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">       &#125;</div><div class=\"line\">       mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">       mCurrentConfig = config;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们来关注一下PolicyManager.makeNewWindow(this)方法，创建Window，我们来看看PolicyManager类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolicyManager</span> </span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String POLICY_IMPL_CLASS_NAME =  </div><div class=\"line\">        <span class=\"string\">\"com.android.internal.policy.impl.Policy\"</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> IPolicy sPolicy;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            Class policyClass = Class.forName(POLICY_IMPL_CLASS_NAME);  </div><div class=\"line\">            sPolicy = (IPolicy)policyClass.newInstance();<span class=\"comment\">//反射初始化Policy</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be loaded\"</span>, ex);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be instantiated\"</span>, ex);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be instantiated\"</span>, ex);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Window <span class=\"title\">makeNewWindow</span><span class=\"params\">(Context context)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> sPolicy.makeNewWindow(context); <span class=\"comment\">//核心方法</span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，这里主要是通过反射初始化Policy，然后利用设计模式<a href=\"http://blog.csdn.net/awenyini/article/details/78793233\" target=\"_blank\" rel=\"external\">里氏替换原则</a>调用Policy的makeNewWindow()方法，我们继续来看Policy中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Policy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPolicy</span> </span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">    ........</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PhoneWindow <span class=\"title\">makeNewWindow</span><span class=\"params\">(Context context)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PhoneWindow(context);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以发现mWindow其实就是PhoneWindow,在Activity中getWindow().setContentView()方法，就是调用PhoneWindow中的setContentView方法，所以我们这里来看看PhoneWindow中的setContentView()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        installDecor();<span class=\"comment\">//1.安装装饰器</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//2.填充我们的布局文件</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从注释2,我们知道布局填充器mLayoutInflater向mContentParent填充我们的布局内容，而mContentParent是一个ViewGroup,它是怎么赋值的呢？这里我们要来看注释1，当mContentParent为空时，会安装装饰器，我们继续来看phoneWindow中installDecor()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mDecor = generateDecor();<span class=\"comment\">//1.生成装饰器</span></div><div class=\"line\">          mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">          mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mContentParent = generateLayout(mDecor);<span class=\"comment\">//2.对填充我们布局的ViewGroup赋值</span></div><div class=\"line\"></div><div class=\"line\">          mDecor.makeOptionalFitsSystemWindows();</div><div class=\"line\"></div><div class=\"line\">          mTitleView = (TextView)findViewById(com.android.internal.R.id.title);</div><div class=\"line\">          <span class=\"keyword\">if</span> (mTitleView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> ((getLocalFeatures() &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_NO_TITLE)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                .......</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  mTitleView.setText(mTitle);<span class=\"comment\">//设置Activity的title</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              mActionBar = (ActionBarView) findViewById(com.android.internal.R.id.action_bar);</div><div class=\"line\">              <span class=\"keyword\">if</span> (mActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 .......mActionBar的处理</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>首先，我们先来看看注释1装饰器的生成方法generateDecor()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> DecorView <span class=\"title\">generateDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DecorView(getContext(), -<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是装饰器DecorView的初始化，我们再来看一下DecorView的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorView</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">RootViewSurfaceTaker</span> </span>&#123;</div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecorView</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">         mFeatureId = featureId;</div><div class=\"line\">     &#125;</div><div class=\"line\">    .......</div></pre></td></tr></table></figure></p>\n<p>DecorView类包括内容还有许多，这里就不介绍了，我们只需知道<strong>DecorView是PhoneWindow的内部类，DecorView继承于FrameLayout，实现RootViewSurfaceTaker接口</strong>。下面我们来看一下mContentParent的生成，即generateLayout(mDecor)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">       .......<span class=\"comment\">//初始化一些window属性</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Inflate the window decor.</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">       <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//通过判断Activity的不同feature加载不同的系统默认布局</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((features &amp; ((<span class=\"number\">1</span> &lt;&lt; FEATURE_LEFT_ICON) | (<span class=\"number\">1</span> &lt;&lt; FEATURE_RIGHT_ICON))) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogTitleIconsDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_title_icons;</div><div class=\"line\">           &#125;</div><div class=\"line\">           </div><div class=\"line\">           removeFeature(FEATURE_ACTION_BAR);</div><div class=\"line\">          </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; ((<span class=\"number\">1</span> &lt;&lt; FEATURE_PROGRESS) | (<span class=\"number\">1</span> &lt;&lt; FEATURE_INDETERMINATE_PROGRESS))) != <span class=\"number\">0</span></div><div class=\"line\">               &amp;&amp; (features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//带进度系统布局</span></div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_progress;</div><div class=\"line\">           </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_CUSTOM_TITLE)) != <span class=\"number\">0</span>) &#123;      </div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogCustomTitleDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_custom_title;</div><div class=\"line\">           &#125;</div><div class=\"line\">          </div><div class=\"line\">           removeFeature(FEATURE_ACTION_BAR);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_NO_TITLE)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//无Titile系统布局</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogTitleDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR_OVERLAY)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   layoutResource = com.android.internal.R.layout.screen_action_bar_overlay;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   layoutResource = com.android.internal.R.layout.screen_action_bar;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_title;</div><div class=\"line\">           &#125;</div><div class=\"line\">           </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_MODE_OVERLAY)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_simple_overlay_action_mode;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          </div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_simple;<span class=\"comment\">//1.一般系统布局</span></div><div class=\"line\">          </div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mDecor.startChanging();</div><div class=\"line\"></div><div class=\"line\">       View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">       decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));<span class=\"comment\">//2.向装饰View加入系统布局View</span></div><div class=\"line\"></div><div class=\"line\">       ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);<span class=\"comment\">//3.获取我们Activity能填充的内容ViewGroup</span></div><div class=\"line\">       ......</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mDecor.finishChanging();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们来看一下，系统默认的几种Activity的头部布局xml文件，布局文件的源码位置为：android4.1.1_r1\\frameworks\\base\\core\\res\\res\\layout,我们挑两个文件来看一下：</p>\n<p>第一个screen_title.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- Popout bar for action modes --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ViewStub</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_mode_bar_stub\"</span></span></div><div class=\"line\">              <span class=\"attr\">android:inflatedId</span>=<span class=\"string\">\"@+id/action_mode_bar\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout</span>=<span class=\"string\">\"@layout/action_mode_bar\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> </div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/windowTitleSize\"</span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/windowTitleBackgroundStyle\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/title\"</span> </span></div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/windowTitleStyle\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@null\"</span></div><div class=\"line\">            <span class=\"attr\">android:fadingEdge</span>=<span class=\"string\">\"horizontal\"</span></div><div class=\"line\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_vertical\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/content\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> </div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">        <span class=\"attr\">android:foregroundGravity</span>=<span class=\"string\">\"fill_horizontal|top\"</span></div><div class=\"line\">        <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/windowContentOverlay\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>第二个，screen_simple.xml<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"</div><div class=\"line\">    android:fitsSystemWindows=\"true\"</div><div class=\"line\">    android:orientation=\"vertical\"&gt;</div><div class=\"line\">    &lt;ViewStub android:id=\"@+id/action_mode_bar_stub\"</div><div class=\"line\">              android:inflatedId=\"@+id/action_mode_bar\"</div><div class=\"line\">              android:layout=\"@layout/action_mode_bar\"</div><div class=\"line\">              android:layout_width=\"match_parent\"</div><div class=\"line\">              android:layout_height=\"wrap_content\" /&gt;</div><div class=\"line\">    &lt;FrameLayout</div><div class=\"line\">         android:id=\"@android:id/content\"</div><div class=\"line\">         android:layout_width=\"match_parent\"</div><div class=\"line\">         android:layout_height=\"match_parent\"</div><div class=\"line\">         android:foregroundInsidePadding=\"false\"</div><div class=\"line\">         android:foregroundGravity=\"fill_horizontal|top\"</div><div class=\"line\">         android:foreground=\"?android:attr/windowContentOverlay\" /&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>通过对比，我们发现这两个布局文件都有一个共同id为@android:id/content的FrameLayout,其实这也就是我们Activity布局填充容器。我们还发现，这两个布局父布局都是一个线性布局LinearLayout，并且方向都是垂直的，这也验证了我们Activity内容布局一般都是状态栏的下边的模式。我们再来看后面的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));<span class=\"comment\">//2.向装饰View加入系统布局View</span></div><div class=\"line\"></div><div class=\"line\">ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);<span class=\"comment\">//3.获取我们Activity能填充的内容ViewGroup</span></div></pre></td></tr></table></figure></p>\n<p>这里向装饰器添加了系统布局View，并从系统布局View中获取了Activity填充内容的容器ViewGroup。其中ID_ANDROID_CONTENT就是com.android.internal.R.id.content，通过(ViewGroup)findViewById(ID_ANDROID_CONTENT)就获取了布局文件中的FrameLayout，即Activity内容填充布局的ViewGroup。这样我们再回到PhoneWindow的setContentView方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在mContentParent已经赋完值了，再通过布局填充器mLayoutInflater的inflate()方法，这样我们就把Activity的布局文件添加到装饰器上了。然而，现在虽然装饰器DecorView上已经有了Activity布局内容，但是是什么时候添加到Window上的呢？这里就需要了解<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity的启动流程</a>，在Activity的启动流程最后几步会执行ActivityThread中handleLaunchActivity()方法，我们接着此方法继续分析<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">        .......</div><div class=\"line\"></div><div class=\"line\">        Activity a = performLaunchActivity(r, customIntent);<span class=\"comment\">//1.创建Activity实例</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (a != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            r.createdConfig = <span class=\"keyword\">new</span> Configuration(mConfiguration);</div><div class=\"line\">            Bundle oldState = r.state;</div><div class=\"line\"></div><div class=\"line\">            handleResumeActivity(r.token, <span class=\"keyword\">false</span>, r.isForward);<span class=\"comment\">//2.调用Activity onResume方法</span></div><div class=\"line\"></div><div class=\"line\">            .......</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            .......</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，已经建立Activity的实例，并且执行Activity生命周期的attach()和onCreate()方法。我们知道setContentView()也就在onCreate()方法中调用的,所以这个时候，我们Activity布局文件内容已经装入了装饰器DecorView中，接下来就是把DecorView和Window关联起来，所以下面我们继续来看handleResumeActivity()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// If we are getting ready to gc after going to the background, well</span></div><div class=\"line\">       <span class=\"comment\">// we are back active so skip it.</span></div><div class=\"line\">       unscheduleGcIdler();</div><div class=\"line\"></div><div class=\"line\">       ActivityClientRecord r = performResumeActivity(token, clearHide);<span class=\"comment\">//1.执行Activity的onResume方法</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Activity a = r.activity;</div><div class=\"line\"></div><div class=\"line\">           ........</div><div class=\"line\">           <span class=\"keyword\">boolean</span> willBeVisible = !a.mStartedActivity;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!willBeVisible) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(a.getActivityToken());<span class=\"comment\">//2.Activity显示可见</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (r.window == <span class=\"keyword\">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">               r.window = r.activity.getWindow();</div><div class=\"line\">               View decor = r.window.getDecorView();</div><div class=\"line\">               decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">               ViewManager wm = a.getWindowManager();</div><div class=\"line\">               WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">               a.mDecor = decor;</div><div class=\"line\">               l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">               l.softInputMode |= forwardBit;</div><div class=\"line\">               <span class=\"keyword\">if</span> (a.mVisibleFromClient) &#123;</div><div class=\"line\">                   a.mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">                   wm.addView(decor, l);<span class=\"comment\">//3.通过WindowManager将DecorView加入Window,从而显示Window，Activity变为可见。</span></div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!willBeVisible) &#123;</div><div class=\"line\">               r.hideForNow = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           cleanUpPendingRemoveWindows(r);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible&amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">            </div><div class=\"line\">               WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">               <span class=\"keyword\">if</span> ((l.softInputMode</div><div class=\"line\">                       &amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)</div><div class=\"line\">                       != forwardBit) &#123;</div><div class=\"line\">                   l.softInputMode = (l.softInputMode</div><div class=\"line\">                           &amp; (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))</div><div class=\"line\">                           | forwardBit;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                       ViewManager wm = a.getWindowManager();</div><div class=\"line\">                       View decor = r.window.getDecorView();</div><div class=\"line\">                       wm.updateViewLayout(decor, l);<span class=\"comment\">//4.更新DecorView,更新Activity界面</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               r.activity.mVisibleFromServer = <span class=\"keyword\">true</span>;</div><div class=\"line\">               mNumVisibleActivities++;</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">         .......</div><div class=\"line\"></div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         .......</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，调用performResumeActivity(token, clearHide)方法，实际上就是调用activity生命周期的onResume()方法。注释2处，通过Binder跨进程通信，调用ActivityManagerService中willActivityBeVisible()获取显示Activity的控制开关，从而在注释3处，通过WindowManager添加装饰器DecorView到Window,然后，再调用相关View的绘制流程，这样一个有布局的Activity就被加载出来了。</p>\n<p>到这里，Activity布局加载流程就是梳理完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\"> Binder通信机制原理解析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78915225\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(Launcher中)</a></p>\n","excerpt":"<hr>\n<p>最近阅读Android源码，似乎有点发现新大陆的感觉。以前经常接触Android知识，在阅读源码中，开始变得豁然开朗。前两天才写完两篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/78915225\">Activity启动流程源码分析(Launcher中)</a>，今天，就急不可耐的想写写Activity布局加载流程，其实，也就是想趁热打铁，好好梳理梳理这部分知识。</p>\n<p>在开始梳理之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>Window：</strong> 是一个抽象类，表示是一个窗口。Android系统中的界面，也都是以窗口的形式存在的。</li>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>WindowManager：</strong> 是Window的管理类，管理着Window的添加、更新和删除。</li>\n<li><strong>WindowManagerService(AMS)：</strong>是系统窗口管理服务类，具体管理着系统各种各样的Window.</li>\n<li><strong>DecorView：</strong>是Window的顶级View，主要负责装载各种View。</li>\n</ul>\n<h1 id=\"一、Activity布局加载分析\"><a href=\"#一、Activity布局加载分析\" class=\"headerlink\" title=\"一、Activity布局加载分析\"></a>一、Activity布局加载分析</h1><p>我们知道，设置Activity布局内容，主要是在Activity的onCreate()中调用setContentView()方法，下面让我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    getWindow().setContentView(layoutResID);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    initActionBar();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>这里主要调用了getWindow().setContentView()方法，我们来看看Activity中getWindow()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Window <span class=\"title\">getWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mWindow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此知mWindow是Activity一个属性变量，在前面Activity启动流程介绍中，我们知道在Activity启动前都会先调用attach()，而这mWindow就是在attach初始化的时候赋值的，我们来看看Activity的attach源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</div><div class=\"line\">           Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">           Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">           CharSequence title, Activity parent, String id,</div><div class=\"line\">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config)</span> </span>&#123;</div><div class=\"line\">       attachBaseContext(context);</div><div class=\"line\">       mFragments.attachActivity(<span class=\"keyword\">this</span>);</div><div class=\"line\">       </div><div class=\"line\">       mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">       ......</div><div class=\"line\"></div><div class=\"line\">       mUiThread = Thread.currentThread();</div><div class=\"line\">       </div><div class=\"line\">       mMainThread = aThread;</div><div class=\"line\">       mInstrumentation = instr;</div><div class=\"line\">       mToken = token;</div><div class=\"line\">       mIdent = ident;</div><div class=\"line\">       mApplication = application;</div><div class=\"line\">       mIntent = intent;</div><div class=\"line\">       mComponent = intent.getComponent();</div><div class=\"line\">       mActivityInfo = info;</div><div class=\"line\">       mTitle = title;</div><div class=\"line\">       mParent = parent;</div><div class=\"line\">       mEmbeddedID = id;</div><div class=\"line\">       mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class=\"line\"></div><div class=\"line\">       mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">               (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">       &#125;</div><div class=\"line\">       mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">       mCurrentConfig = config;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们来关注一下PolicyManager.makeNewWindow(this)方法，创建Window，我们来看看PolicyManager类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolicyManager</span> </span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String POLICY_IMPL_CLASS_NAME =  </div><div class=\"line\">        <span class=\"string\">\"com.android.internal.policy.impl.Policy\"</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> IPolicy sPolicy;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            Class policyClass = Class.forName(POLICY_IMPL_CLASS_NAME);  </div><div class=\"line\">            sPolicy = (IPolicy)policyClass.newInstance();<span class=\"comment\">//反射初始化Policy</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be loaded\"</span>, ex);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be instantiated\"</span>, ex);  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;  </div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(  </div><div class=\"line\">                    POLICY_IMPL_CLASS_NAME + <span class=\"string\">\" could not be instantiated\"</span>, ex);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Window <span class=\"title\">makeNewWindow</span><span class=\"params\">(Context context)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> sPolicy.makeNewWindow(context); <span class=\"comment\">//核心方法</span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，这里主要是通过反射初始化Policy，然后利用设计模式<a href=\"http://blog.csdn.net/awenyini/article/details/78793233\">里氏替换原则</a>调用Policy的makeNewWindow()方法，我们继续来看Policy中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Policy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPolicy</span> </span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">    ........</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PhoneWindow <span class=\"title\">makeNewWindow</span><span class=\"params\">(Context context)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PhoneWindow(context);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以发现mWindow其实就是PhoneWindow,在Activity中getWindow().setContentView()方法，就是调用PhoneWindow中的setContentView方法，所以我们这里来看看PhoneWindow中的setContentView()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        installDecor();<span class=\"comment\">//1.安装装饰器</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//2.填充我们的布局文件</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从注释2,我们知道布局填充器mLayoutInflater向mContentParent填充我们的布局内容，而mContentParent是一个ViewGroup,它是怎么赋值的呢？这里我们要来看注释1，当mContentParent为空时，会安装装饰器，我们继续来看phoneWindow中installDecor()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mDecor = generateDecor();<span class=\"comment\">//1.生成装饰器</span></div><div class=\"line\">          mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class=\"line\">          mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mContentParent = generateLayout(mDecor);<span class=\"comment\">//2.对填充我们布局的ViewGroup赋值</span></div><div class=\"line\"></div><div class=\"line\">          mDecor.makeOptionalFitsSystemWindows();</div><div class=\"line\"></div><div class=\"line\">          mTitleView = (TextView)findViewById(com.android.internal.R.id.title);</div><div class=\"line\">          <span class=\"keyword\">if</span> (mTitleView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> ((getLocalFeatures() &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_NO_TITLE)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                .......</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  mTitleView.setText(mTitle);<span class=\"comment\">//设置Activity的title</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              mActionBar = (ActionBarView) findViewById(com.android.internal.R.id.action_bar);</div><div class=\"line\">              <span class=\"keyword\">if</span> (mActionBar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 .......mActionBar的处理</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>首先，我们先来看看注释1装饰器的生成方法generateDecor()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> DecorView <span class=\"title\">generateDecor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DecorView(getContext(), -<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是装饰器DecorView的初始化，我们再来看一下DecorView的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorView</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">RootViewSurfaceTaker</span> </span>&#123;</div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecorView</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> featureId)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">         mFeatureId = featureId;</div><div class=\"line\">     &#125;</div><div class=\"line\">    .......</div></pre></td></tr></table></figure></p>\n<p>DecorView类包括内容还有许多，这里就不介绍了，我们只需知道<strong>DecorView是PhoneWindow的内部类，DecorView继承于FrameLayout，实现RootViewSurfaceTaker接口</strong>。下面我们来看一下mContentParent的生成，即generateLayout(mDecor)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">       .......<span class=\"comment\">//初始化一些window属性</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Inflate the window decor.</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> layoutResource;</div><div class=\"line\">       <span class=\"keyword\">int</span> features = getLocalFeatures();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//通过判断Activity的不同feature加载不同的系统默认布局</span></div><div class=\"line\">       <span class=\"keyword\">if</span> ((features &amp; ((<span class=\"number\">1</span> &lt;&lt; FEATURE_LEFT_ICON) | (<span class=\"number\">1</span> &lt;&lt; FEATURE_RIGHT_ICON))) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogTitleIconsDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_title_icons;</div><div class=\"line\">           &#125;</div><div class=\"line\">           </div><div class=\"line\">           removeFeature(FEATURE_ACTION_BAR);</div><div class=\"line\">          </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; ((<span class=\"number\">1</span> &lt;&lt; FEATURE_PROGRESS) | (<span class=\"number\">1</span> &lt;&lt; FEATURE_INDETERMINATE_PROGRESS))) != <span class=\"number\">0</span></div><div class=\"line\">               &amp;&amp; (features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//带进度系统布局</span></div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_progress;</div><div class=\"line\">           </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_CUSTOM_TITLE)) != <span class=\"number\">0</span>) &#123;      </div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogCustomTitleDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_custom_title;</div><div class=\"line\">           &#125;</div><div class=\"line\">          </div><div class=\"line\">           removeFeature(FEATURE_ACTION_BAR);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_NO_TITLE)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//无Titile系统布局</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (mIsFloating) &#123;</div><div class=\"line\">               TypedValue res = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">               getContext().getTheme().resolveAttribute(</div><div class=\"line\">                       com.android.internal.R.attr.dialogTitleDecorLayout, res, <span class=\"keyword\">true</span>);</div><div class=\"line\">               layoutResource = res.resourceId;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_BAR_OVERLAY)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                   layoutResource = com.android.internal.R.layout.screen_action_bar_overlay;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   layoutResource = com.android.internal.R.layout.screen_action_bar;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               layoutResource = com.android.internal.R.layout.screen_title;</div><div class=\"line\">           &#125;</div><div class=\"line\">           </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((features &amp; (<span class=\"number\">1</span> &lt;&lt; FEATURE_ACTION_MODE_OVERLAY)) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_simple_overlay_action_mode;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          </div><div class=\"line\">           layoutResource = com.android.internal.R.layout.screen_simple;<span class=\"comment\">//1.一般系统布局</span></div><div class=\"line\">          </div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mDecor.startChanging();</div><div class=\"line\"></div><div class=\"line\">       View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">       decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));<span class=\"comment\">//2.向装饰View加入系统布局View</span></div><div class=\"line\"></div><div class=\"line\">       ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);<span class=\"comment\">//3.获取我们Activity能填充的内容ViewGroup</span></div><div class=\"line\">       ......</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mDecor.finishChanging();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> contentParent;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们来看一下，系统默认的几种Activity的头部布局xml文件，布局文件的源码位置为：android4.1.1_r1\\frameworks\\base\\core\\res\\res\\layout,我们挑两个文件来看一下：</p>\n<p>第一个screen_title.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Popout bar for action modes --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ViewStub</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_mode_bar_stub\"</span></div><div class=\"line\">              <span class=\"attr\">android:inflatedId</span>=<span class=\"string\">\"@+id/action_mode_bar\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout</span>=<span class=\"string\">\"@layout/action_mode_bar\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> </div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/windowTitleSize\"</span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/windowTitleBackgroundStyle\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/title\"</span> </div><div class=\"line\">            <span class=\"attr\">style</span>=<span class=\"string\">\"?android:attr/windowTitleStyle\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@null\"</span></div><div class=\"line\">            <span class=\"attr\">android:fadingEdge</span>=<span class=\"string\">\"horizontal\"</span></div><div class=\"line\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_vertical\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> </div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dip\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">        <span class=\"attr\">android:foregroundGravity</span>=<span class=\"string\">\"fill_horizontal|top\"</span></div><div class=\"line\">        <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/windowContentOverlay\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>第二个，screen_simple.xml<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"</div><div class=\"line\">    android:fitsSystemWindows=\"true\"</div><div class=\"line\">    android:orientation=\"vertical\"&gt;</div><div class=\"line\">    &lt;ViewStub android:id=\"@+id/action_mode_bar_stub\"</div><div class=\"line\">              android:inflatedId=\"@+id/action_mode_bar\"</div><div class=\"line\">              android:layout=\"@layout/action_mode_bar\"</div><div class=\"line\">              android:layout_width=\"match_parent\"</div><div class=\"line\">              android:layout_height=\"wrap_content\" /&gt;</div><div class=\"line\">    &lt;FrameLayout</div><div class=\"line\">         android:id=\"@android:id/content\"</div><div class=\"line\">         android:layout_width=\"match_parent\"</div><div class=\"line\">         android:layout_height=\"match_parent\"</div><div class=\"line\">         android:foregroundInsidePadding=\"false\"</div><div class=\"line\">         android:foregroundGravity=\"fill_horizontal|top\"</div><div class=\"line\">         android:foreground=\"?android:attr/windowContentOverlay\" /&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>通过对比，我们发现这两个布局文件都有一个共同id为@android:id/content的FrameLayout,其实这也就是我们Activity布局填充容器。我们还发现，这两个布局父布局都是一个线性布局LinearLayout，并且方向都是垂直的，这也验证了我们Activity内容布局一般都是状态栏的下边的模式。我们再来看后面的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">View in = mLayoutInflater.inflate(layoutResource, <span class=\"keyword\">null</span>);</div><div class=\"line\">decor.addView(in, <span class=\"keyword\">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));<span class=\"comment\">//2.向装饰View加入系统布局View</span></div><div class=\"line\"></div><div class=\"line\">ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);<span class=\"comment\">//3.获取我们Activity能填充的内容ViewGroup</span></div></pre></td></tr></table></figure></p>\n<p>这里向装饰器添加了系统布局View，并从系统布局View中获取了Activity填充内容的容器ViewGroup。其中ID_ANDROID_CONTENT就是com.android.internal.R.id.content，通过(ViewGroup)findViewById(ID_ANDROID_CONTENT)就获取了布局文件中的FrameLayout，即Activity内容填充布局的ViewGroup。这样我们再回到PhoneWindow的setContentView方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在mContentParent已经赋完值了，再通过布局填充器mLayoutInflater的inflate()方法，这样我们就把Activity的布局文件添加到装饰器上了。然而，现在虽然装饰器DecorView上已经有了Activity布局内容，但是是什么时候添加到Window上的呢？这里就需要了解<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity的启动流程</a>，在Activity的启动流程最后几步会执行ActivityThread中handleLaunchActivity()方法，我们接着此方法继续分析<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">        .......</div><div class=\"line\"></div><div class=\"line\">        Activity a = performLaunchActivity(r, customIntent);<span class=\"comment\">//1.创建Activity实例</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (a != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            r.createdConfig = <span class=\"keyword\">new</span> Configuration(mConfiguration);</div><div class=\"line\">            Bundle oldState = r.state;</div><div class=\"line\"></div><div class=\"line\">            handleResumeActivity(r.token, <span class=\"keyword\">false</span>, r.isForward);<span class=\"comment\">//2.调用Activity onResume方法</span></div><div class=\"line\"></div><div class=\"line\">            .......</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            .......</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，已经建立Activity的实例，并且执行Activity生命周期的attach()和onCreate()方法。我们知道setContentView()也就在onCreate()方法中调用的,所以这个时候，我们Activity布局文件内容已经装入了装饰器DecorView中，接下来就是把DecorView和Window关联起来，所以下面我们继续来看handleResumeActivity()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResumeActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> clearHide, <span class=\"keyword\">boolean</span> isForward)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// If we are getting ready to gc after going to the background, well</span></div><div class=\"line\">       <span class=\"comment\">// we are back active so skip it.</span></div><div class=\"line\">       unscheduleGcIdler();</div><div class=\"line\"></div><div class=\"line\">       ActivityClientRecord r = performResumeActivity(token, clearHide);<span class=\"comment\">//1.执行Activity的onResume方法</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Activity a = r.activity;</div><div class=\"line\"></div><div class=\"line\">           ........</div><div class=\"line\">           <span class=\"keyword\">boolean</span> willBeVisible = !a.mStartedActivity;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!willBeVisible) &#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(a.getActivityToken());<span class=\"comment\">//2.Activity显示可见</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (r.window == <span class=\"keyword\">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">               r.window = r.activity.getWindow();</div><div class=\"line\">               View decor = r.window.getDecorView();</div><div class=\"line\">               decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">               ViewManager wm = a.getWindowManager();</div><div class=\"line\">               WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">               a.mDecor = decor;</div><div class=\"line\">               l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">               l.softInputMode |= forwardBit;</div><div class=\"line\">               <span class=\"keyword\">if</span> (a.mVisibleFromClient) &#123;</div><div class=\"line\">                   a.mWindowAdded = <span class=\"keyword\">true</span>;</div><div class=\"line\">                   wm.addView(decor, l);<span class=\"comment\">//3.通过WindowManager将DecorView加入Window,从而显示Window，Activity变为可见。</span></div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!willBeVisible) &#123;</div><div class=\"line\">               r.hideForNow = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           cleanUpPendingRemoveWindows(r);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (!r.activity.mFinished &amp;&amp; willBeVisible&amp;&amp; r.activity.mDecor != <span class=\"keyword\">null</span> &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">            </div><div class=\"line\">               WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">               <span class=\"keyword\">if</span> ((l.softInputMode</div><div class=\"line\">                       &amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)</div><div class=\"line\">                       != forwardBit) &#123;</div><div class=\"line\">                   l.softInputMode = (l.softInputMode</div><div class=\"line\">                           &amp; (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))</div><div class=\"line\">                           | forwardBit;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                       ViewManager wm = a.getWindowManager();</div><div class=\"line\">                       View decor = r.window.getDecorView();</div><div class=\"line\">                       wm.updateViewLayout(decor, l);<span class=\"comment\">//4.更新DecorView,更新Activity界面</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">               r.activity.mVisibleFromServer = <span class=\"keyword\">true</span>;</div><div class=\"line\">               mNumVisibleActivities++;</div><div class=\"line\">               <span class=\"keyword\">if</span> (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                   r.activity.makeVisible();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">         .......</div><div class=\"line\"></div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         .......</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，调用performResumeActivity(token, clearHide)方法，实际上就是调用activity生命周期的onResume()方法。注释2处，通过Binder跨进程通信，调用ActivityManagerService中willActivityBeVisible()获取显示Activity的控制开关，从而在注释3处，通过WindowManager添加装饰器DecorView到Window,然后，再调用相关View的绘制流程，这样一个有布局的Activity就被加载出来了。</p>\n<p>到这里，Activity布局加载流程就是梳理完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78806893\"> Binder通信机制原理解析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78915225\">Activity启动流程源码分析(Launcher中)</a></p>"},{"layout":"post","title":"Android应用程序入口源码解析","date":"2017-11-23T13:43:41.000Z","comments":1,"_content":"---\n我们在写C、C++或java应用时，都会有一个main函数，但Android的main函数在哪里呢？偶记得从第一个HelloWorld应用开始，就知道，只要在AndroidManifest配置表中对Activity的intent-filter进行配置，action为android.intent.action.MAIN，category为android.intent.category.LAUNCHER，应用程序启动的时候就会首先启动这个Activity，此Activity也就是应用的入口；后来又知道Application这个类，只要有类继承Application,并在AndroidManifest配置表中对application的name进行配置该类，android应用启动后会把该类的attachBaseContext和onCreate方法作为程序开发入口。实际上是不是这样的呢？本篇博文将会从源码角度来分析。\n\n在说Android应用程序开发入口之前，我们有必要了解一下android系统的启动和Android应用程序的启动流程，这样有助于我们对Android系统有一个整体的认识。首先，让我们来简单了解一下Android系统的启动流程。\n\n\n# 一、Android系统的启动\nAndroid系统的启动流程是怎样的呢？首先先来看一下流程图：\n\n![](/assets/img/tech_android_system_start_chart.png)\n<!-- more -->\n\n根据图，我们知Android启动流程的步骤如下：\n\n- **1.启动电源**\n当电源按下时引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。\n\n- **2.引导程序BootLoader执行**\n引导程序BootLoader是在Android操作系统开始运行前的一个小程序，它的主要作用是把系统OS拉起来并运行。\n\n- **3.Linux内核启动**\n内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置，它首先在系统文件中寻找init.rc文件，并启动init进程。\n\n- **4.init进程启动**\n初始化和启动属性服务，并且启动Zygote进程。\n\n- **5.Zygote进程启动**\n创建JavaVM并为JavaVM注册JNI，创建服务端Socket，启动SystemServer进程。\n\n- **6.SystemServer进程启动**\n启动Binder线程池和SystemServiceManager，并且启动各种系统服务，例如：ActivityManagerService、PowerManagerService、PackageManagerService，BatteryService、UsageStatsService等其他80多个系统服务。\n\n- **7.Launcher启动**\n被SystemServer进程启动的ActivityManagerService会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到界面上。\n\n关于Android系统的启动源码分析，这里推荐大神刘望舒的几篇文章，讲得比较详细：\n\n[Android系统启动流程（一）解析init进程启动过程](http://liuwangshu.cn/framework/booting/1-init.html)\n\n[Android系统启动流程（二）解析Zygote进程启动过程](http://liuwangshu.cn/framework/booting/2-zygote.html)\n\n[Android系统启动流程（三）解析SyetemServer进程启动过程](http://liuwangshu.cn/framework/booting/3-syetemserver.html)\n\n[Android系统启动流程（四）Launcher启动过程与系统启动流程](http://liuwangshu.cn/framework/booting/4-launcher.html)\n\n# 二、Android应用程序启动\n上面说到，当Android系统启动完成之后，Lancher也就启动完成了，在我们的桌面上就会看到已安装的应用快捷图标。点击快捷图标，就能启动我们的应用程序。我们知道，android系统中的每一个应用程序，都是独立运行在自己的进程中的，所以在点击应用快捷图标后，如果应用程序还没有进程，首先应该会先建立应用程序的进程。具体流程是怎样的呢？我们先来看流程图：\n\n![](/assets/img/tech_android_app_start_chart.png)\n\n从流程图知，**应用程序在没有创建进程的情况下，会通过ActivitServiceManager去请求服务端Socket，服务端Socket再去请求Zygote进程，让其帮忙建立进程，而Zygote进程会fork自身来创建应用程序进程。应用程序进程创建的同时，应用程序的主线程也会创建，与主线程息息相关的ActivityThread类也会创建，并调用自身的main方法，进行相关的初始化。**\n\n具体进程是怎么创建的，这里也还是推荐大神刘望舒的两篇文章，其中非常详细的分析了应用进程的创建过程，想了解的可以看一下。\n\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android应用程序进程启动过程（后篇）](http://liuwangshu.cn/framework/applicationprocess/2.html)\n\n好了，下面我们来继续说说**ActivityThread的main方法，也即Android应用程序的入口**。\n\n# 三、Android应用程序入口源码分析\n通过Android应用程序的启动，我们知道android应用程序的入口，即ActivityThread的main方法。但在我们开发的时候，很少接触ActivityThread类,主要还是Application和Activity，他俩与ActivityThread的关系怎样呢？让我们从源码中来看看，ActivityThread的main方法：\n```java\n    public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();//1.Looper的创建\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();//2.ActivityThread初始化\n        thread.attach(false);//3.调用ActivityThread附属方法attach\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();//4.Looper消息开始循环\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n在main方法中，主线程的Looper实现了初始化和消息循环，这与Android的消息机制息息相关。关于消息机制，我已写过一个篇文章为[Android消息机制源码解析(Handler)](http://blog.csdn.net/awenyini/article/details/78593139)，想了解的可以看一下。这里我们主要来看一下ActivityThread的初始化和attach方法，其中ActivityThread初始化构造方法什么也没做，没啥好看的，我们主要来看看attach方法\n```java\n    private void attach(boolean system) {\n        sThreadLocal.set(this);\n        mSystemThread = system;\n        if (!system) {//false，不是system,普通app\n            .......省略\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\");\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            IActivityManager mgr = ActivityManagerNative.getDefault();//1.核心代码\n            try {\n                mgr.attachApplication(mAppThread);//2.核心代码\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n        } else {//true，是system\n            // Don't set application object here -- if the system crashes,\n            // we can't display an alert, we just want to die die die.\n            android.ddm.DdmHandleAppName.setAppName(\"system_process\");\n            try {\n                mInstrumentation = new Instrumentation();\n                ContextImpl context = new ContextImpl();\n                context.init(getSystemContext().mPackageInfo, null, this);\n                Application app = Instrumentation.newApplication(Application.class, context);\n                mAllApplications.add(app);\n                mInitialApplication = app;\n                app.onCreate();\n            } catch (Exception e) {\n                throw new RuntimeException(\n                        \"Unable to instantiate Application():\" + e.toString(), e);\n            }\n        }\n       ......省略\n    }\n```\nActivityThread调用attach()传入的参数是false，不是system。注释1通过静态方法ActivityManagerNative.getDefault()获取IActivityManager,实际上是获取到ActivityManagerProxy类，让我们来看ActivityManagerNative.getDefault()方法,进入ActivityManagerNative类\n```java\n\n    /**\n     * Cast a Binder object into an activity manager interface, generating\n     * a proxy if needed.\n     */\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);//核心方法\n    }\n\n    /**\n     * Retrieve the system's default/global activity manager.\n     */\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//核心方法\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n```\n通过查看ActivityManagerProxy类，了解到它实现IActivityManager接口,mgr就是ActivityManagerProxy。知道返回的类后，我们再来看一下注释2，mgr.attachApplication(mAppThread)，其中mAppThread为ApplicationThread，让我们再进入ActivityManagerProxy，看看attachApplication方法\n```java\nclass ActivityManagerProxy implements IActivityManager\n{\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n    .......\n    public void attachApplication(IApplicationThread app) throws RemoteException\n    {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        data.writeInterfaceToken(IActivityManager.descriptor);\n        data.writeStrongBinder(app.asBinder());\n        mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, 0);//核心代码\n        reply.readException();\n        data.recycle();\n        reply.recycle();\n    }\n    .......\n}\n```\n从源码中，了解到mRemote是一个IBinder，通过Binder实现进程间通信(Android核心进程通信方法)，从而调用到ActivityServiceManager里面对应的方法\n```java\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);//核心方法\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n我们来继续看方法attachApplicationLocked()\n```java\n   private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n            .......\n            thread.bindApplication(processName, appInfo, providers,\n                    app.instrumentationClass, profileFile, profileFd, profileAutoStop,\n                    app.instrumentationArguments, app.instrumentationWatcher, testMode,\n                    enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat, getCommonServicesLocked(),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, true);\n            app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();\n          .....\n\n        return true;\n    }\n```\n在attachApplicationLocked()方法中,细节比较多，我们省略掉了，主要来看一下核心方法bindApplication(),其中thread就是ActivityThread中ApplicationThread类，让我们再来看ApplicationThread中的bindApplication()方法\n```java\n        public final void bindApplication(String processName,\n                ApplicationInfo appInfo, List<ProviderInfo> providers,\n                ComponentName instrumentationName, String profileFile,\n                ParcelFileDescriptor profileFd, boolean autoStopProfiler,\n                Bundle instrumentationArgs, IInstrumentationWatcher instrumentationWatcher,\n                int debugMode, boolean enableOpenGlTrace, boolean isRestrictedBackupMode,\n                boolean persistent, Configuration config, CompatibilityInfo compatInfo,\n                Map<String, IBinder> services, Bundle coreSettings) {\n\n            if (services != null) {\n                // Setup the service cache in the ServiceManager\n                ServiceManager.initServiceCache(services);\n            }\n\n            setCoreSettings(coreSettings);\n\n            AppBindData data = new AppBindData();\n            data.processName = processName;\n            data.appInfo = appInfo;\n            data.providers = providers;\n            data.instrumentationName = instrumentationName;\n            data.instrumentationArgs = instrumentationArgs;\n            data.instrumentationWatcher = instrumentationWatcher;\n            data.debugMode = debugMode;\n            data.enableOpenGlTrace = enableOpenGlTrace;\n            data.restrictedBackupMode = isRestrictedBackupMode;\n            data.persistent = persistent;\n            data.config = config;\n            data.compatInfo = compatInfo;\n            data.initProfileFile = profileFile;\n            data.initProfileFd = profileFd;\n            data.initAutoStopProfiler = false;\n            queueOrSendMessage(H.BIND_APPLICATION, data);//核心方法\n        }\n```\n其中queueOrSendMessage方法主要就是向Handler发送了一个Message，让我们来看看具体的方法\n```java\n // if the thread hasn't started yet, we don't have the handler, so just\n    // save the messages until we're ready.\n    private void queueOrSendMessage(int what, Object obj) {\n        queueOrSendMessage(what, obj, 0, 0);\n    }\n\n    private void queueOrSendMessage(int what, Object obj, int arg1) {\n        queueOrSendMessage(what, obj, arg1, 0);\n    }\n\n    private void queueOrSendMessage(int what, Object obj, int arg1, int arg2) {\n        synchronized (this) {\n            if (DEBUG_MESSAGES) Slog.v(\n                TAG, \"SCHEDULE \" + what + \" \" + mH.codeToString(what)\n                + \": \" + arg1 + \" / \" + obj);\n            Message msg = Message.obtain();\n            msg.what = what;\n            msg.obj = obj;\n            msg.arg1 = arg1;\n            msg.arg2 = arg2;\n            mH.sendMessage(msg);\n        }\n    }\n```\n容易知道，主要就是向Handler mH中发送一条消息，根据Handler消息循环机制，可以在handMessage查看处理方法，根据H.BIND_APPLICATION\n```java\n    private class H extends Handler {\n           .....\n        public static final int BIND_APPLICATION        = 110;\n        public void handleMessage(Message msg) {\n            if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n            switch (msg.what) {\n                .......\n                case BIND_APPLICATION:\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n                    AppBindData data = (AppBindData)msg.obj;\n                    handleBindApplication(data);//核心方法\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                    break;\n                 .......\n       }\n}\n```\n继续看handleBindApplication()方法\n```java\nprivate void handleBindApplication(AppBindData data) {\n         try {\n\n            .........\n\n            Application app = data.info.makeApplication(data.restrictedBackupMode, null);\n            mInitialApplication = app;\n\n           ...... \n\n            try {\n                mInstrumentation.onCreate(data.instrumentationArgs);\n            }\n            catch (Exception e) {\n            }\n            try {\n                mInstrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {            }\n        } finally {\n            StrictMode.setThreadPolicy(savedPolicy);\n        }\n }\n```\n通过分析知data为AppBindData，data.info是一个LoadeApk对象。data.info.makeApplication()，让我们继续看LoadeApk中的方法\n```java\n public Application makeApplication(boolean forceDefaultAppClass,\n            Instrumentation instrumentation) {\n        if (mApplication != null) {\n            return mApplication;\n        }\n\n        Application app = null;\n\n        String appClass = mApplicationInfo.className;\n        if (forceDefaultAppClass || (appClass == null)) {\n            appClass = \"android.app.Application\";\n        }\n\n        try {\n            java.lang.ClassLoader cl = getClassLoader();\n            ContextImpl appContext = new ContextImpl();\n            appContext.init(this, null, mActivityThread);\n            app = mActivityThread.mInstrumentation.newApplication(\n                    cl, appClass, appContext);//1.核心方法\n            appContext.setOuterContext(app);\n        } catch (Exception e) {\n            if (!mActivityThread.mInstrumentation.onException(app, e)) {\n                throw new RuntimeException(\n                    \"Unable to instantiate application \" + appClass\n                    + \": \" + e.toString(), e);\n            }\n        }\n        mActivityThread.mAllApplications.add(app);\n        mApplication = app;\n\n        if (instrumentation != null) {\n            try {\n                instrumentation.callApplicationOnCreate(app);//2.核心方法\n            } catch (Exception e) {\n                if (!instrumentation.onException(app, e)) {\n                    throw new RuntimeException(\n                        \"Unable to create application \" + app.getClass().getName()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        }\n        \n        return app;\n    }\n```\n主要还是调ActivityThread中mInstrumentation.newApplication()方法，并传入了继承Application的类的类名appClass，当Applicaiton建立后，马上就调用了方法2即Application的onCreate(),让我们先来看Instrumentation中的newApplication()方法\n```java\n  \n    public Application newApplication(ClassLoader cl, String className, Context context)\n            throws InstantiationException, IllegalAccessException, \n            ClassNotFoundException {\n        return newApplication(cl.loadClass(className), context);\n    }\n    \n    static public Application newApplication(Class<?> clazz, Context context)\n            throws InstantiationException, IllegalAccessException, \n            ClassNotFoundException {\n        Application app = (Application)clazz.newInstance();\n        app.attach(context);//方法\n        return app;\n    }\n```\n到这里，就建立了应用程序的Application，然而在Application中那个方法是最先调用的呢？让我们继续看一下\n```java\n    /**\n     * @hide\n     */\n    /* package */ final void attach(Context context) {\n        attachBaseContext(context);\n        mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;\n    }\n```\n由此我们知道Application初始化后，首先调用的是attachBaseContext()方法，其次才是Application的onCreate方法，让我们看一下调用onCreate()方法,在前面的makeApplication()方法中，有此代码instrumentation.callApplicationOnCreate(app)，我们继续来看看源码\n```java\n    public void callApplicationOnCreate(Application app) {\n        app.onCreate();\n    }\n```\n到这里Android应用程序的入口源码就分析完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、总结\nAndroid应用程序的入口是ActivityThread的main方法，而Android应用程序的开发入口是Application的attachBaseContext()和onCreate()。如果有类继承Application，并在Androidmanifest中配置了，它就会优先启动。在继承Application类初始化后，首先调用的是attachBaseContext()方法，其次才是onCreate方法。\n\n# 五、相关及参考文档\n\n[Activity启动过程全解析](http://blog.csdn.net/tenggangren/article/details/50925740)\n\n[深入理解ActivityManagerService](http://blog.csdn.net/Innost/article/details/47254381)\n\n[Android系统启动流程（一）解析init进程启动过程](http://liuwangshu.cn/framework/booting/1-init.html)\n\n[Android系统启动流程（二）解析Zygote进程启动过程](http://liuwangshu.cn/framework/booting/2-zygote.html)\n\n[Android系统启动流程（三）解析SyetemServer进程启动过程](http://liuwangshu.cn/framework/booting/3-syetemserver.html)\n\n[Android系统启动流程（四）Launcher启动过程与系统启动流程](http://liuwangshu.cn/framework/booting/4-launcher.html)\n\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android应用程序进程启动过程（后篇）](http://liuwangshu.cn/framework/applicationprocess/2.html)\n","source":"_posts/tech_android_framework_appstart.md","raw":"---\nlayout: post\ntitle: \"Android应用程序入口源码解析\"\ndate: 11/23/2017 9:43:41 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n\t- Android应用程序入口源码解析\n---\n---\n我们在写C、C++或java应用时，都会有一个main函数，但Android的main函数在哪里呢？偶记得从第一个HelloWorld应用开始，就知道，只要在AndroidManifest配置表中对Activity的intent-filter进行配置，action为android.intent.action.MAIN，category为android.intent.category.LAUNCHER，应用程序启动的时候就会首先启动这个Activity，此Activity也就是应用的入口；后来又知道Application这个类，只要有类继承Application,并在AndroidManifest配置表中对application的name进行配置该类，android应用启动后会把该类的attachBaseContext和onCreate方法作为程序开发入口。实际上是不是这样的呢？本篇博文将会从源码角度来分析。\n\n在说Android应用程序开发入口之前，我们有必要了解一下android系统的启动和Android应用程序的启动流程，这样有助于我们对Android系统有一个整体的认识。首先，让我们来简单了解一下Android系统的启动流程。\n\n\n# 一、Android系统的启动\nAndroid系统的启动流程是怎样的呢？首先先来看一下流程图：\n\n![](/assets/img/tech_android_system_start_chart.png)\n<!-- more -->\n\n根据图，我们知Android启动流程的步骤如下：\n\n- **1.启动电源**\n当电源按下时引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。\n\n- **2.引导程序BootLoader执行**\n引导程序BootLoader是在Android操作系统开始运行前的一个小程序，它的主要作用是把系统OS拉起来并运行。\n\n- **3.Linux内核启动**\n内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置，它首先在系统文件中寻找init.rc文件，并启动init进程。\n\n- **4.init进程启动**\n初始化和启动属性服务，并且启动Zygote进程。\n\n- **5.Zygote进程启动**\n创建JavaVM并为JavaVM注册JNI，创建服务端Socket，启动SystemServer进程。\n\n- **6.SystemServer进程启动**\n启动Binder线程池和SystemServiceManager，并且启动各种系统服务，例如：ActivityManagerService、PowerManagerService、PackageManagerService，BatteryService、UsageStatsService等其他80多个系统服务。\n\n- **7.Launcher启动**\n被SystemServer进程启动的ActivityManagerService会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到界面上。\n\n关于Android系统的启动源码分析，这里推荐大神刘望舒的几篇文章，讲得比较详细：\n\n[Android系统启动流程（一）解析init进程启动过程](http://liuwangshu.cn/framework/booting/1-init.html)\n\n[Android系统启动流程（二）解析Zygote进程启动过程](http://liuwangshu.cn/framework/booting/2-zygote.html)\n\n[Android系统启动流程（三）解析SyetemServer进程启动过程](http://liuwangshu.cn/framework/booting/3-syetemserver.html)\n\n[Android系统启动流程（四）Launcher启动过程与系统启动流程](http://liuwangshu.cn/framework/booting/4-launcher.html)\n\n# 二、Android应用程序启动\n上面说到，当Android系统启动完成之后，Lancher也就启动完成了，在我们的桌面上就会看到已安装的应用快捷图标。点击快捷图标，就能启动我们的应用程序。我们知道，android系统中的每一个应用程序，都是独立运行在自己的进程中的，所以在点击应用快捷图标后，如果应用程序还没有进程，首先应该会先建立应用程序的进程。具体流程是怎样的呢？我们先来看流程图：\n\n![](/assets/img/tech_android_app_start_chart.png)\n\n从流程图知，**应用程序在没有创建进程的情况下，会通过ActivitServiceManager去请求服务端Socket，服务端Socket再去请求Zygote进程，让其帮忙建立进程，而Zygote进程会fork自身来创建应用程序进程。应用程序进程创建的同时，应用程序的主线程也会创建，与主线程息息相关的ActivityThread类也会创建，并调用自身的main方法，进行相关的初始化。**\n\n具体进程是怎么创建的，这里也还是推荐大神刘望舒的两篇文章，其中非常详细的分析了应用进程的创建过程，想了解的可以看一下。\n\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android应用程序进程启动过程（后篇）](http://liuwangshu.cn/framework/applicationprocess/2.html)\n\n好了，下面我们来继续说说**ActivityThread的main方法，也即Android应用程序的入口**。\n\n# 三、Android应用程序入口源码分析\n通过Android应用程序的启动，我们知道android应用程序的入口，即ActivityThread的main方法。但在我们开发的时候，很少接触ActivityThread类,主要还是Application和Activity，他俩与ActivityThread的关系怎样呢？让我们从源码中来看看，ActivityThread的main方法：\n```java\n    public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();//1.Looper的创建\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();//2.ActivityThread初始化\n        thread.attach(false);//3.调用ActivityThread附属方法attach\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();//4.Looper消息开始循环\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n在main方法中，主线程的Looper实现了初始化和消息循环，这与Android的消息机制息息相关。关于消息机制，我已写过一个篇文章为[Android消息机制源码解析(Handler)](http://blog.csdn.net/awenyini/article/details/78593139)，想了解的可以看一下。这里我们主要来看一下ActivityThread的初始化和attach方法，其中ActivityThread初始化构造方法什么也没做，没啥好看的，我们主要来看看attach方法\n```java\n    private void attach(boolean system) {\n        sThreadLocal.set(this);\n        mSystemThread = system;\n        if (!system) {//false，不是system,普通app\n            .......省略\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\");\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n            IActivityManager mgr = ActivityManagerNative.getDefault();//1.核心代码\n            try {\n                mgr.attachApplication(mAppThread);//2.核心代码\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n        } else {//true，是system\n            // Don't set application object here -- if the system crashes,\n            // we can't display an alert, we just want to die die die.\n            android.ddm.DdmHandleAppName.setAppName(\"system_process\");\n            try {\n                mInstrumentation = new Instrumentation();\n                ContextImpl context = new ContextImpl();\n                context.init(getSystemContext().mPackageInfo, null, this);\n                Application app = Instrumentation.newApplication(Application.class, context);\n                mAllApplications.add(app);\n                mInitialApplication = app;\n                app.onCreate();\n            } catch (Exception e) {\n                throw new RuntimeException(\n                        \"Unable to instantiate Application():\" + e.toString(), e);\n            }\n        }\n       ......省略\n    }\n```\nActivityThread调用attach()传入的参数是false，不是system。注释1通过静态方法ActivityManagerNative.getDefault()获取IActivityManager,实际上是获取到ActivityManagerProxy类，让我们来看ActivityManagerNative.getDefault()方法,进入ActivityManagerNative类\n```java\n\n    /**\n     * Cast a Binder object into an activity manager interface, generating\n     * a proxy if needed.\n     */\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);//核心方法\n    }\n\n    /**\n     * Retrieve the system's default/global activity manager.\n     */\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//核心方法\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n```\n通过查看ActivityManagerProxy类，了解到它实现IActivityManager接口,mgr就是ActivityManagerProxy。知道返回的类后，我们再来看一下注释2，mgr.attachApplication(mAppThread)，其中mAppThread为ApplicationThread，让我们再进入ActivityManagerProxy，看看attachApplication方法\n```java\nclass ActivityManagerProxy implements IActivityManager\n{\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n    .......\n    public void attachApplication(IApplicationThread app) throws RemoteException\n    {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        data.writeInterfaceToken(IActivityManager.descriptor);\n        data.writeStrongBinder(app.asBinder());\n        mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, 0);//核心代码\n        reply.readException();\n        data.recycle();\n        reply.recycle();\n    }\n    .......\n}\n```\n从源码中，了解到mRemote是一个IBinder，通过Binder实现进程间通信(Android核心进程通信方法)，从而调用到ActivityServiceManager里面对应的方法\n```java\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n            attachApplicationLocked(thread, callingPid);//核心方法\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n我们来继续看方法attachApplicationLocked()\n```java\n   private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n            .......\n            thread.bindApplication(processName, appInfo, providers,\n                    app.instrumentationClass, profileFile, profileFd, profileAutoStop,\n                    app.instrumentationArguments, app.instrumentationWatcher, testMode,\n                    enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat, getCommonServicesLocked(),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, true);\n            app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();\n          .....\n\n        return true;\n    }\n```\n在attachApplicationLocked()方法中,细节比较多，我们省略掉了，主要来看一下核心方法bindApplication(),其中thread就是ActivityThread中ApplicationThread类，让我们再来看ApplicationThread中的bindApplication()方法\n```java\n        public final void bindApplication(String processName,\n                ApplicationInfo appInfo, List<ProviderInfo> providers,\n                ComponentName instrumentationName, String profileFile,\n                ParcelFileDescriptor profileFd, boolean autoStopProfiler,\n                Bundle instrumentationArgs, IInstrumentationWatcher instrumentationWatcher,\n                int debugMode, boolean enableOpenGlTrace, boolean isRestrictedBackupMode,\n                boolean persistent, Configuration config, CompatibilityInfo compatInfo,\n                Map<String, IBinder> services, Bundle coreSettings) {\n\n            if (services != null) {\n                // Setup the service cache in the ServiceManager\n                ServiceManager.initServiceCache(services);\n            }\n\n            setCoreSettings(coreSettings);\n\n            AppBindData data = new AppBindData();\n            data.processName = processName;\n            data.appInfo = appInfo;\n            data.providers = providers;\n            data.instrumentationName = instrumentationName;\n            data.instrumentationArgs = instrumentationArgs;\n            data.instrumentationWatcher = instrumentationWatcher;\n            data.debugMode = debugMode;\n            data.enableOpenGlTrace = enableOpenGlTrace;\n            data.restrictedBackupMode = isRestrictedBackupMode;\n            data.persistent = persistent;\n            data.config = config;\n            data.compatInfo = compatInfo;\n            data.initProfileFile = profileFile;\n            data.initProfileFd = profileFd;\n            data.initAutoStopProfiler = false;\n            queueOrSendMessage(H.BIND_APPLICATION, data);//核心方法\n        }\n```\n其中queueOrSendMessage方法主要就是向Handler发送了一个Message，让我们来看看具体的方法\n```java\n // if the thread hasn't started yet, we don't have the handler, so just\n    // save the messages until we're ready.\n    private void queueOrSendMessage(int what, Object obj) {\n        queueOrSendMessage(what, obj, 0, 0);\n    }\n\n    private void queueOrSendMessage(int what, Object obj, int arg1) {\n        queueOrSendMessage(what, obj, arg1, 0);\n    }\n\n    private void queueOrSendMessage(int what, Object obj, int arg1, int arg2) {\n        synchronized (this) {\n            if (DEBUG_MESSAGES) Slog.v(\n                TAG, \"SCHEDULE \" + what + \" \" + mH.codeToString(what)\n                + \": \" + arg1 + \" / \" + obj);\n            Message msg = Message.obtain();\n            msg.what = what;\n            msg.obj = obj;\n            msg.arg1 = arg1;\n            msg.arg2 = arg2;\n            mH.sendMessage(msg);\n        }\n    }\n```\n容易知道，主要就是向Handler mH中发送一条消息，根据Handler消息循环机制，可以在handMessage查看处理方法，根据H.BIND_APPLICATION\n```java\n    private class H extends Handler {\n           .....\n        public static final int BIND_APPLICATION        = 110;\n        public void handleMessage(Message msg) {\n            if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n            switch (msg.what) {\n                .......\n                case BIND_APPLICATION:\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n                    AppBindData data = (AppBindData)msg.obj;\n                    handleBindApplication(data);//核心方法\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                    break;\n                 .......\n       }\n}\n```\n继续看handleBindApplication()方法\n```java\nprivate void handleBindApplication(AppBindData data) {\n         try {\n\n            .........\n\n            Application app = data.info.makeApplication(data.restrictedBackupMode, null);\n            mInitialApplication = app;\n\n           ...... \n\n            try {\n                mInstrumentation.onCreate(data.instrumentationArgs);\n            }\n            catch (Exception e) {\n            }\n            try {\n                mInstrumentation.callApplicationOnCreate(app);\n            } catch (Exception e) {            }\n        } finally {\n            StrictMode.setThreadPolicy(savedPolicy);\n        }\n }\n```\n通过分析知data为AppBindData，data.info是一个LoadeApk对象。data.info.makeApplication()，让我们继续看LoadeApk中的方法\n```java\n public Application makeApplication(boolean forceDefaultAppClass,\n            Instrumentation instrumentation) {\n        if (mApplication != null) {\n            return mApplication;\n        }\n\n        Application app = null;\n\n        String appClass = mApplicationInfo.className;\n        if (forceDefaultAppClass || (appClass == null)) {\n            appClass = \"android.app.Application\";\n        }\n\n        try {\n            java.lang.ClassLoader cl = getClassLoader();\n            ContextImpl appContext = new ContextImpl();\n            appContext.init(this, null, mActivityThread);\n            app = mActivityThread.mInstrumentation.newApplication(\n                    cl, appClass, appContext);//1.核心方法\n            appContext.setOuterContext(app);\n        } catch (Exception e) {\n            if (!mActivityThread.mInstrumentation.onException(app, e)) {\n                throw new RuntimeException(\n                    \"Unable to instantiate application \" + appClass\n                    + \": \" + e.toString(), e);\n            }\n        }\n        mActivityThread.mAllApplications.add(app);\n        mApplication = app;\n\n        if (instrumentation != null) {\n            try {\n                instrumentation.callApplicationOnCreate(app);//2.核心方法\n            } catch (Exception e) {\n                if (!instrumentation.onException(app, e)) {\n                    throw new RuntimeException(\n                        \"Unable to create application \" + app.getClass().getName()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        }\n        \n        return app;\n    }\n```\n主要还是调ActivityThread中mInstrumentation.newApplication()方法，并传入了继承Application的类的类名appClass，当Applicaiton建立后，马上就调用了方法2即Application的onCreate(),让我们先来看Instrumentation中的newApplication()方法\n```java\n  \n    public Application newApplication(ClassLoader cl, String className, Context context)\n            throws InstantiationException, IllegalAccessException, \n            ClassNotFoundException {\n        return newApplication(cl.loadClass(className), context);\n    }\n    \n    static public Application newApplication(Class<?> clazz, Context context)\n            throws InstantiationException, IllegalAccessException, \n            ClassNotFoundException {\n        Application app = (Application)clazz.newInstance();\n        app.attach(context);//方法\n        return app;\n    }\n```\n到这里，就建立了应用程序的Application，然而在Application中那个方法是最先调用的呢？让我们继续看一下\n```java\n    /**\n     * @hide\n     */\n    /* package */ final void attach(Context context) {\n        attachBaseContext(context);\n        mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;\n    }\n```\n由此我们知道Application初始化后，首先调用的是attachBaseContext()方法，其次才是Application的onCreate方法，让我们看一下调用onCreate()方法,在前面的makeApplication()方法中，有此代码instrumentation.callApplicationOnCreate(app)，我们继续来看看源码\n```java\n    public void callApplicationOnCreate(Application app) {\n        app.onCreate();\n    }\n```\n到这里Android应用程序的入口源码就分析完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、总结\nAndroid应用程序的入口是ActivityThread的main方法，而Android应用程序的开发入口是Application的attachBaseContext()和onCreate()。如果有类继承Application，并在Androidmanifest中配置了，它就会优先启动。在继承Application类初始化后，首先调用的是attachBaseContext()方法，其次才是onCreate方法。\n\n# 五、相关及参考文档\n\n[Activity启动过程全解析](http://blog.csdn.net/tenggangren/article/details/50925740)\n\n[深入理解ActivityManagerService](http://blog.csdn.net/Innost/article/details/47254381)\n\n[Android系统启动流程（一）解析init进程启动过程](http://liuwangshu.cn/framework/booting/1-init.html)\n\n[Android系统启动流程（二）解析Zygote进程启动过程](http://liuwangshu.cn/framework/booting/2-zygote.html)\n\n[Android系统启动流程（三）解析SyetemServer进程启动过程](http://liuwangshu.cn/framework/booting/3-syetemserver.html)\n\n[Android系统启动流程（四）Launcher启动过程与系统启动流程](http://liuwangshu.cn/framework/booting/4-launcher.html)\n\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android应用程序进程启动过程（后篇）](http://liuwangshu.cn/framework/applicationprocess/2.html)\n","slug":"tech_android_framework_appstart","published":1,"updated":"2019-06-27T08:15:15.308Z","photos":[],"link":"","_id":"cjxfjaesu004uystgogfpkh29","content":"<hr>\n<p>我们在写C、C++或java应用时，都会有一个main函数，但Android的main函数在哪里呢？偶记得从第一个HelloWorld应用开始，就知道，只要在AndroidManifest配置表中对Activity的intent-filter进行配置，action为android.intent.action.MAIN，category为android.intent.category.LAUNCHER，应用程序启动的时候就会首先启动这个Activity，此Activity也就是应用的入口；后来又知道Application这个类，只要有类继承Application,并在AndroidManifest配置表中对application的name进行配置该类，android应用启动后会把该类的attachBaseContext和onCreate方法作为程序开发入口。实际上是不是这样的呢？本篇博文将会从源码角度来分析。</p>\n<p>在说Android应用程序开发入口之前，我们有必要了解一下android系统的启动和Android应用程序的启动流程，这样有助于我们对Android系统有一个整体的认识。首先，让我们来简单了解一下Android系统的启动流程。</p>\n<h1 id=\"一、Android系统的启动\"><a href=\"#一、Android系统的启动\" class=\"headerlink\" title=\"一、Android系统的启动\"></a>一、Android系统的启动</h1><p>Android系统的启动流程是怎样的呢？首先先来看一下流程图：</p>\n<p><img src=\"/assets/img/tech_android_system_start_chart.png\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>根据图，我们知Android启动流程的步骤如下：</p>\n<ul>\n<li><p><strong>1.启动电源</strong><br>当电源按下时引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。</p>\n</li>\n<li><p><strong>2.引导程序BootLoader执行</strong><br>引导程序BootLoader是在Android操作系统开始运行前的一个小程序，它的主要作用是把系统OS拉起来并运行。</p>\n</li>\n<li><p><strong>3.Linux内核启动</strong><br>内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置，它首先在系统文件中寻找init.rc文件，并启动init进程。</p>\n</li>\n<li><p><strong>4.init进程启动</strong><br>初始化和启动属性服务，并且启动Zygote进程。</p>\n</li>\n<li><p><strong>5.Zygote进程启动</strong><br>创建JavaVM并为JavaVM注册JNI，创建服务端Socket，启动SystemServer进程。</p>\n</li>\n<li><p><strong>6.SystemServer进程启动</strong><br>启动Binder线程池和SystemServiceManager，并且启动各种系统服务，例如：ActivityManagerService、PowerManagerService、PackageManagerService，BatteryService、UsageStatsService等其他80多个系统服务。</p>\n</li>\n<li><p><strong>7.Launcher启动</strong><br>被SystemServer进程启动的ActivityManagerService会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到界面上。</p>\n</li>\n</ul>\n<p>关于Android系统的启动源码分析，这里推荐大神刘望舒的几篇文章，讲得比较详细：</p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/1-init.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（一）解析init进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/2-zygote.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（二）解析Zygote进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/3-syetemserver.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（三）解析SyetemServer进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/4-launcher.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（四）Launcher启动过程与系统启动流程</a></p>\n<h1 id=\"二、Android应用程序启动\"><a href=\"#二、Android应用程序启动\" class=\"headerlink\" title=\"二、Android应用程序启动\"></a>二、Android应用程序启动</h1><p>上面说到，当Android系统启动完成之后，Lancher也就启动完成了，在我们的桌面上就会看到已安装的应用快捷图标。点击快捷图标，就能启动我们的应用程序。我们知道，android系统中的每一个应用程序，都是独立运行在自己的进程中的，所以在点击应用快捷图标后，如果应用程序还没有进程，首先应该会先建立应用程序的进程。具体流程是怎样的呢？我们先来看流程图：</p>\n<p><img src=\"/assets/img/tech_android_app_start_chart.png\" alt=\"\"></p>\n<p>从流程图知，<strong>应用程序在没有创建进程的情况下，会通过ActivitServiceManager去请求服务端Socket，服务端Socket再去请求Zygote进程，让其帮忙建立进程，而Zygote进程会fork自身来创建应用程序进程。应用程序进程创建的同时，应用程序的主线程也会创建，与主线程息息相关的ActivityThread类也会创建，并调用自身的main方法，进行相关的初始化。</strong></p>\n<p>具体进程是怎么创建的，这里也还是推荐大神刘望舒的两篇文章，其中非常详细的分析了应用进程的创建过程，想了解的可以看一下。</p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/2.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（后篇）</a></p>\n<p>好了，下面我们来继续说说<strong>ActivityThread的main方法，也即Android应用程序的入口</strong>。</p>\n<h1 id=\"三、Android应用程序入口源码分析\"><a href=\"#三、Android应用程序入口源码分析\" class=\"headerlink\" title=\"三、Android应用程序入口源码分析\"></a>三、Android应用程序入口源码分析</h1><p>通过Android应用程序的启动，我们知道android应用程序的入口，即ActivityThread的main方法。但在我们开发的时候，很少接触ActivityThread类,主要还是Application和Activity，他俩与ActivityThread的关系怎样呢？让我们从源码中来看看，ActivityThread的main方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">    <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">    <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">    CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Looper.prepareMainLooper();<span class=\"comment\">//1.Looper的创建</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();<span class=\"comment\">//2.ActivityThread初始化</span></div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);<span class=\"comment\">//3.调用ActivityThread附属方法attach</span></div><div class=\"line\"></div><div class=\"line\">    AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Looper.loop();<span class=\"comment\">//4.Looper消息开始循环</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在main方法中，主线程的Looper实现了初始化和消息循环，这与Android的消息机制息息相关。关于消息机制，我已写过一个篇文章为<a href=\"http://blog.csdn.net/awenyini/article/details/78593139\" target=\"_blank\" rel=\"external\">Android消息机制源码解析(Handler)</a>，想了解的可以看一下。这里我们主要来看一下ActivityThread的初始化和attach方法，其中ActivityThread初始化构造方法什么也没做，没啥好看的，我们主要来看看attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mSystemThread = system;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!system) &#123;<span class=\"comment\">//false，不是system,普通app</span></div><div class=\"line\">        .......省略</div><div class=\"line\">        android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">        IActivityManager mgr = ActivityManagerNative.getDefault();<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mgr.attachApplication(mAppThread);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            <span class=\"comment\">// Ignore</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//true，是system</span></div><div class=\"line\">        <span class=\"comment\">// Don't set application object here -- if the system crashes,</span></div><div class=\"line\">        <span class=\"comment\">// we can't display an alert, we just want to die die die.</span></div><div class=\"line\">        android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"system_process\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mInstrumentation = <span class=\"keyword\">new</span> Instrumentation();</div><div class=\"line\">            ContextImpl context = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">            context.init(getSystemContext().mPackageInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">            Application app = Instrumentation.newApplication(Application.class, context);</div><div class=\"line\">            mAllApplications.add(app);</div><div class=\"line\">            mInitialApplication = app;</div><div class=\"line\">            app.onCreate();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"string\">\"Unable to instantiate Application():\"</span> + e.toString(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......省略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ActivityThread调用attach()传入的参数是false，不是system。注释1通过静态方法ActivityManagerNative.getDefault()获取IActivityManager,实际上是获取到ActivityManagerProxy类，让我们来看ActivityManagerNative.getDefault()方法,进入ActivityManagerNative类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Cast a Binder object into an activity manager interface, generating</div><div class=\"line\"> * a proxy if needed.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    IActivityManager in =</div><div class=\"line\">        (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">    <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> in;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Retrieve the system's default/global activity manager.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager am = asInterface(b);<span class=\"comment\">//核心方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> am;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>通过查看ActivityManagerProxy类，了解到它实现IActivityManager接口,mgr就是ActivityManagerProxy。知道返回的类后，我们再来看一下注释2，mgr.attachApplication(mAppThread)，其中mAppThread为ApplicationThread，让我们再进入ActivityManagerProxy，看看attachApplication方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread app)</span> <span class=\"keyword\">throws</span> RemoteException</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">        data.writeStrongBinder(app.asBinder());</div><div class=\"line\">        mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, <span class=\"number\">0</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">        reply.readException();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码中，了解到mRemote是一个IBinder，通过Binder实现进程间通信(Android核心进程通信方法)，从而调用到ActivityServiceManager里面对应的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);<span class=\"comment\">//核心方法</span></div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来继续看方法attachApplicationLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</span></span></div><div class=\"line\">         <span class=\"keyword\">int</span> pid) &#123;</div><div class=\"line\">         .......</div><div class=\"line\">         thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                 app.instrumentationClass, profileFile, profileFd, profileAutoStop,</div><div class=\"line\">                 app.instrumentationArguments, app.instrumentationWatcher, testMode,</div><div class=\"line\">                 enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                 <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat, getCommonServicesLocked(),</div><div class=\"line\">                 mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">         updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">         app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class=\"line\">       .....</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在attachApplicationLocked()方法中,细节比较多，我们省略掉了，主要来看一下核心方法bindApplication(),其中thread就是ActivityThread中ApplicationThread类，让我们再来看ApplicationThread中的bindApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">bindApplication</span><span class=\"params\">(String processName,</span></span></div><div class=\"line\">        ApplicationInfo appInfo, List&lt;ProviderInfo&gt; providers,</div><div class=\"line\">        ComponentName instrumentationName, String profileFile,</div><div class=\"line\">        ParcelFileDescriptor profileFd, <span class=\"keyword\">boolean</span> autoStopProfiler,</div><div class=\"line\">        Bundle instrumentationArgs, IInstrumentationWatcher instrumentationWatcher,</div><div class=\"line\">        <span class=\"keyword\">int</span> debugMode, <span class=\"keyword\">boolean</span> enableOpenGlTrace, <span class=\"keyword\">boolean</span> isRestrictedBackupMode,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> persistent, Configuration config, CompatibilityInfo compatInfo,</div><div class=\"line\">        Map&lt;String, IBinder&gt; services, Bundle coreSettings) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (services != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Setup the service cache in the ServiceManager</span></div><div class=\"line\">        ServiceManager.initServiceCache(services);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCoreSettings(coreSettings);</div><div class=\"line\"></div><div class=\"line\">    AppBindData data = <span class=\"keyword\">new</span> AppBindData();</div><div class=\"line\">    data.processName = processName;</div><div class=\"line\">    data.appInfo = appInfo;</div><div class=\"line\">    data.providers = providers;</div><div class=\"line\">    data.instrumentationName = instrumentationName;</div><div class=\"line\">    data.instrumentationArgs = instrumentationArgs;</div><div class=\"line\">    data.instrumentationWatcher = instrumentationWatcher;</div><div class=\"line\">    data.debugMode = debugMode;</div><div class=\"line\">    data.enableOpenGlTrace = enableOpenGlTrace;</div><div class=\"line\">    data.restrictedBackupMode = isRestrictedBackupMode;</div><div class=\"line\">    data.persistent = persistent;</div><div class=\"line\">    data.config = config;</div><div class=\"line\">    data.compatInfo = compatInfo;</div><div class=\"line\">    data.initProfileFile = profileFile;</div><div class=\"line\">    data.initProfileFd = profileFd;</div><div class=\"line\">    data.initAutoStopProfiler = <span class=\"keyword\">false</span>;</div><div class=\"line\">    queueOrSendMessage(H.BIND_APPLICATION, data);<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中queueOrSendMessage方法主要就是向Handler发送了一个Message，让我们来看看具体的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// if the thread hasn't started yet, we don't have the handler, so just</span></div><div class=\"line\">   <span class=\"comment\">// save the messages until we're ready.</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj)</span> </span>&#123;</div><div class=\"line\">       queueOrSendMessage(what, obj, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1)</span> </span>&#123;</div><div class=\"line\">       queueOrSendMessage(what, obj, arg1, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(</div><div class=\"line\">               TAG, <span class=\"string\">\"SCHEDULE \"</span> + what + <span class=\"string\">\" \"</span> + mH.codeToString(what)</div><div class=\"line\">               + <span class=\"string\">\": \"</span> + arg1 + <span class=\"string\">\" / \"</span> + obj);</div><div class=\"line\">           Message msg = Message.obtain();</div><div class=\"line\">           msg.what = what;</div><div class=\"line\">           msg.obj = obj;</div><div class=\"line\">           msg.arg1 = arg1;</div><div class=\"line\">           msg.arg2 = arg2;</div><div class=\"line\">           mH.sendMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>容易知道，主要就是向Handler mH中发送一条消息，根据Handler消息循环机制，可以在handMessage查看处理方法，根据H.BIND_APPLICATION<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">           .....</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BIND_APPLICATION        = <span class=\"number\">110</span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                .......</div><div class=\"line\">                <span class=\"keyword\">case</span> BIND_APPLICATION:</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"bindApplication\"</span>);</div><div class=\"line\">                    AppBindData data = (AppBindData)msg.obj;</div><div class=\"line\">                    handleBindApplication(data);<span class=\"comment\">//核心方法</span></div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                 .......</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续看handleBindApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBindApplication</span><span class=\"params\">(AppBindData data)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            .........</div><div class=\"line\"></div><div class=\"line\">            Application app = data.info.makeApplication(data.restrictedBackupMode, <span class=\"keyword\">null</span>);</div><div class=\"line\">            mInitialApplication = app;</div><div class=\"line\"></div><div class=\"line\">           ...... </div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(savedPolicy);</div><div class=\"line\">        &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过分析知data为AppBindData，data.info是一个LoadeApk对象。data.info.makeApplication()，让我们继续看LoadeApk中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Application <span class=\"title\">makeApplication</span><span class=\"params\">(<span class=\"keyword\">boolean</span> forceDefaultAppClass,</span></span></div><div class=\"line\">           Instrumentation instrumentation) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mApplication != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Application app = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       String appClass = mApplicationInfo.className;</div><div class=\"line\">       <span class=\"keyword\">if</span> (forceDefaultAppClass || (appClass == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">           appClass = <span class=\"string\">\"android.app.Application\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           java.lang.ClassLoader cl = getClassLoader();</div><div class=\"line\">           ContextImpl appContext = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">           appContext.init(<span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>, mActivityThread);</div><div class=\"line\">           app = mActivityThread.mInstrumentation.newApplication(</div><div class=\"line\">                   cl, appClass, appContext);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\">           appContext.setOuterContext(app);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!mActivityThread.mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"string\">\"Unable to instantiate application \"</span> + appClass</div><div class=\"line\">                   + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mActivityThread.mAllApplications.add(app);</div><div class=\"line\">       mApplication = app;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (instrumentation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               instrumentation.callApplicationOnCreate(app);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!instrumentation.onException(app, e)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                       <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">                       + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">return</span> app;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>主要还是调ActivityThread中mInstrumentation.newApplication()方法，并传入了继承Application的类的类名appClass，当Applicaiton建立后，马上就调用了方法2即Application的onCreate(),让我们先来看Instrumentation中的newApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(ClassLoader cl, String className, Context context)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, </div><div class=\"line\">        ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> newApplication(cl.loadClass(className), context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(Class&lt;?&gt; clazz, Context context)</span></span></div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, </div><div class=\"line\">        ClassNotFoundException &#123;</div><div class=\"line\">    Application app = (Application)clazz.newInstance();</div><div class=\"line\">    app.attach(context);<span class=\"comment\">//方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，就建立了应用程序的Application，然而在Application中那个方法是最先调用的呢？让我们继续看一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@hide</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">/* package */</span> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    attachBaseContext(context);</div><div class=\"line\">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此我们知道Application初始化后，首先调用的是attachBaseContext()方法，其次才是Application的onCreate方法，让我们看一下调用onCreate()方法,在前面的makeApplication()方法中，有此代码instrumentation.callApplicationOnCreate(app)，我们继续来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callApplicationOnCreate</span><span class=\"params\">(Application app)</span> </span>&#123;</div><div class=\"line\">    app.onCreate();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里Android应用程序的入口源码就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>Android应用程序的入口是ActivityThread的main方法，而Android应用程序的开发入口是Application的attachBaseContext()和onCreate()。如果有类继承Application，并在Androidmanifest中配置了，它就会优先启动。在继承Application类初始化后，首先调用的是attachBaseContext()方法，其次才是onCreate方法。</p>\n<h1 id=\"五、相关及参考文档\"><a href=\"#五、相关及参考文档\" class=\"headerlink\" title=\"五、相关及参考文档\"></a>五、相关及参考文档</h1><p><a href=\"http://blog.csdn.net/tenggangren/article/details/50925740\" target=\"_blank\" rel=\"external\">Activity启动过程全解析</a></p>\n<p><a href=\"http://blog.csdn.net/Innost/article/details/47254381\" target=\"_blank\" rel=\"external\">深入理解ActivityManagerService</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/1-init.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（一）解析init进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/2-zygote.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（二）解析Zygote进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/3-syetemserver.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（三）解析SyetemServer进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/4-launcher.html\" target=\"_blank\" rel=\"external\">Android系统启动流程（四）Launcher启动过程与系统启动流程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/2.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（后篇）</a></p>\n","excerpt":"<hr>\n<p>我们在写C、C++或java应用时，都会有一个main函数，但Android的main函数在哪里呢？偶记得从第一个HelloWorld应用开始，就知道，只要在AndroidManifest配置表中对Activity的intent-filter进行配置，action为android.intent.action.MAIN，category为android.intent.category.LAUNCHER，应用程序启动的时候就会首先启动这个Activity，此Activity也就是应用的入口；后来又知道Application这个类，只要有类继承Application,并在AndroidManifest配置表中对application的name进行配置该类，android应用启动后会把该类的attachBaseContext和onCreate方法作为程序开发入口。实际上是不是这样的呢？本篇博文将会从源码角度来分析。</p>\n<p>在说Android应用程序开发入口之前，我们有必要了解一下android系统的启动和Android应用程序的启动流程，这样有助于我们对Android系统有一个整体的认识。首先，让我们来简单了解一下Android系统的启动流程。</p>\n<h1 id=\"一、Android系统的启动\"><a href=\"#一、Android系统的启动\" class=\"headerlink\" title=\"一、Android系统的启动\"></a>一、Android系统的启动</h1><p>Android系统的启动流程是怎样的呢？首先先来看一下流程图：</p>\n<p><img src=\"/assets/img/tech_android_system_start_chart.png\" alt=\"\"><br>","more":"</p>\n<p>根据图，我们知Android启动流程的步骤如下：</p>\n<ul>\n<li><p><strong>1.启动电源</strong><br>当电源按下时引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。</p>\n</li>\n<li><p><strong>2.引导程序BootLoader执行</strong><br>引导程序BootLoader是在Android操作系统开始运行前的一个小程序，它的主要作用是把系统OS拉起来并运行。</p>\n</li>\n<li><p><strong>3.Linux内核启动</strong><br>内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置，它首先在系统文件中寻找init.rc文件，并启动init进程。</p>\n</li>\n<li><p><strong>4.init进程启动</strong><br>初始化和启动属性服务，并且启动Zygote进程。</p>\n</li>\n<li><p><strong>5.Zygote进程启动</strong><br>创建JavaVM并为JavaVM注册JNI，创建服务端Socket，启动SystemServer进程。</p>\n</li>\n<li><p><strong>6.SystemServer进程启动</strong><br>启动Binder线程池和SystemServiceManager，并且启动各种系统服务，例如：ActivityManagerService、PowerManagerService、PackageManagerService，BatteryService、UsageStatsService等其他80多个系统服务。</p>\n</li>\n<li><p><strong>7.Launcher启动</strong><br>被SystemServer进程启动的ActivityManagerService会启动Launcher，Launcher启动后会将已安装应用的快捷图标显示到界面上。</p>\n</li>\n</ul>\n<p>关于Android系统的启动源码分析，这里推荐大神刘望舒的几篇文章，讲得比较详细：</p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/1-init.html\">Android系统启动流程（一）解析init进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/2-zygote.html\">Android系统启动流程（二）解析Zygote进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/3-syetemserver.html\">Android系统启动流程（三）解析SyetemServer进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/4-launcher.html\">Android系统启动流程（四）Launcher启动过程与系统启动流程</a></p>\n<h1 id=\"二、Android应用程序启动\"><a href=\"#二、Android应用程序启动\" class=\"headerlink\" title=\"二、Android应用程序启动\"></a>二、Android应用程序启动</h1><p>上面说到，当Android系统启动完成之后，Lancher也就启动完成了，在我们的桌面上就会看到已安装的应用快捷图标。点击快捷图标，就能启动我们的应用程序。我们知道，android系统中的每一个应用程序，都是独立运行在自己的进程中的，所以在点击应用快捷图标后，如果应用程序还没有进程，首先应该会先建立应用程序的进程。具体流程是怎样的呢？我们先来看流程图：</p>\n<p><img src=\"/assets/img/tech_android_app_start_chart.png\" alt=\"\"></p>\n<p>从流程图知，<strong>应用程序在没有创建进程的情况下，会通过ActivitServiceManager去请求服务端Socket，服务端Socket再去请求Zygote进程，让其帮忙建立进程，而Zygote进程会fork自身来创建应用程序进程。应用程序进程创建的同时，应用程序的主线程也会创建，与主线程息息相关的ActivityThread类也会创建，并调用自身的main方法，进行相关的初始化。</strong></p>\n<p>具体进程是怎么创建的，这里也还是推荐大神刘望舒的两篇文章，其中非常详细的分析了应用进程的创建过程，想了解的可以看一下。</p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/2.html\">Android应用程序进程启动过程（后篇）</a></p>\n<p>好了，下面我们来继续说说<strong>ActivityThread的main方法，也即Android应用程序的入口</strong>。</p>\n<h1 id=\"三、Android应用程序入口源码分析\"><a href=\"#三、Android应用程序入口源码分析\" class=\"headerlink\" title=\"三、Android应用程序入口源码分析\"></a>三、Android应用程序入口源码分析</h1><p>通过Android应用程序的启动，我们知道android应用程序的入口，即ActivityThread的main方法。但在我们开发的时候，很少接触ActivityThread类,主要还是Application和Activity，他俩与ActivityThread的关系怎样呢？让我们从源码中来看看，ActivityThread的main方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">    <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">    <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">    CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Looper.prepareMainLooper();<span class=\"comment\">//1.Looper的创建</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();<span class=\"comment\">//2.ActivityThread初始化</span></div><div class=\"line\">    thread.attach(<span class=\"keyword\">false</span>);<span class=\"comment\">//3.调用ActivityThread附属方法attach</span></div><div class=\"line\"></div><div class=\"line\">    AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Looper.loop();<span class=\"comment\">//4.Looper消息开始循环</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在main方法中，主线程的Looper实现了初始化和消息循环，这与Android的消息机制息息相关。关于消息机制，我已写过一个篇文章为<a href=\"http://blog.csdn.net/awenyini/article/details/78593139\">Android消息机制源码解析(Handler)</a>，想了解的可以看一下。这里我们主要来看一下ActivityThread的初始化和attach方法，其中ActivityThread初始化构造方法什么也没做，没啥好看的，我们主要来看看attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">this</span>);</div><div class=\"line\">    mSystemThread = system;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!system) &#123;<span class=\"comment\">//false，不是system,普通app</span></div><div class=\"line\">        .......省略</div><div class=\"line\">        android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\">        IActivityManager mgr = ActivityManagerNative.getDefault();<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mgr.attachApplication(mAppThread);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">            <span class=\"comment\">// Ignore</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//true，是system</span></div><div class=\"line\">        <span class=\"comment\">// Don't set application object here -- if the system crashes,</span></div><div class=\"line\">        <span class=\"comment\">// we can't display an alert, we just want to die die die.</span></div><div class=\"line\">        android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"system_process\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mInstrumentation = <span class=\"keyword\">new</span> Instrumentation();</div><div class=\"line\">            ContextImpl context = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">            context.init(getSystemContext().mPackageInfo, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">            Application app = Instrumentation.newApplication(Application.class, context);</div><div class=\"line\">            mAllApplications.add(app);</div><div class=\"line\">            mInitialApplication = app;</div><div class=\"line\">            app.onCreate();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                    <span class=\"string\">\"Unable to instantiate Application():\"</span> + e.toString(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......省略</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ActivityThread调用attach()传入的参数是false，不是system。注释1通过静态方法ActivityManagerNative.getDefault()获取IActivityManager,实际上是获取到ActivityManagerProxy类，让我们来看ActivityManagerNative.getDefault()方法,进入ActivityManagerNative类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Cast a Binder object into an activity manager interface, generating</div><div class=\"line\"> * a proxy if needed.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    IActivityManager in =</div><div class=\"line\">        (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">    <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> in;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Retrieve the system's default/global activity manager.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager am = asInterface(b);<span class=\"comment\">//核心方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">            Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> am;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>通过查看ActivityManagerProxy类，了解到它实现IActivityManager接口,mgr就是ActivityManagerProxy。知道返回的类后，我们再来看一下注释2，mgr.attachApplication(mAppThread)，其中mAppThread为ApplicationThread，让我们再进入ActivityManagerProxy，看看attachApplication方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread app)</span> <span class=\"keyword\">throws</span> RemoteException</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IActivityManager.descriptor);</div><div class=\"line\">        data.writeStrongBinder(app.asBinder());</div><div class=\"line\">        mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, <span class=\"number\">0</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">        reply.readException();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码中，了解到mRemote是一个IBinder，通过Binder实现进程间通信(Android核心进程通信方法)，从而调用到ActivityServiceManager里面对应的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\">        attachApplicationLocked(thread, callingPid);<span class=\"comment\">//核心方法</span></div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来继续看方法attachApplicationLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</div><div class=\"line\">         <span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\">         .......</div><div class=\"line\">         thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                 app.instrumentationClass, profileFile, profileFd, profileAutoStop,</div><div class=\"line\">                 app.instrumentationArguments, app.instrumentationWatcher, testMode,</div><div class=\"line\">                 enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                 <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat, getCommonServicesLocked(),</div><div class=\"line\">                 mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">         updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">         app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class=\"line\">       .....</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>在attachApplicationLocked()方法中,细节比较多，我们省略掉了，主要来看一下核心方法bindApplication(),其中thread就是ActivityThread中ApplicationThread类，让我们再来看ApplicationThread中的bindApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">bindApplication</span><span class=\"params\">(String processName,</div><div class=\"line\">        ApplicationInfo appInfo, List&lt;ProviderInfo&gt; providers,</div><div class=\"line\">        ComponentName instrumentationName, String profileFile,</div><div class=\"line\">        ParcelFileDescriptor profileFd, <span class=\"keyword\">boolean</span> autoStopProfiler,</div><div class=\"line\">        Bundle instrumentationArgs, IInstrumentationWatcher instrumentationWatcher,</div><div class=\"line\">        <span class=\"keyword\">int</span> debugMode, <span class=\"keyword\">boolean</span> enableOpenGlTrace, <span class=\"keyword\">boolean</span> isRestrictedBackupMode,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> persistent, Configuration config, CompatibilityInfo compatInfo,</div><div class=\"line\">        Map&lt;String, IBinder&gt; services, Bundle coreSettings)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (services != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Setup the service cache in the ServiceManager</span></div><div class=\"line\">        ServiceManager.initServiceCache(services);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setCoreSettings(coreSettings);</div><div class=\"line\"></div><div class=\"line\">    AppBindData data = <span class=\"keyword\">new</span> AppBindData();</div><div class=\"line\">    data.processName = processName;</div><div class=\"line\">    data.appInfo = appInfo;</div><div class=\"line\">    data.providers = providers;</div><div class=\"line\">    data.instrumentationName = instrumentationName;</div><div class=\"line\">    data.instrumentationArgs = instrumentationArgs;</div><div class=\"line\">    data.instrumentationWatcher = instrumentationWatcher;</div><div class=\"line\">    data.debugMode = debugMode;</div><div class=\"line\">    data.enableOpenGlTrace = enableOpenGlTrace;</div><div class=\"line\">    data.restrictedBackupMode = isRestrictedBackupMode;</div><div class=\"line\">    data.persistent = persistent;</div><div class=\"line\">    data.config = config;</div><div class=\"line\">    data.compatInfo = compatInfo;</div><div class=\"line\">    data.initProfileFile = profileFile;</div><div class=\"line\">    data.initProfileFd = profileFd;</div><div class=\"line\">    data.initAutoStopProfiler = <span class=\"keyword\">false</span>;</div><div class=\"line\">    queueOrSendMessage(H.BIND_APPLICATION, data);<span class=\"comment\">//核心方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中queueOrSendMessage方法主要就是向Handler发送了一个Message，让我们来看看具体的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// if the thread hasn't started yet, we don't have the handler, so just</span></div><div class=\"line\">   <span class=\"comment\">// save the messages until we're ready.</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj)</span> </span>&#123;</div><div class=\"line\">       queueOrSendMessage(what, obj, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1)</span> </span>&#123;</div><div class=\"line\">       queueOrSendMessage(what, obj, arg1, <span class=\"number\">0</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">queueOrSendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Object obj, <span class=\"keyword\">int</span> arg1, <span class=\"keyword\">int</span> arg2)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(</div><div class=\"line\">               TAG, <span class=\"string\">\"SCHEDULE \"</span> + what + <span class=\"string\">\" \"</span> + mH.codeToString(what)</div><div class=\"line\">               + <span class=\"string\">\": \"</span> + arg1 + <span class=\"string\">\" / \"</span> + obj);</div><div class=\"line\">           Message msg = Message.obtain();</div><div class=\"line\">           msg.what = what;</div><div class=\"line\">           msg.obj = obj;</div><div class=\"line\">           msg.arg1 = arg1;</div><div class=\"line\">           msg.arg2 = arg2;</div><div class=\"line\">           mH.sendMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>容易知道，主要就是向Handler mH中发送一条消息，根据Handler消息循环机制，可以在handMessage查看处理方法，根据H.BIND_APPLICATION<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">H</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">           .....</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BIND_APPLICATION        = <span class=\"number\">110</span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                .......</div><div class=\"line\">                <span class=\"keyword\">case</span> BIND_APPLICATION:</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"bindApplication\"</span>);</div><div class=\"line\">                    AppBindData data = (AppBindData)msg.obj;</div><div class=\"line\">                    handleBindApplication(data);<span class=\"comment\">//核心方法</span></div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                 .......</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续看handleBindApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleBindApplication</span><span class=\"params\">(AppBindData data)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            .........</div><div class=\"line\"></div><div class=\"line\">            Application app = data.info.makeApplication(data.restrictedBackupMode, <span class=\"keyword\">null</span>);</div><div class=\"line\">            mInitialApplication = app;</div><div class=\"line\"></div><div class=\"line\">           ...... </div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.onCreate(data.instrumentationArgs);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mInstrumentation.callApplicationOnCreate(app);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(savedPolicy);</div><div class=\"line\">        &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>通过分析知data为AppBindData，data.info是一个LoadeApk对象。data.info.makeApplication()，让我们继续看LoadeApk中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Application <span class=\"title\">makeApplication</span><span class=\"params\">(<span class=\"keyword\">boolean</span> forceDefaultAppClass,</div><div class=\"line\">           Instrumentation instrumentation)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mApplication != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> mApplication;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Application app = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">       String appClass = mApplicationInfo.className;</div><div class=\"line\">       <span class=\"keyword\">if</span> (forceDefaultAppClass || (appClass == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">           appClass = <span class=\"string\">\"android.app.Application\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           java.lang.ClassLoader cl = getClassLoader();</div><div class=\"line\">           ContextImpl appContext = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">           appContext.init(<span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>, mActivityThread);</div><div class=\"line\">           app = mActivityThread.mInstrumentation.newApplication(</div><div class=\"line\">                   cl, appClass, appContext);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\">           appContext.setOuterContext(app);</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (!mActivityThread.mInstrumentation.onException(app, e)) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                   <span class=\"string\">\"Unable to instantiate application \"</span> + appClass</div><div class=\"line\">                   + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mActivityThread.mAllApplications.add(app);</div><div class=\"line\">       mApplication = app;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (instrumentation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               instrumentation.callApplicationOnCreate(app);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!instrumentation.onException(app, e)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                       <span class=\"string\">\"Unable to create application \"</span> + app.getClass().getName()</div><div class=\"line\">                       + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">return</span> app;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>主要还是调ActivityThread中mInstrumentation.newApplication()方法，并传入了继承Application的类的类名appClass，当Applicaiton建立后，马上就调用了方法2即Application的onCreate(),让我们先来看Instrumentation中的newApplication()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(ClassLoader cl, String className, Context context)</span></div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, </div><div class=\"line\">        ClassNotFoundException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> newApplication(cl.loadClass(className), context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(Class&lt;?&gt; clazz, Context context)</span></div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, </div><div class=\"line\">        ClassNotFoundException </span>&#123;</div><div class=\"line\">    Application app = (Application)clazz.newInstance();</div><div class=\"line\">    app.attach(context);<span class=\"comment\">//方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，就建立了应用程序的Application，然而在Application中那个方法是最先调用的呢？让我们继续看一下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * <span class=\"doctag\">@hide</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"comment\">/* package */</span> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    attachBaseContext(context);</div><div class=\"line\">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此我们知道Application初始化后，首先调用的是attachBaseContext()方法，其次才是Application的onCreate方法，让我们看一下调用onCreate()方法,在前面的makeApplication()方法中，有此代码instrumentation.callApplicationOnCreate(app)，我们继续来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callApplicationOnCreate</span><span class=\"params\">(Application app)</span> </span>&#123;</div><div class=\"line\">    app.onCreate();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里Android应用程序的入口源码就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>Android应用程序的入口是ActivityThread的main方法，而Android应用程序的开发入口是Application的attachBaseContext()和onCreate()。如果有类继承Application，并在Androidmanifest中配置了，它就会优先启动。在继承Application类初始化后，首先调用的是attachBaseContext()方法，其次才是onCreate方法。</p>\n<h1 id=\"五、相关及参考文档\"><a href=\"#五、相关及参考文档\" class=\"headerlink\" title=\"五、相关及参考文档\"></a>五、相关及参考文档</h1><p><a href=\"http://blog.csdn.net/tenggangren/article/details/50925740\">Activity启动过程全解析</a></p>\n<p><a href=\"http://blog.csdn.net/Innost/article/details/47254381\">深入理解ActivityManagerService</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/1-init.html\">Android系统启动流程（一）解析init进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/2-zygote.html\">Android系统启动流程（二）解析Zygote进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/3-syetemserver.html\">Android系统启动流程（三）解析SyetemServer进程启动过程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/booting/4-launcher.html\">Android系统启动流程（四）Launcher启动过程与系统启动流程</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"http://liuwangshu.cn/framework/applicationprocess/2.html\">Android应用程序进程启动过程（后篇）</a></p>"},{"layout":"post","title":"Activity布局加载流程源码分析(III)","date":"2019-06-28T02:09:39.000Z","comments":1,"_content":"---\n在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)、[Activity布局加载流程源码分析(II)](https://blog.csdn.net/awenyini/article/details/78964353)、[DecorView绘制流程源码分析](https://blog.csdn.net/awenyini/article/details/78983463)与[View绘制三大流程源码分析](https://blog.csdn.net/awenyini/article/details/79006432)等四篇文章中，已经很详细分析了Acitivity的布局加载过程及布局的绘制过程。但在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390) 中，对于setContentView(\"资源文件\")怎么转化View的，没有细说，本篇博文主要想梳理一下这块内容（**ps:面试的时候，被面试官问到，既然答不上来，所以决定对这部分知识也好好梳理一下**）。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **LayoutInflater：** 是布局填充类，主要就是将我们的layout转化为View。\n- **XmlPullParser：** 是XML解析器，主要是解析xml文件也即layout.xml文件。\n\n# 一、源码分析\n从[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)文中，我们知道，在Activity的onCreate()中setContentView()后，最后也是调用PhoneWindow中的setContentView()方法。源码如下：\n~~~java\n   //Activity中\n  public void setContentView(int layoutResID) {\n        getWindow().setContentView(layoutResID);//核心代码\n        initActionBar();\n    }\n~~~\n~~~java\n    //PhoneWindow中\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            mLayoutInflater.inflate(layoutResID, mContentParent);//核心代码\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n~~~\n这里我们主要来看核心代码，也即 mLayoutInflater.inflate(layoutResID, mContentParent)；其中mLayoutInflater的初始化主要是在PhoneWindow中构造方法中初始化的：\n~~~java\n  public PhoneWindow(Context context) {\n        super(context);\n        mLayoutInflater = LayoutInflater.from(context);\n    }\n~~~\n所以，重点我们还是来看一下LayoutInflater类：\n~~~java\npublic abstract class LayoutInflater {\n     .......\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n    .......\n  //填充方法1\n  public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    /**\n     * 填充方法2\n     * Inflate a new view hierarchy from the specified xml node. Throws\n     * {@link InflateException} if there is an error. *\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n        return inflate(parser, root, root != null);\n    }\n\n    /**\n     * 填充方法3\n     * Inflate a new view hierarchy from the specified xml resource. Throws\n     * {@link InflateException} if there is an error.\n     */\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        .......\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n\n    /**\n     * 填充方法4\n     * Inflate a new view hierarchy from the specified XML node. Throws\n     * {@link InflateException} if there is an error.\n     * <p>\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            View result = root;\n\n            try {\n                .........\n                final String name = parser.getName();\n                ..........\n                if (TAG_MERGE.equals(name)) {\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);\n                } else {\n                    // Temp is the root view that was found in the xml\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                    ViewGroup.LayoutParams params = null;\n                    if (root != null) {\n                        if (DEBUG) {\n                            System.out.println(\"Creating params from root: \" + root);\n                        }\n                        // Create layout params that match root, if supplied\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // Set the layout params for temp if we are not\n                            // attaching. (If we are, we use addView, below)\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> start inflating children\");\n                    }\n\n                    // Inflate all children under temp against its context.\n                    rInflateChildren(parser, temp, attrs, true);\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> done inflating children\");\n                    }\n\n                    // We are supposed to attach all the views we found (int temp)\n                    // to root. Do that now.\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // Decide whether to return the root that was passed in or the\n                    // top view found in xml.\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n            ........\n            return result;\n        }\n    }\n    ..........\n}\n~~~\n从上面代码我们知道，mLayoutInflater 的初始化，主要是从context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)中获取的。在LayoutInflater的源码中，还有多个inflate方法中，这里我们先来看看填充方法2：\n~~~java\npublic View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        .......\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n~~~\n由代码易知，这里主要是从资源Resources中获取布局xml，通过res.getLayout(resource)得到一个Xml资源解析器XmlResourceParser，然后再调用填充方法4，这里的XmlResourceParser，我们也可以来看一下源码：\n~~~java\npublic interface XmlResourceParser extends XmlPullParser, AttributeSet, AutoCloseable {\n    /**\n     * Close this interface to the resource.  Calls on the interface are no\n     * longer value after this call.\n     */\n    public void close();\n}\n~~~\n由上易知，XmlResourceParser也是一个接口，这里主要继承了三个类XmlPullParser（XML文件解析器）、AttributeSet（自定义属性值）、AutoCloseable ，主要是了后面解析服务。所以这里我们重点来看看Resource中的getLayout()方法：\n~~~java\npublic class Resources {\n    ........\n    public XmlResourceParser getLayout(@LayoutRes int id) throws NotFoundException {\n        return loadXmlResourceParser(id, \"layout\");\n    }\n    ........\n    \n    /*package*/ XmlResourceParser loadXmlResourceParser(int id, String type)\n            throws NotFoundException {\n        synchronized (mAccessLock) {\n            TypedValue value = mTmpValue;\n            if (value == null) {\n                mTmpValue = value = new TypedValue();\n            }\n            getValue(id, value, true);\n            if (value.type == TypedValue.TYPE_STRING) {\n                return loadXmlResourceParser(value.string.toString(), id,\n                        value.assetCookie, type);\n            }\n            throw new NotFoundException(\n                    \"Resource ID #0x\" + Integer.toHexString(id) + \" type #0x\"\n                    + Integer.toHexString(value.type) + \" is not valid\");\n        }\n    }\n    \n    /*package*/ XmlResourceParser loadXmlResourceParser(String file, int id,\n            int assetCookie, String type) throws NotFoundException {\n        if (id != 0) {\n            try {\n                // These may be compiled...\n                synchronized (mCachedXmlBlockIds) {\n                    // First see if this block is in our cache.\n                    final int num = mCachedXmlBlockIds.length;\n                    for (int i=0; i<num; i++) {\n                        if (mCachedXmlBlockIds[i] == id) {\n                            //System.out.println(\"**** REUSING XML BLOCK!  id=\"\n                            //                   + id + \", index=\" + i);\n                            return mCachedXmlBlocks[i].newParser();\n                        }\n                    }\n\n                    // Not in the cache, create a new block and put it at\n                    // the next slot in the cache.\n                    XmlBlock block = mAssets.openXmlBlockAsset(\n                            assetCookie, file);\n                    if (block != null) {\n                        int pos = mLastCachedXmlBlockIndex+1;\n                        if (pos >= num) pos = 0;\n                        mLastCachedXmlBlockIndex = pos;\n                        XmlBlock oldBlock = mCachedXmlBlocks[pos];\n                        if (oldBlock != null) {\n                            oldBlock.close();\n                        }\n                        mCachedXmlBlockIds[pos] = id;\n                        mCachedXmlBlocks[pos] = block;\n                        //System.out.println(\"**** CACHING NEW XML BLOCK!  id=\"\n                        //                   + id + \", index=\" + pos);\n                        return block.newParser();\n                    }\n                }\n            } catch (Exception e) {\n                NotFoundException rnf = new NotFoundException(\n                        \"File \" + file + \" from xml type \" + type + \" resource ID #0x\"\n                        + Integer.toHexString(id));\n                rnf.initCause(e);\n                throw rnf;\n            }\n        }\n\n        throw new NotFoundException(\n                \"File \" + file + \" from xml type \" + type + \" resource ID #0x\"\n                + Integer.toHexString(id));\n    }\n    ........\n}\n~~~\n通过上面代码我们知道，最后通过XmlBlock.newParser()生成一个xml解析器，也即是XmlResourceParser，**从以上我们知道Android中布局文件用的xml解析方法就是PULL解析方式。** 下面我们具体来看填充方法4：\n~~~java\n /**\n     * 填充方法4\n     * Inflate a new view hierarchy from the specified XML node. Throws\n     * {@link InflateException} if there is an error.\n     * <p>\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            View result = root;\n\n            try {\n                // Look for the root node.\n                int type;\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                        type != XmlPullParser.END_DOCUMENT) {\n                    // Empty\n                }\n                if (type != XmlPullParser.START_TAG) {\n                    throw new InflateException(parser.getPositionDescription()\n                            + \": No start tag found!\");\n                }\n                final String name = parser.getName();\n                ..........\n                if (TAG_MERGE.equals(name)) {//核心代码1\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);//核心代码2\n                } else {\n                    // Temp is the root view that was found in the xml\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);//核心代码3\n\n                    ViewGroup.LayoutParams params = null;\n                    if (root != null) {\n                        if (DEBUG) {\n                            System.out.println(\"Creating params from root: \" + root);\n                        }\n                        // Create layout params that match root, if supplied\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // Set the layout params for temp if we are not\n                            // attaching. (If we are, we use addView, below)\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> start inflating children\");\n                    }\n\n                    // Inflate all children under temp against its context.\n                    rInflateChildren(parser, temp, attrs, true);//核心代码4\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> done inflating children\");\n                    }\n\n                    // We are supposed to attach all the views we found (int temp)\n                    // to root. Do that now.\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // Decide whether to return the root that was passed in or the\n                    // top view found in xml.\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n            ........\n            return result;\n        }\n    }\n    ..........\n}\n~~~\n**我们在写布局文件的时候，经常也会考虑到一些布局优化的问题，所以难免会用到include、merge、ViewStub标签，所以在XML解析的时候，需要针对此类标签作特别处理。** \n\n从上面代码中，我们来看核心代码1, TAG_MERGE.equals(name)，其中 TAG_MERGE就为merge，这里主要就是针对merge标签处理。我们先来看核心代码3和4，\n核心代码3： createViewFromTag(root, name, inflaterContext, attrs),具体我们也来看看源码：\n~~~java\n   private View createViewFromTag(View parent, String name, Context context, AttributeSet attrs) {\n        return createViewFromTag(parent, name, context, attrs, false);\n    }\n    /**\n     * Creates a view from a tag name using the supplied attribute set.\n     */\n    View createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\n            boolean ignoreThemeAttr) {\n        if (name.equals(\"view\")) {\n            name = attrs.getAttributeValue(null, \"class\");\n        }\n\n        // Apply a theme wrapper, if allowed and one is specified.\n        if (!ignoreThemeAttr) {\n            final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);\n            final int themeResId = ta.getResourceId(0, 0);\n            if (themeResId != 0) {\n                context = new ContextThemeWrapper(context, themeResId);\n            }\n            ta.recycle();\n        }\n\n        if (name.equals(TAG_1995)) {\n            // Let's party like it's 1995!\n            return new BlinkLayout(context, attrs);\n        }\n\n        try {\n            View view;\n            if (mFactory2 != null) {\n                view = mFactory2.onCreateView(parent, name, context, attrs);\n            } else if (mFactory != null) {\n                view = mFactory.onCreateView(name, context, attrs);\n            } else {\n                view = null;\n            }\n\n            if (view == null && mPrivateFactory != null) {\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\n            }\n\n            if (view == null) {\n                final Object lastContext = mConstructorArgs[0];\n                mConstructorArgs[0] = context;\n                try {\n                    if (-1 == name.indexOf('.')) {\n                        view = onCreateView(parent, name, attrs);\n                    } else {\n                        view = createView(name, null, attrs);\n                    }\n                } finally {\n                    mConstructorArgs[0] = lastContext;\n                }\n            }\n\n            return view;\n        } catch (InflateException e) {\n            throw e;\n\n        } catch (ClassNotFoundException e) {\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\n                    + \": Error inflating class \" + name);\n            ie.initCause(e);\n            throw ie;\n\n        } catch (Exception e) {\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\n                    + \": Error inflating class \" + name);\n            ie.initCause(e);\n            throw ie;\n        }\n    }\n~~~\n我们也来看看核心代码4：rInflateChildren(parser, temp, attrs, true)，我们具体来看看相关代码：\n~~~java\n    final void rInflateChildren(XmlPullParser parser, View parent, AttributeSet attrs,\n            boolean finishInflate) throws XmlPullParserException, IOException {\n        rInflate(parser, parent, parent.getContext(), attrs, finishInflate);\n    }\n~~~\n通过上面发现，最后也还是调用了核心代码2，rInflate(parser, root, inflaterContext, attrs, false)，下面我们具体来看看核心代码2：\n~~~java\nvoid rInflate(XmlPullParser parser, View parent, Context context,\n            AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n        final int depth = parser.getDepth();\n        int type;\n        while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n\n            if (type != XmlPullParser.START_TAG) {\n                continue;\n            }\n\n            final String name = parser.getName();\n            \n            if (TAG_REQUEST_FOCUS.equals(name)) {\n                parseRequestFocus(parser, parent);\n            } else if (TAG_TAG.equals(name)) {\n                parseViewTag(parser, parent, attrs);\n            } else if (TAG_INCLUDE.equals(name)) {//代码1\n                if (parser.getDepth() == 0) {\n                    throw new InflateException(\"<include /> cannot be the root element\");\n                }\n                parseInclude(parser, context, parent, attrs);\n            } else if (TAG_MERGE.equals(name)) {//代码2\n                throw new InflateException(\"<merge /> must be the root element\");\n            } else {\n                final View view = createViewFromTag(parent, name, context, attrs);\n                final ViewGroup viewGroup = (ViewGroup) parent;\n                final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                rInflateChildren(parser, view, attrs, true);\n                viewGroup.addView(view, params);\n            }\n        }\n\n        if (finishInflate) {\n            parent.onFinishInflate();\n        }\n    }\n~~~\n这里我们看到，主要就是通过PULL解析布局文件的方式解析出相关的View结构，具体PULL解析方式这里就不介绍了，小伙伴可以自行百度。在这里PULL解析的过程中，还对标签include,merge做了特别处理，是不是发现貌似代码中没有对标签ViewStub进行处理，其实是有的，主要是在createView()方法中，这里就不介绍了，小伙伴可以自行查一下源码。\n\n好了，到这里，就差不多分析完了。\n\n**注：源码采用android-6.0.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[Activity布局加载流程源码分析(II)](https://blog.csdn.net/awenyini/article/details/78964353)\n\n[Android解析XML的三种方式](https://blog.csdn.net/d_shadow/article/details/55253586)\n","source":"_posts/tech_android_framework_activity_loadLayout_III.md","raw":"---\nlayout: post\ntitle: \"Activity布局加载流程源码分析(III)\"\ndate: 6/28/2019 10:09:39 AM  \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)、[Activity布局加载流程源码分析(II)](https://blog.csdn.net/awenyini/article/details/78964353)、[DecorView绘制流程源码分析](https://blog.csdn.net/awenyini/article/details/78983463)与[View绘制三大流程源码分析](https://blog.csdn.net/awenyini/article/details/79006432)等四篇文章中，已经很详细分析了Acitivity的布局加载过程及布局的绘制过程。但在[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390) 中，对于setContentView(\"资源文件\")怎么转化View的，没有细说，本篇博文主要想梳理一下这块内容（**ps:面试的时候，被面试官问到，既然答不上来，所以决定对这部分知识也好好梳理一下**）。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **PhoneWindow：** 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。\n- **LayoutInflater：** 是布局填充类，主要就是将我们的layout转化为View。\n- **XmlPullParser：** 是XML解析器，主要是解析xml文件也即layout.xml文件。\n\n# 一、源码分析\n从[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)文中，我们知道，在Activity的onCreate()中setContentView()后，最后也是调用PhoneWindow中的setContentView()方法。源码如下：\n~~~java\n   //Activity中\n  public void setContentView(int layoutResID) {\n        getWindow().setContentView(layoutResID);//核心代码\n        initActionBar();\n    }\n~~~\n~~~java\n    //PhoneWindow中\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            mLayoutInflater.inflate(layoutResID, mContentParent);//核心代码\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n    }\n~~~\n这里我们主要来看核心代码，也即 mLayoutInflater.inflate(layoutResID, mContentParent)；其中mLayoutInflater的初始化主要是在PhoneWindow中构造方法中初始化的：\n~~~java\n  public PhoneWindow(Context context) {\n        super(context);\n        mLayoutInflater = LayoutInflater.from(context);\n    }\n~~~\n所以，重点我们还是来看一下LayoutInflater类：\n~~~java\npublic abstract class LayoutInflater {\n     .......\n    /**\n     * Obtains the LayoutInflater from the given context.\n     */\n    public static LayoutInflater from(Context context) {\n        LayoutInflater LayoutInflater =\n                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        if (LayoutInflater == null) {\n            throw new AssertionError(\"LayoutInflater not found.\");\n        }\n        return LayoutInflater;\n    }\n    .......\n  //填充方法1\n  public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {\n        return inflate(resource, root, root != null);\n    }\n\n    /**\n     * 填充方法2\n     * Inflate a new view hierarchy from the specified xml node. Throws\n     * {@link InflateException} if there is an error. *\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root) {\n        return inflate(parser, root, root != null);\n    }\n\n    /**\n     * 填充方法3\n     * Inflate a new view hierarchy from the specified xml resource. Throws\n     * {@link InflateException} if there is an error.\n     */\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        .......\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n\n    /**\n     * 填充方法4\n     * Inflate a new view hierarchy from the specified XML node. Throws\n     * {@link InflateException} if there is an error.\n     * <p>\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            View result = root;\n\n            try {\n                .........\n                final String name = parser.getName();\n                ..........\n                if (TAG_MERGE.equals(name)) {\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);\n                } else {\n                    // Temp is the root view that was found in the xml\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                    ViewGroup.LayoutParams params = null;\n                    if (root != null) {\n                        if (DEBUG) {\n                            System.out.println(\"Creating params from root: \" + root);\n                        }\n                        // Create layout params that match root, if supplied\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // Set the layout params for temp if we are not\n                            // attaching. (If we are, we use addView, below)\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> start inflating children\");\n                    }\n\n                    // Inflate all children under temp against its context.\n                    rInflateChildren(parser, temp, attrs, true);\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> done inflating children\");\n                    }\n\n                    // We are supposed to attach all the views we found (int temp)\n                    // to root. Do that now.\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // Decide whether to return the root that was passed in or the\n                    // top view found in xml.\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n            ........\n            return result;\n        }\n    }\n    ..........\n}\n~~~\n从上面代码我们知道，mLayoutInflater 的初始化，主要是从context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)中获取的。在LayoutInflater的源码中，还有多个inflate方法中，这里我们先来看看填充方法2：\n~~~java\npublic View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        .......\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n~~~\n由代码易知，这里主要是从资源Resources中获取布局xml，通过res.getLayout(resource)得到一个Xml资源解析器XmlResourceParser，然后再调用填充方法4，这里的XmlResourceParser，我们也可以来看一下源码：\n~~~java\npublic interface XmlResourceParser extends XmlPullParser, AttributeSet, AutoCloseable {\n    /**\n     * Close this interface to the resource.  Calls on the interface are no\n     * longer value after this call.\n     */\n    public void close();\n}\n~~~\n由上易知，XmlResourceParser也是一个接口，这里主要继承了三个类XmlPullParser（XML文件解析器）、AttributeSet（自定义属性值）、AutoCloseable ，主要是了后面解析服务。所以这里我们重点来看看Resource中的getLayout()方法：\n~~~java\npublic class Resources {\n    ........\n    public XmlResourceParser getLayout(@LayoutRes int id) throws NotFoundException {\n        return loadXmlResourceParser(id, \"layout\");\n    }\n    ........\n    \n    /*package*/ XmlResourceParser loadXmlResourceParser(int id, String type)\n            throws NotFoundException {\n        synchronized (mAccessLock) {\n            TypedValue value = mTmpValue;\n            if (value == null) {\n                mTmpValue = value = new TypedValue();\n            }\n            getValue(id, value, true);\n            if (value.type == TypedValue.TYPE_STRING) {\n                return loadXmlResourceParser(value.string.toString(), id,\n                        value.assetCookie, type);\n            }\n            throw new NotFoundException(\n                    \"Resource ID #0x\" + Integer.toHexString(id) + \" type #0x\"\n                    + Integer.toHexString(value.type) + \" is not valid\");\n        }\n    }\n    \n    /*package*/ XmlResourceParser loadXmlResourceParser(String file, int id,\n            int assetCookie, String type) throws NotFoundException {\n        if (id != 0) {\n            try {\n                // These may be compiled...\n                synchronized (mCachedXmlBlockIds) {\n                    // First see if this block is in our cache.\n                    final int num = mCachedXmlBlockIds.length;\n                    for (int i=0; i<num; i++) {\n                        if (mCachedXmlBlockIds[i] == id) {\n                            //System.out.println(\"**** REUSING XML BLOCK!  id=\"\n                            //                   + id + \", index=\" + i);\n                            return mCachedXmlBlocks[i].newParser();\n                        }\n                    }\n\n                    // Not in the cache, create a new block and put it at\n                    // the next slot in the cache.\n                    XmlBlock block = mAssets.openXmlBlockAsset(\n                            assetCookie, file);\n                    if (block != null) {\n                        int pos = mLastCachedXmlBlockIndex+1;\n                        if (pos >= num) pos = 0;\n                        mLastCachedXmlBlockIndex = pos;\n                        XmlBlock oldBlock = mCachedXmlBlocks[pos];\n                        if (oldBlock != null) {\n                            oldBlock.close();\n                        }\n                        mCachedXmlBlockIds[pos] = id;\n                        mCachedXmlBlocks[pos] = block;\n                        //System.out.println(\"**** CACHING NEW XML BLOCK!  id=\"\n                        //                   + id + \", index=\" + pos);\n                        return block.newParser();\n                    }\n                }\n            } catch (Exception e) {\n                NotFoundException rnf = new NotFoundException(\n                        \"File \" + file + \" from xml type \" + type + \" resource ID #0x\"\n                        + Integer.toHexString(id));\n                rnf.initCause(e);\n                throw rnf;\n            }\n        }\n\n        throw new NotFoundException(\n                \"File \" + file + \" from xml type \" + type + \" resource ID #0x\"\n                + Integer.toHexString(id));\n    }\n    ........\n}\n~~~\n通过上面代码我们知道，最后通过XmlBlock.newParser()生成一个xml解析器，也即是XmlResourceParser，**从以上我们知道Android中布局文件用的xml解析方法就是PULL解析方式。** 下面我们具体来看填充方法4：\n~~~java\n /**\n     * 填充方法4\n     * Inflate a new view hierarchy from the specified XML node. Throws\n     * {@link InflateException} if there is an error.\n     * <p>\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            View result = root;\n\n            try {\n                // Look for the root node.\n                int type;\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                        type != XmlPullParser.END_DOCUMENT) {\n                    // Empty\n                }\n                if (type != XmlPullParser.START_TAG) {\n                    throw new InflateException(parser.getPositionDescription()\n                            + \": No start tag found!\");\n                }\n                final String name = parser.getName();\n                ..........\n                if (TAG_MERGE.equals(name)) {//核心代码1\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n                    rInflate(parser, root, inflaterContext, attrs, false);//核心代码2\n                } else {\n                    // Temp is the root view that was found in the xml\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);//核心代码3\n\n                    ViewGroup.LayoutParams params = null;\n                    if (root != null) {\n                        if (DEBUG) {\n                            System.out.println(\"Creating params from root: \" + root);\n                        }\n                        // Create layout params that match root, if supplied\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // Set the layout params for temp if we are not\n                            // attaching. (If we are, we use addView, below)\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> start inflating children\");\n                    }\n\n                    // Inflate all children under temp against its context.\n                    rInflateChildren(parser, temp, attrs, true);//核心代码4\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> done inflating children\");\n                    }\n\n                    // We are supposed to attach all the views we found (int temp)\n                    // to root. Do that now.\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // Decide whether to return the root that was passed in or the\n                    // top view found in xml.\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n            ........\n            return result;\n        }\n    }\n    ..........\n}\n~~~\n**我们在写布局文件的时候，经常也会考虑到一些布局优化的问题，所以难免会用到include、merge、ViewStub标签，所以在XML解析的时候，需要针对此类标签作特别处理。** \n\n从上面代码中，我们来看核心代码1, TAG_MERGE.equals(name)，其中 TAG_MERGE就为merge，这里主要就是针对merge标签处理。我们先来看核心代码3和4，\n核心代码3： createViewFromTag(root, name, inflaterContext, attrs),具体我们也来看看源码：\n~~~java\n   private View createViewFromTag(View parent, String name, Context context, AttributeSet attrs) {\n        return createViewFromTag(parent, name, context, attrs, false);\n    }\n    /**\n     * Creates a view from a tag name using the supplied attribute set.\n     */\n    View createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\n            boolean ignoreThemeAttr) {\n        if (name.equals(\"view\")) {\n            name = attrs.getAttributeValue(null, \"class\");\n        }\n\n        // Apply a theme wrapper, if allowed and one is specified.\n        if (!ignoreThemeAttr) {\n            final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);\n            final int themeResId = ta.getResourceId(0, 0);\n            if (themeResId != 0) {\n                context = new ContextThemeWrapper(context, themeResId);\n            }\n            ta.recycle();\n        }\n\n        if (name.equals(TAG_1995)) {\n            // Let's party like it's 1995!\n            return new BlinkLayout(context, attrs);\n        }\n\n        try {\n            View view;\n            if (mFactory2 != null) {\n                view = mFactory2.onCreateView(parent, name, context, attrs);\n            } else if (mFactory != null) {\n                view = mFactory.onCreateView(name, context, attrs);\n            } else {\n                view = null;\n            }\n\n            if (view == null && mPrivateFactory != null) {\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\n            }\n\n            if (view == null) {\n                final Object lastContext = mConstructorArgs[0];\n                mConstructorArgs[0] = context;\n                try {\n                    if (-1 == name.indexOf('.')) {\n                        view = onCreateView(parent, name, attrs);\n                    } else {\n                        view = createView(name, null, attrs);\n                    }\n                } finally {\n                    mConstructorArgs[0] = lastContext;\n                }\n            }\n\n            return view;\n        } catch (InflateException e) {\n            throw e;\n\n        } catch (ClassNotFoundException e) {\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\n                    + \": Error inflating class \" + name);\n            ie.initCause(e);\n            throw ie;\n\n        } catch (Exception e) {\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\n                    + \": Error inflating class \" + name);\n            ie.initCause(e);\n            throw ie;\n        }\n    }\n~~~\n我们也来看看核心代码4：rInflateChildren(parser, temp, attrs, true)，我们具体来看看相关代码：\n~~~java\n    final void rInflateChildren(XmlPullParser parser, View parent, AttributeSet attrs,\n            boolean finishInflate) throws XmlPullParserException, IOException {\n        rInflate(parser, parent, parent.getContext(), attrs, finishInflate);\n    }\n~~~\n通过上面发现，最后也还是调用了核心代码2，rInflate(parser, root, inflaterContext, attrs, false)，下面我们具体来看看核心代码2：\n~~~java\nvoid rInflate(XmlPullParser parser, View parent, Context context,\n            AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException {\n\n        final int depth = parser.getDepth();\n        int type;\n        while (((type = parser.next()) != XmlPullParser.END_TAG ||\n                parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {\n\n            if (type != XmlPullParser.START_TAG) {\n                continue;\n            }\n\n            final String name = parser.getName();\n            \n            if (TAG_REQUEST_FOCUS.equals(name)) {\n                parseRequestFocus(parser, parent);\n            } else if (TAG_TAG.equals(name)) {\n                parseViewTag(parser, parent, attrs);\n            } else if (TAG_INCLUDE.equals(name)) {//代码1\n                if (parser.getDepth() == 0) {\n                    throw new InflateException(\"<include /> cannot be the root element\");\n                }\n                parseInclude(parser, context, parent, attrs);\n            } else if (TAG_MERGE.equals(name)) {//代码2\n                throw new InflateException(\"<merge /> must be the root element\");\n            } else {\n                final View view = createViewFromTag(parent, name, context, attrs);\n                final ViewGroup viewGroup = (ViewGroup) parent;\n                final ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);\n                rInflateChildren(parser, view, attrs, true);\n                viewGroup.addView(view, params);\n            }\n        }\n\n        if (finishInflate) {\n            parent.onFinishInflate();\n        }\n    }\n~~~\n这里我们看到，主要就是通过PULL解析布局文件的方式解析出相关的View结构，具体PULL解析方式这里就不介绍了，小伙伴可以自行百度。在这里PULL解析的过程中，还对标签include,merge做了特别处理，是不是发现貌似代码中没有对标签ViewStub进行处理，其实是有的，主要是在createView()方法中，这里就不介绍了，小伙伴可以自行查一下源码。\n\n好了，到这里，就差不多分析完了。\n\n**注：源码采用android-6.0.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 二、参考文档\n[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[Activity布局加载流程源码分析(II)](https://blog.csdn.net/awenyini/article/details/78964353)\n\n[Android解析XML的三种方式](https://blog.csdn.net/d_shadow/article/details/55253586)\n","slug":"tech_android_framework_activity_loadLayout_III","published":1,"updated":"2019-06-28T02:09:42.051Z","photos":[],"link":"","_id":"cjxfjaesv004wystgtt46e62h","content":"<hr>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>、<a href=\"https://blog.csdn.net/awenyini/article/details/78964353\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(II)</a>、<a href=\"https://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>与<a href=\"https://blog.csdn.net/awenyini/article/details/79006432\" target=\"_blank\" rel=\"external\">View绘制三大流程源码分析</a>等四篇文章中，已经很详细分析了Acitivity的布局加载过程及布局的绘制过程。但在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a> 中，对于setContentView(“资源文件”)怎么转化View的，没有细说，本篇博文主要想梳理一下这块内容（<strong>ps:面试的时候，被面试官问到，既然答不上来，所以决定对这部分知识也好好梳理一下</strong>）。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>LayoutInflater：</strong> 是布局填充类，主要就是将我们的layout转化为View。</li>\n<li><strong>XmlPullParser：</strong> 是XML解析器，主要是解析xml文件也即layout.xml文件。</li>\n</ul>\n<h1 id=\"一、源码分析\"><a href=\"#一、源码分析\" class=\"headerlink\" title=\"一、源码分析\"></a>一、源码分析</h1><p>从<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>文中，我们知道，在Activity的onCreate()中setContentView()后，最后也是调用PhoneWindow中的setContentView()方法。源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//Activity中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">      getWindow().setContentView(layoutResID);<span class=\"comment\">//核心代码</span></div><div class=\"line\">      initActionBar();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//PhoneWindow中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们主要来看核心代码，也即 mLayoutInflater.inflate(layoutResID, mContentParent)；其中mLayoutInflater的初始化主要是在PhoneWindow中构造方法中初始化的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhoneWindow</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(context);</div><div class=\"line\">      mLayoutInflater = LayoutInflater.from(context);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>所以，重点我们还是来看一下LayoutInflater类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LayoutInflater</span> </span>&#123;</div><div class=\"line\">     .......</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Obtains the LayoutInflater from the given context.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        LayoutInflater LayoutInflater =</div><div class=\"line\">                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">  <span class=\"comment\">//填充方法1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 填充方法2</div><div class=\"line\">     * Inflate a new view hierarchy from the specified xml node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error. *</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 填充方法3</div><div class=\"line\">     * Inflate a new view hierarchy from the specified xml resource. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            parser.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 填充方法4</div><div class=\"line\">     * Inflate a new view hierarchy from the specified XML node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                .........</div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                ..........</div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> + root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Set the layout params for temp if we are not</span></div><div class=\"line\">                            <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context.</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面代码我们知道，mLayoutInflater 的初始化，主要是从context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)中获取的。在LayoutInflater的源码中，还有多个inflate方法中，这里我们先来看看填充方法2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            parser.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>由代码易知，这里主要是从资源Resources中获取布局xml，通过res.getLayout(resource)得到一个Xml资源解析器XmlResourceParser，然后再调用填充方法4，这里的XmlResourceParser，我们也可以来看一下源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">XmlResourceParser</span> <span class=\"keyword\">extends</span> <span class=\"title\">XmlPullParser</span>, <span class=\"title\">AttributeSet</span>, <span class=\"title\">AutoCloseable</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Close this interface to the resource.  Calls on the interface are no</div><div class=\"line\">     * longer value after this call.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，XmlResourceParser也是一个接口，这里主要继承了三个类XmlPullParser（XML文件解析器）、AttributeSet（自定义属性值）、AutoCloseable ，主要是了后面解析服务。所以这里我们重点来看看Resource中的getLayout()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resources</span> </span>&#123;</div><div class=\"line\">    ........</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> XmlResourceParser <span class=\"title\">getLayout</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> NotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> loadXmlResourceParser(id, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ........</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*package*/</span> <span class=\"function\">XmlResourceParser <span class=\"title\">loadXmlResourceParser</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String type)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> NotFoundException &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mAccessLock) &#123;</div><div class=\"line\">            TypedValue value = mTmpValue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mTmpValue = value = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">            &#125;</div><div class=\"line\">            getValue(id, value, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (value.type == TypedValue.TYPE_STRING) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> loadXmlResourceParser(value.string.toString(), id,</div><div class=\"line\">                        value.assetCookie, type);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                    <span class=\"string\">\"Resource ID #0x\"</span> + Integer.toHexString(id) + <span class=\"string\">\" type #0x\"</span></div><div class=\"line\">                    + Integer.toHexString(value.type) + <span class=\"string\">\" is not valid\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*package*/</span> <span class=\"function\">XmlResourceParser <span class=\"title\">loadXmlResourceParser</span><span class=\"params\">(String file, <span class=\"keyword\">int</span> id,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> assetCookie, String type) <span class=\"keyword\">throws</span> NotFoundException &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (id != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// These may be compiled...</span></div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mCachedXmlBlockIds) &#123;</div><div class=\"line\">                    <span class=\"comment\">// First see if this block is in our cache.</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num = mCachedXmlBlockIds.length;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;num; i++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (mCachedXmlBlockIds[i] == id) &#123;</div><div class=\"line\">                            <span class=\"comment\">//System.out.println(\"**** REUSING XML BLOCK!  id=\"</span></div><div class=\"line\">                            <span class=\"comment\">//                   + id + \", index=\" + i);</span></div><div class=\"line\">                            <span class=\"keyword\">return</span> mCachedXmlBlocks[i].newParser();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Not in the cache, create a new block and put it at</span></div><div class=\"line\">                    <span class=\"comment\">// the next slot in the cache.</span></div><div class=\"line\">                    XmlBlock block = mAssets.openXmlBlockAsset(</div><div class=\"line\">                            assetCookie, file);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (block != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> pos = mLastCachedXmlBlockIndex+<span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (pos &gt;= num) pos = <span class=\"number\">0</span>;</div><div class=\"line\">                        mLastCachedXmlBlockIndex = pos;</div><div class=\"line\">                        XmlBlock oldBlock = mCachedXmlBlocks[pos];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (oldBlock != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            oldBlock.close();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        mCachedXmlBlockIds[pos] = id;</div><div class=\"line\">                        mCachedXmlBlocks[pos] = block;</div><div class=\"line\">                        <span class=\"comment\">//System.out.println(\"**** CACHING NEW XML BLOCK!  id=\"</span></div><div class=\"line\">                        <span class=\"comment\">//                   + id + \", index=\" + pos);</span></div><div class=\"line\">                        <span class=\"keyword\">return</span> block.newParser();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                NotFoundException rnf = <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                        <span class=\"string\">\"File \"</span> + file + <span class=\"string\">\" from xml type \"</span> + type + <span class=\"string\">\" resource ID #0x\"</span></div><div class=\"line\">                        + Integer.toHexString(id));</div><div class=\"line\">                rnf.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> rnf;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                <span class=\"string\">\"File \"</span> + file + <span class=\"string\">\" from xml type \"</span> + type + <span class=\"string\">\" resource ID #0x\"</span></div><div class=\"line\">                + Integer.toHexString(id));</div><div class=\"line\">    &#125;</div><div class=\"line\">    ........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面代码我们知道，最后通过XmlBlock.newParser()生成一个xml解析器，也即是XmlResourceParser，<strong>从以上我们知道Android中布局文件用的xml解析方法就是PULL解析方式。</strong> 下面我们具体来看填充方法4：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">     * 填充方法4</div><div class=\"line\">     * Inflate a new view hierarchy from the specified XML node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Look for the root node.</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Empty</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                ..........</div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;<span class=\"comment\">//核心代码1</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);<span class=\"comment\">//核心代码2</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);<span class=\"comment\">//核心代码3</span></div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> + root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Set the layout params for temp if we are not</span></div><div class=\"line\">                            <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context.</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);<span class=\"comment\">//核心代码4</span></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>我们在写布局文件的时候，经常也会考虑到一些布局优化的问题，所以难免会用到include、merge、ViewStub标签，所以在XML解析的时候，需要针对此类标签作特别处理。</strong> </p>\n<p>从上面代码中，我们来看核心代码1, TAG_MERGE.equals(name)，其中 TAG_MERGE就为merge，这里主要就是针对merge标签处理。我们先来看核心代码3和4，<br>核心代码3： createViewFromTag(root, name, inflaterContext, attrs),具体我们也来看看源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> createViewFromTag(parent, name, context, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * Creates a view from a tag name using the supplied attribute set.</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\">View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span></div><div class=\"line\">         <span class=\"keyword\">boolean</span> ignoreThemeAttr) &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"view\"</span>)) &#123;</div><div class=\"line\">         name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">\"class\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// Apply a theme wrapper, if allowed and one is specified.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (!ignoreThemeAttr) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> themeResId = ta.getResourceId(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (themeResId != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             context = <span class=\"keyword\">new</span> ContextThemeWrapper(context, themeResId);</div><div class=\"line\">         &#125;</div><div class=\"line\">         ta.recycle();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (name.equals(TAG_1995)) &#123;</div><div class=\"line\">         <span class=\"comment\">// Let's party like it's 1995!</span></div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlinkLayout(context, attrs);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         View view;</div><div class=\"line\">         <span class=\"keyword\">if</span> (mFactory2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mFactory2.onCreateView(parent, name, context, attrs);</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mFactory.onCreateView(name, context, attrs);</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             view = <span class=\"keyword\">null</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span> &amp;&amp; mPrivateFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mPrivateFactory.onCreateView(parent, name, context, attrs);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">final</span> Object lastContext = mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">             mConstructorArgs[<span class=\"number\">0</span>] = context;</div><div class=\"line\">             <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>)) &#123;</div><div class=\"line\">                     view = onCreateView(parent, name, attrs);</div><div class=\"line\">                 &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                     view = createView(name, <span class=\"keyword\">null</span>, attrs);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                 mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">return</span> view;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (InflateException e) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> e;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</div><div class=\"line\">                 + <span class=\"string\">\": Error inflating class \"</span> + name);</div><div class=\"line\">         ie.initCause(e);</div><div class=\"line\">         <span class=\"keyword\">throw</span> ie;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</div><div class=\"line\">                 + <span class=\"string\">\": Error inflating class \"</span> + name);</div><div class=\"line\">         ie.initCause(e);</div><div class=\"line\">         <span class=\"keyword\">throw</span> ie;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>我们也来看看核心代码4：rInflateChildren(parser, temp, attrs, true)，我们具体来看看相关代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rInflateChildren</span><span class=\"params\">(XmlPullParser parser, View parent, AttributeSet attrs,</span></span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\">    rInflate(parser, parent, parent.getContext(), attrs, finishInflate);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面发现，最后也还是调用了核心代码2，rInflate(parser, root, inflaterContext, attrs, false)，下面我们具体来看看核心代码2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></div><div class=\"line\">            AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate) <span class=\"keyword\">throws</span> XmlPullParserException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">        <span class=\"keyword\">int</span> type;</div><div class=\"line\">        <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">                parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">                parseRequestFocus(parser, parent);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">                parseViewTag(parser, parent, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;<span class=\"comment\">//代码1</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                parseInclude(parser, context, parent, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;<span class=\"comment\">//代码2</span></div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">                <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">                <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">                rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">                viewGroup.addView(view, params);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">            parent.onFinishInflate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到，主要就是通过PULL解析布局文件的方式解析出相关的View结构，具体PULL解析方式这里就不介绍了，小伙伴可以自行百度。在这里PULL解析的过程中，还对标签include,merge做了特别处理，是不是发现貌似代码中没有对标签ViewStub进行处理，其实是有的，主要是在createView()方法中，这里就不介绍了，小伙伴可以自行查一下源码。</p>\n<p>好了，到这里，就差不多分析完了。</p>\n<p><strong>注：源码采用android-6.0.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a></p>\n<p><a href=\"https://blog.csdn.net/awenyini/article/details/78964353\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(II)</a></p>\n<p><a href=\"https://blog.csdn.net/d_shadow/article/details/55253586\" target=\"_blank\" rel=\"external\">Android解析XML的三种方式</a></p>\n","excerpt":"","more":"<hr>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>、<a href=\"https://blog.csdn.net/awenyini/article/details/78964353\">Activity布局加载流程源码分析(II)</a>、<a href=\"https://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>与<a href=\"https://blog.csdn.net/awenyini/article/details/79006432\">View绘制三大流程源码分析</a>等四篇文章中，已经很详细分析了Acitivity的布局加载过程及布局的绘制过程。但在<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a> 中，对于setContentView(“资源文件”)怎么转化View的，没有细说，本篇博文主要想梳理一下这块内容（<strong>ps:面试的时候，被面试官问到，既然答不上来，所以决定对这部分知识也好好梳理一下</strong>）。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>PhoneWindow：</strong> 是Window类具体实现类，Activity中布局加载逻辑主要就是在此类中完成的。</li>\n<li><strong>LayoutInflater：</strong> 是布局填充类，主要就是将我们的layout转化为View。</li>\n<li><strong>XmlPullParser：</strong> 是XML解析器，主要是解析xml文件也即layout.xml文件。</li>\n</ul>\n<h1 id=\"一、源码分析\"><a href=\"#一、源码分析\" class=\"headerlink\" title=\"一、源码分析\"></a>一、源码分析</h1><p>从<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>文中，我们知道，在Activity的onCreate()中setContentView()后，最后也是调用PhoneWindow中的setContentView()方法。源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//Activity中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">      getWindow().setContentView(layoutResID);<span class=\"comment\">//核心代码</span></div><div class=\"line\">      initActionBar();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//PhoneWindow中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class=\"line\">    <span class=\"comment\">// before this happens.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        installDecor();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        mContentParent.removeAllViews();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class=\"line\">                getContext());</div><div class=\"line\">        transitionTo(newScene);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    mContentParent.requestApplyInsets();</div><div class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class=\"line\">        cb.onContentChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里我们主要来看核心代码，也即 mLayoutInflater.inflate(layoutResID, mContentParent)；其中mLayoutInflater的初始化主要是在PhoneWindow中构造方法中初始化的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhoneWindow</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(context);</div><div class=\"line\">      mLayoutInflater = LayoutInflater.from(context);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>所以，重点我们还是来看一下LayoutInflater类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LayoutInflater</span> </span>&#123;</div><div class=\"line\">     .......</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Obtains the LayoutInflater from the given context.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LayoutInflater <span class=\"title\">from</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        LayoutInflater LayoutInflater =</div><div class=\"line\">                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        <span class=\"keyword\">if</span> (LayoutInflater == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"LayoutInflater not found.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> LayoutInflater;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">  <span class=\"comment\">//填充方法1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 填充方法2</div><div class=\"line\">     * Inflate a new view hierarchy from the specified xml node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error. *</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, root != <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 填充方法3</div><div class=\"line\">     * Inflate a new view hierarchy from the specified xml resource. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            parser.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 填充方法4</div><div class=\"line\">     * Inflate a new view hierarchy from the specified XML node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                .........</div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                ..........</div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> + root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Set the layout params for temp if we are not</span></div><div class=\"line\">                            <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context.</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从上面代码我们知道，mLayoutInflater 的初始化，主要是从context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)中获取的。在LayoutInflater的源码中，还有多个inflate方法中，这里我们先来看看填充方法2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> resource, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Resources res = getContext().getResources();</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            parser.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>由代码易知，这里主要是从资源Resources中获取布局xml，通过res.getLayout(resource)得到一个Xml资源解析器XmlResourceParser，然后再调用填充方法4，这里的XmlResourceParser，我们也可以来看一下源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">XmlResourceParser</span> <span class=\"keyword\">extends</span> <span class=\"title\">XmlPullParser</span>, <span class=\"title\">AttributeSet</span>, <span class=\"title\">AutoCloseable</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Close this interface to the resource.  Calls on the interface are no</div><div class=\"line\">     * longer value after this call.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，XmlResourceParser也是一个接口，这里主要继承了三个类XmlPullParser（XML文件解析器）、AttributeSet（自定义属性值）、AutoCloseable ，主要是了后面解析服务。所以这里我们重点来看看Resource中的getLayout()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resources</span> </span>&#123;</div><div class=\"line\">    ........</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> XmlResourceParser <span class=\"title\">getLayout</span><span class=\"params\">(@LayoutRes <span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> NotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> loadXmlResourceParser(id, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ........</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*package*/</span> <span class=\"function\">XmlResourceParser <span class=\"title\">loadXmlResourceParser</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String type)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> NotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mAccessLock) &#123;</div><div class=\"line\">            TypedValue value = mTmpValue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mTmpValue = value = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">            &#125;</div><div class=\"line\">            getValue(id, value, <span class=\"keyword\">true</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (value.type == TypedValue.TYPE_STRING) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> loadXmlResourceParser(value.string.toString(), id,</div><div class=\"line\">                        value.assetCookie, type);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                    <span class=\"string\">\"Resource ID #0x\"</span> + Integer.toHexString(id) + <span class=\"string\">\" type #0x\"</span></div><div class=\"line\">                    + Integer.toHexString(value.type) + <span class=\"string\">\" is not valid\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/*package*/</span> <span class=\"function\">XmlResourceParser <span class=\"title\">loadXmlResourceParser</span><span class=\"params\">(String file, <span class=\"keyword\">int</span> id,</div><div class=\"line\">            <span class=\"keyword\">int</span> assetCookie, String type)</span> <span class=\"keyword\">throws</span> NotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (id != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// These may be compiled...</span></div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mCachedXmlBlockIds) &#123;</div><div class=\"line\">                    <span class=\"comment\">// First see if this block is in our cache.</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num = mCachedXmlBlockIds.length;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;num; i++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (mCachedXmlBlockIds[i] == id) &#123;</div><div class=\"line\">                            <span class=\"comment\">//System.out.println(\"**** REUSING XML BLOCK!  id=\"</span></div><div class=\"line\">                            <span class=\"comment\">//                   + id + \", index=\" + i);</span></div><div class=\"line\">                            <span class=\"keyword\">return</span> mCachedXmlBlocks[i].newParser();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Not in the cache, create a new block and put it at</span></div><div class=\"line\">                    <span class=\"comment\">// the next slot in the cache.</span></div><div class=\"line\">                    XmlBlock block = mAssets.openXmlBlockAsset(</div><div class=\"line\">                            assetCookie, file);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (block != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">int</span> pos = mLastCachedXmlBlockIndex+<span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (pos &gt;= num) pos = <span class=\"number\">0</span>;</div><div class=\"line\">                        mLastCachedXmlBlockIndex = pos;</div><div class=\"line\">                        XmlBlock oldBlock = mCachedXmlBlocks[pos];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (oldBlock != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            oldBlock.close();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        mCachedXmlBlockIds[pos] = id;</div><div class=\"line\">                        mCachedXmlBlocks[pos] = block;</div><div class=\"line\">                        <span class=\"comment\">//System.out.println(\"**** CACHING NEW XML BLOCK!  id=\"</span></div><div class=\"line\">                        <span class=\"comment\">//                   + id + \", index=\" + pos);</span></div><div class=\"line\">                        <span class=\"keyword\">return</span> block.newParser();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                NotFoundException rnf = <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                        <span class=\"string\">\"File \"</span> + file + <span class=\"string\">\" from xml type \"</span> + type + <span class=\"string\">\" resource ID #0x\"</span></div><div class=\"line\">                        + Integer.toHexString(id));</div><div class=\"line\">                rnf.initCause(e);</div><div class=\"line\">                <span class=\"keyword\">throw</span> rnf;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundException(</div><div class=\"line\">                <span class=\"string\">\"File \"</span> + file + <span class=\"string\">\" from xml type \"</span> + type + <span class=\"string\">\" resource ID #0x\"</span></div><div class=\"line\">                + Integer.toHexString(id));</div><div class=\"line\">    &#125;</div><div class=\"line\">    ........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面代码我们知道，最后通过XmlBlock.newParser()生成一个xml解析器，也即是XmlResourceParser，<strong>从以上我们知道Android中布局文件用的xml解析方法就是PULL解析方式。</strong> 下面我们具体来看填充方法4：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">     * 填充方法4</div><div class=\"line\">     * Inflate a new view hierarchy from the specified XML node. Throws</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> InflateException&#125; if there is an error.</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, @Nullable ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</div><div class=\"line\">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"inflate\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> Context inflaterContext = mContext;</div><div class=\"line\">            <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class=\"line\">            Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</div><div class=\"line\">            View result = root;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Look for the root node.</span></div><div class=\"line\">                <span class=\"keyword\">int</span> type;</div><div class=\"line\">                <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class=\"line\">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Empty</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</div><div class=\"line\">                            + <span class=\"string\">\": No start tag found!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">                ..........</div><div class=\"line\">                <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;<span class=\"comment\">//核心代码1</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; can be used only with a valid \"</span></div><div class=\"line\">                                + <span class=\"string\">\"ViewGroup root and attachToRoot=true\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);<span class=\"comment\">//核心代码2</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Temp is the root view that was found in the xml</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);<span class=\"comment\">//核心代码3</span></div><div class=\"line\"></div><div class=\"line\">                    ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                            System.out.println(<span class=\"string\">\"Creating params from root: \"</span> + root);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"comment\">// Create layout params that match root, if supplied</span></div><div class=\"line\">                        params = root.generateLayoutParams(attrs);</div><div class=\"line\">                        <span class=\"keyword\">if</span> (!attachToRoot) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Set the layout params for temp if we are not</span></div><div class=\"line\">                            <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></div><div class=\"line\">                            temp.setLayoutParams(params);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; start inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Inflate all children under temp against its context.</span></div><div class=\"line\">                    rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);<span class=\"comment\">//核心代码4</span></div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"-----&gt; done inflating children\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></div><div class=\"line\">                    <span class=\"comment\">// to root. Do that now.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</div><div class=\"line\">                        root.addView(temp, params);</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></div><div class=\"line\">                    <span class=\"comment\">// top view found in xml.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</div><div class=\"line\">                        result = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            ........</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ..........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>我们在写布局文件的时候，经常也会考虑到一些布局优化的问题，所以难免会用到include、merge、ViewStub标签，所以在XML解析的时候，需要针对此类标签作特别处理。</strong> </p>\n<p>从上面代码中，我们来看核心代码1, TAG_MERGE.equals(name)，其中 TAG_MERGE就为merge，这里主要就是针对merge标签处理。我们先来看核心代码3和4，<br>核心代码3： createViewFromTag(root, name, inflaterContext, attrs),具体我们也来看看源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> createViewFromTag(parent, name, context, attrs, <span class=\"keyword\">false</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * Creates a view from a tag name using the supplied attribute set.</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\">View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</div><div class=\"line\">         <span class=\"keyword\">boolean</span> ignoreThemeAttr)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"view\"</span>)) &#123;</div><div class=\"line\">         name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">\"class\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// Apply a theme wrapper, if allowed and one is specified.</span></div><div class=\"line\">     <span class=\"keyword\">if</span> (!ignoreThemeAttr) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> themeResId = ta.getResourceId(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (themeResId != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             context = <span class=\"keyword\">new</span> ContextThemeWrapper(context, themeResId);</div><div class=\"line\">         &#125;</div><div class=\"line\">         ta.recycle();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">if</span> (name.equals(TAG_1995)) &#123;</div><div class=\"line\">         <span class=\"comment\">// Let's party like it's 1995!</span></div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlinkLayout(context, attrs);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         View view;</div><div class=\"line\">         <span class=\"keyword\">if</span> (mFactory2 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mFactory2.onCreateView(parent, name, context, attrs);</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mFactory.onCreateView(name, context, attrs);</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             view = <span class=\"keyword\">null</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span> &amp;&amp; mPrivateFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             view = mPrivateFactory.onCreateView(parent, name, context, attrs);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">final</span> Object lastContext = mConstructorArgs[<span class=\"number\">0</span>];</div><div class=\"line\">             mConstructorArgs[<span class=\"number\">0</span>] = context;</div><div class=\"line\">             <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>)) &#123;</div><div class=\"line\">                     view = onCreateView(parent, name, attrs);</div><div class=\"line\">                 &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                     view = createView(name, <span class=\"keyword\">null</span>, attrs);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                 mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">return</span> view;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (InflateException e) &#123;</div><div class=\"line\">         <span class=\"keyword\">throw</span> e;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</div><div class=\"line\">                 + <span class=\"string\">\": Error inflating class \"</span> + name);</div><div class=\"line\">         ie.initCause(e);</div><div class=\"line\">         <span class=\"keyword\">throw</span> ie;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</div><div class=\"line\">                 + <span class=\"string\">\": Error inflating class \"</span> + name);</div><div class=\"line\">         ie.initCause(e);</div><div class=\"line\">         <span class=\"keyword\">throw</span> ie;</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>我们也来看看核心代码4：rInflateChildren(parser, temp, attrs, true)，我们具体来看看相关代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rInflateChildren</span><span class=\"params\">(XmlPullParser parser, View parent, AttributeSet attrs,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\">    rInflate(parser, parent, parent.getContext(), attrs, finishInflate);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面发现，最后也还是调用了核心代码2，rInflate(parser, root, inflaterContext, attrs, false)，下面我们具体来看看核心代码2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</div><div class=\"line\">            AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</div><div class=\"line\">        <span class=\"keyword\">int</span> type;</div><div class=\"line\">        <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</div><div class=\"line\">                parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> String name = parser.getName();</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</div><div class=\"line\">                parseRequestFocus(parser, parent);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</div><div class=\"line\">                parseViewTag(parser, parent, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;<span class=\"comment\">//代码1</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;include /&gt; cannot be the root element\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                parseInclude(parser, context, parent, attrs);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;<span class=\"comment\">//代码2</span></div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">\"&lt;merge /&gt; must be the root element\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</div><div class=\"line\">                <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</div><div class=\"line\">                <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</div><div class=\"line\">                rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</div><div class=\"line\">                viewGroup.addView(view, params);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (finishInflate) &#123;</div><div class=\"line\">            parent.onFinishInflate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到，主要就是通过PULL解析布局文件的方式解析出相关的View结构，具体PULL解析方式这里就不介绍了，小伙伴可以自行百度。在这里PULL解析的过程中，还对标签include,merge做了特别处理，是不是发现貌似代码中没有对标签ViewStub进行处理，其实是有的，主要是在createView()方法中，这里就不介绍了，小伙伴可以自行查一下源码。</p>\n<p>好了，到这里，就差不多分析完了。</p>\n<p><strong>注：源码采用android-6.0.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"二、参考文档\"><a href=\"#二、参考文档\" class=\"headerlink\" title=\"二、参考文档\"></a>二、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a></p>\n<p><a href=\"https://blog.csdn.net/awenyini/article/details/78964353\">Activity布局加载流程源码分析(II)</a></p>\n<p><a href=\"https://blog.csdn.net/d_shadow/article/details/55253586\">Android解析XML的三种方式</a></p>\n"},{"layout":"post","title":"Android跨进程通信方式(IPC)解析","date":"2017-12-15T08:05:27.000Z","comments":1,"_content":"---\n在Android的圈子里，一直有一个声音，那就是：要学会看Android源码。在前期，android开发者比较缺乏阶段，似乎大家也没那么重视，但随着时间的发展，Android开发者早已供大于求，需要具备的技能也不在仅限于应用开发，还需要对Android运行机制原理有一个深度的了解，从而更好的为项目服务。所以，阅读Android源码，也就成为Android开发人员必须要做的事。\n\n在阅读Android源码时，我们发现，Android系统中跨进程通信主要就是Binder。关于Binder跨进程通信原理，我已写过一篇文章[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893),想了解的同学可以看一下。其中也有说到为什么Andorid系统跨进程通信要使用Binder。在Android系统中多数服务如ActivitManagerService,WindowManagerService,PackageManagerService等都是通过Binder进行通信的，在阅读源码时，我们会时时与其打交道，所以本篇博文主要是想梳理一下Andorid源码中常见的Binder跨进程通信的方式，以便自己在读源码时，可以更好的理解。\n\n在[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)博文中，我们说到Binder跨进程通信方式有两种，分别为AIDL方式、注册服务方式。AIDL方式在开发中是我们经常使用的方式，这里将会采用对比的方式来解析系统服务的Binder跨进程通信。\n\n# 一、常用AIDL方式\n**1.aidl接口创建**\n\n以aidl为后缀创建一个接口类。如\n```java\n\ninterface IMainService {\n   void start(String temp);\n}\n\n```\n<!-- more -->\n项目编译时，系统会自动生成相对应的java文件，如\n```java\n\npublic interface IMainService extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.awen.codebase.IMainService {\n        private static final java.lang.String DESCRIPTOR = \"com.awen.codebase.IMainService\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.awen.codebase.IMainService interface,\n         * generating a proxy if needed.\n         */\n        public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_start: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    this.start(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.awen.codebase.IMainService {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            @Override\n            public void start(java.lang.String temp) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeString(temp);\n                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n    }\n\n    public void start(java.lang.String temp) throws android.os.RemoteException;\n}\n```\n抽象类Stub相当于服务端，代理类Proxy相当于客户端。抽象类Stub继承于Binder，代理类Proxy依赖于IBinder接口。\n\n**2.AIDL的使用**\n\nAIDL的使用是以Service为载体，进而实现跨进程通信。我们知道Android的四大组件，在Androidmanifest中注册的时候可以通过android：process来指定组件所在的进程，当组件间不在同进程时，就需要跨进程通信了。AIDLService代码如下：\n\n```java\npublic class AIDLService extends Service {\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        LogUtil.androidLog(\"Received start command.\");\n        return START_STICKY;\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        LogUtil.androidLog(\"Received binding.\");\n        return mBinder;\n    }\n\n    private final IMainService.Stub mBinder = new IMainService.Stub() {\n        @Override\n        public void start(String temp) throws RemoteException {\n            LogUtil.androidLog(\"AIDLService服务端打印日志：\"+temp);\n        }\n    };\n}\n```\n其中mBinder通过匿名内部类的形式初始化了Stub抽象类，进而AIDLService也就变成了Server端。当AIDLService与项目不在同一进程时，其他组件想与其通信，就必须要跨进程通信了。我们来看Activity与AIDLService通信，如\n```java\npublic class AIDLServiceConnection implements ServiceConnection {\n\n    private IMainService mService;\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n             mService = IMainService.Stub.asInterface(service);//核心代码\n             try{\n                 mService.start(\"Android IPC机制，Bindler跨进程通信~~~~~~~\");\n             }catch (RemoteException e){\n                 e.printStackTrace();\n             }\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        LogUtil.androidLog(\"AIDL服务断开连接\");\n    }\n}\n\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //AIDL跨进程通信\n        Intent intent = new Intent(this, AIDLService.class);\n        AIDLServiceConnection connection = new AIDLServiceConnection();\n        bindService(intent,connection,BIND_AUTO_CREATE);\n    }\n```\nActivity通过bindService的方式，建立与AIDLService服务的联系。这中间主要是通过ServiceConnection这个接口，我们来看一下注释中的核心代码，IMainService.Stub.asInterface(service)，这里我们再来看一下，aidl接口生成的java类的asInterface方法。\n\n```java\n    public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);//查询是否本地进程\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n```\n\n这里主要判断IBinder是否是跨进程，如果不是就返回本身，如果是则返回代理类Proxy，从而进行跨进程通信。具体Binder是怎么跨进程通信的，可以参考我的博文[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)。最后运行程序，结果如下\n\n![](/assets/img/tech_android_ipc_aidl.png)\n\n这里跨进程通信AIDL方式就讲解完了，AIDL方式源码地址：[https://github.com/awenzeng/AndroidCodeLibrary](https://github.com/awenzeng/AndroidCodeLibrary),欢迎star，fork。\n\n# 二、注册服务方式\nAndroid的各种系统服务在Android系统启动的时候就也会启动和注册，具体启动流程，可以参考[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)，这篇博文中有介绍，想了解的同学可以看一下。系统服务启动和注册流程具体如下：\n\n![](/assets/img/tech_android_ipc_regist.png)\n\n\n通过此图，我想大家对系统服务的启动流程已有一个大概认识。各种系统服务启动后，都会在ServiceManager进行注册备注，以方便应用进程调用，这ServiceManager相当于各种系统服务的大管家。另外，Andorid的各种系统服务都运行在system_server进程中，应用进程想要获取系统服务，就需要与system_server进程通信，Binder在其中就起着桥梁的作用。\n\nAndroid系统中服务大约有八十多个，我们也没必要一一分析，遇到相关服务时，再进一步分析就好。本篇博文主要是针对跨进程通信(IPC)，所以也主要分析Andorid源码中常见的通过Binder通信的C/S端，来加深对Android源码的理解。常见的Android源码Binder通信C/S端有：\n\n* ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)\n* ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)\n\n**1.AMS跨进程通信**\n首先我们来看一下ActivityManagerNative源码，如下\n```java\n/** {@hide} */\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);\n    }\n    ....\n    public ActivityManagerNative() {\n        attachInterface(this, descriptor);\n    }\n\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n    \n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case START_ACTIVITY_TRANSACTION:\n        {\n            data.enforceInterface(IActivityManager.descriptor);\n            IBinder b = data.readStrongBinder();\n            IApplicationThread app = ApplicationThreadNative.asInterface(b);\n            Intent intent = Intent.CREATOR.createFromParcel(data);\n            String resolvedType = data.readString();\n            IBinder resultTo = data.readStrongBinder();\n            String resultWho = data.readString();\n            int requestCode = data.readInt();\n            int startFlags = data.readInt();\n            String profileFile = data.readString();\n            ParcelFileDescriptor profileFd = data.readInt() != 0\n                    ? data.readFileDescriptor() : null;\n            Bundle options = data.readInt() != 0\n                    ? Bundle.CREATOR.createFromParcel(data) : null;\n            int result = startActivity(app, intent, resolvedType,\n                    resultTo, resultWho, requestCode, startFlags,\n                    profileFile, profileFd, options);\n            reply.writeNoException();\n            reply.writeInt(result);\n            return true;\n        }\n        }\n        }\n        return super.onTransact(code, data, reply, flags);\n    }\n\n    public IBinder asBinder() {\n        return this;\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");//1.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//2.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n}\n\nclass ActivityManagerProxy implements IActivityManager\n{\n    private IBinder mRemote;\n\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n\n    public int startActivity(IApplicationThread caller, Intent intent,\n            String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, String profileFile,\n            ParcelFileDescriptor profileFd, Bundle options) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        ......\n        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n        reply.readException();\n        int result = reply.readInt();\n        reply.recycle();\n        data.recycle();\n        return result;\n    }\n   ........\n }\n}\n```\n从此源码来看，这与我们AIDL方式的接口生成的java代码很像，抽象类ActivityManagerNative就相当于抽象类Stub,代理类ActivityManagerProxy就相当于代理类Proxy，所以抽象类AMN就相当于Server端，代理类ActivityManagerProxy就相当于Client端。我们再来看一下ActivityManagerService类\n```java\n\npublic final class ActivityManagerService extends ActivityManagerNative\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {\n......省略代码\n}\n```\n可以看出ActivityManagerService继承至ActivityManagerNative，所以ActivityManagerService也是Server端，类似AIDL方式的AIDLService。我们再来看看ActivityManagerService的获取，在ActivityManagerNative源码中\n\n```java\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n  .......\n static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);//核心代码\n    }\n\n static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");//1.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//2.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n.........\n}\n```\n主要通过一个静态方法ActivityManagerNative.getDefault()获取，而gDefault就是一个单例，从注释1：ServiceManager.getService(\"activity\")，我们知主要就是从大管家ServiceManager中获取ActivityManagerService服务，但由于AMS是在不同的进程，所以通过asInterface()获取代理类ActivityManagerProxy来进行Binder跨进程通信。通过调用代理类AMP中的方法，然后跨进程通信，从而调用AMS中的相关方法。\n\n到这里ActivitManagerService的Binder跨进程通信方式就简单介绍完了。\n\n对于AMS，我不得不提一下，因为Android中四大组件Activity、Service、BroadcastReceiver和ContentProvider启动和使用都与其有关，可以说Andorid系统中比较重要的一个类。\n\n**2.ApplicationThread跨进程通信**\n\n同样的，首先我们先来看一下ApplicationThreadNative此类，源码如下\n```java\npublic abstract class ApplicationThreadNative extends Binder\n        implements IApplicationThread {\n    /**\n     * Cast a Binder object into an application thread interface, generating\n     * a proxy if needed.\n     */\n    static public IApplicationThread asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IApplicationThread in =\n            (IApplicationThread)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n        \n        return new ApplicationThreadProxy(obj);\n    }\n    \n    public ApplicationThreadNative() {\n        attachInterface(this, descriptor);\n    }\n    \n    @Override\n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:\n        {\n            data.enforceInterface(IApplicationThread.descriptor);\n            IBinder b = data.readStrongBinder();\n            boolean finished = data.readInt() != 0;\n            boolean userLeaving = data.readInt() != 0;\n            int configChanges = data.readInt();\n            schedulePauseActivity(b, finished, userLeaving, configChanges);\n            return true;\n        }\n        .........\n        }\n\n        return super.onTransact(code, data, reply, flags);\n    }\n\n    public IBinder asBinder()\n    {\n        return this;\n    }\n}\n\nclass ApplicationThreadProxy implements IApplicationThread {\n\n    private final IBinder mRemote;\n    \n    public ApplicationThreadProxy(IBinder remote) {\n        mRemote = remote;\n    }\n    \n    public final IBinder asBinder() {\n        return mRemote;\n    }\n    \n    public final void schedulePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        data.writeInterfaceToken(IApplicationThread.descriptor);\n        data.writeStrongBinder(token);\n        data.writeInt(finished ? 1 : 0);\n        data.writeInt(userLeaving ? 1 :0);\n        data.writeInt(configChanges);\n        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, null,\n                IBinder.FLAG_ONEWAY);\n        data.recycle();\n    }\n    ......\n}\n```\nBinder跨进程通信定义方式，差不多都一样，ApplicationThread跨进程通信也和AIDL方式类似。其中抽象类ApplicationThreadNative为Server端，代理类ApplicationThreadProxy为Client端。我们再来看ApplicationThread类，通过阅读源码，我们知ApplicationThread是ActivityThread中内部类，这里我们也来看看ApplicationThread的源码\n```java\npublic final class ActivityThread {\n\nfinal ApplicationThread mAppThread = new ApplicationThread();\n......\nprivate class ApplicationThread extends ApplicationThreadNative {\n......\n}\n}\n```\n可以发现，ApplicationThread继承至ApplicationThreadNative，所以ApplicationThread也是AT跨进程通信的Server端，这里与AIDL的调用方式类似，通过一定的转换获取到代理类ApplicationThreadProxy，从而进行跨进程通信。\n\nApplicationThread跨进程通信方式，在Android系统中还是比较重要的，它主要与AMS跨进程通信一起使用，当ActivityManagerService执行完响应的操作后，再通过跨进程通信方式与应用进程通信(ApplicationThread是在应用进程中)，从而对Andorid的四大组件进行调度，Activity，Service等的启动及生命周期，也就是通过AMS跨进程通信和AT跨进程通信实现的。这点在阅读Activity及Service启动源码的时候，会接触的比较频繁。\n\n到这里，我想说的就说完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、相关文档\n[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)\n\n[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)\n\n\n","source":"_posts/tech_android_framework_ipc.md","raw":"---\nlayout: post\ntitle: \"Android跨进程通信方式(IPC)解析\"\ndate: 12/15/2017 4:05:27 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n在Android的圈子里，一直有一个声音，那就是：要学会看Android源码。在前期，android开发者比较缺乏阶段，似乎大家也没那么重视，但随着时间的发展，Android开发者早已供大于求，需要具备的技能也不在仅限于应用开发，还需要对Android运行机制原理有一个深度的了解，从而更好的为项目服务。所以，阅读Android源码，也就成为Android开发人员必须要做的事。\n\n在阅读Android源码时，我们发现，Android系统中跨进程通信主要就是Binder。关于Binder跨进程通信原理，我已写过一篇文章[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893),想了解的同学可以看一下。其中也有说到为什么Andorid系统跨进程通信要使用Binder。在Android系统中多数服务如ActivitManagerService,WindowManagerService,PackageManagerService等都是通过Binder进行通信的，在阅读源码时，我们会时时与其打交道，所以本篇博文主要是想梳理一下Andorid源码中常见的Binder跨进程通信的方式，以便自己在读源码时，可以更好的理解。\n\n在[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)博文中，我们说到Binder跨进程通信方式有两种，分别为AIDL方式、注册服务方式。AIDL方式在开发中是我们经常使用的方式，这里将会采用对比的方式来解析系统服务的Binder跨进程通信。\n\n# 一、常用AIDL方式\n**1.aidl接口创建**\n\n以aidl为后缀创建一个接口类。如\n```java\n\ninterface IMainService {\n   void start(String temp);\n}\n\n```\n<!-- more -->\n项目编译时，系统会自动生成相对应的java文件，如\n```java\n\npublic interface IMainService extends android.os.IInterface {\n    /**\n     * Local-side IPC implementation stub class.\n     */\n    public static abstract class Stub extends android.os.Binder implements com.awen.codebase.IMainService {\n        private static final java.lang.String DESCRIPTOR = \"com.awen.codebase.IMainService\";\n\n        /**\n         * Construct the stub at attach it to the interface.\n         */\n        public Stub() {\n            this.attachInterface(this, DESCRIPTOR);\n        }\n\n        /**\n         * Cast an IBinder object into an com.awen.codebase.IMainService interface,\n         * generating a proxy if needed.\n         */\n        public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n\n        @Override\n        public android.os.IBinder asBinder() {\n            return this;\n        }\n\n        @Override\n        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {\n            switch (code) {\n                case INTERFACE_TRANSACTION: {\n                    reply.writeString(DESCRIPTOR);\n                    return true;\n                }\n                case TRANSACTION_start: {\n                    data.enforceInterface(DESCRIPTOR);\n                    java.lang.String _arg0;\n                    _arg0 = data.readString();\n                    this.start(_arg0);\n                    reply.writeNoException();\n                    return true;\n                }\n            }\n            return super.onTransact(code, data, reply, flags);\n        }\n\n        private static class Proxy implements com.awen.codebase.IMainService {\n            private android.os.IBinder mRemote;\n\n            Proxy(android.os.IBinder remote) {\n                mRemote = remote;\n            }\n\n            @Override\n            public android.os.IBinder asBinder() {\n                return mRemote;\n            }\n\n            public java.lang.String getInterfaceDescriptor() {\n                return DESCRIPTOR;\n            }\n\n            @Override\n            public void start(java.lang.String temp) throws android.os.RemoteException {\n                android.os.Parcel _data = android.os.Parcel.obtain();\n                android.os.Parcel _reply = android.os.Parcel.obtain();\n                try {\n                    _data.writeInterfaceToken(DESCRIPTOR);\n                    _data.writeString(temp);\n                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, 0);\n                    _reply.readException();\n                } finally {\n                    _reply.recycle();\n                    _data.recycle();\n                }\n            }\n        }\n\n        static final int TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n    }\n\n    public void start(java.lang.String temp) throws android.os.RemoteException;\n}\n```\n抽象类Stub相当于服务端，代理类Proxy相当于客户端。抽象类Stub继承于Binder，代理类Proxy依赖于IBinder接口。\n\n**2.AIDL的使用**\n\nAIDL的使用是以Service为载体，进而实现跨进程通信。我们知道Android的四大组件，在Androidmanifest中注册的时候可以通过android：process来指定组件所在的进程，当组件间不在同进程时，就需要跨进程通信了。AIDLService代码如下：\n\n```java\npublic class AIDLService extends Service {\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        LogUtil.androidLog(\"Received start command.\");\n        return START_STICKY;\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        LogUtil.androidLog(\"Received binding.\");\n        return mBinder;\n    }\n\n    private final IMainService.Stub mBinder = new IMainService.Stub() {\n        @Override\n        public void start(String temp) throws RemoteException {\n            LogUtil.androidLog(\"AIDLService服务端打印日志：\"+temp);\n        }\n    };\n}\n```\n其中mBinder通过匿名内部类的形式初始化了Stub抽象类，进而AIDLService也就变成了Server端。当AIDLService与项目不在同一进程时，其他组件想与其通信，就必须要跨进程通信了。我们来看Activity与AIDLService通信，如\n```java\npublic class AIDLServiceConnection implements ServiceConnection {\n\n    private IMainService mService;\n\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n             mService = IMainService.Stub.asInterface(service);//核心代码\n             try{\n                 mService.start(\"Android IPC机制，Bindler跨进程通信~~~~~~~\");\n             }catch (RemoteException e){\n                 e.printStackTrace();\n             }\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n        LogUtil.androidLog(\"AIDL服务断开连接\");\n    }\n}\n\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //AIDL跨进程通信\n        Intent intent = new Intent(this, AIDLService.class);\n        AIDLServiceConnection connection = new AIDLServiceConnection();\n        bindService(intent,connection,BIND_AUTO_CREATE);\n    }\n```\nActivity通过bindService的方式，建立与AIDLService服务的联系。这中间主要是通过ServiceConnection这个接口，我们来看一下注释中的核心代码，IMainService.Stub.asInterface(service)，这里我们再来看一下，aidl接口生成的java类的asInterface方法。\n\n```java\n    public static com.awen.codebase.IMainService asInterface(android.os.IBinder obj) {\n            if ((obj == null)) {\n                return null;\n            }\n            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);//查询是否本地进程\n            if (((iin != null) && (iin instanceof com.awen.codebase.IMainService))) {\n                return ((com.awen.codebase.IMainService) iin);\n            }\n            return new com.awen.codebase.IMainService.Stub.Proxy(obj);\n        }\n```\n\n这里主要判断IBinder是否是跨进程，如果不是就返回本身，如果是则返回代理类Proxy，从而进行跨进程通信。具体Binder是怎么跨进程通信的，可以参考我的博文[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)。最后运行程序，结果如下\n\n![](/assets/img/tech_android_ipc_aidl.png)\n\n这里跨进程通信AIDL方式就讲解完了，AIDL方式源码地址：[https://github.com/awenzeng/AndroidCodeLibrary](https://github.com/awenzeng/AndroidCodeLibrary),欢迎star，fork。\n\n# 二、注册服务方式\nAndroid的各种系统服务在Android系统启动的时候就也会启动和注册，具体启动流程，可以参考[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)，这篇博文中有介绍，想了解的同学可以看一下。系统服务启动和注册流程具体如下：\n\n![](/assets/img/tech_android_ipc_regist.png)\n\n\n通过此图，我想大家对系统服务的启动流程已有一个大概认识。各种系统服务启动后，都会在ServiceManager进行注册备注，以方便应用进程调用，这ServiceManager相当于各种系统服务的大管家。另外，Andorid的各种系统服务都运行在system_server进程中，应用进程想要获取系统服务，就需要与system_server进程通信，Binder在其中就起着桥梁的作用。\n\nAndroid系统中服务大约有八十多个，我们也没必要一一分析，遇到相关服务时，再进一步分析就好。本篇博文主要是针对跨进程通信(IPC)，所以也主要分析Andorid源码中常见的通过Binder通信的C/S端，来加深对Android源码的理解。常见的Android源码Binder通信C/S端有：\n\n* ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)\n* ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)\n\n**1.AMS跨进程通信**\n首先我们来看一下ActivityManagerNative源码，如下\n```java\n/** {@hide} */\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n    static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);\n    }\n    ....\n    public ActivityManagerNative() {\n        attachInterface(this, descriptor);\n    }\n\n    static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n    \n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case START_ACTIVITY_TRANSACTION:\n        {\n            data.enforceInterface(IActivityManager.descriptor);\n            IBinder b = data.readStrongBinder();\n            IApplicationThread app = ApplicationThreadNative.asInterface(b);\n            Intent intent = Intent.CREATOR.createFromParcel(data);\n            String resolvedType = data.readString();\n            IBinder resultTo = data.readStrongBinder();\n            String resultWho = data.readString();\n            int requestCode = data.readInt();\n            int startFlags = data.readInt();\n            String profileFile = data.readString();\n            ParcelFileDescriptor profileFd = data.readInt() != 0\n                    ? data.readFileDescriptor() : null;\n            Bundle options = data.readInt() != 0\n                    ? Bundle.CREATOR.createFromParcel(data) : null;\n            int result = startActivity(app, intent, resolvedType,\n                    resultTo, resultWho, requestCode, startFlags,\n                    profileFile, profileFd, options);\n            reply.writeNoException();\n            reply.writeInt(result);\n            return true;\n        }\n        }\n        }\n        return super.onTransact(code, data, reply, flags);\n    }\n\n    public IBinder asBinder() {\n        return this;\n    }\n\n    private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");//1.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//2.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n}\n\nclass ActivityManagerProxy implements IActivityManager\n{\n    private IBinder mRemote;\n\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n\n    public int startActivity(IApplicationThread caller, Intent intent,\n            String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, String profileFile,\n            ParcelFileDescriptor profileFd, Bundle options) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        Parcel reply = Parcel.obtain();\n        ......\n        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n        reply.readException();\n        int result = reply.readInt();\n        reply.recycle();\n        data.recycle();\n        return result;\n    }\n   ........\n }\n}\n```\n从此源码来看，这与我们AIDL方式的接口生成的java代码很像，抽象类ActivityManagerNative就相当于抽象类Stub,代理类ActivityManagerProxy就相当于代理类Proxy，所以抽象类AMN就相当于Server端，代理类ActivityManagerProxy就相当于Client端。我们再来看一下ActivityManagerService类\n```java\n\npublic final class ActivityManagerService extends ActivityManagerNative\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {\n......省略代码\n}\n```\n可以看出ActivityManagerService继承至ActivityManagerNative，所以ActivityManagerService也是Server端，类似AIDL方式的AIDLService。我们再来看看ActivityManagerService的获取，在ActivityManagerNative源码中\n\n```java\npublic abstract class ActivityManagerNative extends Binder implements IActivityManager\n{\n  .......\n static public IActivityManager asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IActivityManager in =\n            (IActivityManager)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n\n        return new ActivityManagerProxy(obj);//核心代码\n    }\n\n static public IActivityManager getDefault() {\n        return gDefault.get();\n    }\n\n private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {\n        protected IActivityManager create() {\n            IBinder b = ServiceManager.getService(\"activity\");//1.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service binder = \" + b);\n            }\n            IActivityManager am = asInterface(b);//2.核心代码\n            if (false) {\n                Log.v(\"ActivityManager\", \"default service = \" + am);\n            }\n            return am;\n        }\n    };\n.........\n}\n```\n主要通过一个静态方法ActivityManagerNative.getDefault()获取，而gDefault就是一个单例，从注释1：ServiceManager.getService(\"activity\")，我们知主要就是从大管家ServiceManager中获取ActivityManagerService服务，但由于AMS是在不同的进程，所以通过asInterface()获取代理类ActivityManagerProxy来进行Binder跨进程通信。通过调用代理类AMP中的方法，然后跨进程通信，从而调用AMS中的相关方法。\n\n到这里ActivitManagerService的Binder跨进程通信方式就简单介绍完了。\n\n对于AMS，我不得不提一下，因为Android中四大组件Activity、Service、BroadcastReceiver和ContentProvider启动和使用都与其有关，可以说Andorid系统中比较重要的一个类。\n\n**2.ApplicationThread跨进程通信**\n\n同样的，首先我们先来看一下ApplicationThreadNative此类，源码如下\n```java\npublic abstract class ApplicationThreadNative extends Binder\n        implements IApplicationThread {\n    /**\n     * Cast a Binder object into an application thread interface, generating\n     * a proxy if needed.\n     */\n    static public IApplicationThread asInterface(IBinder obj) {\n        if (obj == null) {\n            return null;\n        }\n        IApplicationThread in =\n            (IApplicationThread)obj.queryLocalInterface(descriptor);\n        if (in != null) {\n            return in;\n        }\n        \n        return new ApplicationThreadProxy(obj);\n    }\n    \n    public ApplicationThreadNative() {\n        attachInterface(this, descriptor);\n    }\n    \n    @Override\n    public boolean onTransact(int code, Parcel data, Parcel reply, int flags)\n            throws RemoteException {\n        switch (code) {\n        case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:\n        {\n            data.enforceInterface(IApplicationThread.descriptor);\n            IBinder b = data.readStrongBinder();\n            boolean finished = data.readInt() != 0;\n            boolean userLeaving = data.readInt() != 0;\n            int configChanges = data.readInt();\n            schedulePauseActivity(b, finished, userLeaving, configChanges);\n            return true;\n        }\n        .........\n        }\n\n        return super.onTransact(code, data, reply, flags);\n    }\n\n    public IBinder asBinder()\n    {\n        return this;\n    }\n}\n\nclass ApplicationThreadProxy implements IApplicationThread {\n\n    private final IBinder mRemote;\n    \n    public ApplicationThreadProxy(IBinder remote) {\n        mRemote = remote;\n    }\n    \n    public final IBinder asBinder() {\n        return mRemote;\n    }\n    \n    public final void schedulePauseActivity(IBinder token, boolean finished,\n            boolean userLeaving, int configChanges) throws RemoteException {\n        Parcel data = Parcel.obtain();\n        data.writeInterfaceToken(IApplicationThread.descriptor);\n        data.writeStrongBinder(token);\n        data.writeInt(finished ? 1 : 0);\n        data.writeInt(userLeaving ? 1 :0);\n        data.writeInt(configChanges);\n        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, null,\n                IBinder.FLAG_ONEWAY);\n        data.recycle();\n    }\n    ......\n}\n```\nBinder跨进程通信定义方式，差不多都一样，ApplicationThread跨进程通信也和AIDL方式类似。其中抽象类ApplicationThreadNative为Server端，代理类ApplicationThreadProxy为Client端。我们再来看ApplicationThread类，通过阅读源码，我们知ApplicationThread是ActivityThread中内部类，这里我们也来看看ApplicationThread的源码\n```java\npublic final class ActivityThread {\n\nfinal ApplicationThread mAppThread = new ApplicationThread();\n......\nprivate class ApplicationThread extends ApplicationThreadNative {\n......\n}\n}\n```\n可以发现，ApplicationThread继承至ApplicationThreadNative，所以ApplicationThread也是AT跨进程通信的Server端，这里与AIDL的调用方式类似，通过一定的转换获取到代理类ApplicationThreadProxy，从而进行跨进程通信。\n\nApplicationThread跨进程通信方式，在Android系统中还是比较重要的，它主要与AMS跨进程通信一起使用，当ActivityManagerService执行完响应的操作后，再通过跨进程通信方式与应用进程通信(ApplicationThread是在应用进程中)，从而对Andorid的四大组件进行调度，Activity，Service等的启动及生命周期，也就是通过AMS跨进程通信和AT跨进程通信实现的。这点在阅读Activity及Service启动源码的时候，会接触的比较频繁。\n\n到这里，我想说的就说完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、相关文档\n[Binder通信机制原理解析](http://blog.csdn.net/awenyini/article/details/78806893)\n\n[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)\n\n\n","slug":"tech_android_framework_ipc","published":1,"updated":"2019-06-27T08:15:15.314Z","photos":[],"link":"","_id":"cjxfjaesw004yystghygc5idl","content":"<hr>\n<p>在Android的圈子里，一直有一个声音，那就是：要学会看Android源码。在前期，android开发者比较缺乏阶段，似乎大家也没那么重视，但随着时间的发展，Android开发者早已供大于求，需要具备的技能也不在仅限于应用开发，还需要对Android运行机制原理有一个深度的了解，从而更好的为项目服务。所以，阅读Android源码，也就成为Android开发人员必须要做的事。</p>\n<p>在阅读Android源码时，我们发现，Android系统中跨进程通信主要就是Binder。关于Binder跨进程通信原理，我已写过一篇文章<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\">Binder通信机制原理解析</a>,想了解的同学可以看一下。其中也有说到为什么Andorid系统跨进程通信要使用Binder。在Android系统中多数服务如ActivitManagerService,WindowManagerService,PackageManagerService等都是通过Binder进行通信的，在阅读源码时，我们会时时与其打交道，所以本篇博文主要是想梳理一下Andorid源码中常见的Binder跨进程通信的方式，以便自己在读源码时，可以更好的理解。</p>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\">Binder通信机制原理解析</a>博文中，我们说到Binder跨进程通信方式有两种，分别为AIDL方式、注册服务方式。AIDL方式在开发中是我们经常使用的方式，这里将会采用对比的方式来解析系统服务的Binder跨进程通信。</p>\n<h1 id=\"一、常用AIDL方式\"><a href=\"#一、常用AIDL方式\" class=\"headerlink\" title=\"一、常用AIDL方式\"></a>一、常用AIDL方式</h1><p><strong>1.aidl接口创建</strong></p>\n<p>以aidl为后缀创建一个接口类。如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>项目编译时，系统会自动生成相对应的java文件，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.awen.codebase.IMainService\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * Cast an IBinder object into an com.awen.codebase.IMainService interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_start: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.start(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeString(temp);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>抽象类Stub相当于服务端，代理类Proxy相当于客户端。抽象类Stub继承于Binder，代理类Proxy依赖于IBinder接口。</p>\n<p><strong>2.AIDL的使用</strong></p>\n<p>AIDL的使用是以Service为载体，进而实现跨进程通信。我们知道Android的四大组件，在Androidmanifest中注册的时候可以通过android：process来指定组件所在的进程，当组件间不在同进程时，就需要跨进程通信了。AIDLService代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AIDLService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"Received start command.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> START_STICKY;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"Received binding.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IMainService.Stub mBinder = <span class=\"keyword\">new</span> IMainService.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            LogUtil.androidLog(<span class=\"string\">\"AIDLService服务端打印日志：\"</span>+temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中mBinder通过匿名内部类的形式初始化了Stub抽象类，进而AIDLService也就变成了Server端。当AIDLService与项目不在同一进程时，其他组件想与其通信，就必须要跨进程通信了。我们来看Activity与AIDLService通信，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AIDLServiceConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> IMainService mService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">             mService = IMainService.Stub.asInterface(service);<span class=\"comment\">//核心代码</span></div><div class=\"line\">             <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                 mService.start(<span class=\"string\">\"Android IPC机制，Bindler跨进程通信~~~~~~~\"</span>);</div><div class=\"line\">             &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                 e.printStackTrace();</div><div class=\"line\">             &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"AIDL服务断开连接\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//AIDL跨进程通信</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, AIDLService.class);</div><div class=\"line\">        AIDLServiceConnection connection = <span class=\"keyword\">new</span> AIDLServiceConnection();</div><div class=\"line\">        bindService(intent,connection,BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Activity通过bindService的方式，建立与AIDLService服务的联系。这中间主要是通过ServiceConnection这个接口，我们来看一下注释中的核心代码，IMainService.Stub.asInterface(service)，这里我们再来看一下，aidl接口生成的java类的asInterface方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);<span class=\"comment\">//查询是否本地进程</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里主要判断IBinder是否是跨进程，如果不是就返回本身，如果是则返回代理类Proxy，从而进行跨进程通信。具体Binder是怎么跨进程通信的，可以参考我的博文<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\">Binder通信机制原理解析</a>。最后运行程序，结果如下</p>\n<p><img src=\"/assets/img/tech_android_ipc_aidl.png\" alt=\"\"></p>\n<p>这里跨进程通信AIDL方式就讲解完了，AIDL方式源码地址：<a href=\"https://github.com/awenzeng/AndroidCodeLibrary\" target=\"_blank\" rel=\"external\">https://github.com/awenzeng/AndroidCodeLibrary</a>,欢迎star，fork。</p>\n<h1 id=\"二、注册服务方式\"><a href=\"#二、注册服务方式\" class=\"headerlink\" title=\"二、注册服务方式\"></a>二、注册服务方式</h1><p>Android的各种系统服务在Android系统启动的时候就也会启动和注册，具体启动流程，可以参考<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\" target=\"_blank\" rel=\"external\">Android应用程序入口源码解析</a>，这篇博文中有介绍，想了解的同学可以看一下。系统服务启动和注册流程具体如下：</p>\n<p><img src=\"/assets/img/tech_android_ipc_regist.png\" alt=\"\"></p>\n<p>通过此图，我想大家对系统服务的启动流程已有一个大概认识。各种系统服务启动后，都会在ServiceManager进行注册备注，以方便应用进程调用，这ServiceManager相当于各种系统服务的大管家。另外，Andorid的各种系统服务都运行在system_server进程中，应用进程想要获取系统服务，就需要与system_server进程通信，Binder在其中就起着桥梁的作用。</p>\n<p>Android系统中服务大约有八十多个，我们也没必要一一分析，遇到相关服务时，再进一步分析就好。本篇博文主要是针对跨进程通信(IPC)，所以也主要分析Andorid源码中常见的通过Binder通信的C/S端，来加深对Android源码的理解。常见的Android源码Binder通信C/S端有：</p>\n<ul>\n<li>ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)</li>\n<li>ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)</li>\n</ul>\n<p><strong>1.AMS跨进程通信</strong><br>首先我们来看一下ActivityManagerNative源码，如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** &#123;<span class=\"doctag\">@hide</span>&#125; */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerNative</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        attachInterface(<span class=\"keyword\">this</span>, descriptor);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">        &#123;</div><div class=\"line\">            data.enforceInterface(IActivityManager.descriptor);</div><div class=\"line\">            IBinder b = data.readStrongBinder();</div><div class=\"line\">            IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">            Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">            String resolvedType = data.readString();</div><div class=\"line\">            IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">            String resultWho = data.readString();</div><div class=\"line\">            <span class=\"keyword\">int</span> requestCode = data.readInt();</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags = data.readInt();</div><div class=\"line\">            String profileFile = data.readString();</div><div class=\"line\">            ParcelFileDescriptor profileFd = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                    ? data.readFileDescriptor() : <span class=\"keyword\">null</span>;</div><div class=\"line\">            Bundle options = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                    ? Bundle.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> result = startActivity(app, intent, resolvedType,</div><div class=\"line\">                    resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">                    profileFile, profileFd, options);</div><div class=\"line\">            reply.writeNoException();</div><div class=\"line\">            reply.writeInt(result);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            IActivityManager am = asInterface(b);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, Intent intent,</span></span></div><div class=\"line\">            String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, String profileFile,</div><div class=\"line\">            ParcelFileDescriptor profileFd, Bundle options) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        ......</div><div class=\"line\">        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">        reply.readException();</div><div class=\"line\">        <span class=\"keyword\">int</span> result = reply.readInt();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">   ........</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从此源码来看，这与我们AIDL方式的接口生成的java代码很像，抽象类ActivityManagerNative就相当于抽象类Stub,代理类ActivityManagerProxy就相当于代理类Proxy，所以抽象类AMN就相当于Server端，代理类ActivityManagerProxy就相当于Client端。我们再来看一下ActivityManagerService类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActivityManagerNative</span></span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">Watchdog</span>.<span class=\"title\">Monitor</span>, <span class=\"title\">BatteryStatsImpl</span>.<span class=\"title\">BatteryCallback</span> &#123;</div><div class=\"line\">......省略代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出ActivityManagerService继承至ActivityManagerNative，所以ActivityManagerService也是Server端，类似AIDL方式的AIDLService。我们再来看看ActivityManagerService的获取，在ActivityManagerNative源码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  .......</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            IActivityManager am = asInterface(b);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">.........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要通过一个静态方法ActivityManagerNative.getDefault()获取，而gDefault就是一个单例，从注释1：ServiceManager.getService(“activity”)，我们知主要就是从大管家ServiceManager中获取ActivityManagerService服务，但由于AMS是在不同的进程，所以通过asInterface()获取代理类ActivityManagerProxy来进行Binder跨进程通信。通过调用代理类AMP中的方法，然后跨进程通信，从而调用AMS中的相关方法。</p>\n<p>到这里ActivitManagerService的Binder跨进程通信方式就简单介绍完了。</p>\n<p>对于AMS，我不得不提一下，因为Android中四大组件Activity、Service、BroadcastReceiver和ContentProvider启动和使用都与其有关，可以说Andorid系统中比较重要的一个类。</p>\n<p><strong>2.ApplicationThread跨进程通信</strong></p>\n<p>同样的，首先我们先来看一下ApplicationThreadNative此类，源码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Cast a Binder object into an application thread interface, generating</div><div class=\"line\">     * a proxy if needed.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IApplicationThread <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IApplicationThread in =</div><div class=\"line\">            (IApplicationThread)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApplicationThreadProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationThreadNative</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        attachInterface(<span class=\"keyword\">this</span>, descriptor);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></span></div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:</div><div class=\"line\">        &#123;</div><div class=\"line\">            data.enforceInterface(IApplicationThread.descriptor);</div><div class=\"line\">            IBinder b = data.readStrongBinder();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> finished = data.readInt() != <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving = data.readInt() != <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> configChanges = data.readInt();</div><div class=\"line\">            schedulePauseActivity(b, finished, userLeaving, configChanges);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        .........</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IBinder mRemote;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationThreadProxy</span><span class=\"params\">(IBinder remote)</span> </span>&#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</span></span></div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges) <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\">        data.writeStrongBinder(token);</div><div class=\"line\">        data.writeInt(finished ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">        data.writeInt(userLeaving ? <span class=\"number\">1</span> :<span class=\"number\">0</span>);</div><div class=\"line\">        data.writeInt(configChanges);</div><div class=\"line\">        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">                IBinder.FLAG_ONEWAY);</div><div class=\"line\">        data.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Binder跨进程通信定义方式，差不多都一样，ApplicationThread跨进程通信也和AIDL方式类似。其中抽象类ApplicationThreadNative为Server端，代理类ApplicationThreadProxy为Client端。我们再来看ApplicationThread类，通过阅读源码，我们知ApplicationThread是ActivityThread中内部类，这里我们也来看看ApplicationThread的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> ApplicationThread mAppThread = <span class=\"keyword\">new</span> ApplicationThread();</div><div class=\"line\">......</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，ApplicationThread继承至ApplicationThreadNative，所以ApplicationThread也是AT跨进程通信的Server端，这里与AIDL的调用方式类似，通过一定的转换获取到代理类ApplicationThreadProxy，从而进行跨进程通信。</p>\n<p>ApplicationThread跨进程通信方式，在Android系统中还是比较重要的，它主要与AMS跨进程通信一起使用，当ActivityManagerService执行完响应的操作后，再通过跨进程通信方式与应用进程通信(ApplicationThread是在应用进程中)，从而对Andorid的四大组件进行调度，Activity，Service等的启动及生命周期，也就是通过AMS跨进程通信和AT跨进程通信实现的。这点在阅读Activity及Service启动源码的时候，会接触的比较频繁。</p>\n<p>到这里，我想说的就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、相关文档\"><a href=\"#三、相关文档\" class=\"headerlink\" title=\"三、相关文档\"></a>三、相关文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\">Binder通信机制原理解析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78619361\" target=\"_blank\" rel=\"external\">Android应用程序入口源码解析</a></p>\n","excerpt":"<hr>\n<p>在Android的圈子里，一直有一个声音，那就是：要学会看Android源码。在前期，android开发者比较缺乏阶段，似乎大家也没那么重视，但随着时间的发展，Android开发者早已供大于求，需要具备的技能也不在仅限于应用开发，还需要对Android运行机制原理有一个深度的了解，从而更好的为项目服务。所以，阅读Android源码，也就成为Android开发人员必须要做的事。</p>\n<p>在阅读Android源码时，我们发现，Android系统中跨进程通信主要就是Binder。关于Binder跨进程通信原理，我已写过一篇文章<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\">Binder通信机制原理解析</a>,想了解的同学可以看一下。其中也有说到为什么Andorid系统跨进程通信要使用Binder。在Android系统中多数服务如ActivitManagerService,WindowManagerService,PackageManagerService等都是通过Binder进行通信的，在阅读源码时，我们会时时与其打交道，所以本篇博文主要是想梳理一下Andorid源码中常见的Binder跨进程通信的方式，以便自己在读源码时，可以更好的理解。</p>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\">Binder通信机制原理解析</a>博文中，我们说到Binder跨进程通信方式有两种，分别为AIDL方式、注册服务方式。AIDL方式在开发中是我们经常使用的方式，这里将会采用对比的方式来解析系统服务的Binder跨进程通信。</p>\n<h1 id=\"一、常用AIDL方式\"><a href=\"#一、常用AIDL方式\" class=\"headerlink\" title=\"一、常用AIDL方式\"></a>一、常用AIDL方式</h1><p><strong>1.aidl接口创建</strong></p>\n<p>以aidl为后缀创建一个接口类。如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>项目编译时，系统会自动生成相对应的java文件，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMainService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Local-side IPC implementation stub class.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.awen.codebase.IMainService\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Construct the stub at attach it to the interface.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * Cast an IBinder object into an com.awen.codebase.IMainService interface,</div><div class=\"line\">         * generating a proxy if needed.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</div><div class=\"line\">                    reply.writeString(DESCRIPTOR);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_start: &#123;</div><div class=\"line\">                    data.enforceInterface(DESCRIPTOR);</div><div class=\"line\">                    java.lang.String _arg0;</div><div class=\"line\">                    _arg0 = data.readString();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.start(_arg0);</div><div class=\"line\">                    reply.writeNoException();</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">awen</span>.<span class=\"title\">codebase</span>.<span class=\"title\">IMainService</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">            Proxy(android.os.IBinder remote) &#123;</div><div class=\"line\">                mRemote = remote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</div><div class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">                    _data.writeString(temp);</div><div class=\"line\">                    mRemote.transact(Stub.TRANSACTION_start, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">                    _reply.readException();</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    _reply.recycle();</div><div class=\"line\">                    _data.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_start = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(java.lang.String temp)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>抽象类Stub相当于服务端，代理类Proxy相当于客户端。抽象类Stub继承于Binder，代理类Proxy依赖于IBinder接口。</p>\n<p><strong>2.AIDL的使用</strong></p>\n<p>AIDL的使用是以Service为载体，进而实现跨进程通信。我们知道Android的四大组件，在Androidmanifest中注册的时候可以通过android：process来指定组件所在的进程，当组件间不在同进程时，就需要跨进程通信了。AIDLService代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AIDLService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"Received start command.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> START_STICKY;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"Received binding.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IMainService.Stub mBinder = <span class=\"keyword\">new</span> IMainService.Stub() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(String temp)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">            LogUtil.androidLog(<span class=\"string\">\"AIDLService服务端打印日志：\"</span>+temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中mBinder通过匿名内部类的形式初始化了Stub抽象类，进而AIDLService也就变成了Server端。当AIDLService与项目不在同一进程时，其他组件想与其通信，就必须要跨进程通信了。我们来看Activity与AIDLService通信，如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AIDLServiceConnection</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> IMainService mService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">             mService = IMainService.Stub.asInterface(service);<span class=\"comment\">//核心代码</span></div><div class=\"line\">             <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                 mService.start(<span class=\"string\">\"Android IPC机制，Bindler跨进程通信~~~~~~~\"</span>);</div><div class=\"line\">             &#125;<span class=\"keyword\">catch</span> (RemoteException e)&#123;</div><div class=\"line\">                 e.printStackTrace();</div><div class=\"line\">             &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">        LogUtil.androidLog(<span class=\"string\">\"AIDL服务断开连接\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//AIDL跨进程通信</span></div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, AIDLService.class);</div><div class=\"line\">        AIDLServiceConnection connection = <span class=\"keyword\">new</span> AIDLServiceConnection();</div><div class=\"line\">        bindService(intent,connection,BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>Activity通过bindService的方式，建立与AIDLService服务的联系。这中间主要是通过ServiceConnection这个接口，我们来看一下注释中的核心代码，IMainService.Stub.asInterface(service)，这里我们再来看一下，aidl接口生成的java类的asInterface方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.awen.codebase.<span class=\"function\">IMainService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);<span class=\"comment\">//查询是否本地进程</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.awen.codebase.IMainService))) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ((com.awen.codebase.IMainService) iin);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.awen.codebase.IMainService.Stub.Proxy(obj);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里主要判断IBinder是否是跨进程，如果不是就返回本身，如果是则返回代理类Proxy，从而进行跨进程通信。具体Binder是怎么跨进程通信的，可以参考我的博文<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\">Binder通信机制原理解析</a>。最后运行程序，结果如下</p>\n<p><img src=\"/assets/img/tech_android_ipc_aidl.png\" alt=\"\"></p>\n<p>这里跨进程通信AIDL方式就讲解完了，AIDL方式源码地址：<a href=\"https://github.com/awenzeng/AndroidCodeLibrary\">https://github.com/awenzeng/AndroidCodeLibrary</a>,欢迎star，fork。</p>\n<h1 id=\"二、注册服务方式\"><a href=\"#二、注册服务方式\" class=\"headerlink\" title=\"二、注册服务方式\"></a>二、注册服务方式</h1><p>Android的各种系统服务在Android系统启动的时候就也会启动和注册，具体启动流程，可以参考<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\">Android应用程序入口源码解析</a>，这篇博文中有介绍，想了解的同学可以看一下。系统服务启动和注册流程具体如下：</p>\n<p><img src=\"/assets/img/tech_android_ipc_regist.png\" alt=\"\"></p>\n<p>通过此图，我想大家对系统服务的启动流程已有一个大概认识。各种系统服务启动后，都会在ServiceManager进行注册备注，以方便应用进程调用，这ServiceManager相当于各种系统服务的大管家。另外，Andorid的各种系统服务都运行在system_server进程中，应用进程想要获取系统服务，就需要与system_server进程通信，Binder在其中就起着桥梁的作用。</p>\n<p>Android系统中服务大约有八十多个，我们也没必要一一分析，遇到相关服务时，再进一步分析就好。本篇博文主要是针对跨进程通信(IPC)，所以也主要分析Andorid源码中常见的通过Binder通信的C/S端，来加深对Android源码的理解。常见的Android源码Binder通信C/S端有：</p>\n<ul>\n<li>ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)</li>\n<li>ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)</li>\n</ul>\n<p><strong>1.AMS跨进程通信</strong><br>首先我们来看一下ActivityManagerNative源码，如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** &#123;<span class=\"doctag\">@hide</span>&#125; */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerNative</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        attachInterface(<span class=\"keyword\">this</span>, descriptor);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> START_ACTIVITY_TRANSACTION:</div><div class=\"line\">        &#123;</div><div class=\"line\">            data.enforceInterface(IActivityManager.descriptor);</div><div class=\"line\">            IBinder b = data.readStrongBinder();</div><div class=\"line\">            IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class=\"line\">            Intent intent = Intent.CREATOR.createFromParcel(data);</div><div class=\"line\">            String resolvedType = data.readString();</div><div class=\"line\">            IBinder resultTo = data.readStrongBinder();</div><div class=\"line\">            String resultWho = data.readString();</div><div class=\"line\">            <span class=\"keyword\">int</span> requestCode = data.readInt();</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags = data.readInt();</div><div class=\"line\">            String profileFile = data.readString();</div><div class=\"line\">            ParcelFileDescriptor profileFd = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                    ? data.readFileDescriptor() : <span class=\"keyword\">null</span>;</div><div class=\"line\">            Bundle options = data.readInt() != <span class=\"number\">0</span></div><div class=\"line\">                    ? Bundle.CREATOR.createFromParcel(data) : <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> result = startActivity(app, intent, resolvedType,</div><div class=\"line\">                    resultTo, resultWho, requestCode, startFlags,</div><div class=\"line\">                    profileFile, profileFd, options);</div><div class=\"line\">            reply.writeNoException();</div><div class=\"line\">            reply.writeInt(result);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            IActivityManager am = asInterface(b);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> IBinder mRemote;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ActivityManagerProxy</span><span class=\"params\">(IBinder remote)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller, Intent intent,</div><div class=\"line\">            String resolvedType, IBinder resultTo, String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">            <span class=\"keyword\">int</span> startFlags, String profileFile,</div><div class=\"line\">            ParcelFileDescriptor profileFd, Bundle options)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        Parcel reply = Parcel.obtain();</div><div class=\"line\">        ......</div><div class=\"line\">        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class=\"number\">0</span>);</div><div class=\"line\">        reply.readException();</div><div class=\"line\">        <span class=\"keyword\">int</span> result = reply.readInt();</div><div class=\"line\">        reply.recycle();</div><div class=\"line\">        data.recycle();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">   ........</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从此源码来看，这与我们AIDL方式的接口生成的java代码很像，抽象类ActivityManagerNative就相当于抽象类Stub,代理类ActivityManagerProxy就相当于代理类Proxy，所以抽象类AMN就相当于Server端，代理类ActivityManagerProxy就相当于Client端。我们再来看一下ActivityManagerService类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActivityManagerNative</span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">Watchdog</span>.<span class=\"title\">Monitor</span>, <span class=\"title\">BatteryStatsImpl</span>.<span class=\"title\">BatteryCallback</span> </span>&#123;</div><div class=\"line\">......省略代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看出ActivityManagerService继承至ActivityManagerNative，所以ActivityManagerService也是Server端，类似AIDL方式的AIDLService。我们再来看看ActivityManagerService的获取，在ActivityManagerNative源码中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityManagerNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivityManager</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">  .......</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IActivityManager in =</div><div class=\"line\">            (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActivityManagerProxy(obj);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IActivityManager <span class=\"title\">getDefault</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> gDefault.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class=\"keyword\">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> IActivityManager <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            IBinder b = ServiceManager.getService(<span class=\"string\">\"activity\"</span>);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service binder = \"</span> + b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            IActivityManager am = asInterface(b);<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">                Log.v(<span class=\"string\">\"ActivityManager\"</span>, <span class=\"string\">\"default service = \"</span> + am);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> am;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">.........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要通过一个静态方法ActivityManagerNative.getDefault()获取，而gDefault就是一个单例，从注释1：ServiceManager.getService(“activity”)，我们知主要就是从大管家ServiceManager中获取ActivityManagerService服务，但由于AMS是在不同的进程，所以通过asInterface()获取代理类ActivityManagerProxy来进行Binder跨进程通信。通过调用代理类AMP中的方法，然后跨进程通信，从而调用AMS中的相关方法。</p>\n<p>到这里ActivitManagerService的Binder跨进程通信方式就简单介绍完了。</p>\n<p>对于AMS，我不得不提一下，因为Android中四大组件Activity、Service、BroadcastReceiver和ContentProvider启动和使用都与其有关，可以说Andorid系统中比较重要的一个类。</p>\n<p><strong>2.ApplicationThread跨进程通信</strong></p>\n<p>同样的，首先我们先来看一下ApplicationThreadNative此类，源码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Cast a Binder object into an application thread interface, generating</div><div class=\"line\">     * a proxy if needed.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> IApplicationThread <span class=\"title\">asInterface</span><span class=\"params\">(IBinder obj)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IApplicationThread in =</div><div class=\"line\">            (IApplicationThread)obj.queryLocalInterface(descriptor);</div><div class=\"line\">        <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> in;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApplicationThreadProxy(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationThreadNative</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        attachInterface(<span class=\"keyword\">this</span>, descriptor);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span></div><div class=\"line\">            <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:</div><div class=\"line\">        &#123;</div><div class=\"line\">            data.enforceInterface(IApplicationThread.descriptor);</div><div class=\"line\">            IBinder b = data.readStrongBinder();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> finished = data.readInt() != <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving = data.readInt() != <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> configChanges = data.readInt();</div><div class=\"line\">            schedulePauseActivity(b, finished, userLeaving, configChanges);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        .........</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IBinder mRemote;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationThreadProxy</span><span class=\"params\">(IBinder remote)</span> </span>&#123;</div><div class=\"line\">        mRemote = remote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">schedulePauseActivity</span><span class=\"params\">(IBinder token, <span class=\"keyword\">boolean</span> finished,</div><div class=\"line\">            <span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">int</span> configChanges)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">        Parcel data = Parcel.obtain();</div><div class=\"line\">        data.writeInterfaceToken(IApplicationThread.descriptor);</div><div class=\"line\">        data.writeStrongBinder(token);</div><div class=\"line\">        data.writeInt(finished ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">        data.writeInt(userLeaving ? <span class=\"number\">1</span> :<span class=\"number\">0</span>);</div><div class=\"line\">        data.writeInt(configChanges);</div><div class=\"line\">        mRemote.transact(SCHEDULE_PAUSE_ACTIVITY_TRANSACTION, data, <span class=\"keyword\">null</span>,</div><div class=\"line\">                IBinder.FLAG_ONEWAY);</div><div class=\"line\">        data.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Binder跨进程通信定义方式，差不多都一样，ApplicationThread跨进程通信也和AIDL方式类似。其中抽象类ApplicationThreadNative为Server端，代理类ApplicationThreadProxy为Client端。我们再来看ApplicationThread类，通过阅读源码，我们知ApplicationThread是ActivityThread中内部类，这里我们也来看看ApplicationThread的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityThread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> ApplicationThread mAppThread = <span class=\"keyword\">new</span> ApplicationThread();</div><div class=\"line\">......</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationThreadNative</span> </span>&#123;</div><div class=\"line\">......</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，ApplicationThread继承至ApplicationThreadNative，所以ApplicationThread也是AT跨进程通信的Server端，这里与AIDL的调用方式类似，通过一定的转换获取到代理类ApplicationThreadProxy，从而进行跨进程通信。</p>\n<p>ApplicationThread跨进程通信方式，在Android系统中还是比较重要的，它主要与AMS跨进程通信一起使用，当ActivityManagerService执行完响应的操作后，再通过跨进程通信方式与应用进程通信(ApplicationThread是在应用进程中)，从而对Andorid的四大组件进行调度，Activity，Service等的启动及生命周期，也就是通过AMS跨进程通信和AT跨进程通信实现的。这点在阅读Activity及Service启动源码的时候，会接触的比较频繁。</p>\n<p>到这里，我想说的就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、相关文档\"><a href=\"#三、相关文档\" class=\"headerlink\" title=\"三、相关文档\"></a>三、相关文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78806893\">Binder通信机制原理解析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78619361\">Android应用程序入口源码解析</a></p>"},{"layout":"post","title":"Android消息机制源码解析(Handler)","date":"2017-11-21T07:44:59.000Z","comments":1,"_content":"---\nAndroid消息机制，其实也就是Handler机制，主要用于UI线程和子线程之间交互。众所周知，一般情况下，出于安全的考虑，所有与UI控件的操作都要放在主线程即UI线程中，而一些耗时操作应当放在子线程中。当在子线程中完成耗时操作并要对UI控件进行操作时，就要用Handler来控制。另外，Android系统框架内，Activity生命周期的通知等功能也是通过消息机制来实现的。本篇博文主要是想通过Handler源码解析，来加深我自己对Android消息机制的理解。\n\n# 一、Handler使用\n\n使用例子：\n```java\nprivate Handler handler = new Handler(){//1.Handler初始化,一个匿名内部类\n    @Override\n    public void handleMessage(Message msg) {\n         super.handleMessage(msg);\n         textView.setText(\"对UI进行操作\");\n    }\n};\n@Override\nprotected void onCreate(Bundle savedInstanceState){\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n       textView = (TextView) findViewById(R.id.mytv);\n       new Thread(new Runnable() {\n           @Override\n           public void run() {\n               //模拟耗时操作\n               SystemClock.sleep(3000);\n               handler.sendMessage(new Message());//2.在子线程中sendMessage();\n           }\n       }).start();\n\n   }\n```\n**1.我们先来看看，Handler初始化。**\nHandler初始化的同时，实现了消息处理方法handleMessage()。查看Handler源码\n<!-- more -->\n```java\n    final MessageQueue mQueue;\n    final Looper mLooper;\n    final Callback mCallback;\n    /**\n     * Default constructor associates this handler with the queue for the\n     * current thread.\n     *\n     * If there isn't one, this handler won't be able to receive messages.\n     */\n    public Handler() {\n        if (FIND_POTENTIAL_LEAKS) {\n            final Class<? extends Handler> klass = getClass();\n            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                    (klass.getModifiers() & Modifier.STATIC) == 0) {\n                Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                    klass.getCanonicalName());\n            }\n        }\n\n        mLooper = Looper.myLooper();//3.核心代码。获取一个Looper\n        if (mLooper == null) {\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        mQueue = mLooper.mQueue;//4.核心代码。从Looper获取一个消息队列\n        mCallback = null;\n    }\n```\n在源码中，Handler定义了一个MessageQueue消息队列mQueue和一个Looper对象mLooper，并都进行了初始化，分别对mQueue和mLooper进行了赋值，其中mLooper是通过Looper.myLooper()赋值，mQueues是Looper中的mQueue。通过了解，知Looper.myLooper()是一个静态方法。让我们进入Looper类看看\n```java\n/**\n  * Class used to run a message loop for a thread.  Threads by default do\n  * not have a message loop associated with them; to create one, call\n  * {@link #prepare} in the thread that is to run the loop, and then\n  * {@link #loop} to have it process messages until the loop is stopped.\n  * \n  * <p>Most interaction with a message loop is through the\n  * {@link Handler} class.\n  * \n  * <p>This is a typical example of the implementation of a Looper thread,\n  * using the separation of {@link #prepare} and {@link #loop} to create an\n  * initial Handler to communicate with the Looper.\n  *\n  * <pre>\n  *  class LooperThread extends Thread {\n  *      public Handler mHandler;\n  *\n  *      public void run() {\n  *          Looper.prepare();\n  *\n  *          mHandler = new Handler() {\n  *              public void handleMessage(Message msg) {\n  *                  // process incoming messages here\n  *              }\n  *          };\n  *\n  *          Looper.loop();\n  *      }\n  *  }</pre>\n  */\npublic class Looper {\n    private static final String TAG = \"Looper\";\n\n    // sThreadLocal.get() will return null unless you've called prepare().\n\n    static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\n    private static Looper sMainLooper;  // guarded by Looper.class\n\n    final MessageQueue mQueue;\n    final Thread mThread;\n    volatile boolean mRun;\n\n    private Printer mLogging;\n\n     /** Initialize the current thread as a looper.\n      * This gives you a chance to create handlers that then reference\n      * this looper, before actually starting the loop. Be sure to call\n      * {@link #loop()} after calling this method, and end it by calling\n      * {@link #quit()}.\n      */\n    public static void prepare() {\n        prepare(true);\n    }\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n\n    /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n       ......\n    }\n\n    /**\n     * Return the Looper object associated with the current thread.  Returns\n     * null if the calling thread is not associated with a Looper.\n     */\n    public static Looper myLooper() {\n        return sThreadLocal.get();\n    }\n   ......\n}\n```\n从Looper源码的注释中，我们知道**Looper是一个专门为线程提供消息循环的类，通过调用prepare()和loop()就可以为线程提供一个消息循环机制。**线程本来是没有消息循环机制的，想要消息循环机制就必须自己建立。如：\n```java\n   class LooperThread extends Thread {\n        public Handler mHandler;\n  \n        public void run() {\n            Looper.prepare();\n            mHandler = new Handler() {\n                public void handleMessage(Message msg) {\n                    // process incoming messages here\n                }\n            };\n            Looper.loop();\n        }\n   }\n```\n在Looper源码中，有两个方法prepare()和prepareMainLooper()对Looper进行了初始化,Looper.myLooper()核心代码为sThreadLocal.get()，主要也是从sThreadLocal中取值。两个初始化方法的源码为\n```java\n     /** Initialize the current thread as a looper.\n      * This gives you a chance to create handlers that then reference\n      * this looper, before actually starting the loop. Be sure to call\n      * {@link #loop()} after calling this method, and end it by calling\n      * {@link #quit()}.\n      */\n    public static void prepare() {\n        prepare(true);\n    }\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n```\n从源码中知道prepare()创建的Looper为允许退出循环的，而prepareMainLooper()方法创建的是不应许退出循环的，通过分析，**很明显知道prepare()方法创建的是一般线程的Looper,而通过而prepareMainLooper()创建的，就是主线程消息循环的Looper。**\n\n现在，虽然我们知道了Handler中对MessageQueue队列和Looper进行了赋值，但是Looper啥时候通过prepareMainLooper()初始化的呢？什么是开始调loop()开始循环的呢？这里我们先停一下，后面我们会说道。\n\n**2.我们再看例子中的注释方法，在子线程中handler.sendMessage(message)**\n\n我们继续看Handler源码\n```java\n    ......\n    public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\n    public final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n    \n    public boolean sendMessageAtTime(Message msg, long uptimeMillis)\n    {\n        boolean sent = false;\n        MessageQueue queue = mQueue;\n        if (queue != null) {\n            msg.target = this;//1.对Message中的target赋值Handler\n            sent = queue.enqueueMessage(msg, uptimeMillis);//2.向循环队列中，加入消息\n        }\n        else {\n            RuntimeException e = new RuntimeException(\n                this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n        }\n        return sent;\n    }\n....\n```\n阅读Handler源码知，发送消息的方法还有许多种，sendMessage()是其中一种，如果还想具体了解还有哪些，可以下载Handler源码看一下，这里就不一一介绍了。**从上面三个方法中我们了解到方法sendMessageAtTime()是最后调用的，这个方法主要是，对Message的target赋值为发送主体Handler，并把Message加入消息队列MessageQueue中，等待消息队列循环处理。**\n\nHandler发送主体为Message，Message是啥呢？Message主要就是对一些数据做封装处理，其中有int变量what,arg1,arg2,Object变量obj等，具体可以查看Message源码，这里就不详细说了。\n\n# 二、Looper的创建及循环机制\n上面说到，Looper的建立有两种方式prepare()和prepareMainLooper()，其中prepare建立的为一般子线程Looper，可以取消循环；而prepareMainLooper()建立的为主线程的Looper，不可以取消循环。到底而prepareMainLooper建立的是不是主线程循环呢？让我们继续分析\n\n**1.主线程Looper建立**\n\n主线程即UI线程，说到UI线程，我们知道应用程序一启动，主(UI)线程就开始启动，而线程的建立必须要在进程的基础上。**通过对Android应用程序启动的分析，我们知道，应用程序启动，首先会通过Zygote复制自身fork出一个进程，然后再由进程创建一个主线程，主线程的建立和ActivityThread息息相关，通过分析，知ActivityThread的main方法就是应用程序启动的入口。**具体可以参考：[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n让我们来看一下ActivityThread类的main方法：\n```java\n public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();//1.主线程Looper创建\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();//2.主线程Looper循环\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n从源码知道，正如我们想的那样prepareMainLooper()建立的Looper就是主线程的Looper。\n\n**2.Looper的消息循环**\n\n从上面ActivityThread的main方法中，我们发现Looper.loop()消息循环方法。Looper是怎么循环的，这里让我们来看一下Looper.loop()\n```java\n/**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {//for循环\n            Message msg = queue.next(); //从消息队列中取值\n            if (msg == null) {//消息为空就返回\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            msg.target.dispatchMessage(msg);//分发消息\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycle();\n        }\n    }\n```\n从loop()源码中我们知道，建立了一个for循环从消息队列中取数据，然后通过msg.target.dispatchMessage(msg)分发消息，从前面我们知道target就是handler,这里我们再看一下Handler的消息分发方法dispatchMessage()\n```java\n    /**\n     * Handle system messages here.\n     */\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n在这里我们就看到，Handler最后会调用handleMessage()方法，只要message中callback为空，就是调用handleMessage(),从而实现消息的处理。\n\n到这里，我们Android Handler消息分发机制解析就分解完了。但这里需要注意一下的是，在loop循环中，如果消息为空就会跳出循环，而我们的主线程Looper循环应该是死循环才对。针对这个问题，我们继续深入源码看一下，前面说prepare()和prepareMainLooper()是两种建立Looper的方式，两者的区别是一个是可取消循环的，一个是不可以取消循环的，这里让我们再来看看一下Looper的源码\n```java\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mRun = true;\n        mThread = Thread.currentThread();\n    }\n\n```\n通过查看源码发现，是否可以取消消息循环，主要控制是MessageQueue里面，这里我们可以知道，主线程的消息循环控制应该就在 queue.next()方法里,好了，让我们来看MessageQueue的next方法\n```java\n  final Message next() {\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n            nativePollOnce(mPtr, nextPollTimeoutMillis);//1.核心代码\n\n            synchronized (this) {\n                if (mQuiting) {\n                    return null;\n                }\n                \n            .......省略代码，获取消息队列中的Message      \n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n在next()方法中，有一个原生方法nativePollOnce(),它的作用是干啥的呢？是不是就是控制主线程循环的呢？**通过进一步阅读C++源码，我们知道这里是利用Linux系统中epoll_wait方法来进行阻塞，形成一个等待状态，也就是说，当消息队列中消息为空时，nativePollOnce()方法不会返回，会进行阻塞，形成一个等待状态，等有新消息进入消息队列，才会返回，从而获取消息。**这里我们也来看一下消息队列的插入方法\n```java\n  final boolean enqueueMessage(Message msg, long when) {\n        if (msg.isInUse()) {\n            throw new AndroidRuntimeException(msg + \" This message is already in use.\");\n        }\n        if (msg.target == null) {\n            throw new AndroidRuntimeException(\"Message must have a target.\");\n        }\n\n        boolean needWake;\n        synchronized (this) {\n            if (mQuiting) {\n                RuntimeException e = new RuntimeException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(\"MessageQueue\", e.getMessage(), e);\n                return false;\n            }\n            msg.when = when;\n            Message p = mMessages;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n        }\n        if (needWake) {\n            nativeWake(mPtr);//核心代码\n        }\n        return true;\n    }\n```\n在消息队列中加入消息之后，会调用一个原生方法 nativeWake()，这个原生的C++的方法，也就是通知nativePollOnce()返回的方法，通过方法nativeWake和nativePollOnce的一唱一和，从而实现主线程的消息队列的无限循环。\n\n具体C++代码是怎么实现的，这里推荐一篇博文[从源码角度分析native层消息机制与java层消息机制的关联](http://blog.csdn.net/andywuchuanlong/article/details/48179165)。\n\n好了，分析就到这里了。\n\n# 三、总结\nAndroid消息分发机制，也就是Handler处理消息机制。流程如下：\n\n- 1.应用程序在启动的时候，通过Zygote复制自身fork出应用程序的进程，然后该进程又以ActivityThread创建主线程。\n- 2.主线程启动时，在ActivityThread的main方法中初始化了Looper和执行消息队列的循环。\n- 3.使用过程中，Handler初始化，获取了主线程的Looper和消息队列MessageQueue，并实现消息处理方法handlerMessage\n- 4.Handler通过sendMessage方法将消息插入消息队列\n- 5.通过Looper消息队列的循环，从而执行处理方法，实现了UI线程和子线程之间的交互。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、相关及参考文档\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android消息机制学习笔记](https://zhuanlan.zhihu.com/p/25222485?refer=levent-j)\n\n[从源码角度分析native层消息机制与java层消息机制的关联](http://blog.csdn.net/andywuchuanlong/article/details/48179165)。\n\n[ActivityThread](http://blog.csdn.net/zhangfei2018/article/details/46518615)\n\n[Java单链表、双端链表、有序链表实现](http://blog.csdn.net/a19881029/article/details/22695289)\n\n","source":"_posts/tech_android_framework_handler.md","raw":"---\nlayout: post\ntitle: \"Android消息机制源码解析(Handler)\"\ndate: 11/21/2017 3:44:59 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n\t- Android消息机制源码解析\n---\n---\nAndroid消息机制，其实也就是Handler机制，主要用于UI线程和子线程之间交互。众所周知，一般情况下，出于安全的考虑，所有与UI控件的操作都要放在主线程即UI线程中，而一些耗时操作应当放在子线程中。当在子线程中完成耗时操作并要对UI控件进行操作时，就要用Handler来控制。另外，Android系统框架内，Activity生命周期的通知等功能也是通过消息机制来实现的。本篇博文主要是想通过Handler源码解析，来加深我自己对Android消息机制的理解。\n\n# 一、Handler使用\n\n使用例子：\n```java\nprivate Handler handler = new Handler(){//1.Handler初始化,一个匿名内部类\n    @Override\n    public void handleMessage(Message msg) {\n         super.handleMessage(msg);\n         textView.setText(\"对UI进行操作\");\n    }\n};\n@Override\nprotected void onCreate(Bundle savedInstanceState){\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n       textView = (TextView) findViewById(R.id.mytv);\n       new Thread(new Runnable() {\n           @Override\n           public void run() {\n               //模拟耗时操作\n               SystemClock.sleep(3000);\n               handler.sendMessage(new Message());//2.在子线程中sendMessage();\n           }\n       }).start();\n\n   }\n```\n**1.我们先来看看，Handler初始化。**\nHandler初始化的同时，实现了消息处理方法handleMessage()。查看Handler源码\n<!-- more -->\n```java\n    final MessageQueue mQueue;\n    final Looper mLooper;\n    final Callback mCallback;\n    /**\n     * Default constructor associates this handler with the queue for the\n     * current thread.\n     *\n     * If there isn't one, this handler won't be able to receive messages.\n     */\n    public Handler() {\n        if (FIND_POTENTIAL_LEAKS) {\n            final Class<? extends Handler> klass = getClass();\n            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                    (klass.getModifiers() & Modifier.STATIC) == 0) {\n                Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                    klass.getCanonicalName());\n            }\n        }\n\n        mLooper = Looper.myLooper();//3.核心代码。获取一个Looper\n        if (mLooper == null) {\n            throw new RuntimeException(\n                \"Can't create handler inside thread that has not called Looper.prepare()\");\n        }\n        mQueue = mLooper.mQueue;//4.核心代码。从Looper获取一个消息队列\n        mCallback = null;\n    }\n```\n在源码中，Handler定义了一个MessageQueue消息队列mQueue和一个Looper对象mLooper，并都进行了初始化，分别对mQueue和mLooper进行了赋值，其中mLooper是通过Looper.myLooper()赋值，mQueues是Looper中的mQueue。通过了解，知Looper.myLooper()是一个静态方法。让我们进入Looper类看看\n```java\n/**\n  * Class used to run a message loop for a thread.  Threads by default do\n  * not have a message loop associated with them; to create one, call\n  * {@link #prepare} in the thread that is to run the loop, and then\n  * {@link #loop} to have it process messages until the loop is stopped.\n  * \n  * <p>Most interaction with a message loop is through the\n  * {@link Handler} class.\n  * \n  * <p>This is a typical example of the implementation of a Looper thread,\n  * using the separation of {@link #prepare} and {@link #loop} to create an\n  * initial Handler to communicate with the Looper.\n  *\n  * <pre>\n  *  class LooperThread extends Thread {\n  *      public Handler mHandler;\n  *\n  *      public void run() {\n  *          Looper.prepare();\n  *\n  *          mHandler = new Handler() {\n  *              public void handleMessage(Message msg) {\n  *                  // process incoming messages here\n  *              }\n  *          };\n  *\n  *          Looper.loop();\n  *      }\n  *  }</pre>\n  */\npublic class Looper {\n    private static final String TAG = \"Looper\";\n\n    // sThreadLocal.get() will return null unless you've called prepare().\n\n    static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\n    private static Looper sMainLooper;  // guarded by Looper.class\n\n    final MessageQueue mQueue;\n    final Thread mThread;\n    volatile boolean mRun;\n\n    private Printer mLogging;\n\n     /** Initialize the current thread as a looper.\n      * This gives you a chance to create handlers that then reference\n      * this looper, before actually starting the loop. Be sure to call\n      * {@link #loop()} after calling this method, and end it by calling\n      * {@link #quit()}.\n      */\n    public static void prepare() {\n        prepare(true);\n    }\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n\n    /**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n       ......\n    }\n\n    /**\n     * Return the Looper object associated with the current thread.  Returns\n     * null if the calling thread is not associated with a Looper.\n     */\n    public static Looper myLooper() {\n        return sThreadLocal.get();\n    }\n   ......\n}\n```\n从Looper源码的注释中，我们知道**Looper是一个专门为线程提供消息循环的类，通过调用prepare()和loop()就可以为线程提供一个消息循环机制。**线程本来是没有消息循环机制的，想要消息循环机制就必须自己建立。如：\n```java\n   class LooperThread extends Thread {\n        public Handler mHandler;\n  \n        public void run() {\n            Looper.prepare();\n            mHandler = new Handler() {\n                public void handleMessage(Message msg) {\n                    // process incoming messages here\n                }\n            };\n            Looper.loop();\n        }\n   }\n```\n在Looper源码中，有两个方法prepare()和prepareMainLooper()对Looper进行了初始化,Looper.myLooper()核心代码为sThreadLocal.get()，主要也是从sThreadLocal中取值。两个初始化方法的源码为\n```java\n     /** Initialize the current thread as a looper.\n      * This gives you a chance to create handlers that then reference\n      * this looper, before actually starting the loop. Be sure to call\n      * {@link #loop()} after calling this method, and end it by calling\n      * {@link #quit()}.\n      */\n    public static void prepare() {\n        prepare(true);\n    }\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n```\n从源码中知道prepare()创建的Looper为允许退出循环的，而prepareMainLooper()方法创建的是不应许退出循环的，通过分析，**很明显知道prepare()方法创建的是一般线程的Looper,而通过而prepareMainLooper()创建的，就是主线程消息循环的Looper。**\n\n现在，虽然我们知道了Handler中对MessageQueue队列和Looper进行了赋值，但是Looper啥时候通过prepareMainLooper()初始化的呢？什么是开始调loop()开始循环的呢？这里我们先停一下，后面我们会说道。\n\n**2.我们再看例子中的注释方法，在子线程中handler.sendMessage(message)**\n\n我们继续看Handler源码\n```java\n    ......\n    public final boolean sendMessage(Message msg)\n    {\n        return sendMessageDelayed(msg, 0);\n    }\n\n    public final boolean sendMessageDelayed(Message msg, long delayMillis)\n    {\n        if (delayMillis < 0) {\n            delayMillis = 0;\n        }\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\n    }\n    \n    public boolean sendMessageAtTime(Message msg, long uptimeMillis)\n    {\n        boolean sent = false;\n        MessageQueue queue = mQueue;\n        if (queue != null) {\n            msg.target = this;//1.对Message中的target赋值Handler\n            sent = queue.enqueueMessage(msg, uptimeMillis);//2.向循环队列中，加入消息\n        }\n        else {\n            RuntimeException e = new RuntimeException(\n                this + \" sendMessageAtTime() called with no mQueue\");\n            Log.w(\"Looper\", e.getMessage(), e);\n        }\n        return sent;\n    }\n....\n```\n阅读Handler源码知，发送消息的方法还有许多种，sendMessage()是其中一种，如果还想具体了解还有哪些，可以下载Handler源码看一下，这里就不一一介绍了。**从上面三个方法中我们了解到方法sendMessageAtTime()是最后调用的，这个方法主要是，对Message的target赋值为发送主体Handler，并把Message加入消息队列MessageQueue中，等待消息队列循环处理。**\n\nHandler发送主体为Message，Message是啥呢？Message主要就是对一些数据做封装处理，其中有int变量what,arg1,arg2,Object变量obj等，具体可以查看Message源码，这里就不详细说了。\n\n# 二、Looper的创建及循环机制\n上面说到，Looper的建立有两种方式prepare()和prepareMainLooper()，其中prepare建立的为一般子线程Looper，可以取消循环；而prepareMainLooper()建立的为主线程的Looper，不可以取消循环。到底而prepareMainLooper建立的是不是主线程循环呢？让我们继续分析\n\n**1.主线程Looper建立**\n\n主线程即UI线程，说到UI线程，我们知道应用程序一启动，主(UI)线程就开始启动，而线程的建立必须要在进程的基础上。**通过对Android应用程序启动的分析，我们知道，应用程序启动，首先会通过Zygote复制自身fork出一个进程，然后再由进程创建一个主线程，主线程的建立和ActivityThread息息相关，通过分析，知ActivityThread的main方法就是应用程序启动的入口。**具体可以参考：[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n让我们来看一下ActivityThread类的main方法：\n```java\n public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();//1.主线程Looper创建\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();//2.主线程Looper循环\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n从源码知道，正如我们想的那样prepareMainLooper()建立的Looper就是主线程的Looper。\n\n**2.Looper的消息循环**\n\n从上面ActivityThread的main方法中，我们发现Looper.loop()消息循环方法。Looper是怎么循环的，这里让我们来看一下Looper.loop()\n```java\n/**\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n\n        // Make sure the identity of this thread is that of the local process,\n        // and keep track of what that identity token actually is.\n        Binder.clearCallingIdentity();\n        final long ident = Binder.clearCallingIdentity();\n\n        for (;;) {//for循环\n            Message msg = queue.next(); //从消息队列中取值\n            if (msg == null) {//消息为空就返回\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n\n            // This must be in a local variable, in case a UI event sets the logger\n            Printer logging = me.mLogging;\n            if (logging != null) {\n                logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                        msg.callback + \": \" + msg.what);\n            }\n\n            msg.target.dispatchMessage(msg);//分发消息\n\n            if (logging != null) {\n                logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n            }\n\n            // Make sure that during the course of dispatching the\n            // identity of the thread wasn't corrupted.\n            final long newIdent = Binder.clearCallingIdentity();\n            if (ident != newIdent) {\n                Log.wtf(TAG, \"Thread identity changed from 0x\"\n                        + Long.toHexString(ident) + \" to 0x\"\n                        + Long.toHexString(newIdent) + \" while dispatching to \"\n                        + msg.target.getClass().getName() + \" \"\n                        + msg.callback + \" what=\" + msg.what);\n            }\n\n            msg.recycle();\n        }\n    }\n```\n从loop()源码中我们知道，建立了一个for循环从消息队列中取数据，然后通过msg.target.dispatchMessage(msg)分发消息，从前面我们知道target就是handler,这里我们再看一下Handler的消息分发方法dispatchMessage()\n```java\n    /**\n     * Handle system messages here.\n     */\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n在这里我们就看到，Handler最后会调用handleMessage()方法，只要message中callback为空，就是调用handleMessage(),从而实现消息的处理。\n\n到这里，我们Android Handler消息分发机制解析就分解完了。但这里需要注意一下的是，在loop循环中，如果消息为空就会跳出循环，而我们的主线程Looper循环应该是死循环才对。针对这个问题，我们继续深入源码看一下，前面说prepare()和prepareMainLooper()是两种建立Looper的方式，两者的区别是一个是可取消循环的，一个是不可以取消循环的，这里让我们再来看看一下Looper的源码\n```java\n\n    private static void prepare(boolean quitAllowed) {\n        if (sThreadLocal.get() != null) {\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\n        }\n        sThreadLocal.set(new Looper(quitAllowed));\n    }\n\n    private Looper(boolean quitAllowed) {\n        mQueue = new MessageQueue(quitAllowed);\n        mRun = true;\n        mThread = Thread.currentThread();\n    }\n\n```\n通过查看源码发现，是否可以取消消息循环，主要控制是MessageQueue里面，这里我们可以知道，主线程的消息循环控制应该就在 queue.next()方法里,好了，让我们来看MessageQueue的next方法\n```java\n  final Message next() {\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\n        int nextPollTimeoutMillis = 0;\n\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n            nativePollOnce(mPtr, nextPollTimeoutMillis);//1.核心代码\n\n            synchronized (this) {\n                if (mQuiting) {\n                    return null;\n                }\n                \n            .......省略代码，获取消息队列中的Message      \n\n            // Reset the idle handler count to 0 so we do not run them again.\n            pendingIdleHandlerCount = 0;\n\n            // While calling an idle handler, a new message could have been delivered\n            // so go back and look again for a pending message without waiting.\n            nextPollTimeoutMillis = 0;\n        }\n    }\n```\n在next()方法中，有一个原生方法nativePollOnce(),它的作用是干啥的呢？是不是就是控制主线程循环的呢？**通过进一步阅读C++源码，我们知道这里是利用Linux系统中epoll_wait方法来进行阻塞，形成一个等待状态，也就是说，当消息队列中消息为空时，nativePollOnce()方法不会返回，会进行阻塞，形成一个等待状态，等有新消息进入消息队列，才会返回，从而获取消息。**这里我们也来看一下消息队列的插入方法\n```java\n  final boolean enqueueMessage(Message msg, long when) {\n        if (msg.isInUse()) {\n            throw new AndroidRuntimeException(msg + \" This message is already in use.\");\n        }\n        if (msg.target == null) {\n            throw new AndroidRuntimeException(\"Message must have a target.\");\n        }\n\n        boolean needWake;\n        synchronized (this) {\n            if (mQuiting) {\n                RuntimeException e = new RuntimeException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(\"MessageQueue\", e.getMessage(), e);\n                return false;\n            }\n            msg.when = when;\n            Message p = mMessages;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n        }\n        if (needWake) {\n            nativeWake(mPtr);//核心代码\n        }\n        return true;\n    }\n```\n在消息队列中加入消息之后，会调用一个原生方法 nativeWake()，这个原生的C++的方法，也就是通知nativePollOnce()返回的方法，通过方法nativeWake和nativePollOnce的一唱一和，从而实现主线程的消息队列的无限循环。\n\n具体C++代码是怎么实现的，这里推荐一篇博文[从源码角度分析native层消息机制与java层消息机制的关联](http://blog.csdn.net/andywuchuanlong/article/details/48179165)。\n\n好了，分析就到这里了。\n\n# 三、总结\nAndroid消息分发机制，也就是Handler处理消息机制。流程如下：\n\n- 1.应用程序在启动的时候，通过Zygote复制自身fork出应用程序的进程，然后该进程又以ActivityThread创建主线程。\n- 2.主线程启动时，在ActivityThread的main方法中初始化了Looper和执行消息队列的循环。\n- 3.使用过程中，Handler初始化，获取了主线程的Looper和消息队列MessageQueue，并实现消息处理方法handlerMessage\n- 4.Handler通过sendMessage方法将消息插入消息队列\n- 5.通过Looper消息队列的循环，从而执行处理方法，实现了UI线程和子线程之间的交互。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、相关及参考文档\n[Android应用程序进程启动过程（前篇）](http://liuwangshu.cn/framework/applicationprocess/1.html)\n\n[Android消息机制学习笔记](https://zhuanlan.zhihu.com/p/25222485?refer=levent-j)\n\n[从源码角度分析native层消息机制与java层消息机制的关联](http://blog.csdn.net/andywuchuanlong/article/details/48179165)。\n\n[ActivityThread](http://blog.csdn.net/zhangfei2018/article/details/46518615)\n\n[Java单链表、双端链表、有序链表实现](http://blog.csdn.net/a19881029/article/details/22695289)\n\n","slug":"tech_android_framework_handler","published":1,"updated":"2019-06-27T08:15:15.313Z","photos":[],"link":"","_id":"cjxfjaesy0051ystgzpaswn6k","content":"<hr>\n<p>Android消息机制，其实也就是Handler机制，主要用于UI线程和子线程之间交互。众所周知，一般情况下，出于安全的考虑，所有与UI控件的操作都要放在主线程即UI线程中，而一些耗时操作应当放在子线程中。当在子线程中完成耗时操作并要对UI控件进行操作时，就要用Handler来控制。另外，Android系统框架内，Activity生命周期的通知等功能也是通过消息机制来实现的。本篇博文主要是想通过Handler源码解析，来加深我自己对Android消息机制的理解。</p>\n<h1 id=\"一、Handler使用\"><a href=\"#一、Handler使用\" class=\"headerlink\" title=\"一、Handler使用\"></a>一、Handler使用</h1><p>使用例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler()&#123;<span class=\"comment\">//1.Handler初始化,一个匿名内部类</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">         textView.setText(<span class=\"string\">\"对UI进行操作\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_main);</div><div class=\"line\">       textView = (TextView) findViewById(R.id.mytv);</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//模拟耗时操作</span></div><div class=\"line\">               SystemClock.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">               handler.sendMessage(<span class=\"keyword\">new</span> Message());<span class=\"comment\">//2.在子线程中sendMessage();</span></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).start();</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>1.我们先来看看，Handler初始化。</strong><br>Handler初始化的同时，实现了消息处理方法handleMessage()。查看Handler源码<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> MessageQueue mQueue;</div><div class=\"line\"><span class=\"keyword\">final</span> Looper mLooper;</div><div class=\"line\"><span class=\"keyword\">final</span> Callback mCallback;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Default constructor associates this handler with the queue for the</div><div class=\"line\"> * current thread.</div><div class=\"line\"> *</div><div class=\"line\"> * If there isn't one, this handler won't be able to receive messages.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mLooper = Looper.myLooper();<span class=\"comment\">//3.核心代码。获取一个Looper</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mQueue = mLooper.mQueue;<span class=\"comment\">//4.核心代码。从Looper获取一个消息队列</span></div><div class=\"line\">    mCallback = <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在源码中，Handler定义了一个MessageQueue消息队列mQueue和一个Looper对象mLooper，并都进行了初始化，分别对mQueue和mLooper进行了赋值，其中mLooper是通过Looper.myLooper()赋值，mQueues是Looper中的mQueue。通过了解，知Looper.myLooper()是一个静态方法。让我们进入Looper类看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * Class used to run a message loop for a thread.  Threads by default do</div><div class=\"line\">  * not have a message loop associated with them; to create one, call</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #prepare&#125; in the thread that is to run the loop, and then</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #loop&#125; to have it process messages until the loop is stopped.</div><div class=\"line\">  * </div><div class=\"line\">  * &lt;p&gt;Most interaction with a message loop is through the</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> Handler&#125; class.</div><div class=\"line\">  * </div><div class=\"line\">  * &lt;p&gt;This is a typical example of the implementation of a Looper thread,</div><div class=\"line\">  * using the separation of &#123;<span class=\"doctag\">@link</span> #prepare&#125; and &#123;<span class=\"doctag\">@link</span> #loop&#125; to create an</div><div class=\"line\">  * initial Handler to communicate with the Looper.</div><div class=\"line\">  *</div><div class=\"line\">  * &lt;pre&gt;</div><div class=\"line\">  *  class LooperThread extends Thread &#123;</div><div class=\"line\">  *      public Handler mHandler;</div><div class=\"line\">  *</div><div class=\"line\">  *      public void run() &#123;</div><div class=\"line\">  *          Looper.prepare();</div><div class=\"line\">  *</div><div class=\"line\">  *          mHandler = new Handler() &#123;</div><div class=\"line\">  *              public void handleMessage(Message msg) &#123;</div><div class=\"line\">  *                  // process incoming messages here</div><div class=\"line\">  *              &#125;</div><div class=\"line\">  *          &#125;;</div><div class=\"line\">  *</div><div class=\"line\">  *          Looper.loop();</div><div class=\"line\">  *      &#125;</div><div class=\"line\">  *  &#125;&lt;/pre&gt;</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Looper</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"Looper\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;Looper&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Looper sMainLooper;  <span class=\"comment\">// guarded by Looper.class</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> MessageQueue mQueue;</div><div class=\"line\">    <span class=\"keyword\">final</span> Thread mThread;</div><div class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> mRun;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Printer mLogging;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">/** Initialize the current thread as a looper.</span></div><div class=\"line\">      * This gives you a chance to create handlers that then reference</div><div class=\"line\">      * this looper, before actually starting the loop. Be sure to call</div><div class=\"line\">      * &#123;<span class=\"doctag\">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class=\"line\">      * &#123;<span class=\"doctag\">@link</span> #quit()&#125;.</div><div class=\"line\">      */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Initialize the current thread as a looper, marking it as an</div><div class=\"line\">     * application's main looper. The main looper for your application</div><div class=\"line\">     * is created by the Android environment, so you should never need</div><div class=\"line\">     * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sMainLooper = myLooper();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Run the message queue in this thread. Be sure to call</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       ......</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Return the Looper object associated with the current thread.  Returns</div><div class=\"line\">     * null if the calling thread is not associated with a Looper.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Looper <span class=\"title\">myLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sThreadLocal.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从Looper源码的注释中，我们知道<strong>Looper是一个专门为线程提供消息循环的类，通过调用prepare()和loop()就可以为线程提供一个消息循环机制。</strong>线程本来是没有消息循环机制的，想要消息循环机制就必须自己建立。如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         Looper.prepare();</div><div class=\"line\">         mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">             <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                 <span class=\"comment\">// process incoming messages here</span></div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;;</div><div class=\"line\">         Looper.loop();</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Looper源码中，有两个方法prepare()和prepareMainLooper()对Looper进行了初始化,Looper.myLooper()核心代码为sThreadLocal.get()，主要也是从sThreadLocal中取值。两个初始化方法的源码为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/** Initialize the current thread as a looper.</span></div><div class=\"line\">  * This gives you a chance to create handlers that then reference</div><div class=\"line\">  * this looper, before actually starting the loop. Be sure to call</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #quit()&#125;.</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initialize the current thread as a looper, marking it as an</div><div class=\"line\"> * application's main looper. The main looper for your application</div><div class=\"line\"> * is created by the Android environment, so you should never need</div><div class=\"line\"> * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sMainLooper = myLooper();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码中知道prepare()创建的Looper为允许退出循环的，而prepareMainLooper()方法创建的是不应许退出循环的，通过分析，<strong>很明显知道prepare()方法创建的是一般线程的Looper,而通过而prepareMainLooper()创建的，就是主线程消息循环的Looper。</strong></p>\n<p>现在，虽然我们知道了Handler中对MessageQueue队列和Looper进行了赋值，但是Looper啥时候通过prepareMainLooper()初始化的呢？什么是开始调loop()开始循环的呢？这里我们先停一下，后面我们会说道。</p>\n<p><strong>2.我们再看例子中的注释方法，在子线程中handler.sendMessage(message)</strong></p>\n<p>我们继续看Handler源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sent = <span class=\"keyword\">false</span>;</div><div class=\"line\">        MessageQueue queue = mQueue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            msg.target = <span class=\"keyword\">this</span>;<span class=\"comment\">//1.对Message中的target赋值Handler</span></div><div class=\"line\">            sent = queue.enqueueMessage(msg, uptimeMillis);<span class=\"comment\">//2.向循环队列中，加入消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">            Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sent;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div></pre></td></tr></table></figure></p>\n<p>阅读Handler源码知，发送消息的方法还有许多种，sendMessage()是其中一种，如果还想具体了解还有哪些，可以下载Handler源码看一下，这里就不一一介绍了。<strong>从上面三个方法中我们了解到方法sendMessageAtTime()是最后调用的，这个方法主要是，对Message的target赋值为发送主体Handler，并把Message加入消息队列MessageQueue中，等待消息队列循环处理。</strong></p>\n<p>Handler发送主体为Message，Message是啥呢？Message主要就是对一些数据做封装处理，其中有int变量what,arg1,arg2,Object变量obj等，具体可以查看Message源码，这里就不详细说了。</p>\n<h1 id=\"二、Looper的创建及循环机制\"><a href=\"#二、Looper的创建及循环机制\" class=\"headerlink\" title=\"二、Looper的创建及循环机制\"></a>二、Looper的创建及循环机制</h1><p>上面说到，Looper的建立有两种方式prepare()和prepareMainLooper()，其中prepare建立的为一般子线程Looper，可以取消循环；而prepareMainLooper()建立的为主线程的Looper，不可以取消循环。到底而prepareMainLooper建立的是不是主线程循环呢？让我们继续分析</p>\n<p><strong>1.主线程Looper建立</strong></p>\n<p>主线程即UI线程，说到UI线程，我们知道应用程序一启动，主(UI)线程就开始启动，而线程的建立必须要在进程的基础上。<strong>通过对Android应用程序启动的分析，我们知道，应用程序启动，首先会通过Zygote复制自身fork出一个进程，然后再由进程创建一个主线程，主线程的建立和ActivityThread息息相关，通过分析，知ActivityThread的main方法就是应用程序启动的入口。</strong>具体可以参考：<a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（前篇）</a></p>\n<p>让我们来看一下ActivityThread类的main方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">       SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">       <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">       <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">       CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">       Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">       Looper.prepareMainLooper();<span class=\"comment\">//1.主线程Looper创建</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">       thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">       AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">           Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                   LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Looper.loop();<span class=\"comment\">//2.主线程Looper循环</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>从源码知道，正如我们想的那样prepareMainLooper()建立的Looper就是主线程的Looper。</p>\n<p><strong>2.Looper的消息循环</strong></p>\n<p>从上面ActivityThread的main方法中，我们发现Looper.loop()消息循环方法。Looper是怎么循环的，这里让我们来看一下Looper.loop()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Run the message queue in this thread. Be sure to call</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">        <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">        Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;<span class=\"comment\">//for循环</span></div><div class=\"line\">            Message msg = queue.next(); <span class=\"comment\">//从消息队列中取值</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//消息为空就返回</span></div><div class=\"line\">                <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">            Printer logging = me.mLogging;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                        msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.target.dispatchMessage(msg);<span class=\"comment\">//分发消息</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">            <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从loop()源码中我们知道，建立了一个for循环从消息队列中取数据，然后通过msg.target.dispatchMessage(msg)分发消息，从前面我们知道target就是handler,这里我们再看一下Handler的消息分发方法dispatchMessage()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Handle system messages here.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这里我们就看到，Handler最后会调用handleMessage()方法，只要message中callback为空，就是调用handleMessage(),从而实现消息的处理。</p>\n<p>到这里，我们Android Handler消息分发机制解析就分解完了。但这里需要注意一下的是，在loop循环中，如果消息为空就会跳出循环，而我们的主线程Looper循环应该是死循环才对。针对这个问题，我们继续深入源码看一下，前面说prepare()和prepareMainLooper()是两种建立Looper的方式，两者的区别是一个是可取消循环的，一个是不可以取消循环的，这里让我们再来看看一下Looper的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">    mRun = <span class=\"keyword\">true</span>;</div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过查看源码发现，是否可以取消消息循环，主要控制是MessageQueue里面，这里我们可以知道，主线程的消息循环控制应该就在 queue.next()方法里,好了，让我们来看MessageQueue的next方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">      <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Binder.flushPendingCommands();</div><div class=\"line\">          &#125;</div><div class=\"line\">          nativePollOnce(mPtr, nextPollTimeoutMillis);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (mQuiting) &#123;</div><div class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              </div><div class=\"line\">          .......省略代码，获取消息队列中的Message      </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">          pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">          <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">          nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在next()方法中，有一个原生方法nativePollOnce(),它的作用是干啥的呢？是不是就是控制主线程循环的呢？<strong>通过进一步阅读C++源码，我们知道这里是利用Linux系统中epoll_wait方法来进行阻塞，形成一个等待状态，也就是说，当消息队列中消息为空时，nativePollOnce()方法不会返回，会进行阻塞，形成一个等待状态，等有新消息进入消息队列，才会返回，从而获取消息。</strong>这里我们也来看一下消息队列的插入方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mQuiting) &#123;</div><div class=\"line\">              RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                      msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">              Log.w(<span class=\"string\">\"MessageQueue\"</span>, e.getMessage(), e);</div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          msg.when = when;</div><div class=\"line\">          Message p = mMessages;</div><div class=\"line\">          <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">              <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">              msg.next = p;</div><div class=\"line\">              mMessages = msg;</div><div class=\"line\">              needWake = mBlocked;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">              <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">              <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">              needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">              Message prev;</div><div class=\"line\">              <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                  prev = p;</div><div class=\"line\">                  p = p.next;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                      needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">              msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">              prev.next = msg;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">          nativeWake(mPtr);<span class=\"comment\">//核心代码</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在消息队列中加入消息之后，会调用一个原生方法 nativeWake()，这个原生的C++的方法，也就是通知nativePollOnce()返回的方法，通过方法nativeWake和nativePollOnce的一唱一和，从而实现主线程的消息队列的无限循环。</p>\n<p>具体C++代码是怎么实现的，这里推荐一篇博文<a href=\"http://blog.csdn.net/andywuchuanlong/article/details/48179165\" target=\"_blank\" rel=\"external\">从源码角度分析native层消息机制与java层消息机制的关联</a>。</p>\n<p>好了，分析就到这里了。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>Android消息分发机制，也就是Handler处理消息机制。流程如下：</p>\n<ul>\n<li>1.应用程序在启动的时候，通过Zygote复制自身fork出应用程序的进程，然后该进程又以ActivityThread创建主线程。</li>\n<li>2.主线程启动时，在ActivityThread的main方法中初始化了Looper和执行消息队列的循环。</li>\n<li>3.使用过程中，Handler初始化，获取了主线程的Looper和消息队列MessageQueue，并实现消息处理方法handlerMessage</li>\n<li>4.Handler通过sendMessage方法将消息插入消息队列</li>\n<li>5.通过Looper消息队列的循环，从而执行处理方法，实现了UI线程和子线程之间的交互。</li>\n</ul>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25222485?refer=levent-j\" target=\"_blank\" rel=\"external\">Android消息机制学习笔记</a></p>\n<p><a href=\"http://blog.csdn.net/andywuchuanlong/article/details/48179165\" target=\"_blank\" rel=\"external\">从源码角度分析native层消息机制与java层消息机制的关联</a>。</p>\n<p><a href=\"http://blog.csdn.net/zhangfei2018/article/details/46518615\" target=\"_blank\" rel=\"external\">ActivityThread</a></p>\n<p><a href=\"http://blog.csdn.net/a19881029/article/details/22695289\" target=\"_blank\" rel=\"external\">Java单链表、双端链表、有序链表实现</a></p>\n","excerpt":"<hr>\n<p>Android消息机制，其实也就是Handler机制，主要用于UI线程和子线程之间交互。众所周知，一般情况下，出于安全的考虑，所有与UI控件的操作都要放在主线程即UI线程中，而一些耗时操作应当放在子线程中。当在子线程中完成耗时操作并要对UI控件进行操作时，就要用Handler来控制。另外，Android系统框架内，Activity生命周期的通知等功能也是通过消息机制来实现的。本篇博文主要是想通过Handler源码解析，来加深我自己对Android消息机制的理解。</p>\n<h1 id=\"一、Handler使用\"><a href=\"#一、Handler使用\" class=\"headerlink\" title=\"一、Handler使用\"></a>一、Handler使用</h1><p>使用例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler()&#123;<span class=\"comment\">//1.Handler初始化,一个匿名内部类</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">         textView.setText(<span class=\"string\">\"对UI进行操作\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_main);</div><div class=\"line\">       textView = (TextView) findViewById(R.id.mytv);</div><div class=\"line\">       <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//模拟耗时操作</span></div><div class=\"line\">               SystemClock.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">               handler.sendMessage(<span class=\"keyword\">new</span> Message());<span class=\"comment\">//2.在子线程中sendMessage();</span></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).start();</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>1.我们先来看看，Handler初始化。</strong><br>Handler初始化的同时，实现了消息处理方法handleMessage()。查看Handler源码<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> MessageQueue mQueue;</div><div class=\"line\"><span class=\"keyword\">final</span> Looper mLooper;</div><div class=\"line\"><span class=\"keyword\">final</span> Callback mCallback;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Default constructor associates this handler with the queue for the</div><div class=\"line\"> * current thread.</div><div class=\"line\"> *</div><div class=\"line\"> * If there isn't one, this handler won't be able to receive messages.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mLooper = Looper.myLooper();<span class=\"comment\">//3.核心代码。获取一个Looper</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mQueue = mLooper.mQueue;<span class=\"comment\">//4.核心代码。从Looper获取一个消息队列</span></div><div class=\"line\">    mCallback = <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在源码中，Handler定义了一个MessageQueue消息队列mQueue和一个Looper对象mLooper，并都进行了初始化，分别对mQueue和mLooper进行了赋值，其中mLooper是通过Looper.myLooper()赋值，mQueues是Looper中的mQueue。通过了解，知Looper.myLooper()是一个静态方法。让我们进入Looper类看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * Class used to run a message loop for a thread.  Threads by default do</div><div class=\"line\">  * not have a message loop associated with them; to create one, call</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #prepare&#125; in the thread that is to run the loop, and then</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #loop&#125; to have it process messages until the loop is stopped.</div><div class=\"line\">  * </div><div class=\"line\">  * &lt;p&gt;Most interaction with a message loop is through the</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> Handler&#125; class.</div><div class=\"line\">  * </div><div class=\"line\">  * &lt;p&gt;This is a typical example of the implementation of a Looper thread,</div><div class=\"line\">  * using the separation of &#123;<span class=\"doctag\">@link</span> #prepare&#125; and &#123;<span class=\"doctag\">@link</span> #loop&#125; to create an</div><div class=\"line\">  * initial Handler to communicate with the Looper.</div><div class=\"line\">  *</div><div class=\"line\">  * &lt;pre&gt;</div><div class=\"line\">  *  class LooperThread extends Thread &#123;</div><div class=\"line\">  *      public Handler mHandler;</div><div class=\"line\">  *</div><div class=\"line\">  *      public void run() &#123;</div><div class=\"line\">  *          Looper.prepare();</div><div class=\"line\">  *</div><div class=\"line\">  *          mHandler = new Handler() &#123;</div><div class=\"line\">  *              public void handleMessage(Message msg) &#123;</div><div class=\"line\">  *                  // process incoming messages here</div><div class=\"line\">  *              &#125;</div><div class=\"line\">  *          &#125;;</div><div class=\"line\">  *</div><div class=\"line\">  *          Looper.loop();</div><div class=\"line\">  *      &#125;</div><div class=\"line\">  *  &#125;&lt;/pre&gt;</div><div class=\"line\">  */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Looper</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"Looper\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;Looper&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Looper sMainLooper;  <span class=\"comment\">// guarded by Looper.class</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> MessageQueue mQueue;</div><div class=\"line\">    <span class=\"keyword\">final</span> Thread mThread;</div><div class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> mRun;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Printer mLogging;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">/** Initialize the current thread as a looper.</div><div class=\"line\">      * This gives you a chance to create handlers that then reference</div><div class=\"line\">      * this looper, before actually starting the loop. Be sure to call</div><div class=\"line\">      * &#123;<span class=\"doctag\">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class=\"line\">      * &#123;<span class=\"doctag\">@link</span> #quit()&#125;.</div><div class=\"line\">      */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Initialize the current thread as a looper, marking it as an</div><div class=\"line\">     * application's main looper. The main looper for your application</div><div class=\"line\">     * is created by the Android environment, so you should never need</div><div class=\"line\">     * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sMainLooper = myLooper();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Run the message queue in this thread. Be sure to call</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       ......</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Return the Looper object associated with the current thread.  Returns</div><div class=\"line\">     * null if the calling thread is not associated with a Looper.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Looper <span class=\"title\">myLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sThreadLocal.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从Looper源码的注释中，我们知道<strong>Looper是一个专门为线程提供消息循环的类，通过调用prepare()和loop()就可以为线程提供一个消息循环机制。</strong>线程本来是没有消息循环机制的，想要消息循环机制就必须自己建立。如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">  </div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         Looper.prepare();</div><div class=\"line\">         mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">             <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                 <span class=\"comment\">// process incoming messages here</span></div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;;</div><div class=\"line\">         Looper.loop();</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Looper源码中，有两个方法prepare()和prepareMainLooper()对Looper进行了初始化,Looper.myLooper()核心代码为sThreadLocal.get()，主要也是从sThreadLocal中取值。两个初始化方法的源码为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/** Initialize the current thread as a looper.</div><div class=\"line\">  * This gives you a chance to create handlers that then reference</div><div class=\"line\">  * this looper, before actually starting the loop. Be sure to call</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #quit()&#125;.</div><div class=\"line\">  */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Initialize the current thread as a looper, marking it as an</div><div class=\"line\"> * application's main looper. The main looper for your application</div><div class=\"line\"> * is created by the Android environment, so you should never need</div><div class=\"line\"> * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sMainLooper = myLooper();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码中知道prepare()创建的Looper为允许退出循环的，而prepareMainLooper()方法创建的是不应许退出循环的，通过分析，<strong>很明显知道prepare()方法创建的是一般线程的Looper,而通过而prepareMainLooper()创建的，就是主线程消息循环的Looper。</strong></p>\n<p>现在，虽然我们知道了Handler中对MessageQueue队列和Looper进行了赋值，但是Looper啥时候通过prepareMainLooper()初始化的呢？什么是开始调loop()开始循环的呢？这里我们先停一下，后面我们会说道。</p>\n<p><strong>2.我们再看例子中的注释方法，在子线程中handler.sendMessage(message)</strong></p>\n<p>我们继续看Handler源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageDelayed(msg, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageDelayed</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> delayMillis)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (delayMillis &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            delayMillis = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sent = <span class=\"keyword\">false</span>;</div><div class=\"line\">        MessageQueue queue = mQueue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            msg.target = <span class=\"keyword\">this</span>;<span class=\"comment\">//1.对Message中的target赋值Handler</span></div><div class=\"line\">            sent = queue.enqueueMessage(msg, uptimeMillis);<span class=\"comment\">//2.向循环队列中，加入消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">            Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sent;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div></pre></td></tr></table></figure></p>\n<p>阅读Handler源码知，发送消息的方法还有许多种，sendMessage()是其中一种，如果还想具体了解还有哪些，可以下载Handler源码看一下，这里就不一一介绍了。<strong>从上面三个方法中我们了解到方法sendMessageAtTime()是最后调用的，这个方法主要是，对Message的target赋值为发送主体Handler，并把Message加入消息队列MessageQueue中，等待消息队列循环处理。</strong></p>\n<p>Handler发送主体为Message，Message是啥呢？Message主要就是对一些数据做封装处理，其中有int变量what,arg1,arg2,Object变量obj等，具体可以查看Message源码，这里就不详细说了。</p>\n<h1 id=\"二、Looper的创建及循环机制\"><a href=\"#二、Looper的创建及循环机制\" class=\"headerlink\" title=\"二、Looper的创建及循环机制\"></a>二、Looper的创建及循环机制</h1><p>上面说到，Looper的建立有两种方式prepare()和prepareMainLooper()，其中prepare建立的为一般子线程Looper，可以取消循环；而prepareMainLooper()建立的为主线程的Looper，不可以取消循环。到底而prepareMainLooper建立的是不是主线程循环呢？让我们继续分析</p>\n<p><strong>1.主线程Looper建立</strong></p>\n<p>主线程即UI线程，说到UI线程，我们知道应用程序一启动，主(UI)线程就开始启动，而线程的建立必须要在进程的基础上。<strong>通过对Android应用程序启动的分析，我们知道，应用程序启动，首先会通过Zygote复制自身fork出一个进程，然后再由进程创建一个主线程，主线程的建立和ActivityThread息息相关，通过分析，知ActivityThread的main方法就是应用程序启动的入口。</strong>具体可以参考：<a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\">Android应用程序进程启动过程（前篇）</a></p>\n<p>让我们来看一下ActivityThread类的main方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">       SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">       <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">       <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">       CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">       Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">       Looper.prepareMainLooper();<span class=\"comment\">//1.主线程Looper创建</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">       thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">       AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">           Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                   LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       Looper.loop();<span class=\"comment\">//2.主线程Looper循环</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>从源码知道，正如我们想的那样prepareMainLooper()建立的Looper就是主线程的Looper。</p>\n<p><strong>2.Looper的消息循环</strong></p>\n<p>从上面ActivityThread的main方法中，我们发现Looper.loop()消息循环方法。Looper是怎么循环的，这里让我们来看一下Looper.loop()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Run the message queue in this thread. Be sure to call</div><div class=\"line\">     * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Looper me = myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></div><div class=\"line\">        <span class=\"comment\">// and keep track of what that identity token actually is.</span></div><div class=\"line\">        Binder.clearCallingIdentity();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;<span class=\"comment\">//for循环</span></div><div class=\"line\">            Message msg = queue.next(); <span class=\"comment\">//从消息队列中取值</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//消息为空就返回</span></div><div class=\"line\">                <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></div><div class=\"line\">            Printer logging = me.mLogging;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.target + <span class=\"string\">\" \"</span> +</div><div class=\"line\">                        msg.callback + <span class=\"string\">\": \"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.target.dispatchMessage(msg);<span class=\"comment\">//分发消息</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.target + <span class=\"string\">\" \"</span> + msg.callback);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Make sure that during the course of dispatching the</span></div><div class=\"line\">            <span class=\"comment\">// identity of the thread wasn't corrupted.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</div><div class=\"line\">            <span class=\"keyword\">if</span> (ident != newIdent) &#123;</div><div class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></div><div class=\"line\">                        + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></div><div class=\"line\">                        + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></div><div class=\"line\">                        + msg.target.getClass().getName() + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            msg.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>从loop()源码中我们知道，建立了一个for循环从消息队列中取数据，然后通过msg.target.dispatchMessage(msg)分发消息，从前面我们知道target就是handler,这里我们再看一下Handler的消息分发方法dispatchMessage()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Handle system messages here.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这里我们就看到，Handler最后会调用handleMessage()方法，只要message中callback为空，就是调用handleMessage(),从而实现消息的处理。</p>\n<p>到这里，我们Android Handler消息分发机制解析就分解完了。但这里需要注意一下的是，在loop循环中，如果消息为空就会跳出循环，而我们的主线程Looper循环应该是死循环才对。针对这个问题，我们继续深入源码看一下，前面说prepare()和prepareMainLooper()是两种建立Looper的方式，两者的区别是一个是可取消循环的，一个是不可以取消循环的，这里让我们再来看看一下Looper的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">    mRun = <span class=\"keyword\">true</span>;</div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过查看源码发现，是否可以取消消息循环，主要控制是MessageQueue里面，这里我们可以知道，主线程的消息循环控制应该就在 queue.next()方法里,好了，让我们来看MessageQueue的next方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></div><div class=\"line\">      <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              Binder.flushPendingCommands();</div><div class=\"line\">          &#125;</div><div class=\"line\">          nativePollOnce(mPtr, nextPollTimeoutMillis);<span class=\"comment\">//1.核心代码</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (mQuiting) &#123;</div><div class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              </div><div class=\"line\">          .......省略代码，获取消息队列中的Message      </div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></div><div class=\"line\">          pendingIdleHandlerCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></div><div class=\"line\">          <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></div><div class=\"line\">          nextPollTimeoutMillis = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在next()方法中，有一个原生方法nativePollOnce(),它的作用是干啥的呢？是不是就是控制主线程循环的呢？<strong>通过进一步阅读C++源码，我们知道这里是利用Linux系统中epoll_wait方法来进行阻塞，形成一个等待状态，也就是说，当消息队列中消息为空时，nativePollOnce()方法不会返回，会进行阻塞，形成一个等待状态，等有新消息进入消息队列，才会返回，从而获取消息。</strong>这里我们也来看一下消息队列的插入方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AndroidRuntimeException(<span class=\"string\">\"Message must have a target.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mQuiting) &#123;</div><div class=\"line\">              RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                      msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">              Log.w(<span class=\"string\">\"MessageQueue\"</span>, e.getMessage(), e);</div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          msg.when = when;</div><div class=\"line\">          Message p = mMessages;</div><div class=\"line\">          <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">              <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">              msg.next = p;</div><div class=\"line\">              mMessages = msg;</div><div class=\"line\">              needWake = mBlocked;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">              <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">              <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">              needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">              Message prev;</div><div class=\"line\">              <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">                  prev = p;</div><div class=\"line\">                  p = p.next;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                      needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">              msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">              prev.next = msg;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">          nativeWake(mPtr);<span class=\"comment\">//核心代码</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在消息队列中加入消息之后，会调用一个原生方法 nativeWake()，这个原生的C++的方法，也就是通知nativePollOnce()返回的方法，通过方法nativeWake和nativePollOnce的一唱一和，从而实现主线程的消息队列的无限循环。</p>\n<p>具体C++代码是怎么实现的，这里推荐一篇博文<a href=\"http://blog.csdn.net/andywuchuanlong/article/details/48179165\">从源码角度分析native层消息机制与java层消息机制的关联</a>。</p>\n<p>好了，分析就到这里了。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>Android消息分发机制，也就是Handler处理消息机制。流程如下：</p>\n<ul>\n<li>1.应用程序在启动的时候，通过Zygote复制自身fork出应用程序的进程，然后该进程又以ActivityThread创建主线程。</li>\n<li>2.主线程启动时，在ActivityThread的main方法中初始化了Looper和执行消息队列的循环。</li>\n<li>3.使用过程中，Handler初始化，获取了主线程的Looper和消息队列MessageQueue，并实现消息处理方法handlerMessage</li>\n<li>4.Handler通过sendMessage方法将消息插入消息队列</li>\n<li>5.通过Looper消息队列的循环，从而执行处理方法，实现了UI线程和子线程之间的交互。</li>\n</ul>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"http://liuwangshu.cn/framework/applicationprocess/1.html\">Android应用程序进程启动过程（前篇）</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25222485?refer=levent-j\">Android消息机制学习笔记</a></p>\n<p><a href=\"http://blog.csdn.net/andywuchuanlong/article/details/48179165\">从源码角度分析native层消息机制与java层消息机制的关联</a>。</p>\n<p><a href=\"http://blog.csdn.net/zhangfei2018/article/details/46518615\">ActivityThread</a></p>\n<p><a href=\"http://blog.csdn.net/a19881029/article/details/22695289\">Java单链表、双端链表、有序链表实现</a></p>"},{"layout":"post","title":"Activity启动流程源码分析(Launcher中)","date":"2017-12-27T10:47:13.000Z","comments":1,"_content":"---\nActivity的启动方式，严格来说有两种形式。第一种是在Android应用中启动,第二种是从Launcher中点击应用快捷图标启动。Android应用中Activity启动流程，在上篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)已介绍过了，想了解的同学，可以看看一下。本篇博文将会介绍从Launcher中启动Activity具体流程。\n\n在开始介绍之前，我们需要了解一些概念，如：\n\n- **ActivityThread：** 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。\n- **ApplicationThread：** ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。\n- **Instrumentation：** ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。\n- **ActivityManagerService(AMS)：** Activity管理系统服务类，主要是对所有的Activity进行管理。\n- **ActivityStack：** Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。\n\n# 一、什么是Launcher?\n通俗的来说，就是我们正常解锁后，进入的第一个界面，即桌面(HomeScreen)。Launcher本身就是一个app，它主要作用是用来显示widget和管理手机上其他应用软件app。通过查看源码，我们知道Android系统会内置一些系统应用，如Launcher，联系人、照相机等，并且在Android系统启动后，会自动启动Launcher，让用户可以通过Launcher启动其他应用。\n\n<!-- more -->\n# 二、Launcher中启动应用源码分析\nLauncher中启动应用，也即是Launcher中启动Activity,因为每个应用都是由多个Activities组成的。下面我们就从Launcher源码开始分析：\n```java\n    View createShortcut(ShortcutInfo info) {\n        return createShortcut(R.layout.application,\n                (ViewGroup) mWorkspace.getChildAt(mWorkspace.getCurrentPage()), info);\n    }\n\n    View createShortcut(int layoutResId, ViewGroup parent, ShortcutInfo info) {\n        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, false);\n        favorite.applyFromShortcutInfo(info, mIconCache);\n        favorite.setOnClickListener(this);//核心代码\n        return favorite;\n    }\n```\n在创建应用快捷图标的时候，都会给应用快捷图标View设置监听事件setOnClickListener(this),从这监听事件的设定，我们也就知道Launcher类实现了View.OnTouchListener接口，所以我们来看看Onclick()方法\n```java\n  public void onClick(View v) {\n        .......\n        Object tag = v.getTag();\n        if (tag instanceof ShortcutInfo) {\n            // Open shortcut\n            final Intent intent = ((ShortcutInfo) tag).intent;\n            int[] pos = new int[2];\n            v.getLocationOnScreen(pos);\n            intent.setSourceBounds(new Rect(pos[0], pos[1],\n                    pos[0] + v.getWidth(), pos[1] + v.getHeight()));\n\n            boolean success = startActivitySafely(v, intent, tag);//核心代码\n\n            if (success && v instanceof BubbleTextView) {\n                mWaitingForResume = (BubbleTextView) v;\n                mWaitingForResume.setStayPressed(true);\n            }\n        } else if (tag instanceof FolderInfo) {\n            if (v instanceof FolderIcon) {\n                FolderIcon fi = (FolderIcon) v;\n                handleFolderClick(fi);\n            }\n        } else if (v == mAllAppsButton) {\n            if (mState == State.APPS_CUSTOMIZE) {\n                showWorkspace(true);\n            } else {\n                onClickAllAppsButton(v);\n            }\n        }\n    }\n```\n点击应用快捷图标，就会执行onClick(),然后就会调用startActivitySafely方法，我们继续来看此方法\n```java\n    boolean startActivitySafely(View v, Intent intent, Object tag) {\n        boolean success = false;\n        try {\n            success = startActivity(v, intent, tag);//核心代码\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Unable to launch. tag=\" + tag + \" intent=\" + intent, e);\n        }\n        return success;\n    }\n```\n这里就开始startActivity了，我们继续看这方法\n```java\n    boolean startActivity(View v, Intent intent, Object tag) {\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n        try {\n            // Only launch using the new animation if the shortcut has not opted out (this is a\n            // private contract between launcher and may be ignored in the future).\n            boolean useLaunchAnimation = (v != null) &&\n                    !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);\n            if (useLaunchAnimation) {\n                ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, 0, 0,\n                        v.getMeasuredWidth(), v.getMeasuredHeight());\n\n                startActivity(intent, opts.toBundle());\n            } else {\n                startActivity(intent);\n            }\n            return true;\n        } catch (SecurityException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Launcher does not have the permission to launch \" + intent +\n                    \". Make sure to create a MAIN intent-filter for the corresponding activity \" +\n                    \"or use the exported attribute for this activity. \"\n                    + \"tag=\"+ tag + \" intent=\" + intent, e);\n        }\n        return false;\n    }\n```\n前面说了，Launcher本身就是一个应用，通过阅读源码知道，Launcher类也是继承于Activity，到这里，startActivity()也就是和我们上篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)中startActivity是一样的，具体流程也是相同的，唯一不同的是在startSpecificActivityLocked()时，Launcher启动的Activity没有进程，需要新建应用进程\n。让我们来看看startSpecificActivityLocked()源码\n```java\n private final void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid);\n        \n        if (r.launchTime == 0) {\n            r.launchTime = SystemClock.uptimeMillis();\n            if (mInitialStartTime == 0) {\n                mInitialStartTime = r.launchTime;\n            }\n        } else if (mInitialStartTime == 0) {\n            mInitialStartTime = SystemClock.uptimeMillis();\n        }\n        \n        if (app != null && app.thread != null) {//Activity所在进程判断，进程存在时，直接启动Activity\n            try {\n                app.addPackage(r.info.packageName);\n\n                realStartActivityLocked(r, app, andResume, checkConfig);//核心代码\n\n                return;\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Exception when starting activity \"\n                        + r.intent.getComponent().flattenToShortString(), e);\n            }\n\n            // If a dead object exception was thrown -- fall through to\n            // restart the application.\n        }\n\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false);\n    }\n```\n因为从Launcher启动的Activity进程不存在，所以就会执行mService.startProcessLocked()来新建进程，其中mService为ActivityManagerService，我们来看看具体代码：\n```java\n    final ProcessRecord startProcessLocked(String processName,\n            ApplicationInfo info, boolean knownToBeDead, int intentFlags,\n            String hostingType, ComponentName hostingName, boolean allowWhileBooting,\n            boolean isolated) {\n        ProcessRecord app;\n        .......\n\n        if (app == null) {\n            app = newProcessRecordLocked(null, info, processName, isolated);\n            if (app == null) {\n                Slog.w(TAG, \"Failed making new process record for \"\n                        + processName + \"/\" + info.uid + \" isolated=\" + isolated);\n                return null;\n            }\n            mProcessNames.put(processName, app.uid, app);\n            if (isolated) {\n                mIsolatedProcesses.put(app.uid, app);\n            }\n        } else {\n            // If this is a new package in the process, add the package to the list\n            app.addPackage(info.packageName);\n        }\n        .......\n        startProcessLocked(app, hostingType, hostingNameStr);//核心代码\n        return (app.pid != 0) ? app : null;\n    }\n```\n在创建进程记录后，就会执行startProcessLocked(app, hostingType, hostingNameStr)来创建进程，我们继续\n```java\n  private final void startProcessLocked(ProcessRecord app,\n            String hostingType, String hostingNameStr) {\n        ......\n        \n        try {\n            .......\n\n            // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n\n            //核心代码，开始创建进程\n            Process.ProcessStartResult startResult = Process.start(\"android.app.ActivityThread\",\n                    app.processName, uid, uid, gids, debugFlags,\n                    app.info.targetSdkVersion, null);\n           ......\n        } catch (RuntimeException e) {\n          .......\n        }\n    }\n```\n这里Process.start()进程启动传入了ActivityThread类，我们知道ActivityThread类是应用的入口类，所以这里开始正式启动快捷图标的应用。关于Android应用程序的入口，我已写过一篇博文[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361),想了解的同学可以看看。让我们继续来看看Process中的start方法\n```java\n    public static final ProcessStartResult start(final String processClass,\n                                  final String niceName,\n                                  int uid, int gid, int[] gids,\n                                  int debugFlags, int targetSdkVersion,\n                                  String[] zygoteArgs) {\n        try {\n            return startViaZygote(processClass, niceName, uid, gid, gids,\n                    debugFlags, targetSdkVersion, zygoteArgs);\n        } catch (ZygoteStartFailedEx ex) {\n            Log.e(LOG_TAG,\n                    \"Starting VM process through Zygote failed\");\n            throw new RuntimeException(\n                    \"Starting VM process through Zygote failed\", ex);\n        }\n    }\n```\nstartViaZygote()从方法名中，我们知开始通过Zygote启动进程，我们继续看\n```java\n private static ProcessStartResult startViaZygote(final String processClass,\n                                  final String niceName,\n                                  final int uid, final int gid,\n                                  final int[] gids,\n                                  int debugFlags, int targetSdkVersion,\n                                  String[] extraArgs)\n                                  throws ZygoteStartFailedEx {\n        synchronized(Process.class) {\n            ArrayList<String> argsForZygote = new ArrayList<String>();\n\n            ......  \n\n            return zygoteSendArgsAndGetResult(argsForZygote);\n        }\n    }\n```\n我们继续看zygoteSendArgsAndGetResult()方法\n```java\n   private static ProcessStartResult zygoteSendArgsAndGetResult(ArrayList<String> args)\n            throws ZygoteStartFailedEx {\n        openZygoteSocketIfNeeded();\n\n        try {\n            sZygoteWriter.write(Integer.toString(args.size()));\n            sZygoteWriter.newLine();\n\n            int sz = args.size();\n            for (int i = 0; i < sz; i++) {\n                String arg = args.get(i);\n                if (arg.indexOf('\\n') >= 0) {\n                    throw new ZygoteStartFailedEx(\n                            \"embedded newlines not allowed\");\n                }\n                sZygoteWriter.write(arg);\n                sZygoteWriter.newLine();\n            }\n            sZygoteWriter.flush();\n            // Should there be a timeout on this?\n            ProcessStartResult result = new ProcessStartResult();\n            result.pid = sZygoteInputStream.readInt();\n            if (result.pid < 0) {\n                throw new ZygoteStartFailedEx(\"fork() failed\");\n            }\n            result.usingWrapper = sZygoteInputStream.readBoolean();\n            return result;\n        } catch (IOException ex) {\n            try {\n                if (sZygoteSocket != null) {\n                    sZygoteSocket.close();\n                }\n            } catch (IOException ex2) {\n                // we're going to fail anyway\n                Log.e(LOG_TAG,\"I/O exception on routine close\", ex2);\n            }\n\n            sZygoteSocket = null;\n            throw new ZygoteStartFailedEx(ex);\n        }\n    }\n```\n到这里就会执行Zygote的一些原生方法，通过对Zygote的机制的了解，我们知道Zygote会fork自身进程来创建应用进程，进而执行ActivityThread的main方法，初始化相关应用参数，我们来看看ActivityThread的main方法\n```java\n  public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);//核心方法\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n通过博文[Android消息机制源码解析(Handler)](http://blog.csdn.net/awenyini/article/details/78593139)知，Android的消息循环机制就是这个时候创建的，这里我们着重需要来看看ActivityThead的attach方法\n```java\n  private void attach(boolean system) {\n        sThreadLocal.set(this);\n        mSystemThread = system;\n        if (!system) {\n            ViewRootImpl.addFirstDrawHandler(new Runnable() {\n                public void run() {\n                    ensureJitEnabled();\n                }\n            });\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\");\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n\n            //Binder通信机制\n            IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n        } else {\n           .......\n        }\n      .......\n        });\n    }\n```\n这里通过[Binder跨进程通信机制](http://blog.csdn.net/awenyini/article/details/78806893)调用了ActivityManagerService中的attachApplication()方法，我们继续\n```java\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n\n            attachApplicationLocked(thread, callingPid);//核心方法\n\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n我们继续看attachApplicationLocked()方法\n```java\n  private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n\n        // Find the application record that is being attached...  either via\n        // the pid if we are running in multiple processes, or just pull the\n        // next app record if we are emulating process with anonymous threads.\n        ProcessRecord app;\n        ......\n       \n        try {\n            ......\n            //1.建立应用Application\n            thread.bindApplication(processName, appInfo, providers,\n                    app.instrumentationClass, profileFile, profileFd, profileAutoStop,\n                    app.instrumentationArguments, app.instrumentationWatcher, testMode,\n                    enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat, getCommonServicesLocked(),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, true);\n            app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();\n        } catch (Exception e) {\n           .....\n        }\n\n        .....\n\n        // See if the top visible activity is waiting to run in this process...\n        ActivityRecord hr = mMainStack.topRunningActivityLocked(null);\n\n        if (hr != null && normalMode) {\n            if (hr.app == null && app.uid == hr.info.applicationInfo.uid\n                    && processName.equals(hr.processName)) {\n                try {\n                    if (mHeadless) {\n                        Slog.e(TAG, \"Starting activities not supported on headless device: \" + hr);\n\n                    } else if (mMainStack.realStartActivityLocked(hr, app, true, true)) {//2.启动应用Activity\n\n                        didSomething = true;\n\n                    }\n                } catch (Exception e) {\n                    Slog.w(TAG, \"Exception in new application when starting activity \"\n                          + hr.intent.getComponent().flattenToShortString(), e);\n                    badApp = true;\n                }\n            } else {\n                mMainStack.ensureActivitiesVisibleLocked(hr, null, processName, 0);\n            }\n        }\n        ......\n\n        return true;\n    }\n```\n注释1处，在[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)中，已经分析过，这里主要就是通过Binder跨进程通信，创建应用Application,执行Application的attachBaseContext和onCreate方法，两方法也为应用程序的开发入口。注释2处，调用了ActivitStack中realStartActivityLocked()方法，主要就是启动Activity，也即我们从Launcher点击应用快捷图标应用的入口Activity，在博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)中，已经介绍过剩余的Activity的启动流程，这里就不再介绍了。想了解的同学，可以看一下上篇博文。\n\n到这里，从Launcher中启动Activity的流程就讲解完了。最后再附上Activity启动流程图：\n\n![](/assets/img/tech_activity_start_launcher_flow.png)\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Launcher开发——入门篇](https://www.jianshu.com/p/968e2339ee5f)\n\n[Android Activity启动流程源码全解析（2）](https://www.jianshu.com/p/067acea47ba6)\n\n\n\n\n","source":"_posts/tech_android_framework_startactivity_launcher.md","raw":"---\nlayout: post\ntitle: \"Activity启动流程源码分析(Launcher中)\"\ndate: 12/27/2017 6:47:13 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Activity启动流程\n\t- Android框架源码解析\n---\n---\nActivity的启动方式，严格来说有两种形式。第一种是在Android应用中启动,第二种是从Launcher中点击应用快捷图标启动。Android应用中Activity启动流程，在上篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)已介绍过了，想了解的同学，可以看看一下。本篇博文将会介绍从Launcher中启动Activity具体流程。\n\n在开始介绍之前，我们需要了解一些概念，如：\n\n- **ActivityThread：** 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。\n- **ApplicationThread：** ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。\n- **Instrumentation：** ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。\n- **ActivityManagerService(AMS)：** Activity管理系统服务类，主要是对所有的Activity进行管理。\n- **ActivityStack：** Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。\n\n# 一、什么是Launcher?\n通俗的来说，就是我们正常解锁后，进入的第一个界面，即桌面(HomeScreen)。Launcher本身就是一个app，它主要作用是用来显示widget和管理手机上其他应用软件app。通过查看源码，我们知道Android系统会内置一些系统应用，如Launcher，联系人、照相机等，并且在Android系统启动后，会自动启动Launcher，让用户可以通过Launcher启动其他应用。\n\n<!-- more -->\n# 二、Launcher中启动应用源码分析\nLauncher中启动应用，也即是Launcher中启动Activity,因为每个应用都是由多个Activities组成的。下面我们就从Launcher源码开始分析：\n```java\n    View createShortcut(ShortcutInfo info) {\n        return createShortcut(R.layout.application,\n                (ViewGroup) mWorkspace.getChildAt(mWorkspace.getCurrentPage()), info);\n    }\n\n    View createShortcut(int layoutResId, ViewGroup parent, ShortcutInfo info) {\n        BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, false);\n        favorite.applyFromShortcutInfo(info, mIconCache);\n        favorite.setOnClickListener(this);//核心代码\n        return favorite;\n    }\n```\n在创建应用快捷图标的时候，都会给应用快捷图标View设置监听事件setOnClickListener(this),从这监听事件的设定，我们也就知道Launcher类实现了View.OnTouchListener接口，所以我们来看看Onclick()方法\n```java\n  public void onClick(View v) {\n        .......\n        Object tag = v.getTag();\n        if (tag instanceof ShortcutInfo) {\n            // Open shortcut\n            final Intent intent = ((ShortcutInfo) tag).intent;\n            int[] pos = new int[2];\n            v.getLocationOnScreen(pos);\n            intent.setSourceBounds(new Rect(pos[0], pos[1],\n                    pos[0] + v.getWidth(), pos[1] + v.getHeight()));\n\n            boolean success = startActivitySafely(v, intent, tag);//核心代码\n\n            if (success && v instanceof BubbleTextView) {\n                mWaitingForResume = (BubbleTextView) v;\n                mWaitingForResume.setStayPressed(true);\n            }\n        } else if (tag instanceof FolderInfo) {\n            if (v instanceof FolderIcon) {\n                FolderIcon fi = (FolderIcon) v;\n                handleFolderClick(fi);\n            }\n        } else if (v == mAllAppsButton) {\n            if (mState == State.APPS_CUSTOMIZE) {\n                showWorkspace(true);\n            } else {\n                onClickAllAppsButton(v);\n            }\n        }\n    }\n```\n点击应用快捷图标，就会执行onClick(),然后就会调用startActivitySafely方法，我们继续来看此方法\n```java\n    boolean startActivitySafely(View v, Intent intent, Object tag) {\n        boolean success = false;\n        try {\n            success = startActivity(v, intent, tag);//核心代码\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Unable to launch. tag=\" + tag + \" intent=\" + intent, e);\n        }\n        return success;\n    }\n```\n这里就开始startActivity了，我们继续看这方法\n```java\n    boolean startActivity(View v, Intent intent, Object tag) {\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n        try {\n            // Only launch using the new animation if the shortcut has not opted out (this is a\n            // private contract between launcher and may be ignored in the future).\n            boolean useLaunchAnimation = (v != null) &&\n                    !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);\n            if (useLaunchAnimation) {\n                ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, 0, 0,\n                        v.getMeasuredWidth(), v.getMeasuredHeight());\n\n                startActivity(intent, opts.toBundle());\n            } else {\n                startActivity(intent);\n            }\n            return true;\n        } catch (SecurityException e) {\n            Toast.makeText(this, R.string.activity_not_found, Toast.LENGTH_SHORT).show();\n            Log.e(TAG, \"Launcher does not have the permission to launch \" + intent +\n                    \". Make sure to create a MAIN intent-filter for the corresponding activity \" +\n                    \"or use the exported attribute for this activity. \"\n                    + \"tag=\"+ tag + \" intent=\" + intent, e);\n        }\n        return false;\n    }\n```\n前面说了，Launcher本身就是一个应用，通过阅读源码知道，Launcher类也是继承于Activity，到这里，startActivity()也就是和我们上篇博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)中startActivity是一样的，具体流程也是相同的，唯一不同的是在startSpecificActivityLocked()时，Launcher启动的Activity没有进程，需要新建应用进程\n。让我们来看看startSpecificActivityLocked()源码\n```java\n private final void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid);\n        \n        if (r.launchTime == 0) {\n            r.launchTime = SystemClock.uptimeMillis();\n            if (mInitialStartTime == 0) {\n                mInitialStartTime = r.launchTime;\n            }\n        } else if (mInitialStartTime == 0) {\n            mInitialStartTime = SystemClock.uptimeMillis();\n        }\n        \n        if (app != null && app.thread != null) {//Activity所在进程判断，进程存在时，直接启动Activity\n            try {\n                app.addPackage(r.info.packageName);\n\n                realStartActivityLocked(r, app, andResume, checkConfig);//核心代码\n\n                return;\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Exception when starting activity \"\n                        + r.intent.getComponent().flattenToShortString(), e);\n            }\n\n            // If a dead object exception was thrown -- fall through to\n            // restart the application.\n        }\n\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false);\n    }\n```\n因为从Launcher启动的Activity进程不存在，所以就会执行mService.startProcessLocked()来新建进程，其中mService为ActivityManagerService，我们来看看具体代码：\n```java\n    final ProcessRecord startProcessLocked(String processName,\n            ApplicationInfo info, boolean knownToBeDead, int intentFlags,\n            String hostingType, ComponentName hostingName, boolean allowWhileBooting,\n            boolean isolated) {\n        ProcessRecord app;\n        .......\n\n        if (app == null) {\n            app = newProcessRecordLocked(null, info, processName, isolated);\n            if (app == null) {\n                Slog.w(TAG, \"Failed making new process record for \"\n                        + processName + \"/\" + info.uid + \" isolated=\" + isolated);\n                return null;\n            }\n            mProcessNames.put(processName, app.uid, app);\n            if (isolated) {\n                mIsolatedProcesses.put(app.uid, app);\n            }\n        } else {\n            // If this is a new package in the process, add the package to the list\n            app.addPackage(info.packageName);\n        }\n        .......\n        startProcessLocked(app, hostingType, hostingNameStr);//核心代码\n        return (app.pid != 0) ? app : null;\n    }\n```\n在创建进程记录后，就会执行startProcessLocked(app, hostingType, hostingNameStr)来创建进程，我们继续\n```java\n  private final void startProcessLocked(ProcessRecord app,\n            String hostingType, String hostingNameStr) {\n        ......\n        \n        try {\n            .......\n\n            // Start the process.  It will either succeed and return a result containing\n            // the PID of the new process, or else throw a RuntimeException.\n\n            //核心代码，开始创建进程\n            Process.ProcessStartResult startResult = Process.start(\"android.app.ActivityThread\",\n                    app.processName, uid, uid, gids, debugFlags,\n                    app.info.targetSdkVersion, null);\n           ......\n        } catch (RuntimeException e) {\n          .......\n        }\n    }\n```\n这里Process.start()进程启动传入了ActivityThread类，我们知道ActivityThread类是应用的入口类，所以这里开始正式启动快捷图标的应用。关于Android应用程序的入口，我已写过一篇博文[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361),想了解的同学可以看看。让我们继续来看看Process中的start方法\n```java\n    public static final ProcessStartResult start(final String processClass,\n                                  final String niceName,\n                                  int uid, int gid, int[] gids,\n                                  int debugFlags, int targetSdkVersion,\n                                  String[] zygoteArgs) {\n        try {\n            return startViaZygote(processClass, niceName, uid, gid, gids,\n                    debugFlags, targetSdkVersion, zygoteArgs);\n        } catch (ZygoteStartFailedEx ex) {\n            Log.e(LOG_TAG,\n                    \"Starting VM process through Zygote failed\");\n            throw new RuntimeException(\n                    \"Starting VM process through Zygote failed\", ex);\n        }\n    }\n```\nstartViaZygote()从方法名中，我们知开始通过Zygote启动进程，我们继续看\n```java\n private static ProcessStartResult startViaZygote(final String processClass,\n                                  final String niceName,\n                                  final int uid, final int gid,\n                                  final int[] gids,\n                                  int debugFlags, int targetSdkVersion,\n                                  String[] extraArgs)\n                                  throws ZygoteStartFailedEx {\n        synchronized(Process.class) {\n            ArrayList<String> argsForZygote = new ArrayList<String>();\n\n            ......  \n\n            return zygoteSendArgsAndGetResult(argsForZygote);\n        }\n    }\n```\n我们继续看zygoteSendArgsAndGetResult()方法\n```java\n   private static ProcessStartResult zygoteSendArgsAndGetResult(ArrayList<String> args)\n            throws ZygoteStartFailedEx {\n        openZygoteSocketIfNeeded();\n\n        try {\n            sZygoteWriter.write(Integer.toString(args.size()));\n            sZygoteWriter.newLine();\n\n            int sz = args.size();\n            for (int i = 0; i < sz; i++) {\n                String arg = args.get(i);\n                if (arg.indexOf('\\n') >= 0) {\n                    throw new ZygoteStartFailedEx(\n                            \"embedded newlines not allowed\");\n                }\n                sZygoteWriter.write(arg);\n                sZygoteWriter.newLine();\n            }\n            sZygoteWriter.flush();\n            // Should there be a timeout on this?\n            ProcessStartResult result = new ProcessStartResult();\n            result.pid = sZygoteInputStream.readInt();\n            if (result.pid < 0) {\n                throw new ZygoteStartFailedEx(\"fork() failed\");\n            }\n            result.usingWrapper = sZygoteInputStream.readBoolean();\n            return result;\n        } catch (IOException ex) {\n            try {\n                if (sZygoteSocket != null) {\n                    sZygoteSocket.close();\n                }\n            } catch (IOException ex2) {\n                // we're going to fail anyway\n                Log.e(LOG_TAG,\"I/O exception on routine close\", ex2);\n            }\n\n            sZygoteSocket = null;\n            throw new ZygoteStartFailedEx(ex);\n        }\n    }\n```\n到这里就会执行Zygote的一些原生方法，通过对Zygote的机制的了解，我们知道Zygote会fork自身进程来创建应用进程，进而执行ActivityThread的main方法，初始化相关应用参数，我们来看看ActivityThread的main方法\n```java\n  public static void main(String[] args) {\n        SamplingProfilerIntegration.start();\n\n        // CloseGuard defaults to true and can be quite spammy.  We\n        // disable it here, but selectively enable it later (via\n        // StrictMode) on debug builds, but using DropBox, not logs.\n        CloseGuard.setEnabled(false);\n\n        Process.setArgV0(\"<pre-initialized>\");\n\n        Looper.prepareMainLooper();\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = new Handler();\n        }\n\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);//核心方法\n\n        AsyncTask.init();\n\n        if (false) {\n            Looper.myLooper().setMessageLogging(new\n                    LogPrinter(Log.DEBUG, \"ActivityThread\"));\n        }\n\n        Looper.loop();\n\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n    }\n```\n通过博文[Android消息机制源码解析(Handler)](http://blog.csdn.net/awenyini/article/details/78593139)知，Android的消息循环机制就是这个时候创建的，这里我们着重需要来看看ActivityThead的attach方法\n```java\n  private void attach(boolean system) {\n        sThreadLocal.set(this);\n        mSystemThread = system;\n        if (!system) {\n            ViewRootImpl.addFirstDrawHandler(new Runnable() {\n                public void run() {\n                    ensureJitEnabled();\n                }\n            });\n            android.ddm.DdmHandleAppName.setAppName(\"<pre-initialized>\");\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\n\n            //Binder通信机制\n            IActivityManager mgr = ActivityManagerNative.getDefault();\n            try {\n                mgr.attachApplication(mAppThread);\n            } catch (RemoteException ex) {\n                // Ignore\n            }\n        } else {\n           .......\n        }\n      .......\n        });\n    }\n```\n这里通过[Binder跨进程通信机制](http://blog.csdn.net/awenyini/article/details/78806893)调用了ActivityManagerService中的attachApplication()方法，我们继续\n```java\n    public final void attachApplication(IApplicationThread thread) {\n        synchronized (this) {\n            int callingPid = Binder.getCallingPid();\n            final long origId = Binder.clearCallingIdentity();\n\n            attachApplicationLocked(thread, callingPid);//核心方法\n\n            Binder.restoreCallingIdentity(origId);\n        }\n    }\n```\n我们继续看attachApplicationLocked()方法\n```java\n  private final boolean attachApplicationLocked(IApplicationThread thread,\n            int pid) {\n\n        // Find the application record that is being attached...  either via\n        // the pid if we are running in multiple processes, or just pull the\n        // next app record if we are emulating process with anonymous threads.\n        ProcessRecord app;\n        ......\n       \n        try {\n            ......\n            //1.建立应用Application\n            thread.bindApplication(processName, appInfo, providers,\n                    app.instrumentationClass, profileFile, profileFd, profileAutoStop,\n                    app.instrumentationArguments, app.instrumentationWatcher, testMode,\n                    enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,\n                    new Configuration(mConfiguration), app.compat, getCommonServicesLocked(),\n                    mCoreSettingsObserver.getCoreSettingsLocked());\n            updateLruProcessLocked(app, false, true);\n            app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();\n        } catch (Exception e) {\n           .....\n        }\n\n        .....\n\n        // See if the top visible activity is waiting to run in this process...\n        ActivityRecord hr = mMainStack.topRunningActivityLocked(null);\n\n        if (hr != null && normalMode) {\n            if (hr.app == null && app.uid == hr.info.applicationInfo.uid\n                    && processName.equals(hr.processName)) {\n                try {\n                    if (mHeadless) {\n                        Slog.e(TAG, \"Starting activities not supported on headless device: \" + hr);\n\n                    } else if (mMainStack.realStartActivityLocked(hr, app, true, true)) {//2.启动应用Activity\n\n                        didSomething = true;\n\n                    }\n                } catch (Exception e) {\n                    Slog.w(TAG, \"Exception in new application when starting activity \"\n                          + hr.intent.getComponent().flattenToShortString(), e);\n                    badApp = true;\n                }\n            } else {\n                mMainStack.ensureActivitiesVisibleLocked(hr, null, processName, 0);\n            }\n        }\n        ......\n\n        return true;\n    }\n```\n注释1处，在[Android应用程序入口源码解析](http://blog.csdn.net/awenyini/article/details/78619361)中，已经分析过，这里主要就是通过Binder跨进程通信，创建应用Application,执行Application的attachBaseContext和onCreate方法，两方法也为应用程序的开发入口。注释2处，调用了ActivitStack中realStartActivityLocked()方法，主要就是启动Activity，也即我们从Launcher点击应用快捷图标应用的入口Activity，在博文[Activity启动流程源码分析(应用中)](http://blog.csdn.net/awenyini/article/details/78906030)中，已经介绍过剩余的Activity的启动流程，这里就不再介绍了。想了解的同学，可以看一下上篇博文。\n\n到这里，从Launcher中启动Activity的流程就讲解完了。最后再附上Activity启动流程图：\n\n![](/assets/img/tech_activity_start_launcher_flow.png)\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Launcher开发——入门篇](https://www.jianshu.com/p/968e2339ee5f)\n\n[Android Activity启动流程源码全解析（2）](https://www.jianshu.com/p/067acea47ba6)\n\n\n\n\n","slug":"tech_android_framework_startactivity_launcher","published":1,"updated":"2019-06-27T08:15:15.317Z","photos":[],"link":"","_id":"cjxfjaesz0053ystg8iadixco","content":"<hr>\n<p>Activity的启动方式，严格来说有两种形式。第一种是在Android应用中启动,第二种是从Launcher中点击应用快捷图标启动。Android应用中Activity启动流程，在上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a>已介绍过了，想了解的同学，可以看看一下。本篇博文将会介绍从Launcher中启动Activity具体流程。</p>\n<p>在开始介绍之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ActivityThread：</strong> 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。</li>\n<li><strong>ApplicationThread：</strong> ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。</li>\n<li><strong>Instrumentation：</strong> ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。</li>\n<li><strong>ActivityManagerService(AMS)：</strong> Activity管理系统服务类，主要是对所有的Activity进行管理。</li>\n<li><strong>ActivityStack：</strong> Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。</li>\n</ul>\n<h1 id=\"一、什么是Launcher\"><a href=\"#一、什么是Launcher\" class=\"headerlink\" title=\"一、什么是Launcher?\"></a>一、什么是Launcher?</h1><p>通俗的来说，就是我们正常解锁后，进入的第一个界面，即桌面(HomeScreen)。Launcher本身就是一个app，它主要作用是用来显示widget和管理手机上其他应用软件app。通过查看源码，我们知道Android系统会内置一些系统应用，如Launcher，联系人、照相机等，并且在Android系统启动后，会自动启动Launcher，让用户可以通过Launcher启动其他应用。</p>\n<a id=\"more\"></a>\n<h1 id=\"二、Launcher中启动应用源码分析\"><a href=\"#二、Launcher中启动应用源码分析\" class=\"headerlink\" title=\"二、Launcher中启动应用源码分析\"></a>二、Launcher中启动应用源码分析</h1><p>Launcher中启动应用，也即是Launcher中启动Activity,因为每个应用都是由多个Activities组成的。下面我们就从Launcher源码开始分析：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createShortcut(R.layout.application,</div><div class=\"line\">            (ViewGroup) mWorkspace.getChildAt(mWorkspace.getCurrentPage()), info);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResId, ViewGroup parent, ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">    BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    favorite.applyFromShortcutInfo(info, mIconCache);</div><div class=\"line\">    favorite.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> favorite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在创建应用快捷图标的时候，都会给应用快捷图标View设置监听事件setOnClickListener(this),从这监听事件的设定，我们也就知道Launcher类实现了View.OnTouchListener接口，所以我们来看看Onclick()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      .......</div><div class=\"line\">      Object tag = v.getTag();</div><div class=\"line\">      <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> ShortcutInfo) &#123;</div><div class=\"line\">          <span class=\"comment\">// Open shortcut</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class=\"line\">          <span class=\"keyword\">int</span>[] pos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">          v.getLocationOnScreen(pos);</div><div class=\"line\">          intent.setSourceBounds(<span class=\"keyword\">new</span> Rect(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>],</div><div class=\"line\">                  pos[<span class=\"number\">0</span>] + v.getWidth(), pos[<span class=\"number\">1</span>] + v.getHeight()));</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">boolean</span> success = startActivitySafely(v, intent, tag);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (success &amp;&amp; v <span class=\"keyword\">instanceof</span> BubbleTextView) &#123;</div><div class=\"line\">              mWaitingForResume = (BubbleTextView) v;</div><div class=\"line\">              mWaitingForResume.setStayPressed(<span class=\"keyword\">true</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> FolderInfo) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> FolderIcon) &#123;</div><div class=\"line\">              FolderIcon fi = (FolderIcon) v;</div><div class=\"line\">              handleFolderClick(fi);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v == mAllAppsButton) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mState == State.APPS_CUSTOMIZE) &#123;</div><div class=\"line\">              showWorkspace(<span class=\"keyword\">true</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              onClickAllAppsButton(v);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>点击应用快捷图标，就会执行onClick(),然后就会调用startActivitySafely方法，我们继续来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivitySafely</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        success = startActivity(v, intent, tag);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Unable to launch. tag=\"</span> + tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> success;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里就开始startActivity了，我们继续看这方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivity</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Only launch using the new animation if the shortcut has not opted out (this is a</span></div><div class=\"line\">        <span class=\"comment\">// private contract between launcher and may be ignored in the future).</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> useLaunchAnimation = (v != <span class=\"keyword\">null</span>) &amp;&amp;</div><div class=\"line\">                !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);</div><div class=\"line\">        <span class=\"keyword\">if</span> (useLaunchAnimation) &#123;</div><div class=\"line\">            ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">                    v.getMeasuredWidth(), v.getMeasuredHeight());</div><div class=\"line\"></div><div class=\"line\">            startActivity(intent, opts.toBundle());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            startActivity(intent);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Launcher does not have the permission to launch \"</span> + intent +</div><div class=\"line\">                <span class=\"string\">\". Make sure to create a MAIN intent-filter for the corresponding activity \"</span> +</div><div class=\"line\">                <span class=\"string\">\"or use the exported attribute for this activity. \"</span></div><div class=\"line\">                + <span class=\"string\">\"tag=\"</span>+ tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前面说了，Launcher本身就是一个应用，通过阅读源码知道，Launcher类也是继承于Activity，到这里，startActivity()也就是和我们上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a>中startActivity是一样的，具体流程也是相同的，唯一不同的是在startSpecificActivityLocked()时，Launcher启动的Activity没有进程，需要新建应用进程<br>。让我们来看看startSpecificActivityLocked()源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) &#123;</div><div class=\"line\">       <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">       ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">               r.info.applicationInfo.uid);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (r.launchTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           r.launchTime = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               mInitialStartTime = r.launchTime;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mInitialStartTime = SystemClock.uptimeMillis();</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//Activity所在进程判断，进程存在时，直接启动Activity</span></div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               app.addPackage(r.info.packageName);</div><div class=\"line\"></div><div class=\"line\">               realStartActivityLocked(r, app, andResume, checkConfig);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                       + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">           <span class=\"comment\">// restart the application.</span></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">               <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>因为从Launcher启动的Activity进程不存在，所以就会执行mService.startProcessLocked()来新建进程，其中mService为ActivityManagerService，我们来看看具体代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">startProcessLocked</span><span class=\"params\">(String processName,</span></span></div><div class=\"line\">        ApplicationInfo info, <span class=\"keyword\">boolean</span> knownToBeDead, <span class=\"keyword\">int</span> intentFlags,</div><div class=\"line\">        String hostingType, ComponentName hostingName, <span class=\"keyword\">boolean</span> allowWhileBooting,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> isolated) &#123;</div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    .......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        app = newProcessRecordLocked(<span class=\"keyword\">null</span>, info, processName, isolated);</div><div class=\"line\">        <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Failed making new process record for \"</span></div><div class=\"line\">                    + processName + <span class=\"string\">\"/\"</span> + info.uid + <span class=\"string\">\" isolated=\"</span> + isolated);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mProcessNames.put(processName, app.uid, app);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isolated) &#123;</div><div class=\"line\">            mIsolatedProcesses.put(app.uid, app);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// If this is a new package in the process, add the package to the list</span></div><div class=\"line\">        app.addPackage(info.packageName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">    startProcessLocked(app, hostingType, hostingNameStr);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (app.pid != <span class=\"number\">0</span>) ? app : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在创建进程记录后，就会执行startProcessLocked(app, hostingType, hostingNameStr)来创建进程，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app,</span></span></div><div class=\"line\">          String hostingType, String hostingNameStr) &#123;</div><div class=\"line\">      ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          .......</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">          <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//核心代码，开始创建进程</span></div><div class=\"line\">          Process.ProcessStartResult startResult = Process.start(<span class=\"string\">\"android.app.ActivityThread\"</span>,</div><div class=\"line\">                  app.processName, uid, uid, gids, debugFlags,</div><div class=\"line\">                  app.info.targetSdkVersion, <span class=\"keyword\">null</span>);</div><div class=\"line\">         ......</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        .......</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里Process.start()进程启动传入了ActivityThread类，我们知道ActivityThread类是应用的入口类，所以这里开始正式启动快捷图标的应用。关于Android应用程序的入口，我已写过一篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\" target=\"_blank\" rel=\"external\">Android应用程序入口源码解析</a>,想了解的同学可以看看。让我们继续来看看Process中的start方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ProcessStartResult <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">final</span> String processClass,</span></span></div><div class=\"line\">                              <span class=\"keyword\">final</span> String niceName,</div><div class=\"line\">                              <span class=\"keyword\">int</span> uid, <span class=\"keyword\">int</span> gid, <span class=\"keyword\">int</span>[] gids,</div><div class=\"line\">                              <span class=\"keyword\">int</span> debugFlags, <span class=\"keyword\">int</span> targetSdkVersion,</div><div class=\"line\">                              String[] zygoteArgs) &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startViaZygote(processClass, niceName, uid, gid, gids,</div><div class=\"line\">                debugFlags, targetSdkVersion, zygoteArgs);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZygoteStartFailedEx ex) &#123;</div><div class=\"line\">        Log.e(LOG_TAG,</div><div class=\"line\">                <span class=\"string\">\"Starting VM process through Zygote failed\"</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Starting VM process through Zygote failed\"</span>, ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>startViaZygote()从方法名中，我们知开始通过Zygote启动进程，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ProcessStartResult <span class=\"title\">startViaZygote</span><span class=\"params\">(<span class=\"keyword\">final</span> String processClass,</span></span></div><div class=\"line\">                                 <span class=\"keyword\">final</span> String niceName,</div><div class=\"line\">                                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> uid, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> gid,</div><div class=\"line\">                                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] gids,</div><div class=\"line\">                                 <span class=\"keyword\">int</span> debugFlags, <span class=\"keyword\">int</span> targetSdkVersion,</div><div class=\"line\">                                 String[] extraArgs)</div><div class=\"line\">                                 <span class=\"keyword\">throws</span> ZygoteStartFailedEx &#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span>(Process.class) &#123;</div><div class=\"line\">           ArrayList&lt;String&gt; argsForZygote = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">           ......  </div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> zygoteSendArgsAndGetResult(argsForZygote);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看zygoteSendArgsAndGetResult()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ProcessStartResult <span class=\"title\">zygoteSendArgsAndGetResult</span><span class=\"params\">(ArrayList&lt;String&gt; args)</span></span></div><div class=\"line\">         <span class=\"keyword\">throws</span> ZygoteStartFailedEx &#123;</div><div class=\"line\">     openZygoteSocketIfNeeded();</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         sZygoteWriter.write(Integer.toString(args.size()));</div><div class=\"line\">         sZygoteWriter.newLine();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">int</span> sz = args.size();</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++) &#123;</div><div class=\"line\">             String arg = args.get(i);</div><div class=\"line\">             <span class=\"keyword\">if</span> (arg.indexOf(<span class=\"string\">'\\n'</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                 <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(</div><div class=\"line\">                         <span class=\"string\">\"embedded newlines not allowed\"</span>);</div><div class=\"line\">             &#125;</div><div class=\"line\">             sZygoteWriter.write(arg);</div><div class=\"line\">             sZygoteWriter.newLine();</div><div class=\"line\">         &#125;</div><div class=\"line\">         sZygoteWriter.flush();</div><div class=\"line\">         <span class=\"comment\">// Should there be a timeout on this?</span></div><div class=\"line\">         ProcessStartResult result = <span class=\"keyword\">new</span> ProcessStartResult();</div><div class=\"line\">         result.pid = sZygoteInputStream.readInt();</div><div class=\"line\">         <span class=\"keyword\">if</span> (result.pid &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(<span class=\"string\">\"fork() failed\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         result.usingWrapper = sZygoteInputStream.readBoolean();</div><div class=\"line\">         <span class=\"keyword\">return</span> result;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (sZygoteSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 sZygoteSocket.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException ex2) &#123;</div><div class=\"line\">             <span class=\"comment\">// we're going to fail anyway</span></div><div class=\"line\">             Log.e(LOG_TAG,<span class=\"string\">\"I/O exception on routine close\"</span>, ex2);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         sZygoteSocket = <span class=\"keyword\">null</span>;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(ex);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>到这里就会执行Zygote的一些原生方法，通过对Zygote的机制的了解，我们知道Zygote会fork自身进程来创建应用进程，进而执行ActivityThread的main方法，初始化相关应用参数，我们来看看ActivityThread的main方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">      <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">      <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">      CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">      Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">      Looper.prepareMainLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">      thread.attach(<span class=\"keyword\">false</span>);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">      AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">          Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                  LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      Looper.loop();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过博文<a href=\"http://blog.csdn.net/awenyini/article/details/78593139\" target=\"_blank\" rel=\"external\">Android消息机制源码解析(Handler)</a>知，Android的消息循环机制就是这个时候创建的，这里我们着重需要来看看ActivityThead的attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">      sThreadLocal.set(<span class=\"keyword\">this</span>);</div><div class=\"line\">      mSystemThread = system;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">          ViewRootImpl.addFirstDrawHandler(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                  ensureJitEnabled();</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">          android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">          RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//Binder通信机制</span></div><div class=\"line\">          IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              mgr.attachApplication(mAppThread);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">              <span class=\"comment\">// Ignore</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         .......</div><div class=\"line\">      &#125;</div><div class=\"line\">    .......</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里通过<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\" target=\"_blank\" rel=\"external\">Binder跨进程通信机制</a>调用了ActivityManagerService中的attachApplication()方法，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        attachApplicationLocked(thread, callingPid);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看attachApplicationLocked()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</span></span></div><div class=\"line\">          <span class=\"keyword\">int</span> pid) &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Find the application record that is being attached...  either via</span></div><div class=\"line\">      <span class=\"comment\">// the pid if we are running in multiple processes, or just pull the</span></div><div class=\"line\">      <span class=\"comment\">// next app record if we are emulating process with anonymous threads.</span></div><div class=\"line\">      ProcessRecord app;</div><div class=\"line\">      ......</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          ......</div><div class=\"line\">          <span class=\"comment\">//1.建立应用Application</span></div><div class=\"line\">          thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                  app.instrumentationClass, profileFile, profileFd, profileAutoStop,</div><div class=\"line\">                  app.instrumentationArguments, app.instrumentationWatcher, testMode,</div><div class=\"line\">                  enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                  <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat, getCommonServicesLocked(),</div><div class=\"line\">                  mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">          updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">          app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      .....</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// See if the top visible activity is waiting to run in this process...</span></div><div class=\"line\">      ActivityRecord hr = mMainStack.topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (hr != <span class=\"keyword\">null</span> &amp;&amp; normalMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (hr.app == <span class=\"keyword\">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class=\"line\">                  &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class=\"line\">              <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (mHeadless) &#123;</div><div class=\"line\">                      Slog.e(TAG, <span class=\"string\">\"Starting activities not supported on headless device: \"</span> + hr);</div><div class=\"line\"></div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mMainStack.realStartActivityLocked(hr, app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>)) &#123;<span class=\"comment\">//2.启动应用Activity</span></div><div class=\"line\"></div><div class=\"line\">                      didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                  Slog.w(TAG, <span class=\"string\">\"Exception in new application when starting activity \"</span></div><div class=\"line\">                        + hr.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">                  badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              mMainStack.ensureActivitiesVisibleLocked(hr, <span class=\"keyword\">null</span>, processName, <span class=\"number\">0</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，在<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\" target=\"_blank\" rel=\"external\">Android应用程序入口源码解析</a>中，已经分析过，这里主要就是通过Binder跨进程通信，创建应用Application,执行Application的attachBaseContext和onCreate方法，两方法也为应用程序的开发入口。注释2处，调用了ActivitStack中realStartActivityLocked()方法，主要就是启动Activity，也即我们从Launcher点击应用快捷图标应用的入口Activity，在博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(应用中)</a>中，已经介绍过剩余的Activity的启动流程，这里就不再介绍了。想了解的同学，可以看一下上篇博文。</p>\n<p>到这里，从Launcher中启动Activity的流程就讲解完了。最后再附上Activity启动流程图：</p>\n<p><img src=\"/assets/img/tech_activity_start_launcher_flow.png\" alt=\"\"></p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"https://www.jianshu.com/p/968e2339ee5f\" target=\"_blank\" rel=\"external\">Launcher开发——入门篇</a></p>\n<p><a href=\"https://www.jianshu.com/p/067acea47ba6\" target=\"_blank\" rel=\"external\">Android Activity启动流程源码全解析（2）</a></p>\n","excerpt":"<hr>\n<p>Activity的启动方式，严格来说有两种形式。第一种是在Android应用中启动,第二种是从Launcher中点击应用快捷图标启动。Android应用中Activity启动流程，在上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a>已介绍过了，想了解的同学，可以看看一下。本篇博文将会介绍从Launcher中启动Activity具体流程。</p>\n<p>在开始介绍之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ActivityThread：</strong> 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。</li>\n<li><strong>ApplicationThread：</strong> ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。</li>\n<li><strong>Instrumentation：</strong> ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。</li>\n<li><strong>ActivityManagerService(AMS)：</strong> Activity管理系统服务类，主要是对所有的Activity进行管理。</li>\n<li><strong>ActivityStack：</strong> Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。</li>\n</ul>\n<h1 id=\"一、什么是Launcher\"><a href=\"#一、什么是Launcher\" class=\"headerlink\" title=\"一、什么是Launcher?\"></a>一、什么是Launcher?</h1><p>通俗的来说，就是我们正常解锁后，进入的第一个界面，即桌面(HomeScreen)。Launcher本身就是一个app，它主要作用是用来显示widget和管理手机上其他应用软件app。通过查看源码，我们知道Android系统会内置一些系统应用，如Launcher，联系人、照相机等，并且在Android系统启动后，会自动启动Launcher，让用户可以通过Launcher启动其他应用。</p>","more":"<h1 id=\"二、Launcher中启动应用源码分析\"><a href=\"#二、Launcher中启动应用源码分析\" class=\"headerlink\" title=\"二、Launcher中启动应用源码分析\"></a>二、Launcher中启动应用源码分析</h1><p>Launcher中启动应用，也即是Launcher中启动Activity,因为每个应用都是由多个Activities组成的。下面我们就从Launcher源码开始分析：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> createShortcut(R.layout.application,</div><div class=\"line\">            (ViewGroup) mWorkspace.getChildAt(mWorkspace.getCurrentPage()), info);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">View <span class=\"title\">createShortcut</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResId, ViewGroup parent, ShortcutInfo info)</span> </span>&#123;</div><div class=\"line\">    BubbleTextView favorite = (BubbleTextView) mInflater.inflate(layoutResId, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">    favorite.applyFromShortcutInfo(info, mIconCache);</div><div class=\"line\">    favorite.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> favorite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在创建应用快捷图标的时候，都会给应用快捷图标View设置监听事件setOnClickListener(this),从这监听事件的设定，我们也就知道Launcher类实现了View.OnTouchListener接口，所以我们来看看Onclick()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">      .......</div><div class=\"line\">      Object tag = v.getTag();</div><div class=\"line\">      <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> ShortcutInfo) &#123;</div><div class=\"line\">          <span class=\"comment\">// Open shortcut</span></div><div class=\"line\">          <span class=\"keyword\">final</span> Intent intent = ((ShortcutInfo) tag).intent;</div><div class=\"line\">          <span class=\"keyword\">int</span>[] pos = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">          v.getLocationOnScreen(pos);</div><div class=\"line\">          intent.setSourceBounds(<span class=\"keyword\">new</span> Rect(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>],</div><div class=\"line\">                  pos[<span class=\"number\">0</span>] + v.getWidth(), pos[<span class=\"number\">1</span>] + v.getHeight()));</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">boolean</span> success = startActivitySafely(v, intent, tag);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (success &amp;&amp; v <span class=\"keyword\">instanceof</span> BubbleTextView) &#123;</div><div class=\"line\">              mWaitingForResume = (BubbleTextView) v;</div><div class=\"line\">              mWaitingForResume.setStayPressed(<span class=\"keyword\">true</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag <span class=\"keyword\">instanceof</span> FolderInfo) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (v <span class=\"keyword\">instanceof</span> FolderIcon) &#123;</div><div class=\"line\">              FolderIcon fi = (FolderIcon) v;</div><div class=\"line\">              handleFolderClick(fi);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v == mAllAppsButton) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mState == State.APPS_CUSTOMIZE) &#123;</div><div class=\"line\">              showWorkspace(<span class=\"keyword\">true</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              onClickAllAppsButton(v);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>点击应用快捷图标，就会执行onClick(),然后就会调用startActivitySafely方法，我们继续来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivitySafely</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> success = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        success = startActivity(v, intent, tag);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Unable to launch. tag=\"</span> + tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> success;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里就开始startActivity了，我们继续看这方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startActivity</span><span class=\"params\">(View v, Intent intent, Object tag)</span> </span>&#123;</div><div class=\"line\">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Only launch using the new animation if the shortcut has not opted out (this is a</span></div><div class=\"line\">        <span class=\"comment\">// private contract between launcher and may be ignored in the future).</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> useLaunchAnimation = (v != <span class=\"keyword\">null</span>) &amp;&amp;</div><div class=\"line\">                !intent.hasExtra(INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION);</div><div class=\"line\">        <span class=\"keyword\">if</span> (useLaunchAnimation) &#123;</div><div class=\"line\">            ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">                    v.getMeasuredWidth(), v.getMeasuredHeight());</div><div class=\"line\"></div><div class=\"line\">            startActivity(intent, opts.toBundle());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            startActivity(intent);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</div><div class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, R.string.activity_not_found, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Launcher does not have the permission to launch \"</span> + intent +</div><div class=\"line\">                <span class=\"string\">\". Make sure to create a MAIN intent-filter for the corresponding activity \"</span> +</div><div class=\"line\">                <span class=\"string\">\"or use the exported attribute for this activity. \"</span></div><div class=\"line\">                + <span class=\"string\">\"tag=\"</span>+ tag + <span class=\"string\">\" intent=\"</span> + intent, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前面说了，Launcher本身就是一个应用，通过阅读源码知道，Launcher类也是继承于Activity，到这里，startActivity()也就是和我们上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a>中startActivity是一样的，具体流程也是相同的，唯一不同的是在startSpecificActivityLocked()时，Launcher启动的Activity没有进程，需要新建应用进程<br>。让我们来看看startSpecificActivityLocked()源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">       ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">               r.info.applicationInfo.uid);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (r.launchTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           r.launchTime = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               mInitialStartTime = r.launchTime;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mInitialStartTime = SystemClock.uptimeMillis();</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//Activity所在进程判断，进程存在时，直接启动Activity</span></div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               app.addPackage(r.info.packageName);</div><div class=\"line\"></div><div class=\"line\">               realStartActivityLocked(r, app, andResume, checkConfig);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                       + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">           <span class=\"comment\">// restart the application.</span></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">               <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>因为从Launcher启动的Activity进程不存在，所以就会执行mService.startProcessLocked()来新建进程，其中mService为ActivityManagerService，我们来看看具体代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> ProcessRecord <span class=\"title\">startProcessLocked</span><span class=\"params\">(String processName,</div><div class=\"line\">        ApplicationInfo info, <span class=\"keyword\">boolean</span> knownToBeDead, <span class=\"keyword\">int</span> intentFlags,</div><div class=\"line\">        String hostingType, ComponentName hostingName, <span class=\"keyword\">boolean</span> allowWhileBooting,</div><div class=\"line\">        <span class=\"keyword\">boolean</span> isolated)</span> </span>&#123;</div><div class=\"line\">    ProcessRecord app;</div><div class=\"line\">    .......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        app = newProcessRecordLocked(<span class=\"keyword\">null</span>, info, processName, isolated);</div><div class=\"line\">        <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Slog.w(TAG, <span class=\"string\">\"Failed making new process record for \"</span></div><div class=\"line\">                    + processName + <span class=\"string\">\"/\"</span> + info.uid + <span class=\"string\">\" isolated=\"</span> + isolated);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mProcessNames.put(processName, app.uid, app);</div><div class=\"line\">        <span class=\"keyword\">if</span> (isolated) &#123;</div><div class=\"line\">            mIsolatedProcesses.put(app.uid, app);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// If this is a new package in the process, add the package to the list</span></div><div class=\"line\">        app.addPackage(info.packageName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\">    startProcessLocked(app, hostingType, hostingNameStr);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (app.pid != <span class=\"number\">0</span>) ? app : <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在创建进程记录后，就会执行startProcessLocked(app, hostingType, hostingNameStr)来创建进程，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startProcessLocked</span><span class=\"params\">(ProcessRecord app,</div><div class=\"line\">          String hostingType, String hostingNameStr)</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          .......</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Start the process.  It will either succeed and return a result containing</span></div><div class=\"line\">          <span class=\"comment\">// the PID of the new process, or else throw a RuntimeException.</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//核心代码，开始创建进程</span></div><div class=\"line\">          Process.ProcessStartResult startResult = Process.start(<span class=\"string\">\"android.app.ActivityThread\"</span>,</div><div class=\"line\">                  app.processName, uid, uid, gids, debugFlags,</div><div class=\"line\">                  app.info.targetSdkVersion, <span class=\"keyword\">null</span>);</div><div class=\"line\">         ......</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        .......</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里Process.start()进程启动传入了ActivityThread类，我们知道ActivityThread类是应用的入口类，所以这里开始正式启动快捷图标的应用。关于Android应用程序的入口，我已写过一篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\">Android应用程序入口源码解析</a>,想了解的同学可以看看。让我们继续来看看Process中的start方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ProcessStartResult <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">final</span> String processClass,</div><div class=\"line\">                              <span class=\"keyword\">final</span> String niceName,</div><div class=\"line\">                              <span class=\"keyword\">int</span> uid, <span class=\"keyword\">int</span> gid, <span class=\"keyword\">int</span>[] gids,</div><div class=\"line\">                              <span class=\"keyword\">int</span> debugFlags, <span class=\"keyword\">int</span> targetSdkVersion,</div><div class=\"line\">                              String[] zygoteArgs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startViaZygote(processClass, niceName, uid, gid, gids,</div><div class=\"line\">                debugFlags, targetSdkVersion, zygoteArgs);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ZygoteStartFailedEx ex) &#123;</div><div class=\"line\">        Log.e(LOG_TAG,</div><div class=\"line\">                <span class=\"string\">\"Starting VM process through Zygote failed\"</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Starting VM process through Zygote failed\"</span>, ex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>startViaZygote()从方法名中，我们知开始通过Zygote启动进程，我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ProcessStartResult <span class=\"title\">startViaZygote</span><span class=\"params\">(<span class=\"keyword\">final</span> String processClass,</div><div class=\"line\">                                 <span class=\"keyword\">final</span> String niceName,</div><div class=\"line\">                                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> uid, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> gid,</div><div class=\"line\">                                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] gids,</div><div class=\"line\">                                 <span class=\"keyword\">int</span> debugFlags, <span class=\"keyword\">int</span> targetSdkVersion,</div><div class=\"line\">                                 String[] extraArgs)</span></div><div class=\"line\">                                 <span class=\"keyword\">throws</span> ZygoteStartFailedEx </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span>(Process.class) &#123;</div><div class=\"line\">           ArrayList&lt;String&gt; argsForZygote = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">           ......  </div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> zygoteSendArgsAndGetResult(argsForZygote);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看zygoteSendArgsAndGetResult()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ProcessStartResult <span class=\"title\">zygoteSendArgsAndGetResult</span><span class=\"params\">(ArrayList&lt;String&gt; args)</span></div><div class=\"line\">         <span class=\"keyword\">throws</span> ZygoteStartFailedEx </span>&#123;</div><div class=\"line\">     openZygoteSocketIfNeeded();</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         sZygoteWriter.write(Integer.toString(args.size()));</div><div class=\"line\">         sZygoteWriter.newLine();</div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">int</span> sz = args.size();</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++) &#123;</div><div class=\"line\">             String arg = args.get(i);</div><div class=\"line\">             <span class=\"keyword\">if</span> (arg.indexOf(<span class=\"string\">'\\n'</span>) &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                 <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(</div><div class=\"line\">                         <span class=\"string\">\"embedded newlines not allowed\"</span>);</div><div class=\"line\">             &#125;</div><div class=\"line\">             sZygoteWriter.write(arg);</div><div class=\"line\">             sZygoteWriter.newLine();</div><div class=\"line\">         &#125;</div><div class=\"line\">         sZygoteWriter.flush();</div><div class=\"line\">         <span class=\"comment\">// Should there be a timeout on this?</span></div><div class=\"line\">         ProcessStartResult result = <span class=\"keyword\">new</span> ProcessStartResult();</div><div class=\"line\">         result.pid = sZygoteInputStream.readInt();</div><div class=\"line\">         <span class=\"keyword\">if</span> (result.pid &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(<span class=\"string\">\"fork() failed\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         result.usingWrapper = sZygoteInputStream.readBoolean();</div><div class=\"line\">         <span class=\"keyword\">return</span> result;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (sZygoteSocket != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 sZygoteSocket.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException ex2) &#123;</div><div class=\"line\">             <span class=\"comment\">// we're going to fail anyway</span></div><div class=\"line\">             Log.e(LOG_TAG,<span class=\"string\">\"I/O exception on routine close\"</span>, ex2);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         sZygoteSocket = <span class=\"keyword\">null</span>;</div><div class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ZygoteStartFailedEx(ex);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>到这里就会执行Zygote的一些原生方法，通过对Zygote的机制的了解，我们知道Zygote会fork自身进程来创建应用进程，进而执行ActivityThread的main方法，初始化相关应用参数，我们来看看ActivityThread的main方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      SamplingProfilerIntegration.start();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class=\"line\">      <span class=\"comment\">// disable it here, but selectively enable it later (via</span></div><div class=\"line\">      <span class=\"comment\">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class=\"line\">      CloseGuard.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">      Process.setArgV0(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">      Looper.prepareMainLooper();</div><div class=\"line\">      <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          sMainThreadHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">      thread.attach(<span class=\"keyword\">false</span>);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">      AsyncTask.init();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">false</span>) &#123;</div><div class=\"line\">          Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span></div><div class=\"line\">                  LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      Looper.loop();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过博文<a href=\"http://blog.csdn.net/awenyini/article/details/78593139\">Android消息机制源码解析(Handler)</a>知，Android的消息循环机制就是这个时候创建的，这里我们着重需要来看看ActivityThead的attach方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(<span class=\"keyword\">boolean</span> system)</span> </span>&#123;</div><div class=\"line\">      sThreadLocal.set(<span class=\"keyword\">this</span>);</div><div class=\"line\">      mSystemThread = system;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!system) &#123;</div><div class=\"line\">          ViewRootImpl.addFirstDrawHandler(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                  ensureJitEnabled();</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">          android.ddm.DdmHandleAppName.setAppName(<span class=\"string\">\"&lt;pre-initialized&gt;\"</span>);</div><div class=\"line\">          RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//Binder通信机制</span></div><div class=\"line\">          IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              mgr.attachApplication(mAppThread);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">              <span class=\"comment\">// Ignore</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         .......</div><div class=\"line\">      &#125;</div><div class=\"line\">    .......</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里通过<a href=\"http://blog.csdn.net/awenyini/article/details/78806893\">Binder跨进程通信机制</a>调用了ActivityManagerService中的attachApplication()方法，我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attachApplication</span><span class=\"params\">(IApplicationThread thread)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> callingPid = Binder.getCallingPid();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> origId = Binder.clearCallingIdentity();</div><div class=\"line\"></div><div class=\"line\">        attachApplicationLocked(thread, callingPid);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">        Binder.restoreCallingIdentity(origId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看attachApplicationLocked()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">attachApplicationLocked</span><span class=\"params\">(IApplicationThread thread,</div><div class=\"line\">          <span class=\"keyword\">int</span> pid)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Find the application record that is being attached...  either via</span></div><div class=\"line\">      <span class=\"comment\">// the pid if we are running in multiple processes, or just pull the</span></div><div class=\"line\">      <span class=\"comment\">// next app record if we are emulating process with anonymous threads.</span></div><div class=\"line\">      ProcessRecord app;</div><div class=\"line\">      ......</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          ......</div><div class=\"line\">          <span class=\"comment\">//1.建立应用Application</span></div><div class=\"line\">          thread.bindApplication(processName, appInfo, providers,</div><div class=\"line\">                  app.instrumentationClass, profileFile, profileFd, profileAutoStop,</div><div class=\"line\">                  app.instrumentationArguments, app.instrumentationWatcher, testMode,</div><div class=\"line\">                  enableOpenGlTrace, isRestrictedBackupMode || !normalMode, app.persistent,</div><div class=\"line\">                  <span class=\"keyword\">new</span> Configuration(mConfiguration), app.compat, getCommonServicesLocked(),</div><div class=\"line\">                  mCoreSettingsObserver.getCoreSettingsLocked());</div><div class=\"line\">          updateLruProcessLocked(app, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">          app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      .....</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// See if the top visible activity is waiting to run in this process...</span></div><div class=\"line\">      ActivityRecord hr = mMainStack.topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (hr != <span class=\"keyword\">null</span> &amp;&amp; normalMode) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (hr.app == <span class=\"keyword\">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class=\"line\">                  &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class=\"line\">              <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (mHeadless) &#123;</div><div class=\"line\">                      Slog.e(TAG, <span class=\"string\">\"Starting activities not supported on headless device: \"</span> + hr);</div><div class=\"line\"></div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mMainStack.realStartActivityLocked(hr, app, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>)) &#123;<span class=\"comment\">//2.启动应用Activity</span></div><div class=\"line\"></div><div class=\"line\">                      didSomething = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                  Slog.w(TAG, <span class=\"string\">\"Exception in new application when starting activity \"</span></div><div class=\"line\">                        + hr.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">                  badApp = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              mMainStack.ensureActivitiesVisibleLocked(hr, <span class=\"keyword\">null</span>, processName, <span class=\"number\">0</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，在<a href=\"http://blog.csdn.net/awenyini/article/details/78619361\">Android应用程序入口源码解析</a>中，已经分析过，这里主要就是通过Binder跨进程通信，创建应用Application,执行Application的attachBaseContext和onCreate方法，两方法也为应用程序的开发入口。注释2处，调用了ActivitStack中realStartActivityLocked()方法，主要就是启动Activity，也即我们从Launcher点击应用快捷图标应用的入口Activity，在博文<a href=\"http://blog.csdn.net/awenyini/article/details/78906030\">Activity启动流程源码分析(应用中)</a>中，已经介绍过剩余的Activity的启动流程，这里就不再介绍了。想了解的同学，可以看一下上篇博文。</p>\n<p>到这里，从Launcher中启动Activity的流程就讲解完了。最后再附上Activity启动流程图：</p>\n<p><img src=\"/assets/img/tech_activity_start_launcher_flow.png\" alt=\"\"></p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"https://www.jianshu.com/p/968e2339ee5f\">Launcher开发——入门篇</a></p>\n<p><a href=\"https://www.jianshu.com/p/067acea47ba6\">Android Activity启动流程源码全解析（2）</a></p>"},{"layout":"post","title":"Android事件分发机制源码分析","date":"2018-01-09T11:17:17.000Z","comments":1,"_content":"---\n昨天我们对[View绘制三大流程源码](http://blog.csdn.net/awenyini/article/details/79006432)已做了深入分析，所以关于View的绘制流程，我相信大家也有了一个大致的了解(如果不了解，请回看博文)。然而对于View，还有一个知识点，也是极其重要的，那就是View的事件分发机制(也即Android事件分发机制)。所以，今天我们就来谈谈View的事件分发机制，从源码的角度，跟随Touch事件流，走一遍流程。\n\n在开始分析之前，我们需要了解一些概念，如一次Touch事件，可能包括下面三个事件：\n\n- **MotionEvent.ACTION_DOWN：** 表示手指按下事件，一个事件的开始。\n- **MotionEvent.ACTION_MOVE：** 表示手指移动事件，事件的持续移动。\n- **MotionEvent.ACTION_UP：** 表示手指抬起事件，一个事件的结束。\n\n# 一、View事件分发流程图\n在具体分析之前，我们先来看一下事件分发流程图，以便我们更好的理解内容。图如下\n\n<!-- more -->\n\n![](/assets/img/tech_android_dispatch_event_flow.png)\n\n# 二、View事件分发机制分析\n由Android系统的启动，Lancher系统的启动相关知识，我们知道，当我们点击手机屏幕，主要是通过硬件传感器传输事件，传感器会将其Touch事件传给我们界面使者Activity。当事件传给Activity后，Activity会进行事件分发，会调用Activity的dispatchTouchEvent()方法进行事件分发，我们就从此方法开始来分析。我们来看具体源码\n```java\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {//1.\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {//2.事件继续分发\n            return true;\n        }\n        return onTouchEvent(ev);//3.Activity自身onTouchEvent()方法\n    }\n```\n在注释1处，主要对事件进行判断，当Touch事件为MotionEvent.ACTION_DOWN事件时，会执行onUserInteraction()方法，查看源码发现，此方法是一个空方法。主要作用就是当各种事件key，touch或trackball分发到Activity时，都会执行此方法。\n\n我们先来看注释3，当事件都没有被消费，及getWindow().superDispatchTouchEvent(ev)返回falses时，就会调用Activity自己的onTouchEvent()方法，自己对事件进行消费。\n\n我们再来看注释2，getWindow().superDispatchTouchEvent(ev)，从[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)中，我们知道getWindow()返回的是PhoneWindow,所以我们来看看PhoneWindow中的superDispatchTouchEvent()方法\n```java\n    @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n```\n由[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)，我们也知，mDecor就是DecorView，所以我们继续来看DecorView中的superDispatchTouchEvent()方法\n```java\n        public boolean superDispatchTouchEvent(MotionEvent event) {\n            return super.dispatchTouchEvent(event);\n        }\n```\n由[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)博文，我们知道，DecorView继承于FrameLayout,FrameLayout由继承于ViewGroup,ViewGroup又继承于View。通过分析相互关系，知最后调用的是ViewGroup的dispatchTouchEvent()方法(FrameLayout没有实现此方法)，所以我们继续来看看ViewGroup中的方法\n```java\n   @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(ev, 1);\n        }\n\n        boolean handled = false;\n        if (onFilterTouchEventForSecurity(ev)) {//1.过滤Touch事件\n            final int action = ev.getAction();\n            final int actionMasked = action & MotionEvent.ACTION_MASK;\n\n            //初始化down事件\n            if (actionMasked == MotionEvent.ACTION_DOWN) {\n                \n                cancelAndClearTouchTargets(ev);//清除前一个事件的目标及事件状态\n                resetTouchState();//重置事件状态\n            }\n\n            // 检测是否拦截事件\n            final boolean intercepted;\n            if (actionMasked == MotionEvent.ACTION_DOWN\n                    || mFirstTouchTarget != null) {\n                final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n                if (!disallowIntercept) {\n                    intercepted = onInterceptTouchEvent(ev);//2.拦截事件调用方法\n                    ev.setAction(action); //重置Action事件，以防被修改\n                } else {\n                    intercepted = false;\n                }\n            } else {\n                //没有touch目标直接拦截事件\n                intercepted = true;\n            }\n\n            // 检测事件是否取消\n            final boolean canceled = resetCancelNextUpFlag(this)\n                    || actionMasked == MotionEvent.ACTION_CANCEL;\n\n\n            final boolean split = (mGroupFlags & FLAG_SPLIT_MOTION_EVENTS) != 0;\n            TouchTarget newTouchTarget = null;\n            boolean alreadyDispatchedToNewTouchTarget = false;\n            if (!canceled && !intercepted) {//当事件没有取消并没有被拦截时，执行事件分发\n                if (actionMasked == MotionEvent.ACTION_DOWN\n                        || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)\n                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n\n                    .......\n\n                    final int childrenCount = mChildrenCount;\n                    if (childrenCount != 0) {\n                        // Find a child that can receive the event.\n                        // Scan children from front to back.\n                        final View[] children = mChildren;\n                        final float x = ev.getX(actionIndex);\n                        final float y = ev.getY(actionIndex);\n\n                        for (int i = childrenCount - 1; i >= 0; i--) {\n                            final View child = children[i];\n                            if (!canViewReceivePointerEvents(child)\n                                    || !isTransformedTouchPointInView(x, y, child, null)) {\n                                continue;\n                            }\n\n                            newTouchTarget = getTouchTarget(child);\n                            if (newTouchTarget != null) {\n                                // Child is already receiving touch within its bounds.\n                                // Give it the new pointer in addition to the ones it is handling.\n                                newTouchTarget.pointerIdBits |= idBitsToAssign;\n                                break;\n                            }\n\n                            resetCancelNextUpFlag(child);\n\n                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {//3.子View事件分发\n                                // Child wants to receive touch within its bounds.\n                                mLastTouchDownTime = ev.getDownTime();\n                                mLastTouchDownIndex = i;\n                                mLastTouchDownX = ev.getX();\n                                mLastTouchDownY = ev.getY();\n                                newTouchTarget = addTouchTarget(child, idBitsToAssign);\n                                alreadyDispatchedToNewTouchTarget = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (newTouchTarget == null && mFirstTouchTarget != null) {\n                        // Did not find a child to receive the event.\n                        // Assign the pointer to the least recently added target.\n                        newTouchTarget = mFirstTouchTarget;\n                        while (newTouchTarget.next != null) {\n                            newTouchTarget = newTouchTarget.next;\n                        }\n                        newTouchTarget.pointerIdBits |= idBitsToAssign;\n                    }\n                }\n            }\n\n        ........//省略部分，如果事件被取消，那就分发取消事件\n\n        return handled;\n    }\n```\n我们来看注释1处，事件过滤onFilterTouchEventForSecurity(),此方法为View中的方法，我们来看看此方法\n```java\n    public boolean onFilterTouchEventForSecurity(MotionEvent event) {\n        //noinspection RedundantIfStatement\n        if ((mViewFlags & FILTER_TOUCHES_WHEN_OBSCURED) != 0\n                && (event.getFlags() & MotionEvent.FLAG_WINDOW_IS_OBSCURED) != 0) {\n            // 当Window被遮盖，就丢弃此事件\n            return false;\n        }\n        return true;\n    }\n```\n这里主要就是对Window是否被遮盖进行判断，从而决定事件是否进行传递。事件要进行传递，首先就是Window没有被遮盖。我们再来看看注释2，拦截方法onInterceptTouchEvent(),此方法是ViewGroup特有的，也只有ViewGroup可以进行事件拦截。我们来看看ViewGroup的此方法\n```java\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        return false;\n    }\n```\n这里是直接返回了false，也就是不拦截事件。如果返回true,也就会拦截事件。**在我们开发的过程中，经常会出现一些事件冲突，而往往解决这些事件冲突的途径，也都是在我们自定义的ViewGroup中复写拦截方法onInterceptTouchEvent()，重写返回值，从而解决事件冲突问题。**我们继续往下走，当不拦截事件后，我们就对子View进行事件分发，这里我们继续来看注释3，方法dispatchTransformedTouchEvent()\n```java\n  private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,\n            View child, int desiredPointerIdBits) {\n        final boolean handled;\n\n        //当为取消事件时，就分发取消事件ACTION_CANCEL\n        final int oldAction = event.getAction();\n        if (cancel || oldAction == MotionEvent.ACTION_CANCEL) {\n            event.setAction(MotionEvent.ACTION_CANCEL);\n            if (child == null) {\n                handled = super.dispatchTouchEvent(event);\n            } else {\n                handled = child.dispatchTouchEvent(event);\n            }\n            event.setAction(oldAction);\n            return handled;\n        }\n\n        ........\n        \n        //ViewGroup是否有子View\n        if (child == null) {\n            handled = super.dispatchTouchEvent(transformedEvent);\n        } else {\n            final float offsetX = mScrollX - child.mLeft;\n            final float offsetY = mScrollY - child.mTop;\n            transformedEvent.offsetLocation(offsetX, offsetY);\n            if (! child.hasIdentityMatrix()) {\n                transformedEvent.transform(child.getInverseMatrix());\n            }\n\n            handled = child.dispatchTouchEvent(transformedEvent);\n        }\n\n        // Done.\n        transformedEvent.recycle();\n        return handled;\n    }\n```\n这里主要对ViewGroup是否有子View做了一个判断，如果ViewGroup无子View，那直接调用ViewGroup父类View的dispatchTouchEvent()方法;如果有子View，那就调用子View的dispatchTouchEvent()方法；其实也都是View类的dispatchTouchEvent()方法，但这里需要注意一下，如果子View又是ViewGroup，那样当调用dispatchTouchEvent()方法时，那就调用ViewGroup的dispatchTouchEvent()事件分发方法，需要重走一遍分发流程。我们这里把子View就看成View了，所以我们就来看看此方法\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(event, 0);\n        }\n\n        if (onFilterTouchEventForSecurity(event)) {\n            //noinspection SimplifiableIfStatement\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED\n                    && li.mOnTouchListener.onTouch(this, event)) {//1.实现OnTouchListener接口\n                return true;\n            }\n\n            if (onTouchEvent(event)) {//2.View自身的OnTouchEvent事件\n                return true;\n            }\n        }\n\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);\n        }\n        return false;\n    }\n```\n从注释1处知，当事件分发到View后，首先调用的接口OnTouchListener的实现方法(在我们开发的时候，经常会对View或ViewGroup设置一些Touch的监听事件)，然后才调用注释2的OnTouchEvent()方法，我们也来看看View的OnTouchEvent()方法\n```java\n    /**\n     * Touch事件的具体实现方法\n     *\n     * @param event The motion event.\n     * @return 返回true，此事件被消费，返回false,则没被消费\n     */\n    public boolean onTouchEvent(MotionEvent event) {\n        final int viewFlags = mViewFlags;\n       \n        ........\n\n        //对View是否可以消费点击事件做判断，是否设置点击事件，是否可点击\n        if (((viewFlags & CLICKABLE) == CLICKABLE ||(viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_UP://手指抬起up事件\n                    boolean prepressed = (mPrivateFlags & PREPRESSED) != 0;\n                    if ((mPrivateFlags & PRESSED) != 0 || prepressed) {\n                        \n                        boolean focusTaken = false;\n                        if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                            focusTaken = requestFocus();\n                        }\n\n                        if (prepressed) {\n                            setPressed(true);//Button按压状态变化通知\n                       }\n\n                        if (!mHasPerformedLongPress) {\n                            \n                            removeLongPressCallback();//去除长按状态\n\n                            //执行点击事件\n                            if (!focusTaken) {\n                               \n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();//消费点击事件\n                                }\n                            }\n                        }\n\n                        .......\n\n                        removeTapCallback();\n                    }\n                    break;\n\n                case MotionEvent.ACTION_DOWN://手指按下down事件\n                     ......\n                    break;\n\n                case MotionEvent.ACTION_CANCEL://事件取消\n                    setPressed(false);\n                    removeTapCallback();\n                    break;\n\n                case MotionEvent.ACTION_MOVE://手指移动move事件\n                    final int x = (int) event.getX();\n                    final int y = (int) event.getY();\n                    .......\n                    break;\n            }\n            return true;\n        }\n\n        return false;\n    }\n```\n此方法主要是消费事件的方法，当View设置了点击事件或长按事件，那就会对事件进行消费。当手指抬起，也就是ACTION_UP事件时，就执行点击事件方法performClick(),我们也再来看看此方法\n```java\n    public boolean performClick() {\n        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n\n        ListenerInfo li = mListenerInfo;\n        if (li != null && li.mOnClickListener != null) {\n            playSoundEffect(SoundEffectConstants.CLICK);\n            li.mOnClickListener.onClick(this);//实现OnClickListener接口\n            return true;\n        }\n\n        return false;\n    }\n```\n到这里，主要就是实现了View的onClickListener接口的方法onClick(),也就消费了点击事件。但如果View没有设置点击事件，那就不会消费此方法，而在ViewGroup分发事件的时候就已判断过是否有子View，此时当子View和ViewGroup都没有设置点击事件时，就会直接返回false给上一级，上一级如果也是ViewGroup，那也是类似，如果都返回false，那样事件就将会被Activity的OnTouchEvent()消费掉。\n\n到这里，Android的事件传递我们就分析完了。\n\n\n**注意：**\n\n1. **只要有一个View消费了ACTION_DOWN事件，剩余的所有事件(ACTION_MOVE、ACTION_UP等)都将由此View消费。**\n2. **源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Android View 事件分发机制 源码解析（ViewGroup篇）](http://blog.csdn.net/dfskhgalshgkajghljgh/article/details/53492488)\n\n[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)\n\n","source":"_posts/tech_android_framework_dispatch_event.md","raw":"---\nlayout: post\ntitle: \"Android事件分发机制源码分析\"\ndate: 1/9/2018 7:17:17 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n昨天我们对[View绘制三大流程源码](http://blog.csdn.net/awenyini/article/details/79006432)已做了深入分析，所以关于View的绘制流程，我相信大家也有了一个大致的了解(如果不了解，请回看博文)。然而对于View，还有一个知识点，也是极其重要的，那就是View的事件分发机制(也即Android事件分发机制)。所以，今天我们就来谈谈View的事件分发机制，从源码的角度，跟随Touch事件流，走一遍流程。\n\n在开始分析之前，我们需要了解一些概念，如一次Touch事件，可能包括下面三个事件：\n\n- **MotionEvent.ACTION_DOWN：** 表示手指按下事件，一个事件的开始。\n- **MotionEvent.ACTION_MOVE：** 表示手指移动事件，事件的持续移动。\n- **MotionEvent.ACTION_UP：** 表示手指抬起事件，一个事件的结束。\n\n# 一、View事件分发流程图\n在具体分析之前，我们先来看一下事件分发流程图，以便我们更好的理解内容。图如下\n\n<!-- more -->\n\n![](/assets/img/tech_android_dispatch_event_flow.png)\n\n# 二、View事件分发机制分析\n由Android系统的启动，Lancher系统的启动相关知识，我们知道，当我们点击手机屏幕，主要是通过硬件传感器传输事件，传感器会将其Touch事件传给我们界面使者Activity。当事件传给Activity后，Activity会进行事件分发，会调用Activity的dispatchTouchEvent()方法进行事件分发，我们就从此方法开始来分析。我们来看具体源码\n```java\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {//1.\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {//2.事件继续分发\n            return true;\n        }\n        return onTouchEvent(ev);//3.Activity自身onTouchEvent()方法\n    }\n```\n在注释1处，主要对事件进行判断，当Touch事件为MotionEvent.ACTION_DOWN事件时，会执行onUserInteraction()方法，查看源码发现，此方法是一个空方法。主要作用就是当各种事件key，touch或trackball分发到Activity时，都会执行此方法。\n\n我们先来看注释3，当事件都没有被消费，及getWindow().superDispatchTouchEvent(ev)返回falses时，就会调用Activity自己的onTouchEvent()方法，自己对事件进行消费。\n\n我们再来看注释2，getWindow().superDispatchTouchEvent(ev)，从[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)中，我们知道getWindow()返回的是PhoneWindow,所以我们来看看PhoneWindow中的superDispatchTouchEvent()方法\n```java\n    @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n```\n由[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)，我们也知，mDecor就是DecorView，所以我们继续来看DecorView中的superDispatchTouchEvent()方法\n```java\n        public boolean superDispatchTouchEvent(MotionEvent event) {\n            return super.dispatchTouchEvent(event);\n        }\n```\n由[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)博文，我们知道，DecorView继承于FrameLayout,FrameLayout由继承于ViewGroup,ViewGroup又继承于View。通过分析相互关系，知最后调用的是ViewGroup的dispatchTouchEvent()方法(FrameLayout没有实现此方法)，所以我们继续来看看ViewGroup中的方法\n```java\n   @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(ev, 1);\n        }\n\n        boolean handled = false;\n        if (onFilterTouchEventForSecurity(ev)) {//1.过滤Touch事件\n            final int action = ev.getAction();\n            final int actionMasked = action & MotionEvent.ACTION_MASK;\n\n            //初始化down事件\n            if (actionMasked == MotionEvent.ACTION_DOWN) {\n                \n                cancelAndClearTouchTargets(ev);//清除前一个事件的目标及事件状态\n                resetTouchState();//重置事件状态\n            }\n\n            // 检测是否拦截事件\n            final boolean intercepted;\n            if (actionMasked == MotionEvent.ACTION_DOWN\n                    || mFirstTouchTarget != null) {\n                final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n                if (!disallowIntercept) {\n                    intercepted = onInterceptTouchEvent(ev);//2.拦截事件调用方法\n                    ev.setAction(action); //重置Action事件，以防被修改\n                } else {\n                    intercepted = false;\n                }\n            } else {\n                //没有touch目标直接拦截事件\n                intercepted = true;\n            }\n\n            // 检测事件是否取消\n            final boolean canceled = resetCancelNextUpFlag(this)\n                    || actionMasked == MotionEvent.ACTION_CANCEL;\n\n\n            final boolean split = (mGroupFlags & FLAG_SPLIT_MOTION_EVENTS) != 0;\n            TouchTarget newTouchTarget = null;\n            boolean alreadyDispatchedToNewTouchTarget = false;\n            if (!canceled && !intercepted) {//当事件没有取消并没有被拦截时，执行事件分发\n                if (actionMasked == MotionEvent.ACTION_DOWN\n                        || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)\n                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n\n                    .......\n\n                    final int childrenCount = mChildrenCount;\n                    if (childrenCount != 0) {\n                        // Find a child that can receive the event.\n                        // Scan children from front to back.\n                        final View[] children = mChildren;\n                        final float x = ev.getX(actionIndex);\n                        final float y = ev.getY(actionIndex);\n\n                        for (int i = childrenCount - 1; i >= 0; i--) {\n                            final View child = children[i];\n                            if (!canViewReceivePointerEvents(child)\n                                    || !isTransformedTouchPointInView(x, y, child, null)) {\n                                continue;\n                            }\n\n                            newTouchTarget = getTouchTarget(child);\n                            if (newTouchTarget != null) {\n                                // Child is already receiving touch within its bounds.\n                                // Give it the new pointer in addition to the ones it is handling.\n                                newTouchTarget.pointerIdBits |= idBitsToAssign;\n                                break;\n                            }\n\n                            resetCancelNextUpFlag(child);\n\n                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {//3.子View事件分发\n                                // Child wants to receive touch within its bounds.\n                                mLastTouchDownTime = ev.getDownTime();\n                                mLastTouchDownIndex = i;\n                                mLastTouchDownX = ev.getX();\n                                mLastTouchDownY = ev.getY();\n                                newTouchTarget = addTouchTarget(child, idBitsToAssign);\n                                alreadyDispatchedToNewTouchTarget = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (newTouchTarget == null && mFirstTouchTarget != null) {\n                        // Did not find a child to receive the event.\n                        // Assign the pointer to the least recently added target.\n                        newTouchTarget = mFirstTouchTarget;\n                        while (newTouchTarget.next != null) {\n                            newTouchTarget = newTouchTarget.next;\n                        }\n                        newTouchTarget.pointerIdBits |= idBitsToAssign;\n                    }\n                }\n            }\n\n        ........//省略部分，如果事件被取消，那就分发取消事件\n\n        return handled;\n    }\n```\n我们来看注释1处，事件过滤onFilterTouchEventForSecurity(),此方法为View中的方法，我们来看看此方法\n```java\n    public boolean onFilterTouchEventForSecurity(MotionEvent event) {\n        //noinspection RedundantIfStatement\n        if ((mViewFlags & FILTER_TOUCHES_WHEN_OBSCURED) != 0\n                && (event.getFlags() & MotionEvent.FLAG_WINDOW_IS_OBSCURED) != 0) {\n            // 当Window被遮盖，就丢弃此事件\n            return false;\n        }\n        return true;\n    }\n```\n这里主要就是对Window是否被遮盖进行判断，从而决定事件是否进行传递。事件要进行传递，首先就是Window没有被遮盖。我们再来看看注释2，拦截方法onInterceptTouchEvent(),此方法是ViewGroup特有的，也只有ViewGroup可以进行事件拦截。我们来看看ViewGroup的此方法\n```java\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        return false;\n    }\n```\n这里是直接返回了false，也就是不拦截事件。如果返回true,也就会拦截事件。**在我们开发的过程中，经常会出现一些事件冲突，而往往解决这些事件冲突的途径，也都是在我们自定义的ViewGroup中复写拦截方法onInterceptTouchEvent()，重写返回值，从而解决事件冲突问题。**我们继续往下走，当不拦截事件后，我们就对子View进行事件分发，这里我们继续来看注释3，方法dispatchTransformedTouchEvent()\n```java\n  private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,\n            View child, int desiredPointerIdBits) {\n        final boolean handled;\n\n        //当为取消事件时，就分发取消事件ACTION_CANCEL\n        final int oldAction = event.getAction();\n        if (cancel || oldAction == MotionEvent.ACTION_CANCEL) {\n            event.setAction(MotionEvent.ACTION_CANCEL);\n            if (child == null) {\n                handled = super.dispatchTouchEvent(event);\n            } else {\n                handled = child.dispatchTouchEvent(event);\n            }\n            event.setAction(oldAction);\n            return handled;\n        }\n\n        ........\n        \n        //ViewGroup是否有子View\n        if (child == null) {\n            handled = super.dispatchTouchEvent(transformedEvent);\n        } else {\n            final float offsetX = mScrollX - child.mLeft;\n            final float offsetY = mScrollY - child.mTop;\n            transformedEvent.offsetLocation(offsetX, offsetY);\n            if (! child.hasIdentityMatrix()) {\n                transformedEvent.transform(child.getInverseMatrix());\n            }\n\n            handled = child.dispatchTouchEvent(transformedEvent);\n        }\n\n        // Done.\n        transformedEvent.recycle();\n        return handled;\n    }\n```\n这里主要对ViewGroup是否有子View做了一个判断，如果ViewGroup无子View，那直接调用ViewGroup父类View的dispatchTouchEvent()方法;如果有子View，那就调用子View的dispatchTouchEvent()方法；其实也都是View类的dispatchTouchEvent()方法，但这里需要注意一下，如果子View又是ViewGroup，那样当调用dispatchTouchEvent()方法时，那就调用ViewGroup的dispatchTouchEvent()事件分发方法，需要重走一遍分发流程。我们这里把子View就看成View了，所以我们就来看看此方法\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(event, 0);\n        }\n\n        if (onFilterTouchEventForSecurity(event)) {\n            //noinspection SimplifiableIfStatement\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED\n                    && li.mOnTouchListener.onTouch(this, event)) {//1.实现OnTouchListener接口\n                return true;\n            }\n\n            if (onTouchEvent(event)) {//2.View自身的OnTouchEvent事件\n                return true;\n            }\n        }\n\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);\n        }\n        return false;\n    }\n```\n从注释1处知，当事件分发到View后，首先调用的接口OnTouchListener的实现方法(在我们开发的时候，经常会对View或ViewGroup设置一些Touch的监听事件)，然后才调用注释2的OnTouchEvent()方法，我们也来看看View的OnTouchEvent()方法\n```java\n    /**\n     * Touch事件的具体实现方法\n     *\n     * @param event The motion event.\n     * @return 返回true，此事件被消费，返回false,则没被消费\n     */\n    public boolean onTouchEvent(MotionEvent event) {\n        final int viewFlags = mViewFlags;\n       \n        ........\n\n        //对View是否可以消费点击事件做判断，是否设置点击事件，是否可点击\n        if (((viewFlags & CLICKABLE) == CLICKABLE ||(viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_UP://手指抬起up事件\n                    boolean prepressed = (mPrivateFlags & PREPRESSED) != 0;\n                    if ((mPrivateFlags & PRESSED) != 0 || prepressed) {\n                        \n                        boolean focusTaken = false;\n                        if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                            focusTaken = requestFocus();\n                        }\n\n                        if (prepressed) {\n                            setPressed(true);//Button按压状态变化通知\n                       }\n\n                        if (!mHasPerformedLongPress) {\n                            \n                            removeLongPressCallback();//去除长按状态\n\n                            //执行点击事件\n                            if (!focusTaken) {\n                               \n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();//消费点击事件\n                                }\n                            }\n                        }\n\n                        .......\n\n                        removeTapCallback();\n                    }\n                    break;\n\n                case MotionEvent.ACTION_DOWN://手指按下down事件\n                     ......\n                    break;\n\n                case MotionEvent.ACTION_CANCEL://事件取消\n                    setPressed(false);\n                    removeTapCallback();\n                    break;\n\n                case MotionEvent.ACTION_MOVE://手指移动move事件\n                    final int x = (int) event.getX();\n                    final int y = (int) event.getY();\n                    .......\n                    break;\n            }\n            return true;\n        }\n\n        return false;\n    }\n```\n此方法主要是消费事件的方法，当View设置了点击事件或长按事件，那就会对事件进行消费。当手指抬起，也就是ACTION_UP事件时，就执行点击事件方法performClick(),我们也再来看看此方法\n```java\n    public boolean performClick() {\n        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n\n        ListenerInfo li = mListenerInfo;\n        if (li != null && li.mOnClickListener != null) {\n            playSoundEffect(SoundEffectConstants.CLICK);\n            li.mOnClickListener.onClick(this);//实现OnClickListener接口\n            return true;\n        }\n\n        return false;\n    }\n```\n到这里，主要就是实现了View的onClickListener接口的方法onClick(),也就消费了点击事件。但如果View没有设置点击事件，那就不会消费此方法，而在ViewGroup分发事件的时候就已判断过是否有子View，此时当子View和ViewGroup都没有设置点击事件时，就会直接返回false给上一级，上一级如果也是ViewGroup，那也是类似，如果都返回false，那样事件就将会被Activity的OnTouchEvent()消费掉。\n\n到这里，Android的事件传递我们就分析完了。\n\n\n**注意：**\n\n1. **只要有一个View消费了ACTION_DOWN事件，剩余的所有事件(ACTION_MOVE、ACTION_UP等)都将由此View消费。**\n2. **源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Android View 事件分发机制 源码解析（ViewGroup篇）](http://blog.csdn.net/dfskhgalshgkajghljgh/article/details/53492488)\n\n[Activity布局加载流程源码分析(I)](http://blog.csdn.net/awenyini/article/details/78934390)\n\n[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)\n\n","slug":"tech_android_framework_dispatch_event","published":1,"updated":"2019-06-27T08:15:15.311Z","photos":[],"link":"","_id":"cjxfjaet00056ystg33enq974","content":"<hr>\n<p>昨天我们对<a href=\"http://blog.csdn.net/awenyini/article/details/79006432\" target=\"_blank\" rel=\"external\">View绘制三大流程源码</a>已做了深入分析，所以关于View的绘制流程，我相信大家也有了一个大致的了解(如果不了解，请回看博文)。然而对于View，还有一个知识点，也是极其重要的，那就是View的事件分发机制(也即Android事件分发机制)。所以，今天我们就来谈谈View的事件分发机制，从源码的角度，跟随Touch事件流，走一遍流程。</p>\n<p>在开始分析之前，我们需要了解一些概念，如一次Touch事件，可能包括下面三个事件：</p>\n<ul>\n<li><strong>MotionEvent.ACTION_DOWN：</strong> 表示手指按下事件，一个事件的开始。</li>\n<li><strong>MotionEvent.ACTION_MOVE：</strong> 表示手指移动事件，事件的持续移动。</li>\n<li><strong>MotionEvent.ACTION_UP：</strong> 表示手指抬起事件，一个事件的结束。</li>\n</ul>\n<h1 id=\"一、View事件分发流程图\"><a href=\"#一、View事件分发流程图\" class=\"headerlink\" title=\"一、View事件分发流程图\"></a>一、View事件分发流程图</h1><p>在具体分析之前，我们先来看一下事件分发流程图，以便我们更好的理解内容。图如下</p>\n<a id=\"more\"></a>\n<p><img src=\"/assets/img/tech_android_dispatch_event_flow.png\" alt=\"\"></p>\n<h1 id=\"二、View事件分发机制分析\"><a href=\"#二、View事件分发机制分析\" class=\"headerlink\" title=\"二、View事件分发机制分析\"></a>二、View事件分发机制分析</h1><p>由Android系统的启动，Lancher系统的启动相关知识，我们知道，当我们点击手机屏幕，主要是通过硬件传感器传输事件，传感器会将其Touch事件传给我们界面使者Activity。当事件传给Activity后，Activity会进行事件分发，会调用Activity的dispatchTouchEvent()方法进行事件分发，我们就从此方法开始来分析。我们来看具体源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;<span class=\"comment\">//1.</span></div><div class=\"line\">        onUserInteraction();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;<span class=\"comment\">//2.事件继续分发</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(ev);<span class=\"comment\">//3.Activity自身onTouchEvent()方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，主要对事件进行判断，当Touch事件为MotionEvent.ACTION_DOWN事件时，会执行onUserInteraction()方法，查看源码发现，此方法是一个空方法。主要作用就是当各种事件key，touch或trackball分发到Activity时，都会执行此方法。</p>\n<p>我们先来看注释3，当事件都没有被消费，及getWindow().superDispatchTouchEvent(ev)返回falses时，就会调用Activity自己的onTouchEvent()方法，自己对事件进行消费。</p>\n<p>我们再来看注释2，getWindow().superDispatchTouchEvent(ev)，从<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>中，我们知道getWindow()返回的是PhoneWindow,所以我们来看看PhoneWindow中的superDispatchTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a>，我们也知，mDecor就是DecorView，所以我们继续来看DecorView中的superDispatchTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>博文，我们知道，DecorView继承于FrameLayout,FrameLayout由继承于ViewGroup,ViewGroup又继承于View。通过分析相互关系，知最后调用的是ViewGroup的dispatchTouchEvent()方法(FrameLayout没有实现此方法)，所以我们继续来看看ViewGroup中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         mInputEventConsistencyVerifier.onTouchEvent(ev, <span class=\"number\">1</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;<span class=\"comment\">//1.过滤Touch事件</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//初始化down事件</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">             </div><div class=\"line\">             cancelAndClearTouchTargets(ev);<span class=\"comment\">//清除前一个事件的目标及事件状态</span></div><div class=\"line\">             resetTouchState();<span class=\"comment\">//重置事件状态</span></div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// 检测是否拦截事件</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</div><div class=\"line\">         <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">                 || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</div><div class=\"line\">             <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</div><div class=\"line\">                 intercepted = onInterceptTouchEvent(ev);<span class=\"comment\">//2.拦截事件调用方法</span></div><div class=\"line\">                 ev.setAction(action); <span class=\"comment\">//重置Action事件，以防被修改</span></div><div class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                 intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">//没有touch目标直接拦截事件</span></div><div class=\"line\">             intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// 检测事件是否取消</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> canceled = resetCancelNextUpFlag(<span class=\"keyword\">this</span>)</div><div class=\"line\">                 || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class=\"number\">0</span>;</div><div class=\"line\">         TouchTarget newTouchTarget = <span class=\"keyword\">null</span>;</div><div class=\"line\">         <span class=\"keyword\">boolean</span> alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">false</span>;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;<span class=\"comment\">//当事件没有取消并没有被拦截时，执行事件分发</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">                     || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class=\"line\">                     || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class=\"line\"></div><div class=\"line\">                 .......</div><div class=\"line\"></div><div class=\"line\">                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (childrenCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                     <span class=\"comment\">// Find a child that can receive the event.</span></div><div class=\"line\">                     <span class=\"comment\">// Scan children from front to back.</span></div><div class=\"line\">                     <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">                     <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = ev.getX(actionIndex);</div><div class=\"line\">                     <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = ev.getY(actionIndex);</div><div class=\"line\"></div><div class=\"line\">                     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                         <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">                         <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</div><div class=\"line\">                                 || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                             <span class=\"keyword\">continue</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\"></div><div class=\"line\">                         newTouchTarget = getTouchTarget(child);</div><div class=\"line\">                         <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                             <span class=\"comment\">// Child is already receiving touch within its bounds.</span></div><div class=\"line\">                             <span class=\"comment\">// Give it the new pointer in addition to the ones it is handling.</span></div><div class=\"line\">                             newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                             <span class=\"keyword\">break</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\"></div><div class=\"line\">                         resetCancelNextUpFlag(child);</div><div class=\"line\"></div><div class=\"line\">                         <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;<span class=\"comment\">//3.子View事件分发</span></div><div class=\"line\">                             <span class=\"comment\">// Child wants to receive touch within its bounds.</span></div><div class=\"line\">                             mLastTouchDownTime = ev.getDownTime();</div><div class=\"line\">                             mLastTouchDownIndex = i;</div><div class=\"line\">                             mLastTouchDownX = ev.getX();</div><div class=\"line\">                             mLastTouchDownY = ev.getY();</div><div class=\"line\">                             newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class=\"line\">                             alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</div><div class=\"line\">                             <span class=\"keyword\">break</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\"></div><div class=\"line\">                 <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                     <span class=\"comment\">// Did not find a child to receive the event.</span></div><div class=\"line\">                     <span class=\"comment\">// Assign the pointer to the least recently added target.</span></div><div class=\"line\">                     newTouchTarget = mFirstTouchTarget;</div><div class=\"line\">                     <span class=\"keyword\">while</span> (newTouchTarget.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                         newTouchTarget = newTouchTarget.next;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                     newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">     ........<span class=\"comment\">//省略部分，如果事件被取消，那就分发取消事件</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> handled;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看注释1处，事件过滤onFilterTouchEventForSecurity(),此方法为View中的方法，我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onFilterTouchEventForSecurity</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//noinspection RedundantIfStatement</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((mViewFlags &amp; FILTER_TOUCHES_WHEN_OBSCURED) != <span class=\"number\">0</span></div><div class=\"line\">            &amp;&amp; (event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_OBSCURED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当Window被遮盖，就丢弃此事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是对Window是否被遮盖进行判断，从而决定事件是否进行传递。事件要进行传递，首先就是Window没有被遮盖。我们再来看看注释2，拦截方法onInterceptTouchEvent(),此方法是ViewGroup特有的，也只有ViewGroup可以进行事件拦截。我们来看看ViewGroup的此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是直接返回了false，也就是不拦截事件。如果返回true,也就会拦截事件。<strong>在我们开发的过程中，经常会出现一些事件冲突，而往往解决这些事件冲突的途径，也都是在我们自定义的ViewGroup中复写拦截方法onInterceptTouchEvent()，重写返回值，从而解决事件冲突问题。</strong>我们继续往下走，当不拦截事件后，我们就对子View进行事件分发，这里我们继续来看注释3，方法dispatchTransformedTouchEvent()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTransformedTouchEvent</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">boolean</span> cancel,</span></span></div><div class=\"line\">          View child, <span class=\"keyword\">int</span> desiredPointerIdBits) &#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> handled;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//当为取消事件时，就分发取消事件ACTION_CANCEL</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> oldAction = event.getAction();</div><div class=\"line\">      <span class=\"keyword\">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class=\"line\">          event.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">          <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              handled = child.dispatchTouchEvent(event);</div><div class=\"line\">          &#125;</div><div class=\"line\">          event.setAction(oldAction);</div><div class=\"line\">          <span class=\"keyword\">return</span> handled;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ........</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//ViewGroup是否有子View</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetX = mScrollX - child.mLeft;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetY = mScrollY - child.mTop;</div><div class=\"line\">          transformedEvent.offsetLocation(offsetX, offsetY);</div><div class=\"line\">          <span class=\"keyword\">if</span> (! child.hasIdentityMatrix()) &#123;</div><div class=\"line\">              transformedEvent.transform(child.getInverseMatrix());</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          handled = child.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Done.</span></div><div class=\"line\">      transformedEvent.recycle();</div><div class=\"line\">      <span class=\"keyword\">return</span> handled;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要对ViewGroup是否有子View做了一个判断，如果ViewGroup无子View，那直接调用ViewGroup父类View的dispatchTouchEvent()方法;如果有子View，那就调用子View的dispatchTouchEvent()方法；其实也都是View类的dispatchTouchEvent()方法，但这里需要注意一下，如果子View又是ViewGroup，那样当调用dispatchTouchEvent()方法时，那就调用ViewGroup的dispatchTouchEvent()事件分发方法，需要重走一遍分发流程。我们这里把子View就看成View了，所以我们就来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onTouchEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class=\"line\">           <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">           ListenerInfo li = mListenerInfo;</div><div class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class=\"line\">                   &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;<span class=\"comment\">//1.实现OnTouchListener接口</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (onTouchEvent(event)) &#123;<span class=\"comment\">//2.View自身的OnTouchEvent事件</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>从注释1处知，当事件分发到View后，首先调用的接口OnTouchListener的实现方法(在我们开发的时候，经常会对View或ViewGroup设置一些Touch的监听事件)，然后才调用注释2的OnTouchEvent()方法，我们也来看看View的OnTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Touch事件的具体实现方法</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> event The motion event.</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 返回true，此事件被消费，返回false,则没被消费</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</div><div class=\"line\">   </div><div class=\"line\">    ........</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对View是否可以消费点击事件做判断，是否设置点击事件，是否可点击</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||(viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:<span class=\"comment\">//手指抬起up事件</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                        focusTaken = requestFocus();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        setPressed(<span class=\"keyword\">true</span>);<span class=\"comment\">//Button按压状态变化通知</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress) &#123;</div><div class=\"line\">                        </div><div class=\"line\">                        removeLongPressCallback();<span class=\"comment\">//去除长按状态</span></div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">//执行点击事件</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                           </div><div class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                performClick();<span class=\"comment\">//消费点击事件</span></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    .......</div><div class=\"line\"></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:<span class=\"comment\">//手指按下down事件</span></div><div class=\"line\">                 ......</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:<span class=\"comment\">//事件取消</span></div><div class=\"line\">                setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                removeTapCallback();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:<span class=\"comment\">//手指移动move事件</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">                .......</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要是消费事件的方法，当View设置了点击事件或长按事件，那就会对事件进行消费。当手指抬起，也就是ACTION_UP事件时，就执行点击事件方法performClick(),我们也再来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class=\"line\"></div><div class=\"line\">    ListenerInfo li = mListenerInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);<span class=\"comment\">//实现OnClickListener接口</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，主要就是实现了View的onClickListener接口的方法onClick(),也就消费了点击事件。但如果View没有设置点击事件，那就不会消费此方法，而在ViewGroup分发事件的时候就已判断过是否有子View，此时当子View和ViewGroup都没有设置点击事件时，就会直接返回false给上一级，上一级如果也是ViewGroup，那也是类似，如果都返回false，那样事件就将会被Activity的OnTouchEvent()消费掉。</p>\n<p>到这里，Android的事件传递我们就分析完了。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li><strong>只要有一个View消费了ACTION_DOWN事件，剩余的所有事件(ACTION_MOVE、ACTION_UP等)都将由此View消费。</strong></li>\n<li><strong>源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></li>\n</ol>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/dfskhgalshgkajghljgh/article/details/53492488\" target=\"_blank\" rel=\"external\">Android View 事件分发机制 源码解析（ViewGroup篇）</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\" target=\"_blank\" rel=\"external\">Activity布局加载流程源码分析(I)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a></p>\n","excerpt":"<hr>\n<p>昨天我们对<a href=\"http://blog.csdn.net/awenyini/article/details/79006432\">View绘制三大流程源码</a>已做了深入分析，所以关于View的绘制流程，我相信大家也有了一个大致的了解(如果不了解，请回看博文)。然而对于View，还有一个知识点，也是极其重要的，那就是View的事件分发机制(也即Android事件分发机制)。所以，今天我们就来谈谈View的事件分发机制，从源码的角度，跟随Touch事件流，走一遍流程。</p>\n<p>在开始分析之前，我们需要了解一些概念，如一次Touch事件，可能包括下面三个事件：</p>\n<ul>\n<li><strong>MotionEvent.ACTION_DOWN：</strong> 表示手指按下事件，一个事件的开始。</li>\n<li><strong>MotionEvent.ACTION_MOVE：</strong> 表示手指移动事件，事件的持续移动。</li>\n<li><strong>MotionEvent.ACTION_UP：</strong> 表示手指抬起事件，一个事件的结束。</li>\n</ul>\n<h1 id=\"一、View事件分发流程图\"><a href=\"#一、View事件分发流程图\" class=\"headerlink\" title=\"一、View事件分发流程图\"></a>一、View事件分发流程图</h1><p>在具体分析之前，我们先来看一下事件分发流程图，以便我们更好的理解内容。图如下</p>","more":"<p><img src=\"/assets/img/tech_android_dispatch_event_flow.png\" alt=\"\"></p>\n<h1 id=\"二、View事件分发机制分析\"><a href=\"#二、View事件分发机制分析\" class=\"headerlink\" title=\"二、View事件分发机制分析\"></a>二、View事件分发机制分析</h1><p>由Android系统的启动，Lancher系统的启动相关知识，我们知道，当我们点击手机屏幕，主要是通过硬件传感器传输事件，传感器会将其Touch事件传给我们界面使者Activity。当事件传给Activity后，Activity会进行事件分发，会调用Activity的dispatchTouchEvent()方法进行事件分发，我们就从此方法开始来分析。我们来看具体源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;<span class=\"comment\">//1.</span></div><div class=\"line\">        onUserInteraction();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;<span class=\"comment\">//2.事件继续分发</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(ev);<span class=\"comment\">//3.Activity自身onTouchEvent()方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在注释1处，主要对事件进行判断，当Touch事件为MotionEvent.ACTION_DOWN事件时，会执行onUserInteraction()方法，查看源码发现，此方法是一个空方法。主要作用就是当各种事件key，touch或trackball分发到Activity时，都会执行此方法。</p>\n<p>我们先来看注释3，当事件都没有被消费，及getWindow().superDispatchTouchEvent(ev)返回falses时，就会调用Activity自己的onTouchEvent()方法，自己对事件进行消费。</p>\n<p>我们再来看注释2，getWindow().superDispatchTouchEvent(ev)，从<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>中，我们知道getWindow()返回的是PhoneWindow,所以我们来看看PhoneWindow中的superDispatchTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由<a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a>，我们也知，mDecor就是DecorView，所以我们继续来看DecorView中的superDispatchTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>博文，我们知道，DecorView继承于FrameLayout,FrameLayout由继承于ViewGroup,ViewGroup又继承于View。通过分析相互关系，知最后调用的是ViewGroup的dispatchTouchEvent()方法(FrameLayout没有实现此方法)，所以我们继续来看看ViewGroup中的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         mInputEventConsistencyVerifier.onTouchEvent(ev, <span class=\"number\">1</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;<span class=\"comment\">//1.过滤Touch事件</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">//初始化down事件</span></div><div class=\"line\">         <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">             </div><div class=\"line\">             cancelAndClearTouchTargets(ev);<span class=\"comment\">//清除前一个事件的目标及事件状态</span></div><div class=\"line\">             resetTouchState();<span class=\"comment\">//重置事件状态</span></div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// 检测是否拦截事件</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</div><div class=\"line\">         <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">                 || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</div><div class=\"line\">             <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</div><div class=\"line\">                 intercepted = onInterceptTouchEvent(ev);<span class=\"comment\">//2.拦截事件调用方法</span></div><div class=\"line\">                 ev.setAction(action); <span class=\"comment\">//重置Action事件，以防被修改</span></div><div class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                 intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">             <span class=\"comment\">//没有touch目标直接拦截事件</span></div><div class=\"line\">             intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         <span class=\"comment\">// 检测事件是否取消</span></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> canceled = resetCancelNextUpFlag(<span class=\"keyword\">this</span>)</div><div class=\"line\">                 || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">         <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class=\"number\">0</span>;</div><div class=\"line\">         TouchTarget newTouchTarget = <span class=\"keyword\">null</span>;</div><div class=\"line\">         <span class=\"keyword\">boolean</span> alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">false</span>;</div><div class=\"line\">         <span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;<span class=\"comment\">//当事件没有取消并没有被拦截时，执行事件分发</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">                     || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class=\"line\">                     || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class=\"line\"></div><div class=\"line\">                 .......</div><div class=\"line\"></div><div class=\"line\">                 <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (childrenCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                     <span class=\"comment\">// Find a child that can receive the event.</span></div><div class=\"line\">                     <span class=\"comment\">// Scan children from front to back.</span></div><div class=\"line\">                     <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">                     <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = ev.getX(actionIndex);</div><div class=\"line\">                     <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = ev.getY(actionIndex);</div><div class=\"line\"></div><div class=\"line\">                     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                         <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">                         <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</div><div class=\"line\">                                 || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                             <span class=\"keyword\">continue</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\"></div><div class=\"line\">                         newTouchTarget = getTouchTarget(child);</div><div class=\"line\">                         <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                             <span class=\"comment\">// Child is already receiving touch within its bounds.</span></div><div class=\"line\">                             <span class=\"comment\">// Give it the new pointer in addition to the ones it is handling.</span></div><div class=\"line\">                             newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                             <span class=\"keyword\">break</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\"></div><div class=\"line\">                         resetCancelNextUpFlag(child);</div><div class=\"line\"></div><div class=\"line\">                         <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;<span class=\"comment\">//3.子View事件分发</span></div><div class=\"line\">                             <span class=\"comment\">// Child wants to receive touch within its bounds.</span></div><div class=\"line\">                             mLastTouchDownTime = ev.getDownTime();</div><div class=\"line\">                             mLastTouchDownIndex = i;</div><div class=\"line\">                             mLastTouchDownX = ev.getX();</div><div class=\"line\">                             mLastTouchDownY = ev.getY();</div><div class=\"line\">                             newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class=\"line\">                             alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</div><div class=\"line\">                             <span class=\"keyword\">break</span>;</div><div class=\"line\">                         &#125;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\"></div><div class=\"line\">                 <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                     <span class=\"comment\">// Did not find a child to receive the event.</span></div><div class=\"line\">                     <span class=\"comment\">// Assign the pointer to the least recently added target.</span></div><div class=\"line\">                     newTouchTarget = mFirstTouchTarget;</div><div class=\"line\">                     <span class=\"keyword\">while</span> (newTouchTarget.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                         newTouchTarget = newTouchTarget.next;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                     newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">     ........<span class=\"comment\">//省略部分，如果事件被取消，那就分发取消事件</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> handled;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看注释1处，事件过滤onFilterTouchEventForSecurity(),此方法为View中的方法，我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onFilterTouchEventForSecurity</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//noinspection RedundantIfStatement</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((mViewFlags &amp; FILTER_TOUCHES_WHEN_OBSCURED) != <span class=\"number\">0</span></div><div class=\"line\">            &amp;&amp; (event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_OBSCURED) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当Window被遮盖，就丢弃此事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是对Window是否被遮盖进行判断，从而决定事件是否进行传递。事件要进行传递，首先就是Window没有被遮盖。我们再来看看注释2，拦截方法onInterceptTouchEvent(),此方法是ViewGroup特有的，也只有ViewGroup可以进行事件拦截。我们来看看ViewGroup的此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是直接返回了false，也就是不拦截事件。如果返回true,也就会拦截事件。<strong>在我们开发的过程中，经常会出现一些事件冲突，而往往解决这些事件冲突的途径，也都是在我们自定义的ViewGroup中复写拦截方法onInterceptTouchEvent()，重写返回值，从而解决事件冲突问题。</strong>我们继续往下走，当不拦截事件后，我们就对子View进行事件分发，这里我们继续来看注释3，方法dispatchTransformedTouchEvent()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTransformedTouchEvent</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">boolean</span> cancel,</div><div class=\"line\">          View child, <span class=\"keyword\">int</span> desiredPointerIdBits)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> handled;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//当为取消事件时，就分发取消事件ACTION_CANCEL</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> oldAction = event.getAction();</div><div class=\"line\">      <span class=\"keyword\">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class=\"line\">          event.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">          <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              handled = child.dispatchTouchEvent(event);</div><div class=\"line\">          &#125;</div><div class=\"line\">          event.setAction(oldAction);</div><div class=\"line\">          <span class=\"keyword\">return</span> handled;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ........</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//ViewGroup是否有子View</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetX = mScrollX - child.mLeft;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetY = mScrollY - child.mTop;</div><div class=\"line\">          transformedEvent.offsetLocation(offsetX, offsetY);</div><div class=\"line\">          <span class=\"keyword\">if</span> (! child.hasIdentityMatrix()) &#123;</div><div class=\"line\">              transformedEvent.transform(child.getInverseMatrix());</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          handled = child.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Done.</span></div><div class=\"line\">      transformedEvent.recycle();</div><div class=\"line\">      <span class=\"keyword\">return</span> handled;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要对ViewGroup是否有子View做了一个判断，如果ViewGroup无子View，那直接调用ViewGroup父类View的dispatchTouchEvent()方法;如果有子View，那就调用子View的dispatchTouchEvent()方法；其实也都是View类的dispatchTouchEvent()方法，但这里需要注意一下，如果子View又是ViewGroup，那样当调用dispatchTouchEvent()方法时，那就调用ViewGroup的dispatchTouchEvent()事件分发方法，需要重走一遍分发流程。我们这里把子View就看成View了，所以我们就来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onTouchEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class=\"line\">           <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">           ListenerInfo li = mListenerInfo;</div><div class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class=\"line\">                   &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;<span class=\"comment\">//1.实现OnTouchListener接口</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (onTouchEvent(event)) &#123;<span class=\"comment\">//2.View自身的OnTouchEvent事件</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>从注释1处知，当事件分发到View后，首先调用的接口OnTouchListener的实现方法(在我们开发的时候，经常会对View或ViewGroup设置一些Touch的监听事件)，然后才调用注释2的OnTouchEvent()方法，我们也来看看View的OnTouchEvent()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Touch事件的具体实现方法</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> event The motion event.</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 返回true，此事件被消费，返回false,则没被消费</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</div><div class=\"line\">   </div><div class=\"line\">    ........</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//对View是否可以消费点击事件做判断，是否设置点击事件，是否可点击</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||(viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:<span class=\"comment\">//手指抬起up事件</span></div><div class=\"line\">                <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                        focusTaken = requestFocus();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                        setPressed(<span class=\"keyword\">true</span>);<span class=\"comment\">//Button按压状态变化通知</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (!mHasPerformedLongPress) &#123;</div><div class=\"line\">                        </div><div class=\"line\">                        removeLongPressCallback();<span class=\"comment\">//去除长按状态</span></div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">//执行点击事件</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                           </div><div class=\"line\">                            <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                performClick();<span class=\"comment\">//消费点击事件</span></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    .......</div><div class=\"line\"></div><div class=\"line\">                    removeTapCallback();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:<span class=\"comment\">//手指按下down事件</span></div><div class=\"line\">                 ......</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:<span class=\"comment\">//事件取消</span></div><div class=\"line\">                setPressed(<span class=\"keyword\">false</span>);</div><div class=\"line\">                removeTapCallback();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:<span class=\"comment\">//手指移动move事件</span></div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">                .......</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要是消费事件的方法，当View设置了点击事件或长按事件，那就会对事件进行消费。当手指抬起，也就是ACTION_UP事件时，就执行点击事件方法performClick(),我们也再来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class=\"line\"></div><div class=\"line\">    ListenerInfo li = mListenerInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);<span class=\"comment\">//实现OnClickListener接口</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，主要就是实现了View的onClickListener接口的方法onClick(),也就消费了点击事件。但如果View没有设置点击事件，那就不会消费此方法，而在ViewGroup分发事件的时候就已判断过是否有子View，此时当子View和ViewGroup都没有设置点击事件时，就会直接返回false给上一级，上一级如果也是ViewGroup，那也是类似，如果都返回false，那样事件就将会被Activity的OnTouchEvent()消费掉。</p>\n<p>到这里，Android的事件传递我们就分析完了。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li><strong>只要有一个View消费了ACTION_DOWN事件，剩余的所有事件(ACTION_MOVE、ACTION_UP等)都将由此View消费。</strong></li>\n<li><strong>源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></li>\n</ol>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/dfskhgalshgkajghljgh/article/details/53492488\">Android View 事件分发机制 源码解析（ViewGroup篇）</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78934390\">Activity布局加载流程源码分析(I)</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a></p>"},{"layout":"post","title":"Android显示原理源码分析","date":"2018-03-05T12:42:59.000Z","comments":1,"_content":"---\n在博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们对Android的显示原理简单的说了一下，但没有深入。在博文中我们只知道Choreographer(舞蹈指挥者)只是post了一个操作，但后面到底怎么执行的？按啥逻辑执行的？我们都不清楚，作为一个喜欢刨根问底的程序员，是必须要分析分析的。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **Choreographer：**是\"舞蹈指挥\"者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。\n- **DisplayEventReceiver：**是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。\n- **FrameDisplayEventReceiver：** Choreographer的内部类，也是DisplayEventReceiver具体实现类。\n\n# 一、Android的显示原理\n**Android的显示过程：**\n- i.应用层通过执行View三大绘制流程，把数据缓存在Surface上；\n- ii.应用层通过跨进程通信机制，将数据传给系统层的SurfaceFlinger服务，SurfaceFlinger服务再通过硬件渲染到屏幕上；\n- iii.通过Android刷新机制(每隔16ms会发出VSYNC信号),刷新界面。\n\n<!-- more -->\n\n** 1.应用层（Android应用程序）**\n我们都知道一个Android的UI界面layout是整体一棵由很多不同层次的View组成的树形结构，它们存在着父子关系，子View在父View中，这些View都经过一个相同的流程最终显示到屏幕上。\n\n关于View的绘制流程，在前面两篇博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)和[View绘制三大流程源码分析](http://blog.csdn.net/awenyini/article/details/79006432)中已经说过，这里就不再细说了，想了解的同学，可以回看一下前面的文章。\n\n通过绘制流程，最后绘制数据都缓存到Surface上。\n\n**2.系统层（SurfaceFlinger服务）**\nAndroid是通过系统级进程中的SurfaceFlinger服务来把真正需要显示的数据渲染到屏幕上。SurfaceFlinger的主要工作是：\n\n- 响应客户端事件，创建Layer与客户端的Surface建立连接。\n- 接收客户端数据及属性，修改Layer属性，如尺寸、颜色、透明度等。\n- 将创建的Layer内容刷新到屏幕上。\n- 维持Layer的序列，并对Layer最终输出做出裁剪计算。\n\n因应用层和系统层分别是两个不同进程，需要一个跨进程的通信机制来实现数据传输，在Android的显示系统中，使用了Android的匿名共享内存：SharedClient。每一个应用和SurfaceFlinger之间都会创建一个SharedClient，每个SharedClient中，最多可以创建31个SharedBufferStack，每个Surface都对应一个SharedBufferStack，也就是一个window。这意味着一个Android应用程序最多可以包含31个窗口，同时每个SharedBufferStack中又包含两个(<4.1)或三个(>=4.1)缓冲区。\n\n![](http://img.blog.csdn.net/20170612225948542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n总结：应用层绘制到缓冲区，SurfaceFlinger把缓存区数据渲染到屏幕，两个进程之间使用Android的匿名共享内存SharedClient缓存需要显示的数据。\n\n** 3.Android显示刷新机制**\nAndroid系统一直在不断的优化、更新，但直到4.0版本发布，有关UI显示不流畅的问题仍未得到根本解决。\n\n从Android4.1版本开始，Android对显示系统进行了重构，引入了三个核心元素：VSYNC, Tripple Buffer和Choreographer。VSYNC是Vertical Synchronized的缩写，是一种定时中断；Tripple Buffer是显示数据的缓冲区；Choreographer起调度作用，将绘制工作统一到VSYNC的某个时间点上，使应用的绘制工作有序进行。\n\nAndroid在绘制UI时，会采用一种称为“双缓冲”的技术，双缓冲即使用两个缓冲区（在SharedBufferStack中），其中一个称为Front Buffer，另外一个称为Back Buffer。UI总是先在Back Buffer中绘制，然后再和Front Buffer交换，渲染到显示设备中。理想情况下，一个刷新会在16ms内完成（60FPS），下图就是描述的这样一个刷新过程（Display处理前Front Buffer，CPU、GPU处理Back Buffer。\n\ni.没有VSYNC信号同步时\n\n![](http://img.blog.csdn.net/20170612230450013?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n但实际运行时情况并不一定如此\n\n- 第一个16ms开始：Display显示第0帧，CPU处理完第一帧后，GPU紧接其后处理继续第一帧。三者都在正常工作。\n- 进入第二个16ms：因为早在上一个16ms时间内，第1帧已经由CPU，GPU处理完毕。故Display可以直接显示第1帧。显示没有问题。但在本16ms期间，CPU和GPU却并未及时去绘制第2帧数据（前面的空白区表示CPU和GPU忙其它的事），直到在本周期快结束时，CPU/GPU才去处理第2帧数据。\n- 进入第三个16ms，此时Display应该显示第2帧数据，但由于CPU和GPU还没有处理完第2帧数据，故Display只能继续显示第一帧的数据，结果使得第1帧多画了一次（对应时间段上标注了一个Jank），导致错过了显示第二帧。\n\n\n通过上述分析可知，此处发生Jank的关键问题在于，为何第1个16ms段内，CPU/GPU没有及时处理第2帧数据？原因很简单，CPU可能是在忙别的事情，不知道该到处理UI绘制的时间了。可CPU一旦想起来要去处理第2帧数据，时间又错过了。 为解决这个问题，Android 4.1中引入了VSYNC，核心目的是解决刷新不同步的问题。\n\nii.引入VSYNC信号同步后\n\n![](http://img.blog.csdn.net/20170612230222465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n在加入VSYNC信号同步后，每收到VSYNC中断，CPU就开始处理各帧数据。已经解决了刷新不同步的问题。\n但是上图中仍然存在一个问题：CPU和GPU处理数据的速度似乎都能在16ms内完成，而且还有时间空余，也就是说，CPU/GPU的FPS（帧率）要高于Display的FPS。由于CPU/GPU只在收到VSYNC时才开始数据处理，故它们的FPS被拉低到与Display的FPS相同。但这种处理并没有什么问题，因为Android设备的Display FPS一般是60，其对应的显示效果非常平滑。\n\n但如果CPU/GPU的FPS小于Display的FPS，情况又不同了，将会发生如下图的情况：\n\n![](http://img.blog.csdn.net/20170612230210136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n- 在第二个16ms时间段，Display本应显示B帧，但却因为GPU还在处理B帧，导致A帧被重复显示。\n- 同理，在第二个16ms时间段内，CPU无所事事，因为A Buffer被Display在使用。B Buffer被GPU在使用。注意，一旦过了VSYNC时间点，CPU就不能被触发以处理绘制工作了。\n\n为什么CPU不能在第二个16ms处开始绘制工作呢？原因就是只有两个Buffer（Android 4.1之前）。如果有第三个Buffer的存在，CPU就能直接使用它，而不至于空闲。于是在Android4.1以后，引出了第三个缓冲区：Tripple Buffer。Tripple Buffer利用CPU/GPU的空闲等待时间提前准备好数据，并不一定会使用。\n\niii.引入Tripple Buffer后\n\n引入Tripple Buffer后的刷新时序如下图：\n\n![](http://img.blog.csdn.net/20170612230156826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n上图中，第二个16ms时间段，CPU使用C Buffer绘图。虽然还是会多显示A帧一次，但后续显示就比较顺畅了。\n\n是不是Buffer越多越好呢？回答是否定的。由上图可知，在第二个时间段内，CPU绘制的第C帧数据要到第四个16ms才能显示，这比双Buffer情况多了16ms延迟。所以缓冲区并不是越多越好。\n\n**注：2和3来源于[Android绘制优化----系统显示原理](http://blog.csdn.net/lipengshiwo/article/details/73143222)**\n\n# 三、Android显示原理源码分析\n我们接着[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中Choreographer(舞蹈指挥者)post一个操作继续分析，我们来看相关源码，ViewRootImp中的scheduleTraversals()方法\n```java\n    void scheduleTraversals() {\n        if (!mTraversalScheduled) {\n            ......\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);//核心代码\n            ......\n        }\n    }\n```\n这里主要mChoreographer(舞蹈指挥者)作了一个postCallback操作，主要Action为mTraversalRunnable,我们再来看此变量：\n```java\n    final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();\n        }\n    }\n    final TraversalRunnable mTraversalRunnable = new TraversalRunnable();\n```\n从DecorView绘制流程知，doTraversal()方法主要功能就是执行绘制流程，也就是我们上面说应用层，主要就是把绘制数据缓存到surface上。前面两篇博文已经介绍过了，这里就不介绍了。\n\n我们具体来看看 mChoreographer.postCallback()方法，mChoreographer为ViewRootImp的属性变量，其初始化主要也就是在ViewRootImp的构造方法中，具体我们来看一下：\n```java\n   public ViewRootImpl(Context context) {\n        super();\n        .......\n        mChoreographer = Choreographer.getInstance();\n        .......\n    }\n```\n这里主要用了单例模式来初始化mChoreographer，我们继续来看看Choreographer中的getInstance()方法\n```java\n    public final class Choreographer {\n    .......\n    // Thread local storage for the choreographer.\n    private static final ThreadLocal<Choreographer> sThreadInstance =\n            new ThreadLocal<Choreographer>() {\n        @Override\n        protected Choreographer initialValue() {\n            Looper looper = Looper.myLooper();//1.\n            if (looper == null) {\n                throw new IllegalStateException(\"The current thread must have a looper!\");\n            }\n            return new Choreographer(looper);//2.\n        }\n    };\n\n    public static Choreographer getInstance() {\n        return sThreadInstance.get();\n    }\n   .......\n}\n```\n注释1处，通过Looper.myLooper()获取Looper，我们知道Choreographer主要是在ViewRootImpl的构造函数中初始化的，并且ViewRootImpl是运行在主线程中的，所以此处的Looper也即主线程的Looper。下面让我们继续来看看Choreographer中的postCallback()方法：\n```java\n    public void postCallback(int callbackType, Runnable action, Object token) {\n        postCallbackDelayed(callbackType, action, token, 0);\n    }\n\n    public void postCallbackDelayed(int callbackType,\n            Runnable action, Object token, long delayMillis) {\n        if (action == null) {\n            throw new IllegalArgumentException(\"action must not be null\");\n        }\n        if (callbackType < 0 || callbackType > CALLBACK_LAST) {\n            throw new IllegalArgumentException(\"callbackType is invalid\");\n        }\n\n        postCallbackDelayedInternal(callbackType, action, token, delayMillis);\n    }\n```\n我们继续看看postCallbackDelayedInternal()方法\n```java\n private void postCallbackDelayedInternal(int callbackType,\n            Object action, Object token, long delayMillis) {\n        if (DEBUG) {\n            Log.d(TAG, \"PostCallback: type=\" + callbackType\n                    + \", action=\" + action + \", token=\" + token\n                    + \", delayMillis=\" + delayMillis);\n        }\n\n        synchronized (mLock) {\n            final long now = SystemClock.uptimeMillis();\n            final long dueTime = now + delayMillis;\n\n            //1.将一个遍历操作Action加入数组队列,callbackType = Choreographer.CALLBACK_TRAVERSAL\n            mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);\n\n            //2.根据延迟时间来执行不同的操作\n            if (dueTime <= now) {\n                scheduleFrameLocked(now);//3\n            } else {\n                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);\n                msg.arg1 = callbackType;\n                msg.setAsynchronous(true);\n                mHandler.sendMessageAtTime(msg, dueTime);\n            }\n        }\n```\n此方法主要就是将操作Action加入数组队列mCallbackQueues中，然后通过判断延迟时间执行操作，下面我们继续来看一下注释3，方法scheduleFrameLocked()\n```java\n    private void scheduleFrameLocked(long now) {\n        if (!mFrameScheduled) {\n            mFrameScheduled = true;\n            if (USE_VSYNC) {//是否用VSYNC脉冲\n                if (DEBUG) {\n                    Log.d(TAG, \"Scheduling next frame on vsync.\");\n                }\n                // If running on the Looper thread, then schedule the vsync immediately,\n                // otherwise post a message to schedule the vsync from the UI thread\n                // as soon as possible.\n                if (isRunningOnLooperThreadLocked()) {\n                    scheduleVsyncLocked();\n                } else {\n                    Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);\n                    msg.setAsynchronous(true);\n                    mHandler.sendMessageAtFrontOfQueue(msg);\n                }\n            } else {\n                final long nextFrameTime = Math.max(\n                        mLastFrameTimeNanos / NANOS_PER_MS + sFrameDelay, now);\n                if (DEBUG) {\n                    Log.d(TAG, \"Scheduling next frame in \" + (nextFrameTime - now) + \" ms.\");\n                }\n                Message msg = mHandler.obtainMessage(MSG_DO_FRAME);\n                msg.setAsynchronous(true);\n                mHandler.sendMessageAtTime(msg, nextFrameTime);\n            }\n        }\n    }\n```\n由英文注释知，当用VSYNC脉冲时，看是否在Looper线程也即主线程，如果在直接执行，如果不在就利用Handler消息机制，发送消息，然后执行；如果不用VSYNC脉冲，也是利用handler消息机制发送MSG_DO_FRAME消息执行，我们先来看立即执行方法scheduleVsyncLocked(),然后再看handler消息处理方法\n```java\n    private void scheduleVsyncLocked() {\n        mDisplayEventReceiver.scheduleVsync();\n    }\n```\n这里的mDisplayEventReceiver为FrameDisplayEventReceiver，也即调用FrameDisplayEventReceiver的scheduleVsync()方法，这里我们知道：**FrameDisplayEventReceiver是绘制帧显示的接收器，专门接收系统层发送来的绘制消息**。我们来看一下FrameDisplayEventReceiver\n```java\n  private final class FrameDisplayEventReceiver extends DisplayEventReceiver\n            implements Runnable {\n        private boolean mHavePendingVsync;\n        private long mTimestampNanos;\n        private int mFrame;\n\n        public FrameDisplayEventReceiver(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void onVsync(long timestampNanos, int frame) {\n        .....\n        }\n\n        @Override\n        public void run() {\n            mHavePendingVsync = false;\n            doFrame(mTimestampNanos, mFrame);\n        }\n    }\n```\n由上知道FrameDisplayEventReceiver继承于抽象类DisplayEventReceiver，我们再来看抽象类的源码\n```java\npublic abstract class DisplayEventReceiver {\n    private static final String TAG = \"DisplayEventReceiver\";\n\n    private final CloseGuard mCloseGuard = CloseGuard.get();\n\n    private int mReceiverPtr;\n\n    // We keep a reference message queue object here so that it is not\n    // GC'd while the native peer of the receiver is using them.\n    private MessageQueue mMessageQueue;\n\n    //原生方法\n    private static native int nativeInit(DisplayEventReceiver receiver,\n            MessageQueue messageQueue);\n\n    private static native void nativeDispose(int receiverPtr);\n    private static native void nativeScheduleVsync(int receiverPtr);\n\n    /**\n     * Creates a display event receiver.\n     *\n     * @param looper The looper to use when invoking callbacks.\n     */\n    public DisplayEventReceiver(Looper looper) {\n        if (looper == null) {\n            throw new IllegalArgumentException(\"looper must not be null\");\n        }\n\n        mMessageQueue = looper.getQueue();\n        mReceiverPtr = nativeInit(this, mMessageQueue);\n        mCloseGuard.open(\"dispose\");\n    }\n    .......\n\n    /**\n     * Called when a vertical sync pulse is received.\n     * The recipient should render a frame and then call {@link #scheduleVsync}\n     * to schedule the next vertical sync pulse.\n     * 当收到一个VSYNC脉冲时就会执行此方法\n     *\n     * @param timestampNanos The timestamp of the pulse, in the {@link System#nanoTime()}\n     * timebase.\n     * @param frame The frame number.  Increases by one for each vertical sync interval.\n     */\n    public void onVsync(long timestampNanos, int frame) {\n    }\n\n    /**\n     * Schedules a single vertical sync pulse to be delivered when the next\n     * display frame begins.\n     */\n    public void scheduleVsync() {\n        if (mReceiverPtr == 0) {\n            Log.w(TAG, \"Attempted to schedule a vertical sync pulse but the display event \"\n                    + \"receiver has already been disposed.\");\n        } else {\n            nativeScheduleVsync(mReceiverPtr);\n        }\n    }\n\n    // Called from native code.\n    @SuppressWarnings(\"unused\")\n    private void dispatchVsync(long timestampNanos, int frame) {\n        onVsync(timestampNanos, frame);\n    }\n}\n```\n从此类知，最后调用了原生方法nativeScheduleVsync()，系统发出一个VSYNC脉冲。\n\n我们再来看非Looper线程的情况，Handler消息是怎么处理操作的，我们继续来看handler的处理方法：\n```java\n  private final class FrameHandler extends Handler {\n        public FrameHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_DO_FRAME://直接执行绘制帧\n                    doFrame(System.nanoTime(), 0);\n                    break;\n                case MSG_DO_SCHEDULE_VSYNC:\n                    doScheduleVsync();//通过上面，我们知道这方法最后会发出一个VSYNC信号，从而触发绘制操作\n                    break;\n                case MSG_DO_SCHEDULE_CALLBACK:\n                    doScheduleCallback(msg.arg1);\n                    break;\n            }\n        }\n    }\n```\n我们来看看doScheduleCallback(msg.arg1)方法\n```java\n    void doScheduleCallback(int callbackType) {\n        synchronized (mLock) {\n            if (!mFrameScheduled) {\n                final long now = SystemClock.uptimeMillis();\n                if (mCallbackQueues[callbackType].hasDueCallbacksLocked(now)) {\n                    scheduleFrameLocked(now);//核心方法\n                }\n            }\n        }\n    }\n```\n此方法最后又回到我们前面的方法，又会按相关逻辑执行一遍。所以这里我们主要来看执行绘制帧的方法doFrame()\n```java\n void doFrame(long frameTimeNanos, int frame) {\n\n        ......\n        doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);\n        doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);\n        doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);\n        ......\n    }\n```\n在doFrame()中，我们了解到在Choreographer中，主要就是同步处理输入(CALLBACK_INPUT)、动画(CALLBACK_ANIMATION)、绘制(CALLBACK_TRAVERSAL)三个UI操作，也即应用层绘制操作，doFrame()方法主要就是绘制帧。我们具体来看看doCallbacks()方法\n```java\n  void doCallbacks(int callbackType, long frameTimeNanos) {\n        CallbackRecord callbacks;\n        synchronized (mLock) {\n            // We use \"now\" to determine when callbacks become due because it's possible\n            // for earlier processing phases in a frame to post callbacks that should run\n            // in a following phase, such as an input event that causes an animation to start.\n            final long now = SystemClock.uptimeMillis();\n            callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(now);\n            if (callbacks == null) {\n                return;\n            }\n            mCallbacksRunning = true;\n        }\n        try {\n            for (CallbackRecord c = callbacks; c != null; c = c.next) {//循环操作数组队列\n                if (DEBUG) {\n                    Log.d(TAG, \"RunCallback: type=\" + callbackType\n                            + \", action=\" + c.action + \", token=\" + c.token\n                            + \", latencyMillis=\" + (SystemClock.uptimeMillis() - c.dueTime));\n                }\n                c.run(frameTimeNanos);\n            }\n        } finally {\n            synchronized (mLock) {\n                mCallbacksRunning = false;\n                do {\n                    final CallbackRecord next = callbacks.next;\n                    recycleCallbackLocked(callbacks);\n                    callbacks = next;\n                } while (callbacks != null);\n            }\n        }\n    }\n```\n通过此方法知，主要就是执行数组队列中的run方法，从而实现View的绘制。\n\n主动执行绘制操作的流程我们清楚了，但当系统层发出VSYNC信号，Android系统又是怎么接收的呢？我们在阅读FrameDisplayEventReceiver和DisplayEventReceiver源码时，通过注释发现，当FrameDisplayEventReceiver收到VSYNC信号时，就会调用onVsync()方法，我们来看看此方法：\n```java\n       @Override\n        public void onVsync(long timestampNanos, int frame) {\n            // Post the vsync event to the Handler.\n            // The idea is to prevent incoming vsync events from completely starving\n            // the message queue.  If there are no messages in the queue with timestamps\n            // earlier than the frame time, then the vsync event will be processed immediately.\n            // Otherwise, messages that predate the vsync event will be handled first.\n            .......\n            mTimestampNanos = timestampNanos;\n            mFrame = frame;\n            Message msg = Message.obtain(mHandler, this);\n            msg.setAsynchronous(true);\n            mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);\n        }\n```\n这里msg.what没有赋值，我们知道默认值为0，而MSG_DO_FRAME的值也为0，也就说最后调用了doFrame()方法，所以当收到系统层发出VSYNC信号时，就会执行绘制帧的方法。所以当系统间隔16ms发出VSYNC信号脉冲，就会执行绘制方法doFrame()。\n\n到此，Android显示原理的源码就分析完了。\n\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、参考文档\n[Android绘制优化----系统显示原理](http://blog.csdn.net/lipengshiwo/article/details/73143222)\n\n[Android UI绘制原理(二)](http://blog.csdn.net/itluochen/article/details/52506173)\n\n[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)\n\n[Android SurfaceFlinger服务启动过程源码分析](http://blog.csdn.net/yangwen123/article/details/11890941)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tech_android_framework_surface_draw.md","raw":"---\nlayout: post\ntitle: \"Android显示原理源码分析\"\ndate: 3/5/2018 8:42:59 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n在博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们对Android的显示原理简单的说了一下，但没有深入。在博文中我们只知道Choreographer(舞蹈指挥者)只是post了一个操作，但后面到底怎么执行的？按啥逻辑执行的？我们都不清楚，作为一个喜欢刨根问底的程序员，是必须要分析分析的。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **Choreographer：**是\"舞蹈指挥\"者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。\n- **DisplayEventReceiver：**是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。\n- **FrameDisplayEventReceiver：** Choreographer的内部类，也是DisplayEventReceiver具体实现类。\n\n# 一、Android的显示原理\n**Android的显示过程：**\n- i.应用层通过执行View三大绘制流程，把数据缓存在Surface上；\n- ii.应用层通过跨进程通信机制，将数据传给系统层的SurfaceFlinger服务，SurfaceFlinger服务再通过硬件渲染到屏幕上；\n- iii.通过Android刷新机制(每隔16ms会发出VSYNC信号),刷新界面。\n\n<!-- more -->\n\n** 1.应用层（Android应用程序）**\n我们都知道一个Android的UI界面layout是整体一棵由很多不同层次的View组成的树形结构，它们存在着父子关系，子View在父View中，这些View都经过一个相同的流程最终显示到屏幕上。\n\n关于View的绘制流程，在前面两篇博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)和[View绘制三大流程源码分析](http://blog.csdn.net/awenyini/article/details/79006432)中已经说过，这里就不再细说了，想了解的同学，可以回看一下前面的文章。\n\n通过绘制流程，最后绘制数据都缓存到Surface上。\n\n**2.系统层（SurfaceFlinger服务）**\nAndroid是通过系统级进程中的SurfaceFlinger服务来把真正需要显示的数据渲染到屏幕上。SurfaceFlinger的主要工作是：\n\n- 响应客户端事件，创建Layer与客户端的Surface建立连接。\n- 接收客户端数据及属性，修改Layer属性，如尺寸、颜色、透明度等。\n- 将创建的Layer内容刷新到屏幕上。\n- 维持Layer的序列，并对Layer最终输出做出裁剪计算。\n\n因应用层和系统层分别是两个不同进程，需要一个跨进程的通信机制来实现数据传输，在Android的显示系统中，使用了Android的匿名共享内存：SharedClient。每一个应用和SurfaceFlinger之间都会创建一个SharedClient，每个SharedClient中，最多可以创建31个SharedBufferStack，每个Surface都对应一个SharedBufferStack，也就是一个window。这意味着一个Android应用程序最多可以包含31个窗口，同时每个SharedBufferStack中又包含两个(<4.1)或三个(>=4.1)缓冲区。\n\n![](http://img.blog.csdn.net/20170612225948542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n总结：应用层绘制到缓冲区，SurfaceFlinger把缓存区数据渲染到屏幕，两个进程之间使用Android的匿名共享内存SharedClient缓存需要显示的数据。\n\n** 3.Android显示刷新机制**\nAndroid系统一直在不断的优化、更新，但直到4.0版本发布，有关UI显示不流畅的问题仍未得到根本解决。\n\n从Android4.1版本开始，Android对显示系统进行了重构，引入了三个核心元素：VSYNC, Tripple Buffer和Choreographer。VSYNC是Vertical Synchronized的缩写，是一种定时中断；Tripple Buffer是显示数据的缓冲区；Choreographer起调度作用，将绘制工作统一到VSYNC的某个时间点上，使应用的绘制工作有序进行。\n\nAndroid在绘制UI时，会采用一种称为“双缓冲”的技术，双缓冲即使用两个缓冲区（在SharedBufferStack中），其中一个称为Front Buffer，另外一个称为Back Buffer。UI总是先在Back Buffer中绘制，然后再和Front Buffer交换，渲染到显示设备中。理想情况下，一个刷新会在16ms内完成（60FPS），下图就是描述的这样一个刷新过程（Display处理前Front Buffer，CPU、GPU处理Back Buffer。\n\ni.没有VSYNC信号同步时\n\n![](http://img.blog.csdn.net/20170612230450013?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n但实际运行时情况并不一定如此\n\n- 第一个16ms开始：Display显示第0帧，CPU处理完第一帧后，GPU紧接其后处理继续第一帧。三者都在正常工作。\n- 进入第二个16ms：因为早在上一个16ms时间内，第1帧已经由CPU，GPU处理完毕。故Display可以直接显示第1帧。显示没有问题。但在本16ms期间，CPU和GPU却并未及时去绘制第2帧数据（前面的空白区表示CPU和GPU忙其它的事），直到在本周期快结束时，CPU/GPU才去处理第2帧数据。\n- 进入第三个16ms，此时Display应该显示第2帧数据，但由于CPU和GPU还没有处理完第2帧数据，故Display只能继续显示第一帧的数据，结果使得第1帧多画了一次（对应时间段上标注了一个Jank），导致错过了显示第二帧。\n\n\n通过上述分析可知，此处发生Jank的关键问题在于，为何第1个16ms段内，CPU/GPU没有及时处理第2帧数据？原因很简单，CPU可能是在忙别的事情，不知道该到处理UI绘制的时间了。可CPU一旦想起来要去处理第2帧数据，时间又错过了。 为解决这个问题，Android 4.1中引入了VSYNC，核心目的是解决刷新不同步的问题。\n\nii.引入VSYNC信号同步后\n\n![](http://img.blog.csdn.net/20170612230222465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n在加入VSYNC信号同步后，每收到VSYNC中断，CPU就开始处理各帧数据。已经解决了刷新不同步的问题。\n但是上图中仍然存在一个问题：CPU和GPU处理数据的速度似乎都能在16ms内完成，而且还有时间空余，也就是说，CPU/GPU的FPS（帧率）要高于Display的FPS。由于CPU/GPU只在收到VSYNC时才开始数据处理，故它们的FPS被拉低到与Display的FPS相同。但这种处理并没有什么问题，因为Android设备的Display FPS一般是60，其对应的显示效果非常平滑。\n\n但如果CPU/GPU的FPS小于Display的FPS，情况又不同了，将会发生如下图的情况：\n\n![](http://img.blog.csdn.net/20170612230210136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n- 在第二个16ms时间段，Display本应显示B帧，但却因为GPU还在处理B帧，导致A帧被重复显示。\n- 同理，在第二个16ms时间段内，CPU无所事事，因为A Buffer被Display在使用。B Buffer被GPU在使用。注意，一旦过了VSYNC时间点，CPU就不能被触发以处理绘制工作了。\n\n为什么CPU不能在第二个16ms处开始绘制工作呢？原因就是只有两个Buffer（Android 4.1之前）。如果有第三个Buffer的存在，CPU就能直接使用它，而不至于空闲。于是在Android4.1以后，引出了第三个缓冲区：Tripple Buffer。Tripple Buffer利用CPU/GPU的空闲等待时间提前准备好数据，并不一定会使用。\n\niii.引入Tripple Buffer后\n\n引入Tripple Buffer后的刷新时序如下图：\n\n![](http://img.blog.csdn.net/20170612230156826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n上图中，第二个16ms时间段，CPU使用C Buffer绘图。虽然还是会多显示A帧一次，但后续显示就比较顺畅了。\n\n是不是Buffer越多越好呢？回答是否定的。由上图可知，在第二个时间段内，CPU绘制的第C帧数据要到第四个16ms才能显示，这比双Buffer情况多了16ms延迟。所以缓冲区并不是越多越好。\n\n**注：2和3来源于[Android绘制优化----系统显示原理](http://blog.csdn.net/lipengshiwo/article/details/73143222)**\n\n# 三、Android显示原理源码分析\n我们接着[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中Choreographer(舞蹈指挥者)post一个操作继续分析，我们来看相关源码，ViewRootImp中的scheduleTraversals()方法\n```java\n    void scheduleTraversals() {\n        if (!mTraversalScheduled) {\n            ......\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);//核心代码\n            ......\n        }\n    }\n```\n这里主要mChoreographer(舞蹈指挥者)作了一个postCallback操作，主要Action为mTraversalRunnable,我们再来看此变量：\n```java\n    final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();\n        }\n    }\n    final TraversalRunnable mTraversalRunnable = new TraversalRunnable();\n```\n从DecorView绘制流程知，doTraversal()方法主要功能就是执行绘制流程，也就是我们上面说应用层，主要就是把绘制数据缓存到surface上。前面两篇博文已经介绍过了，这里就不介绍了。\n\n我们具体来看看 mChoreographer.postCallback()方法，mChoreographer为ViewRootImp的属性变量，其初始化主要也就是在ViewRootImp的构造方法中，具体我们来看一下：\n```java\n   public ViewRootImpl(Context context) {\n        super();\n        .......\n        mChoreographer = Choreographer.getInstance();\n        .......\n    }\n```\n这里主要用了单例模式来初始化mChoreographer，我们继续来看看Choreographer中的getInstance()方法\n```java\n    public final class Choreographer {\n    .......\n    // Thread local storage for the choreographer.\n    private static final ThreadLocal<Choreographer> sThreadInstance =\n            new ThreadLocal<Choreographer>() {\n        @Override\n        protected Choreographer initialValue() {\n            Looper looper = Looper.myLooper();//1.\n            if (looper == null) {\n                throw new IllegalStateException(\"The current thread must have a looper!\");\n            }\n            return new Choreographer(looper);//2.\n        }\n    };\n\n    public static Choreographer getInstance() {\n        return sThreadInstance.get();\n    }\n   .......\n}\n```\n注释1处，通过Looper.myLooper()获取Looper，我们知道Choreographer主要是在ViewRootImpl的构造函数中初始化的，并且ViewRootImpl是运行在主线程中的，所以此处的Looper也即主线程的Looper。下面让我们继续来看看Choreographer中的postCallback()方法：\n```java\n    public void postCallback(int callbackType, Runnable action, Object token) {\n        postCallbackDelayed(callbackType, action, token, 0);\n    }\n\n    public void postCallbackDelayed(int callbackType,\n            Runnable action, Object token, long delayMillis) {\n        if (action == null) {\n            throw new IllegalArgumentException(\"action must not be null\");\n        }\n        if (callbackType < 0 || callbackType > CALLBACK_LAST) {\n            throw new IllegalArgumentException(\"callbackType is invalid\");\n        }\n\n        postCallbackDelayedInternal(callbackType, action, token, delayMillis);\n    }\n```\n我们继续看看postCallbackDelayedInternal()方法\n```java\n private void postCallbackDelayedInternal(int callbackType,\n            Object action, Object token, long delayMillis) {\n        if (DEBUG) {\n            Log.d(TAG, \"PostCallback: type=\" + callbackType\n                    + \", action=\" + action + \", token=\" + token\n                    + \", delayMillis=\" + delayMillis);\n        }\n\n        synchronized (mLock) {\n            final long now = SystemClock.uptimeMillis();\n            final long dueTime = now + delayMillis;\n\n            //1.将一个遍历操作Action加入数组队列,callbackType = Choreographer.CALLBACK_TRAVERSAL\n            mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);\n\n            //2.根据延迟时间来执行不同的操作\n            if (dueTime <= now) {\n                scheduleFrameLocked(now);//3\n            } else {\n                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);\n                msg.arg1 = callbackType;\n                msg.setAsynchronous(true);\n                mHandler.sendMessageAtTime(msg, dueTime);\n            }\n        }\n```\n此方法主要就是将操作Action加入数组队列mCallbackQueues中，然后通过判断延迟时间执行操作，下面我们继续来看一下注释3，方法scheduleFrameLocked()\n```java\n    private void scheduleFrameLocked(long now) {\n        if (!mFrameScheduled) {\n            mFrameScheduled = true;\n            if (USE_VSYNC) {//是否用VSYNC脉冲\n                if (DEBUG) {\n                    Log.d(TAG, \"Scheduling next frame on vsync.\");\n                }\n                // If running on the Looper thread, then schedule the vsync immediately,\n                // otherwise post a message to schedule the vsync from the UI thread\n                // as soon as possible.\n                if (isRunningOnLooperThreadLocked()) {\n                    scheduleVsyncLocked();\n                } else {\n                    Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);\n                    msg.setAsynchronous(true);\n                    mHandler.sendMessageAtFrontOfQueue(msg);\n                }\n            } else {\n                final long nextFrameTime = Math.max(\n                        mLastFrameTimeNanos / NANOS_PER_MS + sFrameDelay, now);\n                if (DEBUG) {\n                    Log.d(TAG, \"Scheduling next frame in \" + (nextFrameTime - now) + \" ms.\");\n                }\n                Message msg = mHandler.obtainMessage(MSG_DO_FRAME);\n                msg.setAsynchronous(true);\n                mHandler.sendMessageAtTime(msg, nextFrameTime);\n            }\n        }\n    }\n```\n由英文注释知，当用VSYNC脉冲时，看是否在Looper线程也即主线程，如果在直接执行，如果不在就利用Handler消息机制，发送消息，然后执行；如果不用VSYNC脉冲，也是利用handler消息机制发送MSG_DO_FRAME消息执行，我们先来看立即执行方法scheduleVsyncLocked(),然后再看handler消息处理方法\n```java\n    private void scheduleVsyncLocked() {\n        mDisplayEventReceiver.scheduleVsync();\n    }\n```\n这里的mDisplayEventReceiver为FrameDisplayEventReceiver，也即调用FrameDisplayEventReceiver的scheduleVsync()方法，这里我们知道：**FrameDisplayEventReceiver是绘制帧显示的接收器，专门接收系统层发送来的绘制消息**。我们来看一下FrameDisplayEventReceiver\n```java\n  private final class FrameDisplayEventReceiver extends DisplayEventReceiver\n            implements Runnable {\n        private boolean mHavePendingVsync;\n        private long mTimestampNanos;\n        private int mFrame;\n\n        public FrameDisplayEventReceiver(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void onVsync(long timestampNanos, int frame) {\n        .....\n        }\n\n        @Override\n        public void run() {\n            mHavePendingVsync = false;\n            doFrame(mTimestampNanos, mFrame);\n        }\n    }\n```\n由上知道FrameDisplayEventReceiver继承于抽象类DisplayEventReceiver，我们再来看抽象类的源码\n```java\npublic abstract class DisplayEventReceiver {\n    private static final String TAG = \"DisplayEventReceiver\";\n\n    private final CloseGuard mCloseGuard = CloseGuard.get();\n\n    private int mReceiverPtr;\n\n    // We keep a reference message queue object here so that it is not\n    // GC'd while the native peer of the receiver is using them.\n    private MessageQueue mMessageQueue;\n\n    //原生方法\n    private static native int nativeInit(DisplayEventReceiver receiver,\n            MessageQueue messageQueue);\n\n    private static native void nativeDispose(int receiverPtr);\n    private static native void nativeScheduleVsync(int receiverPtr);\n\n    /**\n     * Creates a display event receiver.\n     *\n     * @param looper The looper to use when invoking callbacks.\n     */\n    public DisplayEventReceiver(Looper looper) {\n        if (looper == null) {\n            throw new IllegalArgumentException(\"looper must not be null\");\n        }\n\n        mMessageQueue = looper.getQueue();\n        mReceiverPtr = nativeInit(this, mMessageQueue);\n        mCloseGuard.open(\"dispose\");\n    }\n    .......\n\n    /**\n     * Called when a vertical sync pulse is received.\n     * The recipient should render a frame and then call {@link #scheduleVsync}\n     * to schedule the next vertical sync pulse.\n     * 当收到一个VSYNC脉冲时就会执行此方法\n     *\n     * @param timestampNanos The timestamp of the pulse, in the {@link System#nanoTime()}\n     * timebase.\n     * @param frame The frame number.  Increases by one for each vertical sync interval.\n     */\n    public void onVsync(long timestampNanos, int frame) {\n    }\n\n    /**\n     * Schedules a single vertical sync pulse to be delivered when the next\n     * display frame begins.\n     */\n    public void scheduleVsync() {\n        if (mReceiverPtr == 0) {\n            Log.w(TAG, \"Attempted to schedule a vertical sync pulse but the display event \"\n                    + \"receiver has already been disposed.\");\n        } else {\n            nativeScheduleVsync(mReceiverPtr);\n        }\n    }\n\n    // Called from native code.\n    @SuppressWarnings(\"unused\")\n    private void dispatchVsync(long timestampNanos, int frame) {\n        onVsync(timestampNanos, frame);\n    }\n}\n```\n从此类知，最后调用了原生方法nativeScheduleVsync()，系统发出一个VSYNC脉冲。\n\n我们再来看非Looper线程的情况，Handler消息是怎么处理操作的，我们继续来看handler的处理方法：\n```java\n  private final class FrameHandler extends Handler {\n        public FrameHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_DO_FRAME://直接执行绘制帧\n                    doFrame(System.nanoTime(), 0);\n                    break;\n                case MSG_DO_SCHEDULE_VSYNC:\n                    doScheduleVsync();//通过上面，我们知道这方法最后会发出一个VSYNC信号，从而触发绘制操作\n                    break;\n                case MSG_DO_SCHEDULE_CALLBACK:\n                    doScheduleCallback(msg.arg1);\n                    break;\n            }\n        }\n    }\n```\n我们来看看doScheduleCallback(msg.arg1)方法\n```java\n    void doScheduleCallback(int callbackType) {\n        synchronized (mLock) {\n            if (!mFrameScheduled) {\n                final long now = SystemClock.uptimeMillis();\n                if (mCallbackQueues[callbackType].hasDueCallbacksLocked(now)) {\n                    scheduleFrameLocked(now);//核心方法\n                }\n            }\n        }\n    }\n```\n此方法最后又回到我们前面的方法，又会按相关逻辑执行一遍。所以这里我们主要来看执行绘制帧的方法doFrame()\n```java\n void doFrame(long frameTimeNanos, int frame) {\n\n        ......\n        doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);\n        doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);\n        doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);\n        ......\n    }\n```\n在doFrame()中，我们了解到在Choreographer中，主要就是同步处理输入(CALLBACK_INPUT)、动画(CALLBACK_ANIMATION)、绘制(CALLBACK_TRAVERSAL)三个UI操作，也即应用层绘制操作，doFrame()方法主要就是绘制帧。我们具体来看看doCallbacks()方法\n```java\n  void doCallbacks(int callbackType, long frameTimeNanos) {\n        CallbackRecord callbacks;\n        synchronized (mLock) {\n            // We use \"now\" to determine when callbacks become due because it's possible\n            // for earlier processing phases in a frame to post callbacks that should run\n            // in a following phase, such as an input event that causes an animation to start.\n            final long now = SystemClock.uptimeMillis();\n            callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(now);\n            if (callbacks == null) {\n                return;\n            }\n            mCallbacksRunning = true;\n        }\n        try {\n            for (CallbackRecord c = callbacks; c != null; c = c.next) {//循环操作数组队列\n                if (DEBUG) {\n                    Log.d(TAG, \"RunCallback: type=\" + callbackType\n                            + \", action=\" + c.action + \", token=\" + c.token\n                            + \", latencyMillis=\" + (SystemClock.uptimeMillis() - c.dueTime));\n                }\n                c.run(frameTimeNanos);\n            }\n        } finally {\n            synchronized (mLock) {\n                mCallbacksRunning = false;\n                do {\n                    final CallbackRecord next = callbacks.next;\n                    recycleCallbackLocked(callbacks);\n                    callbacks = next;\n                } while (callbacks != null);\n            }\n        }\n    }\n```\n通过此方法知，主要就是执行数组队列中的run方法，从而实现View的绘制。\n\n主动执行绘制操作的流程我们清楚了，但当系统层发出VSYNC信号，Android系统又是怎么接收的呢？我们在阅读FrameDisplayEventReceiver和DisplayEventReceiver源码时，通过注释发现，当FrameDisplayEventReceiver收到VSYNC信号时，就会调用onVsync()方法，我们来看看此方法：\n```java\n       @Override\n        public void onVsync(long timestampNanos, int frame) {\n            // Post the vsync event to the Handler.\n            // The idea is to prevent incoming vsync events from completely starving\n            // the message queue.  If there are no messages in the queue with timestamps\n            // earlier than the frame time, then the vsync event will be processed immediately.\n            // Otherwise, messages that predate the vsync event will be handled first.\n            .......\n            mTimestampNanos = timestampNanos;\n            mFrame = frame;\n            Message msg = Message.obtain(mHandler, this);\n            msg.setAsynchronous(true);\n            mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);\n        }\n```\n这里msg.what没有赋值，我们知道默认值为0，而MSG_DO_FRAME的值也为0，也就说最后调用了doFrame()方法，所以当收到系统层发出VSYNC信号时，就会执行绘制帧的方法。所以当系统间隔16ms发出VSYNC信号脉冲，就会执行绘制方法doFrame()。\n\n到此，Android显示原理的源码就分析完了。\n\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 四、参考文档\n[Android绘制优化----系统显示原理](http://blog.csdn.net/lipengshiwo/article/details/73143222)\n\n[Android UI绘制原理(二)](http://blog.csdn.net/itluochen/article/details/52506173)\n\n[Android Choreographer 源码分析](https://www.jianshu.com/p/996bca12eb1d)\n\n[Android SurfaceFlinger服务启动过程源码分析](http://blog.csdn.net/yangwen123/article/details/11890941)\n\n\n\n\n\n\n\n\n\n\n","slug":"tech_android_framework_surface_draw","published":1,"updated":"2019-06-27T08:15:15.320Z","photos":[],"link":"","_id":"cjxfjaet10058ystgjhzwfkzc","content":"<hr>\n<p>在博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>中，我们对Android的显示原理简单的说了一下，但没有深入。在博文中我们只知道Choreographer(舞蹈指挥者)只是post了一个操作，但后面到底怎么执行的？按啥逻辑执行的？我们都不清楚，作为一个喜欢刨根问底的程序员，是必须要分析分析的。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>Choreographer：</strong>是”舞蹈指挥”者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。</li>\n<li><strong>DisplayEventReceiver：</strong>是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。</li>\n<li><strong>FrameDisplayEventReceiver：</strong> Choreographer的内部类，也是DisplayEventReceiver具体实现类。</li>\n</ul>\n<h1 id=\"一、Android的显示原理\"><a href=\"#一、Android的显示原理\" class=\"headerlink\" title=\"一、Android的显示原理\"></a>一、Android的显示原理</h1><p><strong>Android的显示过程：</strong></p>\n<ul>\n<li>i.应用层通过执行View三大绘制流程，把数据缓存在Surface上；</li>\n<li>ii.应用层通过跨进程通信机制，将数据传给系统层的SurfaceFlinger服务，SurfaceFlinger服务再通过硬件渲染到屏幕上；</li>\n<li>iii.通过Android刷新机制(每隔16ms会发出VSYNC信号),刷新界面。</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong> 1.应用层（Android应用程序）</strong><br>我们都知道一个Android的UI界面layout是整体一棵由很多不同层次的View组成的树形结构，它们存在着父子关系，子View在父View中，这些View都经过一个相同的流程最终显示到屏幕上。</p>\n<p>关于View的绘制流程，在前面两篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/79006432\" target=\"_blank\" rel=\"external\">View绘制三大流程源码分析</a>中已经说过，这里就不再细说了，想了解的同学，可以回看一下前面的文章。</p>\n<p>通过绘制流程，最后绘制数据都缓存到Surface上。</p>\n<p><strong>2.系统层（SurfaceFlinger服务）</strong><br>Android是通过系统级进程中的SurfaceFlinger服务来把真正需要显示的数据渲染到屏幕上。SurfaceFlinger的主要工作是：</p>\n<ul>\n<li>响应客户端事件，创建Layer与客户端的Surface建立连接。</li>\n<li>接收客户端数据及属性，修改Layer属性，如尺寸、颜色、透明度等。</li>\n<li>将创建的Layer内容刷新到屏幕上。</li>\n<li>维持Layer的序列，并对Layer最终输出做出裁剪计算。</li>\n</ul>\n<p>因应用层和系统层分别是两个不同进程，需要一个跨进程的通信机制来实现数据传输，在Android的显示系统中，使用了Android的匿名共享内存：SharedClient。每一个应用和SurfaceFlinger之间都会创建一个SharedClient，每个SharedClient中，最多可以创建31个SharedBufferStack，每个Surface都对应一个SharedBufferStack，也就是一个window。这意味着一个Android应用程序最多可以包含31个窗口，同时每个SharedBufferStack中又包含两个(<4.1)或三个(>=4.1)缓冲区。</4.1)或三个(></p>\n<p><img src=\"http://img.blog.csdn.net/20170612225948542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>总结：应用层绘制到缓冲区，SurfaceFlinger把缓存区数据渲染到屏幕，两个进程之间使用Android的匿名共享内存SharedClient缓存需要显示的数据。</p>\n<p><strong> 3.Android显示刷新机制</strong><br>Android系统一直在不断的优化、更新，但直到4.0版本发布，有关UI显示不流畅的问题仍未得到根本解决。</p>\n<p>从Android4.1版本开始，Android对显示系统进行了重构，引入了三个核心元素：VSYNC, Tripple Buffer和Choreographer。VSYNC是Vertical Synchronized的缩写，是一种定时中断；Tripple Buffer是显示数据的缓冲区；Choreographer起调度作用，将绘制工作统一到VSYNC的某个时间点上，使应用的绘制工作有序进行。</p>\n<p>Android在绘制UI时，会采用一种称为“双缓冲”的技术，双缓冲即使用两个缓冲区（在SharedBufferStack中），其中一个称为Front Buffer，另外一个称为Back Buffer。UI总是先在Back Buffer中绘制，然后再和Front Buffer交换，渲染到显示设备中。理想情况下，一个刷新会在16ms内完成（60FPS），下图就是描述的这样一个刷新过程（Display处理前Front Buffer，CPU、GPU处理Back Buffer。</p>\n<p>i.没有VSYNC信号同步时</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230450013?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>但实际运行时情况并不一定如此</p>\n<ul>\n<li>第一个16ms开始：Display显示第0帧，CPU处理完第一帧后，GPU紧接其后处理继续第一帧。三者都在正常工作。</li>\n<li>进入第二个16ms：因为早在上一个16ms时间内，第1帧已经由CPU，GPU处理完毕。故Display可以直接显示第1帧。显示没有问题。但在本16ms期间，CPU和GPU却并未及时去绘制第2帧数据（前面的空白区表示CPU和GPU忙其它的事），直到在本周期快结束时，CPU/GPU才去处理第2帧数据。</li>\n<li>进入第三个16ms，此时Display应该显示第2帧数据，但由于CPU和GPU还没有处理完第2帧数据，故Display只能继续显示第一帧的数据，结果使得第1帧多画了一次（对应时间段上标注了一个Jank），导致错过了显示第二帧。</li>\n</ul>\n<p>通过上述分析可知，此处发生Jank的关键问题在于，为何第1个16ms段内，CPU/GPU没有及时处理第2帧数据？原因很简单，CPU可能是在忙别的事情，不知道该到处理UI绘制的时间了。可CPU一旦想起来要去处理第2帧数据，时间又错过了。 为解决这个问题，Android 4.1中引入了VSYNC，核心目的是解决刷新不同步的问题。</p>\n<p>ii.引入VSYNC信号同步后</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230222465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>在加入VSYNC信号同步后，每收到VSYNC中断，CPU就开始处理各帧数据。已经解决了刷新不同步的问题。<br>但是上图中仍然存在一个问题：CPU和GPU处理数据的速度似乎都能在16ms内完成，而且还有时间空余，也就是说，CPU/GPU的FPS（帧率）要高于Display的FPS。由于CPU/GPU只在收到VSYNC时才开始数据处理，故它们的FPS被拉低到与Display的FPS相同。但这种处理并没有什么问题，因为Android设备的Display FPS一般是60，其对应的显示效果非常平滑。</p>\n<p>但如果CPU/GPU的FPS小于Display的FPS，情况又不同了，将会发生如下图的情况：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230210136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<ul>\n<li>在第二个16ms时间段，Display本应显示B帧，但却因为GPU还在处理B帧，导致A帧被重复显示。</li>\n<li>同理，在第二个16ms时间段内，CPU无所事事，因为A Buffer被Display在使用。B Buffer被GPU在使用。注意，一旦过了VSYNC时间点，CPU就不能被触发以处理绘制工作了。</li>\n</ul>\n<p>为什么CPU不能在第二个16ms处开始绘制工作呢？原因就是只有两个Buffer（Android 4.1之前）。如果有第三个Buffer的存在，CPU就能直接使用它，而不至于空闲。于是在Android4.1以后，引出了第三个缓冲区：Tripple Buffer。Tripple Buffer利用CPU/GPU的空闲等待时间提前准备好数据，并不一定会使用。</p>\n<p>iii.引入Tripple Buffer后</p>\n<p>引入Tripple Buffer后的刷新时序如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230156826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>上图中，第二个16ms时间段，CPU使用C Buffer绘图。虽然还是会多显示A帧一次，但后续显示就比较顺畅了。</p>\n<p>是不是Buffer越多越好呢？回答是否定的。由上图可知，在第二个时间段内，CPU绘制的第C帧数据要到第四个16ms才能显示，这比双Buffer情况多了16ms延迟。所以缓冲区并不是越多越好。</p>\n<p><strong>注：2和3来源于<a href=\"http://blog.csdn.net/lipengshiwo/article/details/73143222\" target=\"_blank\" rel=\"external\">Android绘制优化—-系统显示原理</a></strong></p>\n<h1 id=\"三、Android显示原理源码分析\"><a href=\"#三、Android显示原理源码分析\" class=\"headerlink\" title=\"三、Android显示原理源码分析\"></a>三、Android显示原理源码分析</h1><p>我们接着<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>中Choreographer(舞蹈指挥者)post一个操作继续分析，我们来看相关源码，ViewRootImp中的scheduleTraversals()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        ......</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">        ......</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要mChoreographer(舞蹈指挥者)作了一个postCallback操作，主要Action为mTraversalRunnable,我们再来看此变量：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        doTraversal();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">final</span> TraversalRunnable mTraversalRunnable = <span class=\"keyword\">new</span> TraversalRunnable();</div></pre></td></tr></table></figure></p>\n<p>从DecorView绘制流程知，doTraversal()方法主要功能就是执行绘制流程，也就是我们上面说应用层，主要就是把绘制数据缓存到surface上。前面两篇博文已经介绍过了，这里就不介绍了。</p>\n<p>我们具体来看看 mChoreographer.postCallback()方法，mChoreographer为ViewRootImp的属性变量，其初始化主要也就是在ViewRootImp的构造方法中，具体我们来看一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewRootImpl</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">super</span>();</div><div class=\"line\">     .......</div><div class=\"line\">     mChoreographer = Choreographer.getInstance();</div><div class=\"line\">     .......</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要用了单例模式来初始化mChoreographer，我们继续来看看Choreographer中的getInstance()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Choreographer</span> </span>&#123;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"comment\">// Thread local storage for the choreographer.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Choreographer&gt; sThreadInstance =</div><div class=\"line\">            <span class=\"keyword\">new</span> ThreadLocal&lt;Choreographer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Choreographer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Looper looper = Looper.myLooper();<span class=\"comment\">//1.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (looper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The current thread must have a looper!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Choreographer(looper);<span class=\"comment\">//2.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Choreographer <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sThreadInstance.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">   .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，通过Looper.myLooper()获取Looper，我们知道Choreographer主要是在ViewRootImpl的构造函数中初始化的，并且ViewRootImpl是运行在主线程中的，所以此处的Looper也即主线程的Looper。下面让我们继续来看看Choreographer中的postCallback()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</div><div class=\"line\">    postCallbackDelayed(callbackType, action, token, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayed</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</span></span></div><div class=\"line\">        Runnable action, Object token, <span class=\"keyword\">long</span> delayMillis) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"action must not be null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (callbackType &lt; <span class=\"number\">0</span> || callbackType &gt; CALLBACK_LAST) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"callbackType is invalid\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    postCallbackDelayedInternal(callbackType, action, token, delayMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看看postCallbackDelayedInternal()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayedInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</span></span></div><div class=\"line\">           Object action, Object token, <span class=\"keyword\">long</span> delayMillis) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">           Log.d(TAG, <span class=\"string\">\"PostCallback: type=\"</span> + callbackType</div><div class=\"line\">                   + <span class=\"string\">\", action=\"</span> + action + <span class=\"string\">\", token=\"</span> + token</div><div class=\"line\">                   + <span class=\"string\">\", delayMillis=\"</span> + delayMillis);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> dueTime = now + delayMillis;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//1.将一个遍历操作Action加入数组队列,callbackType = Choreographer.CALLBACK_TRAVERSAL</span></div><div class=\"line\">           mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//2.根据延迟时间来执行不同的操作</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (dueTime &lt;= now) &#123;</div><div class=\"line\">               scheduleFrameLocked(now);<span class=\"comment\">//3</span></div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class=\"line\">               msg.arg1 = callbackType;</div><div class=\"line\">               msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">               mHandler.sendMessageAtTime(msg, dueTime);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要就是将操作Action加入数组队列mCallbackQueues中，然后通过判断延迟时间执行操作，下面我们继续来看一下注释3，方法scheduleFrameLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleFrameLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mFrameScheduled) &#123;</div><div class=\"line\">        mFrameScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (USE_VSYNC) &#123;<span class=\"comment\">//是否用VSYNC脉冲</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Scheduling next frame on vsync.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// If running on the Looper thread, then schedule the vsync immediately,</span></div><div class=\"line\">            <span class=\"comment\">// otherwise post a message to schedule the vsync from the UI thread</span></div><div class=\"line\">            <span class=\"comment\">// as soon as possible.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isRunningOnLooperThreadLocked()) &#123;</div><div class=\"line\">                scheduleVsyncLocked();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</div><div class=\"line\">                msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">                mHandler.sendMessageAtFrontOfQueue(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> nextFrameTime = Math.max(</div><div class=\"line\">                    mLastFrameTimeNanos / NANOS_PER_MS + sFrameDelay, now);</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Scheduling next frame in \"</span> + (nextFrameTime - now) + <span class=\"string\">\" ms.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mHandler.sendMessageAtTime(msg, nextFrameTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由英文注释知，当用VSYNC脉冲时，看是否在Looper线程也即主线程，如果在直接执行，如果不在就利用Handler消息机制，发送消息，然后执行；如果不用VSYNC脉冲，也是利用handler消息机制发送MSG_DO_FRAME消息执行，我们先来看立即执行方法scheduleVsyncLocked(),然后再看handler消息处理方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleVsyncLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mDisplayEventReceiver.scheduleVsync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的mDisplayEventReceiver为FrameDisplayEventReceiver，也即调用FrameDisplayEventReceiver的scheduleVsync()方法，这里我们知道：<strong>FrameDisplayEventReceiver是绘制帧显示的接收器，专门接收系统层发送来的绘制消息</strong>。我们来看一下FrameDisplayEventReceiver<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameDisplayEventReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">DisplayEventReceiver</span></span></div><div class=\"line\">          <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHavePendingVsync;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> mTimestampNanos;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mFrame;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameDisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">      .....</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          mHavePendingVsync = <span class=\"keyword\">false</span>;</div><div class=\"line\">          doFrame(mTimestampNanos, mFrame);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上知道FrameDisplayEventReceiver继承于抽象类DisplayEventReceiver，我们再来看抽象类的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayEventReceiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DisplayEventReceiver\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CloseGuard mCloseGuard = CloseGuard.get();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mReceiverPtr;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We keep a reference message queue object here so that it is not</span></div><div class=\"line\">    <span class=\"comment\">// GC'd while the native peer of the receiver is using them.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MessageQueue mMessageQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//原生方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">nativeInit</span><span class=\"params\">(DisplayEventReceiver receiver,</span></span></div><div class=\"line\">            MessageQueue messageQueue);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativeDispose</span><span class=\"params\">(<span class=\"keyword\">int</span> receiverPtr)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativeScheduleVsync</span><span class=\"params\">(<span class=\"keyword\">int</span> receiverPtr)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Creates a display event receiver.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> looper The looper to use when invoking callbacks.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (looper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"looper must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mMessageQueue = looper.getQueue();</div><div class=\"line\">        mReceiverPtr = nativeInit(<span class=\"keyword\">this</span>, mMessageQueue);</div><div class=\"line\">        mCloseGuard.open(<span class=\"string\">\"dispose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Called when a vertical sync pulse is received.</div><div class=\"line\">     * The recipient should render a frame and then call &#123;<span class=\"doctag\">@link</span> #scheduleVsync&#125;</div><div class=\"line\">     * to schedule the next vertical sync pulse.</div><div class=\"line\">     * 当收到一个VSYNC脉冲时就会执行此方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> timestampNanos The timestamp of the pulse, in the &#123;<span class=\"doctag\">@link</span> System#nanoTime()&#125;</div><div class=\"line\">     * timebase.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame The frame number.  Increases by one for each vertical sync interval.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Schedules a single vertical sync pulse to be delivered when the next</div><div class=\"line\">     * display frame begins.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleVsync</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mReceiverPtr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Attempted to schedule a vertical sync pulse but the display event \"</span></div><div class=\"line\">                    + <span class=\"string\">\"receiver has already been disposed.\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            nativeScheduleVsync(mReceiverPtr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Called from native code.</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">        onVsync(timestampNanos, frame);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从此类知，最后调用了原生方法nativeScheduleVsync()，系统发出一个VSYNC脉冲。</p>\n<p>我们再来看非Looper线程的情况，Handler消息是怎么处理操作的，我们继续来看handler的处理方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_FRAME:<span class=\"comment\">//直接执行绘制帧</span></div><div class=\"line\">                  doFrame(System.nanoTime(), <span class=\"number\">0</span>);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class=\"line\">                  doScheduleVsync();<span class=\"comment\">//通过上面，我们知道这方法最后会发出一个VSYNC信号，从而触发绘制操作</span></div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class=\"line\">                  doScheduleCallback(msg.arg1);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看看doScheduleCallback(msg.arg1)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doScheduleCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mFrameScheduled) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallbackQueues[callbackType].hasDueCallbacksLocked(now)) &#123;</div><div class=\"line\">                scheduleFrameLocked(now);<span class=\"comment\">//核心方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法最后又回到我们前面的方法，又会按相关逻辑执行一遍。所以这里我们主要来看执行绘制帧的方法doFrame()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFrame</span><span class=\"params\">(<span class=\"keyword\">long</span> frameTimeNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ......</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);</div><div class=\"line\">       ......</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在doFrame()中，我们了解到在Choreographer中，主要就是同步处理输入(CALLBACK_INPUT)、动画(CALLBACK_ANIMATION)、绘制(CALLBACK_TRAVERSAL)三个UI操作，也即应用层绘制操作，doFrame()方法主要就是绘制帧。我们具体来看看doCallbacks()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doCallbacks</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, <span class=\"keyword\">long</span> frameTimeNanos)</span> </span>&#123;</div><div class=\"line\">      CallbackRecord callbacks;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">          <span class=\"comment\">// We use \"now\" to determine when callbacks become due because it's possible</span></div><div class=\"line\">          <span class=\"comment\">// for earlier processing phases in a frame to post callbacks that should run</span></div><div class=\"line\">          <span class=\"comment\">// in a following phase, such as an input event that causes an animation to start.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">          callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(now);</div><div class=\"line\">          <span class=\"keyword\">if</span> (callbacks == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          mCallbacksRunning = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (CallbackRecord c = callbacks; c != <span class=\"keyword\">null</span>; c = c.next) &#123;<span class=\"comment\">//循环操作数组队列</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                  Log.d(TAG, <span class=\"string\">\"RunCallback: type=\"</span> + callbackType</div><div class=\"line\">                          + <span class=\"string\">\", action=\"</span> + c.action + <span class=\"string\">\", token=\"</span> + c.token</div><div class=\"line\">                          + <span class=\"string\">\", latencyMillis=\"</span> + (SystemClock.uptimeMillis() - c.dueTime));</div><div class=\"line\">              &#125;</div><div class=\"line\">              c.run(frameTimeNanos);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">              mCallbacksRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> CallbackRecord next = callbacks.next;</div><div class=\"line\">                  recycleCallbackLocked(callbacks);</div><div class=\"line\">                  callbacks = next;</div><div class=\"line\">              &#125; <span class=\"keyword\">while</span> (callbacks != <span class=\"keyword\">null</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过此方法知，主要就是执行数组队列中的run方法，从而实现View的绘制。</p>\n<p>主动执行绘制操作的流程我们清楚了，但当系统层发出VSYNC信号，Android系统又是怎么接收的呢？我们在阅读FrameDisplayEventReceiver和DisplayEventReceiver源码时，通过注释发现，当FrameDisplayEventReceiver收到VSYNC信号时，就会调用onVsync()方法，我们来看看此方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Post the vsync event to the Handler.</span></div><div class=\"line\">     <span class=\"comment\">// The idea is to prevent incoming vsync events from completely starving</span></div><div class=\"line\">     <span class=\"comment\">// the message queue.  If there are no messages in the queue with timestamps</span></div><div class=\"line\">     <span class=\"comment\">// earlier than the frame time, then the vsync event will be processed immediately.</span></div><div class=\"line\">     <span class=\"comment\">// Otherwise, messages that predate the vsync event will be handled first.</span></div><div class=\"line\">     .......</div><div class=\"line\">     mTimestampNanos = timestampNanos;</div><div class=\"line\">     mFrame = frame;</div><div class=\"line\">     Message msg = Message.obtain(mHandler, <span class=\"keyword\">this</span>);</div><div class=\"line\">     msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">     mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>这里msg.what没有赋值，我们知道默认值为0，而MSG_DO_FRAME的值也为0，也就说最后调用了doFrame()方法，所以当收到系统层发出VSYNC信号时，就会执行绘制帧的方法。所以当系统间隔16ms发出VSYNC信号脉冲，就会执行绘制方法doFrame()。</p>\n<p>到此，Android显示原理的源码就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h1><p><a href=\"http://blog.csdn.net/lipengshiwo/article/details/73143222\" target=\"_blank\" rel=\"external\">Android绘制优化—-系统显示原理</a></p>\n<p><a href=\"http://blog.csdn.net/itluochen/article/details/52506173\" target=\"_blank\" rel=\"external\">Android UI绘制原理(二)</a></p>\n<p><a href=\"https://www.jianshu.com/p/996bca12eb1d\" target=\"_blank\" rel=\"external\">Android Choreographer 源码分析</a></p>\n<p><a href=\"http://blog.csdn.net/yangwen123/article/details/11890941\" target=\"_blank\" rel=\"external\">Android SurfaceFlinger服务启动过程源码分析</a></p>\n","excerpt":"<hr>\n<p>在博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>中，我们对Android的显示原理简单的说了一下，但没有深入。在博文中我们只知道Choreographer(舞蹈指挥者)只是post了一个操作，但后面到底怎么执行的？按啥逻辑执行的？我们都不清楚，作为一个喜欢刨根问底的程序员，是必须要分析分析的。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>Choreographer：</strong>是”舞蹈指挥”者，控制同步处理输入(Input)、动画(Animation)、绘制(Draw)三个UI操作。</li>\n<li><strong>DisplayEventReceiver：</strong>是一个抽象类，主要是接收显示绘制帧的垂直脉冲vsync,从而开始绘制帧。</li>\n<li><strong>FrameDisplayEventReceiver：</strong> Choreographer的内部类，也是DisplayEventReceiver具体实现类。</li>\n</ul>\n<h1 id=\"一、Android的显示原理\"><a href=\"#一、Android的显示原理\" class=\"headerlink\" title=\"一、Android的显示原理\"></a>一、Android的显示原理</h1><p><strong>Android的显示过程：</strong></p>\n<ul>\n<li>i.应用层通过执行View三大绘制流程，把数据缓存在Surface上；</li>\n<li>ii.应用层通过跨进程通信机制，将数据传给系统层的SurfaceFlinger服务，SurfaceFlinger服务再通过硬件渲染到屏幕上；</li>\n<li>iii.通过Android刷新机制(每隔16ms会发出VSYNC信号),刷新界面。</li>\n</ul>","more":"<p><strong> 1.应用层（Android应用程序）</strong><br>我们都知道一个Android的UI界面layout是整体一棵由很多不同层次的View组成的树形结构，它们存在着父子关系，子View在父View中，这些View都经过一个相同的流程最终显示到屏幕上。</p>\n<p>关于View的绘制流程，在前面两篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>和<a href=\"http://blog.csdn.net/awenyini/article/details/79006432\">View绘制三大流程源码分析</a>中已经说过，这里就不再细说了，想了解的同学，可以回看一下前面的文章。</p>\n<p>通过绘制流程，最后绘制数据都缓存到Surface上。</p>\n<p><strong>2.系统层（SurfaceFlinger服务）</strong><br>Android是通过系统级进程中的SurfaceFlinger服务来把真正需要显示的数据渲染到屏幕上。SurfaceFlinger的主要工作是：</p>\n<ul>\n<li>响应客户端事件，创建Layer与客户端的Surface建立连接。</li>\n<li>接收客户端数据及属性，修改Layer属性，如尺寸、颜色、透明度等。</li>\n<li>将创建的Layer内容刷新到屏幕上。</li>\n<li>维持Layer的序列，并对Layer最终输出做出裁剪计算。</li>\n</ul>\n<p>因应用层和系统层分别是两个不同进程，需要一个跨进程的通信机制来实现数据传输，在Android的显示系统中，使用了Android的匿名共享内存：SharedClient。每一个应用和SurfaceFlinger之间都会创建一个SharedClient，每个SharedClient中，最多可以创建31个SharedBufferStack，每个Surface都对应一个SharedBufferStack，也就是一个window。这意味着一个Android应用程序最多可以包含31个窗口，同时每个SharedBufferStack中又包含两个(<4.1)或三个(>=4.1)缓冲区。</p>\n<p><img src=\"http://img.blog.csdn.net/20170612225948542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>总结：应用层绘制到缓冲区，SurfaceFlinger把缓存区数据渲染到屏幕，两个进程之间使用Android的匿名共享内存SharedClient缓存需要显示的数据。</p>\n<p><strong> 3.Android显示刷新机制</strong><br>Android系统一直在不断的优化、更新，但直到4.0版本发布，有关UI显示不流畅的问题仍未得到根本解决。</p>\n<p>从Android4.1版本开始，Android对显示系统进行了重构，引入了三个核心元素：VSYNC, Tripple Buffer和Choreographer。VSYNC是Vertical Synchronized的缩写，是一种定时中断；Tripple Buffer是显示数据的缓冲区；Choreographer起调度作用，将绘制工作统一到VSYNC的某个时间点上，使应用的绘制工作有序进行。</p>\n<p>Android在绘制UI时，会采用一种称为“双缓冲”的技术，双缓冲即使用两个缓冲区（在SharedBufferStack中），其中一个称为Front Buffer，另外一个称为Back Buffer。UI总是先在Back Buffer中绘制，然后再和Front Buffer交换，渲染到显示设备中。理想情况下，一个刷新会在16ms内完成（60FPS），下图就是描述的这样一个刷新过程（Display处理前Front Buffer，CPU、GPU处理Back Buffer。</p>\n<p>i.没有VSYNC信号同步时</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230450013?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>但实际运行时情况并不一定如此</p>\n<ul>\n<li>第一个16ms开始：Display显示第0帧，CPU处理完第一帧后，GPU紧接其后处理继续第一帧。三者都在正常工作。</li>\n<li>进入第二个16ms：因为早在上一个16ms时间内，第1帧已经由CPU，GPU处理完毕。故Display可以直接显示第1帧。显示没有问题。但在本16ms期间，CPU和GPU却并未及时去绘制第2帧数据（前面的空白区表示CPU和GPU忙其它的事），直到在本周期快结束时，CPU/GPU才去处理第2帧数据。</li>\n<li>进入第三个16ms，此时Display应该显示第2帧数据，但由于CPU和GPU还没有处理完第2帧数据，故Display只能继续显示第一帧的数据，结果使得第1帧多画了一次（对应时间段上标注了一个Jank），导致错过了显示第二帧。</li>\n</ul>\n<p>通过上述分析可知，此处发生Jank的关键问题在于，为何第1个16ms段内，CPU/GPU没有及时处理第2帧数据？原因很简单，CPU可能是在忙别的事情，不知道该到处理UI绘制的时间了。可CPU一旦想起来要去处理第2帧数据，时间又错过了。 为解决这个问题，Android 4.1中引入了VSYNC，核心目的是解决刷新不同步的问题。</p>\n<p>ii.引入VSYNC信号同步后</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230222465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>在加入VSYNC信号同步后，每收到VSYNC中断，CPU就开始处理各帧数据。已经解决了刷新不同步的问题。<br>但是上图中仍然存在一个问题：CPU和GPU处理数据的速度似乎都能在16ms内完成，而且还有时间空余，也就是说，CPU/GPU的FPS（帧率）要高于Display的FPS。由于CPU/GPU只在收到VSYNC时才开始数据处理，故它们的FPS被拉低到与Display的FPS相同。但这种处理并没有什么问题，因为Android设备的Display FPS一般是60，其对应的显示效果非常平滑。</p>\n<p>但如果CPU/GPU的FPS小于Display的FPS，情况又不同了，将会发生如下图的情况：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230210136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<ul>\n<li>在第二个16ms时间段，Display本应显示B帧，但却因为GPU还在处理B帧，导致A帧被重复显示。</li>\n<li>同理，在第二个16ms时间段内，CPU无所事事，因为A Buffer被Display在使用。B Buffer被GPU在使用。注意，一旦过了VSYNC时间点，CPU就不能被触发以处理绘制工作了。</li>\n</ul>\n<p>为什么CPU不能在第二个16ms处开始绘制工作呢？原因就是只有两个Buffer（Android 4.1之前）。如果有第三个Buffer的存在，CPU就能直接使用它，而不至于空闲。于是在Android4.1以后，引出了第三个缓冲区：Tripple Buffer。Tripple Buffer利用CPU/GPU的空闲等待时间提前准备好数据，并不一定会使用。</p>\n<p>iii.引入Tripple Buffer后</p>\n<p>引入Tripple Buffer后的刷新时序如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612230156826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlwZW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>上图中，第二个16ms时间段，CPU使用C Buffer绘图。虽然还是会多显示A帧一次，但后续显示就比较顺畅了。</p>\n<p>是不是Buffer越多越好呢？回答是否定的。由上图可知，在第二个时间段内，CPU绘制的第C帧数据要到第四个16ms才能显示，这比双Buffer情况多了16ms延迟。所以缓冲区并不是越多越好。</p>\n<p><strong>注：2和3来源于<a href=\"http://blog.csdn.net/lipengshiwo/article/details/73143222\">Android绘制优化—-系统显示原理</a></strong></p>\n<h1 id=\"三、Android显示原理源码分析\"><a href=\"#三、Android显示原理源码分析\" class=\"headerlink\" title=\"三、Android显示原理源码分析\"></a>三、Android显示原理源码分析</h1><p>我们接着<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>中Choreographer(舞蹈指挥者)post一个操作继续分析，我们来看相关源码，ViewRootImp中的scheduleTraversals()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        ......</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">        ......</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要mChoreographer(舞蹈指挥者)作了一个postCallback操作，主要Action为mTraversalRunnable,我们再来看此变量：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        doTraversal();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">final</span> TraversalRunnable mTraversalRunnable = <span class=\"keyword\">new</span> TraversalRunnable();</div></pre></td></tr></table></figure></p>\n<p>从DecorView绘制流程知，doTraversal()方法主要功能就是执行绘制流程，也就是我们上面说应用层，主要就是把绘制数据缓存到surface上。前面两篇博文已经介绍过了，这里就不介绍了。</p>\n<p>我们具体来看看 mChoreographer.postCallback()方法，mChoreographer为ViewRootImp的属性变量，其初始化主要也就是在ViewRootImp的构造方法中，具体我们来看一下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewRootImpl</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">super</span>();</div><div class=\"line\">     .......</div><div class=\"line\">     mChoreographer = Choreographer.getInstance();</div><div class=\"line\">     .......</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要用了单例模式来初始化mChoreographer，我们继续来看看Choreographer中的getInstance()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Choreographer</span> </span>&#123;</div><div class=\"line\">    .......</div><div class=\"line\">    <span class=\"comment\">// Thread local storage for the choreographer.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Choreographer&gt; sThreadInstance =</div><div class=\"line\">            <span class=\"keyword\">new</span> ThreadLocal&lt;Choreographer&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Choreographer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Looper looper = Looper.myLooper();<span class=\"comment\">//1.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (looper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The current thread must have a looper!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Choreographer(looper);<span class=\"comment\">//2.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Choreographer <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sThreadInstance.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">   .......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，通过Looper.myLooper()获取Looper，我们知道Choreographer主要是在ViewRootImpl的构造函数中初始化的，并且ViewRootImpl是运行在主线程中的，所以此处的Looper也即主线程的Looper。下面让我们继续来看看Choreographer中的postCallback()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</div><div class=\"line\">    postCallbackDelayed(callbackType, action, token, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayed</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</div><div class=\"line\">        Runnable action, Object token, <span class=\"keyword\">long</span> delayMillis)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"action must not be null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (callbackType &lt; <span class=\"number\">0</span> || callbackType &gt; CALLBACK_LAST) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"callbackType is invalid\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    postCallbackDelayedInternal(callbackType, action, token, delayMillis);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们继续看看postCallbackDelayedInternal()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayedInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</div><div class=\"line\">           Object action, Object token, <span class=\"keyword\">long</span> delayMillis)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">           Log.d(TAG, <span class=\"string\">\"PostCallback: type=\"</span> + callbackType</div><div class=\"line\">                   + <span class=\"string\">\", action=\"</span> + action + <span class=\"string\">\", token=\"</span> + token</div><div class=\"line\">                   + <span class=\"string\">\", delayMillis=\"</span> + delayMillis);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> dueTime = now + delayMillis;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//1.将一个遍历操作Action加入数组队列,callbackType = Choreographer.CALLBACK_TRAVERSAL</span></div><div class=\"line\">           mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">//2.根据延迟时间来执行不同的操作</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (dueTime &lt;= now) &#123;</div><div class=\"line\">               scheduleFrameLocked(now);<span class=\"comment\">//3</span></div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class=\"line\">               msg.arg1 = callbackType;</div><div class=\"line\">               msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">               mHandler.sendMessageAtTime(msg, dueTime);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要就是将操作Action加入数组队列mCallbackQueues中，然后通过判断延迟时间执行操作，下面我们继续来看一下注释3，方法scheduleFrameLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleFrameLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mFrameScheduled) &#123;</div><div class=\"line\">        mFrameScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (USE_VSYNC) &#123;<span class=\"comment\">//是否用VSYNC脉冲</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Scheduling next frame on vsync.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// If running on the Looper thread, then schedule the vsync immediately,</span></div><div class=\"line\">            <span class=\"comment\">// otherwise post a message to schedule the vsync from the UI thread</span></div><div class=\"line\">            <span class=\"comment\">// as soon as possible.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (isRunningOnLooperThreadLocked()) &#123;</div><div class=\"line\">                scheduleVsyncLocked();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</div><div class=\"line\">                msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">                mHandler.sendMessageAtFrontOfQueue(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> nextFrameTime = Math.max(</div><div class=\"line\">                    mLastFrameTimeNanos / NANOS_PER_MS + sFrameDelay, now);</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Scheduling next frame in \"</span> + (nextFrameTime - now) + <span class=\"string\">\" ms.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mHandler.sendMessageAtTime(msg, nextFrameTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由英文注释知，当用VSYNC脉冲时，看是否在Looper线程也即主线程，如果在直接执行，如果不在就利用Handler消息机制，发送消息，然后执行；如果不用VSYNC脉冲，也是利用handler消息机制发送MSG_DO_FRAME消息执行，我们先来看立即执行方法scheduleVsyncLocked(),然后再看handler消息处理方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleVsyncLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mDisplayEventReceiver.scheduleVsync();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里的mDisplayEventReceiver为FrameDisplayEventReceiver，也即调用FrameDisplayEventReceiver的scheduleVsync()方法，这里我们知道：<strong>FrameDisplayEventReceiver是绘制帧显示的接收器，专门接收系统层发送来的绘制消息</strong>。我们来看一下FrameDisplayEventReceiver<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameDisplayEventReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">DisplayEventReceiver</span></div><div class=\"line\">          <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHavePendingVsync;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> mTimestampNanos;</div><div class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mFrame;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameDisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">      .....</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          mHavePendingVsync = <span class=\"keyword\">false</span>;</div><div class=\"line\">          doFrame(mTimestampNanos, mFrame);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上知道FrameDisplayEventReceiver继承于抽象类DisplayEventReceiver，我们再来看抽象类的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayEventReceiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DisplayEventReceiver\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CloseGuard mCloseGuard = CloseGuard.get();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mReceiverPtr;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We keep a reference message queue object here so that it is not</span></div><div class=\"line\">    <span class=\"comment\">// GC'd while the native peer of the receiver is using them.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MessageQueue mMessageQueue;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//原生方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">nativeInit</span><span class=\"params\">(DisplayEventReceiver receiver,</div><div class=\"line\">            MessageQueue messageQueue)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativeDispose</span><span class=\"params\">(<span class=\"keyword\">int</span> receiverPtr)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">nativeScheduleVsync</span><span class=\"params\">(<span class=\"keyword\">int</span> receiverPtr)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Creates a display event receiver.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> looper The looper to use when invoking callbacks.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (looper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"looper must not be null\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mMessageQueue = looper.getQueue();</div><div class=\"line\">        mReceiverPtr = nativeInit(<span class=\"keyword\">this</span>, mMessageQueue);</div><div class=\"line\">        mCloseGuard.open(<span class=\"string\">\"dispose\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    .......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Called when a vertical sync pulse is received.</div><div class=\"line\">     * The recipient should render a frame and then call &#123;<span class=\"doctag\">@link</span> #scheduleVsync&#125;</div><div class=\"line\">     * to schedule the next vertical sync pulse.</div><div class=\"line\">     * 当收到一个VSYNC脉冲时就会执行此方法</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> timestampNanos The timestamp of the pulse, in the &#123;<span class=\"doctag\">@link</span> System#nanoTime()&#125;</div><div class=\"line\">     * timebase.</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame The frame number.  Increases by one for each vertical sync interval.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Schedules a single vertical sync pulse to be delivered when the next</div><div class=\"line\">     * display frame begins.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleVsync</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mReceiverPtr == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Attempted to schedule a vertical sync pulse but the display event \"</span></div><div class=\"line\">                    + <span class=\"string\">\"receiver has already been disposed.\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            nativeScheduleVsync(mReceiverPtr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Called from native code.</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">        onVsync(timestampNanos, frame);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从此类知，最后调用了原生方法nativeScheduleVsync()，系统发出一个VSYNC脉冲。</p>\n<p>我们再来看非Looper线程的情况，Handler消息是怎么处理操作的，我们继续来看handler的处理方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_FRAME:<span class=\"comment\">//直接执行绘制帧</span></div><div class=\"line\">                  doFrame(System.nanoTime(), <span class=\"number\">0</span>);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class=\"line\">                  doScheduleVsync();<span class=\"comment\">//通过上面，我们知道这方法最后会发出一个VSYNC信号，从而触发绘制操作</span></div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class=\"line\">                  doScheduleCallback(msg.arg1);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>我们来看看doScheduleCallback(msg.arg1)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doScheduleCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mFrameScheduled) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallbackQueues[callbackType].hasDueCallbacksLocked(now)) &#123;</div><div class=\"line\">                scheduleFrameLocked(now);<span class=\"comment\">//核心方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此方法最后又回到我们前面的方法，又会按相关逻辑执行一遍。所以这里我们主要来看执行绘制帧的方法doFrame()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFrame</span><span class=\"params\">(<span class=\"keyword\">long</span> frameTimeNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ......</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);</div><div class=\"line\">       doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);</div><div class=\"line\">       ......</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在doFrame()中，我们了解到在Choreographer中，主要就是同步处理输入(CALLBACK_INPUT)、动画(CALLBACK_ANIMATION)、绘制(CALLBACK_TRAVERSAL)三个UI操作，也即应用层绘制操作，doFrame()方法主要就是绘制帧。我们具体来看看doCallbacks()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doCallbacks</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, <span class=\"keyword\">long</span> frameTimeNanos)</span> </span>&#123;</div><div class=\"line\">      CallbackRecord callbacks;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">          <span class=\"comment\">// We use \"now\" to determine when callbacks become due because it's possible</span></div><div class=\"line\">          <span class=\"comment\">// for earlier processing phases in a frame to post callbacks that should run</span></div><div class=\"line\">          <span class=\"comment\">// in a following phase, such as an input event that causes an animation to start.</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">          callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(now);</div><div class=\"line\">          <span class=\"keyword\">if</span> (callbacks == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          mCallbacksRunning = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (CallbackRecord c = callbacks; c != <span class=\"keyword\">null</span>; c = c.next) &#123;<span class=\"comment\">//循环操作数组队列</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                  Log.d(TAG, <span class=\"string\">\"RunCallback: type=\"</span> + callbackType</div><div class=\"line\">                          + <span class=\"string\">\", action=\"</span> + c.action + <span class=\"string\">\", token=\"</span> + c.token</div><div class=\"line\">                          + <span class=\"string\">\", latencyMillis=\"</span> + (SystemClock.uptimeMillis() - c.dueTime));</div><div class=\"line\">              &#125;</div><div class=\"line\">              c.run(frameTimeNanos);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">              mCallbacksRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> CallbackRecord next = callbacks.next;</div><div class=\"line\">                  recycleCallbackLocked(callbacks);</div><div class=\"line\">                  callbacks = next;</div><div class=\"line\">              &#125; <span class=\"keyword\">while</span> (callbacks != <span class=\"keyword\">null</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过此方法知，主要就是执行数组队列中的run方法，从而实现View的绘制。</p>\n<p>主动执行绘制操作的流程我们清楚了，但当系统层发出VSYNC信号，Android系统又是怎么接收的呢？我们在阅读FrameDisplayEventReceiver和DisplayEventReceiver源码时，通过注释发现，当FrameDisplayEventReceiver收到VSYNC信号时，就会调用onVsync()方法，我们来看看此方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">// Post the vsync event to the Handler.</span></div><div class=\"line\">     <span class=\"comment\">// The idea is to prevent incoming vsync events from completely starving</span></div><div class=\"line\">     <span class=\"comment\">// the message queue.  If there are no messages in the queue with timestamps</span></div><div class=\"line\">     <span class=\"comment\">// earlier than the frame time, then the vsync event will be processed immediately.</span></div><div class=\"line\">     <span class=\"comment\">// Otherwise, messages that predate the vsync event will be handled first.</span></div><div class=\"line\">     .......</div><div class=\"line\">     mTimestampNanos = timestampNanos;</div><div class=\"line\">     mFrame = frame;</div><div class=\"line\">     Message msg = Message.obtain(mHandler, <span class=\"keyword\">this</span>);</div><div class=\"line\">     msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">     mHandler.sendMessageAtTime(msg, timestampNanos / NANOS_PER_MS);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>这里msg.what没有赋值，我们知道默认值为0，而MSG_DO_FRAME的值也为0，也就说最后调用了doFrame()方法，所以当收到系统层发出VSYNC信号时，就会执行绘制帧的方法。所以当系统间隔16ms发出VSYNC信号脉冲，就会执行绘制方法doFrame()。</p>\n<p>到此，Android显示原理的源码就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h1><p><a href=\"http://blog.csdn.net/lipengshiwo/article/details/73143222\">Android绘制优化—-系统显示原理</a></p>\n<p><a href=\"http://blog.csdn.net/itluochen/article/details/52506173\">Android UI绘制原理(二)</a></p>\n<p><a href=\"https://www.jianshu.com/p/996bca12eb1d\">Android Choreographer 源码分析</a></p>\n<p><a href=\"http://blog.csdn.net/yangwen123/article/details/11890941\">Android SurfaceFlinger服务启动过程源码分析</a></p>"},{"layout":"post","title":"Butter Knife框架源码解析","date":"2017-11-17T03:22:25.000Z","comments":1,"_content":"---\n最初的开始，findViewById()获取View控件，setOnClickListener设置View的监听事件，然后UI界面开始有响应。当初完成这个操作，有点兴奋，而这也成为我Android开发的起点。随着时间的推移，android也越来越熟悉，findViewById和setOnClickListener不知写了多少遍，偶发现有好大一部分时间，就是在写findViewById获取变量。针对这问题，在网络上发现了Jake Wharton大神的Butterknife开源框架，后用之，节约了很多时间。本篇博文将会对Butterknife源码进行解析。\n\n# 一、什么是Butterknife？\nButterknife，是专门为Android View设计的绑定注解框架，专业解放各种findViewById和setOnClickListener。\n\nButterknife地址：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n# 二、Butterknife源码解析\n**1.Butterknife绑定分析**\n```java\npublic class FeedbackActivity extends Activity{\n\n    @BindView(R.id.mContentEdit)\n    EditText mContentEdit;\n\n    @BindView(R.id.mSubmitBtn)//1.View注解\n    TextView mSubmitBtn;\n\n    @BindView(R.id.mContentCountTv)\n    TextView mContentCountTv;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_feedback);\n        ButterKnife.bind(this);//3.与Activity绑定\n    }\n\n    @OnClick(R.id.mSubmitBtn)//2.View监听事件注解\n    public void onClick() {\n    }\n}\n```\n<!-- more -->\n由1知，@BindView注解FeedbackActivity的3个View变量，由2知，@OnClick注解View的监听事件。然而这三个变量和监听事件，是怎么和FeedbackActivity关联起来的呢？这里就需要我们注意3与Activity的绑定，即ButterKnife.bind(this)方法。进入ButterKnife源码看看。\n```java\n  /**\n   * BindView annotated fields and methods in the specified {@link Activity}. The current content\n   * view is used as the view root.\n   *\n   * @param target Target activity for view binding.\n   */\n  @NonNull @UiThread\n  public static Unbinder bind(@NonNull Activity target) {\n    View sourceView = target.getWindow().getDecorView();\n    return createBinding(target, sourceView);\n  }\n```\nButterKnife中bind有多个重载，针对View，Dialog，Activtiy等，具体可以自行查看ButterKnife源码，这里主要针对Activity。我们继续看createBinding方法,\n```java\n private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {\n    Class<?> targetClass = target.getClass();\n    if (debug) Log.d(TAG, \"Looking up binding for \" + targetClass.getName());\n\n    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);//查找辅助绑定类的构造方法\n\n    if (constructor == null) {\n      return Unbinder.EMPTY;\n    }\n\n    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.\n    try {\n      return constructor.newInstance(target, source);//初始化了构造方法\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InvocationTargetException e) {\n      Throwable cause = e.getCause();\n      if (cause instanceof RuntimeException) {\n        throw (RuntimeException) cause;\n      }\n      if (cause instanceof Error) {\n        throw (Error) cause;\n      }\n      throw new RuntimeException(\"Unable to create binding instance.\", cause);\n    }\n  }\n```\nfindBindingConstructorForClass()通过传入目标类即Activity，查找辅助绑定类的构造方法。继续看findBindingConstructorForClass()方法\n```java\n  @Nullable @CheckResult @UiThread\n  private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {\n    Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);\n    if (bindingCtor != null) {\n      if (debug) Log.d(TAG, \"HIT: Cached in binding map.\");\n      return bindingCtor;\n    }\n    String clsName = cls.getName();//获取绑定类的name\n    if (clsName.startsWith(\"android.\") || clsName.startsWith(\"java.\")) {\n      if (debug) Log.d(TAG, \"MISS: Reached framework class. Abandoning search.\");\n      return null;\n    }\n    try {\n      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + \"_ViewBinding\");//核心方法，通过反射加载类\"FeedbackActivity_ViewBinding\"\n      //noinspection unchecked\n      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);//获取\"FeedbackActivity_ViewBinding\"构造函数，\n      if (debug) Log.d(TAG, \"HIT: Loaded binding class and constructor.\");\n    } catch (ClassNotFoundException e) {\n      if (debug) Log.d(TAG, \"Not found. Trying superclass \" + cls.getSuperclass().getName());\n      bindingCtor = findBindingConstructorForClass(cls.getSuperclass());\n    } catch (NoSuchMethodException e) {\n      throw new RuntimeException(\"Unable to find binding constructor for \" + clsName, e);\n    }\n    BINDINGS.put(cls, bindingCtor);\n    return bindingCtor;//返回绑定类的构造函数，初始化\n  }\n```\n通过反射加载FeedbackActivity_ViewBinding类，而FeedbackActivity_ViewBinding类到底像啥样呢？这里我们可以先看一下此类,后面将会分析此类怎么生成。\n```java\npublic class FeedbackActivity_ViewBinding<T extends FeedbackActivity> implements Unbinder {\n  protected T target;\n\n  private View view2131624065;\n\n  @UiThread\n  public FeedbackActivity_ViewBinding(final T target, View source) {\n    this.target = target;\n    View view;\n    target.mContentEdit = Utils.findRequiredViewAsType(source, R.id.mContentEdit, \"field 'mContentEdit'\", EditText.class);\n    view = Utils.findRequiredView(source, R.id.mSubmitBtn, \"field 'mSubmitBtn' and method 'onClick'\");\n    target.mSubmitBtn = Utils.castView(view, R.id.mSubmitBtn, \"field 'mSubmitBtn'\", TextView.class);\n    view2131624065 = view;\n    view.setOnClickListener(new DebouncingOnClickListener() {\n      @Override\n      public void doClick(View p0) {\n        target.onClick();\n      }\n    });\n    target.mContentCountTv = Utils.findRequiredViewAsType(source, R.id.mContentCountTv, \"field 'mContentCountTv'\", TextView.class);\n  }\n...省略...\n}\n```\n其中findRequiredViewAsType和findRequiredView方法皆是Utils的方法，我们查看Utils方法可以知道，两个方法最后都调了findViewById方法,从而就绑定了注解的View变量，绑定View监听事件。\n```java\n  public static <T> T findRequiredViewAsType(View source, @IdRes int id, String who,\n      Class<T> cls) {\n    View view = findRequiredView(source, id, who);\n    return castView(view, id, who, cls);\n  }\n\n\n  public static View findRequiredView(View source, @IdRes int id, String who) {\n    View view = source.findViewById(id);\n    if (view != null) {\n      return view;\n    }\n    String name = getResourceEntryName(source, id);\n    throw new IllegalStateException(\"Required view '\"\n        + name\n        + \"' with ID \"\n        + id\n        + \" for \"\n        + who\n        + \" was not found. If this view is optional add '@Nullable' (fields) or '@Optional'\"\n        + \" (methods) annotation.\");\n  }\n```\n到这里，ButterKnife的绑定流程就介绍完了。**ButterKnife主要就是通过注解，然后生成一个辅助类动态绑定View,解放开发者**。下面我们将会分析辅助类FeedbackActivity_ViewBinding的生成。\n\n**2.Butterknife辅助类的生成**\n\n由上，我们知Butterknife框架是用注解的方式实现的，注解的实现方式，很容易让我们想到通过Java反射机制实现，但是我们知道如果通过反射，是在运行时（Runtime）来处理View的绑定等一些列事件，这样比较耗费资源，会影响应用的性能。**Butterknife框架没有用java反射机制，而是使用APT(Annotation Processing Tool)编译时解析技术。**提到APT，我们就必须要了解AbstractProcessor类，通过继承此类，编译器在编译的时候，会扫描所有带有你注解的类，然后再调用AbstractProcessor的process方法，对注解进行处理，然后生成相关的辅助类，如上FeedbackActivity_ViewBinding。\n\n在Butterknife框架中ButterKnifeProcessor继承了AbstractProcessor，所以我们重点来关注一下ButterKnifeProcessor的process方法\n```java\n  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {\n    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);//1.核心方法\n\n    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {\n      TypeElement typeElement = entry.getKey();\n      BindingSet binding = entry.getValue();\n\n      JavaFile javaFile = binding.brewJava(sdk, debuggable);//2.核心方法\n      try {\n        javaFile.writeTo(filer);//3.核心方法\n      } catch (IOException e) {\n        error(typeElement, \"Unable to write binding for type %s: %s\", typeElement, e.getMessage());\n      }\n    }\n\n    return false;\n  }\n```\n通过遍历bindingMap，再利用JavaFile，就可以生成辅助类了。bindingMap的类型为Map<TypeElement, BindingSet>，其中TypeElement为key,BindingSet为值，TypeElement和BindingSet两个类在Butterknife框架中都是辅助生成辅助类的方法。**BindingSet对辅助类的生成起到非常重要的作用，类名，变量，方法名各种信息都是储存在BindingSet类中。**这里不重讲了。让我们继续分析findAndParseTargets方法。\n```java\nprivate Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {\n    Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();\n    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();\n\n    scanForRClasses(env);//1.扫描所有注解类\n\n    .........//省略的内容雷同BindView注解\n\n    // Process each @BindView element.\n    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {//2.遍历有@BindView注解的类\n      // we don't SuperficialValidation.validateElement(element)\n      // so that an unresolved View type can be generated by later processing rounds\n      try {\n        parseBindView(element, builderMap, erasedTargetNames);//3.解析@BindView注解类\n      } catch (Exception e) {\n        logParsingError(element, BindView.class, e);\n      }\n    }\n    .........//省略的内容雷同BindView注解\n\n    // Process each annotation that corresponds to a listener.\n    for (Class<? extends Annotation> listener : LISTENERS) {//4.遍历监听事件注解类\n      findAndParseListener(env, listener, builderMap, erasedTargetNames);\n    }\n\n    // Associate superclass binders with their subclass binders. This is a queue-based tree walk\n    // which starts at the roots (superclasses) and walks to the leafs (subclasses).\n    Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =\n        new ArrayDeque<>(builderMap.entrySet());\n    Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();\n    while (!entries.isEmpty()) {\n      Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();\n\n      TypeElement type = entry.getKey();\n      BindingSet.Builder builder = entry.getValue();\n\n      TypeElement parentType = findParentType(type, erasedTargetNames);\n      if (parentType == null) {\n        bindingMap.put(type, builder.build());\n      } else {\n        BindingSet parentBinding = bindingMap.get(parentType);\n        if (parentBinding != null) {\n          builder.setParent(parentBinding);\n          bindingMap.put(type, builder.build());\n        } else {\n          // Has a superclass binding but we haven't built it yet. Re-enqueue for later.\n          entries.addLast(entry);\n        }\n      }\n    }\n    return bindingMap;\n  }\n\n```\n方法scanForRClasses，主要是扫描所有类，区分注解类。这里不重点讲了。拿到@BindView的注解类后，遍历，然后通过parseBindView方法解析，我们继续看parseBindView方法\n```java\n private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,\n      Set<TypeElement> erasedTargetNames) {\n    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();\n\n    .......//省略代码，主要检测注解的合法性，这里不介绍\n\n    if (hasError) {\n      return;\n    }\n\n    // Assemble information on the field.\n    int id = element.getAnnotation(BindView.class).value();//1.获取注解值，相当于获取view ID（R.id.mSubmitBtn）\n\n    BindingSet.Builder builder = builderMap.get(enclosingElement);//2.builderMap中获取BindingSet.Builder\n    QualifiedId qualifiedId = elementToQualifiedId(element, id);\n    if (builder != null) {//3.builder是否为空\n      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));\n      if (existingBindingName != null) {//4.检测是否重复绑定\n        error(element, \"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",\n            BindView.class.getSimpleName(), id, existingBindingName,\n            enclosingElement.getQualifiedName(), element.getSimpleName());\n        return;\n      }\n    } else {\n      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);//5.为空，需要重新get或生成一个新的BindingSet.Builder\n    }\n\n    String name = simpleName.toString();\n    TypeName type = TypeName.get(elementType);\n    boolean required = isFieldRequired(element);\n\n    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));//6.往Builder中添加新值\n\n    // Add the type-erased version to the valid binding targets set.\n    erasedTargetNames.add(enclosingElement);\n  }\n```\n第一次，一般都为空值，所以会执行getOrCreateBindingBuilder(builderMap, enclosingElement)方法，其中传入了BuilderMap和enclosingElement,我们继续来看方法getOrCreateBindingBuilder\n```java\n  private BindingSet.Builder getOrCreateBindingBuilder(\n      Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {\n    BindingSet.Builder builder = builderMap.get(enclosingElement);\n    if (builder == null) {\n      builder = BindingSet.newBuilder(enclosingElement);\n      builderMap.put(enclosingElement, builder);\n    }\n    return builder;\n  }\n```\n其中，再次判断了builderMap中是否已存在BindingSet.Builder，不存在就新建，通过BindingSet.newBuilder(enclosingElement)方法，让我继续看BindingSet中newBuilder方法\n```java\n  static Builder newBuilder(TypeElement enclosingElement) {\n    TypeMirror typeMirror = enclosingElement.asType();\n\n    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);\n    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);\n    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);\n\n    TypeName targetType = TypeName.get(typeMirror);\n    if (targetType instanceof ParameterizedTypeName) {\n      targetType = ((ParameterizedTypeName) targetType).rawType;\n    }\n\n    String packageName = getPackage(enclosingElement).getQualifiedName().toString();\n    String className = enclosingElement.getQualifiedName().toString().substring(\n        packageName.length() + 1).replace('.', '$');\n    ClassName bindingClassName = ClassName.get(packageName, className + \"_ViewBinding\");//辅助类的类名\n\n    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);\n    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);\n  }\n```\n上面说到BindingSet对辅助类的生成起到非常重要的作用，这里生成了辅助类的类名，并保存在bindingSet.builder中，最后put入了builderMap中。在解析的过程中，BindingSet的都伴随左右，可以看出她在ButterKnifeProcessor类中的重要性。到这里我们在回溯一下。\n\n**1.BindingSet.newBuilder(enclosingElement) 生成类名及相关类型定义 -> 2.BuilderMap.put(enclosingElement, builder) put入Map<TypeElement, BindingSet.Builder>中 ->3.builderMap.get(enclosingElement)获取BindingSet.builder -> 4.builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required))往Builder中添加注解值 ->Map<TypeElement, BindingSet.Builder>转换成Map<TypeElement, BindingSet> -> 遍历BindingMap -> bindingSet.brewJava(sdk, debuggable).write(filter)生成辅助类。**\n\n到这里，Butterknife框架生成辅助类，就讲解的差不多了。其中核心原理就是利用BindingSet类强大的类构建能力，生成相关类名，方法和核心代码。对于BindingSet具体是怎么生成辅助类的，想深入了解的朋友也可以下载ButterKnife源码对BindingSet进行深度了解，这里主要介绍ButterKnife框架原理。\n\n# 三、总结\n通过了解Butterknife框架，知其思想真是值得称赞。注解绑定一下，就告别重复的findViewById等方法，节约了开发时间，提高了效率。\n\n# 四、相关及参考文档\n\n[Butterknife官方指引](http://jakewharton.github.io/butterknife/)\n\n[ButterKnife源码剖析](http://blog.csdn.net/chenkai19920410/article/details/51020151)\n\n[Annontation注解的应用及介绍](http://blog.csdn.net/awenyini/article/details/77478230)\n\n[Android编译时注解APT实战（AbstractProcessor）](http://www.jianshu.com/p/07ef8ba80562)\n\n","source":"_posts/tech_butterknife.md","raw":"---\nlayout: post\ntitle: \"Butter Knife框架源码解析\"\ndate: 11/17/2017 11:22:25 AM  \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 开源框架源码解析\n\t- Butterknife框架源码解析\n---\n---\n最初的开始，findViewById()获取View控件，setOnClickListener设置View的监听事件，然后UI界面开始有响应。当初完成这个操作，有点兴奋，而这也成为我Android开发的起点。随着时间的推移，android也越来越熟悉，findViewById和setOnClickListener不知写了多少遍，偶发现有好大一部分时间，就是在写findViewById获取变量。针对这问题，在网络上发现了Jake Wharton大神的Butterknife开源框架，后用之，节约了很多时间。本篇博文将会对Butterknife源码进行解析。\n\n# 一、什么是Butterknife？\nButterknife，是专门为Android View设计的绑定注解框架，专业解放各种findViewById和setOnClickListener。\n\nButterknife地址：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n# 二、Butterknife源码解析\n**1.Butterknife绑定分析**\n```java\npublic class FeedbackActivity extends Activity{\n\n    @BindView(R.id.mContentEdit)\n    EditText mContentEdit;\n\n    @BindView(R.id.mSubmitBtn)//1.View注解\n    TextView mSubmitBtn;\n\n    @BindView(R.id.mContentCountTv)\n    TextView mContentCountTv;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_feedback);\n        ButterKnife.bind(this);//3.与Activity绑定\n    }\n\n    @OnClick(R.id.mSubmitBtn)//2.View监听事件注解\n    public void onClick() {\n    }\n}\n```\n<!-- more -->\n由1知，@BindView注解FeedbackActivity的3个View变量，由2知，@OnClick注解View的监听事件。然而这三个变量和监听事件，是怎么和FeedbackActivity关联起来的呢？这里就需要我们注意3与Activity的绑定，即ButterKnife.bind(this)方法。进入ButterKnife源码看看。\n```java\n  /**\n   * BindView annotated fields and methods in the specified {@link Activity}. The current content\n   * view is used as the view root.\n   *\n   * @param target Target activity for view binding.\n   */\n  @NonNull @UiThread\n  public static Unbinder bind(@NonNull Activity target) {\n    View sourceView = target.getWindow().getDecorView();\n    return createBinding(target, sourceView);\n  }\n```\nButterKnife中bind有多个重载，针对View，Dialog，Activtiy等，具体可以自行查看ButterKnife源码，这里主要针对Activity。我们继续看createBinding方法,\n```java\n private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {\n    Class<?> targetClass = target.getClass();\n    if (debug) Log.d(TAG, \"Looking up binding for \" + targetClass.getName());\n\n    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);//查找辅助绑定类的构造方法\n\n    if (constructor == null) {\n      return Unbinder.EMPTY;\n    }\n\n    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.\n    try {\n      return constructor.newInstance(target, source);//初始化了构造方法\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(\"Unable to invoke \" + constructor, e);\n    } catch (InvocationTargetException e) {\n      Throwable cause = e.getCause();\n      if (cause instanceof RuntimeException) {\n        throw (RuntimeException) cause;\n      }\n      if (cause instanceof Error) {\n        throw (Error) cause;\n      }\n      throw new RuntimeException(\"Unable to create binding instance.\", cause);\n    }\n  }\n```\nfindBindingConstructorForClass()通过传入目标类即Activity，查找辅助绑定类的构造方法。继续看findBindingConstructorForClass()方法\n```java\n  @Nullable @CheckResult @UiThread\n  private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {\n    Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);\n    if (bindingCtor != null) {\n      if (debug) Log.d(TAG, \"HIT: Cached in binding map.\");\n      return bindingCtor;\n    }\n    String clsName = cls.getName();//获取绑定类的name\n    if (clsName.startsWith(\"android.\") || clsName.startsWith(\"java.\")) {\n      if (debug) Log.d(TAG, \"MISS: Reached framework class. Abandoning search.\");\n      return null;\n    }\n    try {\n      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + \"_ViewBinding\");//核心方法，通过反射加载类\"FeedbackActivity_ViewBinding\"\n      //noinspection unchecked\n      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);//获取\"FeedbackActivity_ViewBinding\"构造函数，\n      if (debug) Log.d(TAG, \"HIT: Loaded binding class and constructor.\");\n    } catch (ClassNotFoundException e) {\n      if (debug) Log.d(TAG, \"Not found. Trying superclass \" + cls.getSuperclass().getName());\n      bindingCtor = findBindingConstructorForClass(cls.getSuperclass());\n    } catch (NoSuchMethodException e) {\n      throw new RuntimeException(\"Unable to find binding constructor for \" + clsName, e);\n    }\n    BINDINGS.put(cls, bindingCtor);\n    return bindingCtor;//返回绑定类的构造函数，初始化\n  }\n```\n通过反射加载FeedbackActivity_ViewBinding类，而FeedbackActivity_ViewBinding类到底像啥样呢？这里我们可以先看一下此类,后面将会分析此类怎么生成。\n```java\npublic class FeedbackActivity_ViewBinding<T extends FeedbackActivity> implements Unbinder {\n  protected T target;\n\n  private View view2131624065;\n\n  @UiThread\n  public FeedbackActivity_ViewBinding(final T target, View source) {\n    this.target = target;\n    View view;\n    target.mContentEdit = Utils.findRequiredViewAsType(source, R.id.mContentEdit, \"field 'mContentEdit'\", EditText.class);\n    view = Utils.findRequiredView(source, R.id.mSubmitBtn, \"field 'mSubmitBtn' and method 'onClick'\");\n    target.mSubmitBtn = Utils.castView(view, R.id.mSubmitBtn, \"field 'mSubmitBtn'\", TextView.class);\n    view2131624065 = view;\n    view.setOnClickListener(new DebouncingOnClickListener() {\n      @Override\n      public void doClick(View p0) {\n        target.onClick();\n      }\n    });\n    target.mContentCountTv = Utils.findRequiredViewAsType(source, R.id.mContentCountTv, \"field 'mContentCountTv'\", TextView.class);\n  }\n...省略...\n}\n```\n其中findRequiredViewAsType和findRequiredView方法皆是Utils的方法，我们查看Utils方法可以知道，两个方法最后都调了findViewById方法,从而就绑定了注解的View变量，绑定View监听事件。\n```java\n  public static <T> T findRequiredViewAsType(View source, @IdRes int id, String who,\n      Class<T> cls) {\n    View view = findRequiredView(source, id, who);\n    return castView(view, id, who, cls);\n  }\n\n\n  public static View findRequiredView(View source, @IdRes int id, String who) {\n    View view = source.findViewById(id);\n    if (view != null) {\n      return view;\n    }\n    String name = getResourceEntryName(source, id);\n    throw new IllegalStateException(\"Required view '\"\n        + name\n        + \"' with ID \"\n        + id\n        + \" for \"\n        + who\n        + \" was not found. If this view is optional add '@Nullable' (fields) or '@Optional'\"\n        + \" (methods) annotation.\");\n  }\n```\n到这里，ButterKnife的绑定流程就介绍完了。**ButterKnife主要就是通过注解，然后生成一个辅助类动态绑定View,解放开发者**。下面我们将会分析辅助类FeedbackActivity_ViewBinding的生成。\n\n**2.Butterknife辅助类的生成**\n\n由上，我们知Butterknife框架是用注解的方式实现的，注解的实现方式，很容易让我们想到通过Java反射机制实现，但是我们知道如果通过反射，是在运行时（Runtime）来处理View的绑定等一些列事件，这样比较耗费资源，会影响应用的性能。**Butterknife框架没有用java反射机制，而是使用APT(Annotation Processing Tool)编译时解析技术。**提到APT，我们就必须要了解AbstractProcessor类，通过继承此类，编译器在编译的时候，会扫描所有带有你注解的类，然后再调用AbstractProcessor的process方法，对注解进行处理，然后生成相关的辅助类，如上FeedbackActivity_ViewBinding。\n\n在Butterknife框架中ButterKnifeProcessor继承了AbstractProcessor，所以我们重点来关注一下ButterKnifeProcessor的process方法\n```java\n  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {\n    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);//1.核心方法\n\n    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {\n      TypeElement typeElement = entry.getKey();\n      BindingSet binding = entry.getValue();\n\n      JavaFile javaFile = binding.brewJava(sdk, debuggable);//2.核心方法\n      try {\n        javaFile.writeTo(filer);//3.核心方法\n      } catch (IOException e) {\n        error(typeElement, \"Unable to write binding for type %s: %s\", typeElement, e.getMessage());\n      }\n    }\n\n    return false;\n  }\n```\n通过遍历bindingMap，再利用JavaFile，就可以生成辅助类了。bindingMap的类型为Map<TypeElement, BindingSet>，其中TypeElement为key,BindingSet为值，TypeElement和BindingSet两个类在Butterknife框架中都是辅助生成辅助类的方法。**BindingSet对辅助类的生成起到非常重要的作用，类名，变量，方法名各种信息都是储存在BindingSet类中。**这里不重讲了。让我们继续分析findAndParseTargets方法。\n```java\nprivate Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {\n    Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();\n    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();\n\n    scanForRClasses(env);//1.扫描所有注解类\n\n    .........//省略的内容雷同BindView注解\n\n    // Process each @BindView element.\n    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {//2.遍历有@BindView注解的类\n      // we don't SuperficialValidation.validateElement(element)\n      // so that an unresolved View type can be generated by later processing rounds\n      try {\n        parseBindView(element, builderMap, erasedTargetNames);//3.解析@BindView注解类\n      } catch (Exception e) {\n        logParsingError(element, BindView.class, e);\n      }\n    }\n    .........//省略的内容雷同BindView注解\n\n    // Process each annotation that corresponds to a listener.\n    for (Class<? extends Annotation> listener : LISTENERS) {//4.遍历监听事件注解类\n      findAndParseListener(env, listener, builderMap, erasedTargetNames);\n    }\n\n    // Associate superclass binders with their subclass binders. This is a queue-based tree walk\n    // which starts at the roots (superclasses) and walks to the leafs (subclasses).\n    Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =\n        new ArrayDeque<>(builderMap.entrySet());\n    Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();\n    while (!entries.isEmpty()) {\n      Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();\n\n      TypeElement type = entry.getKey();\n      BindingSet.Builder builder = entry.getValue();\n\n      TypeElement parentType = findParentType(type, erasedTargetNames);\n      if (parentType == null) {\n        bindingMap.put(type, builder.build());\n      } else {\n        BindingSet parentBinding = bindingMap.get(parentType);\n        if (parentBinding != null) {\n          builder.setParent(parentBinding);\n          bindingMap.put(type, builder.build());\n        } else {\n          // Has a superclass binding but we haven't built it yet. Re-enqueue for later.\n          entries.addLast(entry);\n        }\n      }\n    }\n    return bindingMap;\n  }\n\n```\n方法scanForRClasses，主要是扫描所有类，区分注解类。这里不重点讲了。拿到@BindView的注解类后，遍历，然后通过parseBindView方法解析，我们继续看parseBindView方法\n```java\n private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,\n      Set<TypeElement> erasedTargetNames) {\n    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();\n\n    .......//省略代码，主要检测注解的合法性，这里不介绍\n\n    if (hasError) {\n      return;\n    }\n\n    // Assemble information on the field.\n    int id = element.getAnnotation(BindView.class).value();//1.获取注解值，相当于获取view ID（R.id.mSubmitBtn）\n\n    BindingSet.Builder builder = builderMap.get(enclosingElement);//2.builderMap中获取BindingSet.Builder\n    QualifiedId qualifiedId = elementToQualifiedId(element, id);\n    if (builder != null) {//3.builder是否为空\n      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));\n      if (existingBindingName != null) {//4.检测是否重复绑定\n        error(element, \"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",\n            BindView.class.getSimpleName(), id, existingBindingName,\n            enclosingElement.getQualifiedName(), element.getSimpleName());\n        return;\n      }\n    } else {\n      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);//5.为空，需要重新get或生成一个新的BindingSet.Builder\n    }\n\n    String name = simpleName.toString();\n    TypeName type = TypeName.get(elementType);\n    boolean required = isFieldRequired(element);\n\n    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));//6.往Builder中添加新值\n\n    // Add the type-erased version to the valid binding targets set.\n    erasedTargetNames.add(enclosingElement);\n  }\n```\n第一次，一般都为空值，所以会执行getOrCreateBindingBuilder(builderMap, enclosingElement)方法，其中传入了BuilderMap和enclosingElement,我们继续来看方法getOrCreateBindingBuilder\n```java\n  private BindingSet.Builder getOrCreateBindingBuilder(\n      Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {\n    BindingSet.Builder builder = builderMap.get(enclosingElement);\n    if (builder == null) {\n      builder = BindingSet.newBuilder(enclosingElement);\n      builderMap.put(enclosingElement, builder);\n    }\n    return builder;\n  }\n```\n其中，再次判断了builderMap中是否已存在BindingSet.Builder，不存在就新建，通过BindingSet.newBuilder(enclosingElement)方法，让我继续看BindingSet中newBuilder方法\n```java\n  static Builder newBuilder(TypeElement enclosingElement) {\n    TypeMirror typeMirror = enclosingElement.asType();\n\n    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);\n    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);\n    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);\n\n    TypeName targetType = TypeName.get(typeMirror);\n    if (targetType instanceof ParameterizedTypeName) {\n      targetType = ((ParameterizedTypeName) targetType).rawType;\n    }\n\n    String packageName = getPackage(enclosingElement).getQualifiedName().toString();\n    String className = enclosingElement.getQualifiedName().toString().substring(\n        packageName.length() + 1).replace('.', '$');\n    ClassName bindingClassName = ClassName.get(packageName, className + \"_ViewBinding\");//辅助类的类名\n\n    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);\n    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);\n  }\n```\n上面说到BindingSet对辅助类的生成起到非常重要的作用，这里生成了辅助类的类名，并保存在bindingSet.builder中，最后put入了builderMap中。在解析的过程中，BindingSet的都伴随左右，可以看出她在ButterKnifeProcessor类中的重要性。到这里我们在回溯一下。\n\n**1.BindingSet.newBuilder(enclosingElement) 生成类名及相关类型定义 -> 2.BuilderMap.put(enclosingElement, builder) put入Map<TypeElement, BindingSet.Builder>中 ->3.builderMap.get(enclosingElement)获取BindingSet.builder -> 4.builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required))往Builder中添加注解值 ->Map<TypeElement, BindingSet.Builder>转换成Map<TypeElement, BindingSet> -> 遍历BindingMap -> bindingSet.brewJava(sdk, debuggable).write(filter)生成辅助类。**\n\n到这里，Butterknife框架生成辅助类，就讲解的差不多了。其中核心原理就是利用BindingSet类强大的类构建能力，生成相关类名，方法和核心代码。对于BindingSet具体是怎么生成辅助类的，想深入了解的朋友也可以下载ButterKnife源码对BindingSet进行深度了解，这里主要介绍ButterKnife框架原理。\n\n# 三、总结\n通过了解Butterknife框架，知其思想真是值得称赞。注解绑定一下，就告别重复的findViewById等方法，节约了开发时间，提高了效率。\n\n# 四、相关及参考文档\n\n[Butterknife官方指引](http://jakewharton.github.io/butterknife/)\n\n[ButterKnife源码剖析](http://blog.csdn.net/chenkai19920410/article/details/51020151)\n\n[Annontation注解的应用及介绍](http://blog.csdn.net/awenyini/article/details/77478230)\n\n[Android编译时注解APT实战（AbstractProcessor）](http://www.jianshu.com/p/07ef8ba80562)\n\n","slug":"tech_butterknife","published":1,"updated":"2019-06-27T08:15:15.330Z","photos":[],"link":"","_id":"cjxfjaet2005aystgm6pi1nnb","content":"<hr>\n<p>最初的开始，findViewById()获取View控件，setOnClickListener设置View的监听事件，然后UI界面开始有响应。当初完成这个操作，有点兴奋，而这也成为我Android开发的起点。随着时间的推移，android也越来越熟悉，findViewById和setOnClickListener不知写了多少遍，偶发现有好大一部分时间，就是在写findViewById获取变量。针对这问题，在网络上发现了Jake Wharton大神的Butterknife开源框架，后用之，节约了很多时间。本篇博文将会对Butterknife源码进行解析。</p>\n<h1 id=\"一、什么是Butterknife？\"><a href=\"#一、什么是Butterknife？\" class=\"headerlink\" title=\"一、什么是Butterknife？\"></a>一、什么是Butterknife？</h1><p>Butterknife，是专门为Android View设计的绑定注解框架，专业解放各种findViewById和setOnClickListener。</p>\n<p>Butterknife地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a></p>\n<h1 id=\"二、Butterknife源码解析\"><a href=\"#二、Butterknife源码解析\" class=\"headerlink\" title=\"二、Butterknife源码解析\"></a>二、Butterknife源码解析</h1><p><strong>1.Butterknife绑定分析</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeedbackActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mContentEdit)</div><div class=\"line\">    EditText mContentEdit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mSubmitBtn)<span class=\"comment\">//1.View注解</span></div><div class=\"line\">    TextView mSubmitBtn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mContentCountTv)</div><div class=\"line\">    TextView mContentCountTv;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_feedback);</div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);<span class=\"comment\">//3.与Activity绑定</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(R.id.mSubmitBtn)<span class=\"comment\">//2.View监听事件注解</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>由1知，@BindView注解FeedbackActivity的3个View变量，由2知，@OnClick注解View的监听事件。然而这三个变量和监听事件，是怎么和FeedbackActivity关联起来的呢？这里就需要我们注意3与Activity的绑定，即ButterKnife.bind(this)方法。进入ButterKnife源码看看。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * BindView annotated fields and methods in the specified &#123;<span class=\"doctag\">@link</span> Activity&#125;. The current content</div><div class=\"line\"> * view is used as the view root.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> target Target activity for view binding.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@NonNull</span> <span class=\"meta\">@UiThread</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unbinder <span class=\"title\">bind</span><span class=\"params\">(@NonNull Activity target)</span> </span>&#123;</div><div class=\"line\">  View sourceView = target.getWindow().getDecorView();</div><div class=\"line\">  <span class=\"keyword\">return</span> createBinding(target, sourceView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ButterKnife中bind有多个重载，针对View，Dialog，Activtiy等，具体可以自行查看ButterKnife源码，这里主要针对Activity。我们继续看createBinding方法,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Unbinder <span class=\"title\">createBinding</span><span class=\"params\">(@NonNull Object target, @NonNull View source)</span> </span>&#123;</div><div class=\"line\">   Class&lt;?&gt; targetClass = target.getClass();</div><div class=\"line\">   <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"Looking up binding for \"</span> + targetClass.getName());</div><div class=\"line\"></div><div class=\"line\">   Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);<span class=\"comment\">//查找辅助绑定类的构造方法</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> Unbinder.EMPTY;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span></div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> constructor.newInstance(target, source);<span class=\"comment\">//初始化了构造方法</span></div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to invoke \"</span> + constructor, e);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to invoke \"</span> + constructor, e);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">     Throwable cause = e.getCause();</div><div class=\"line\">     <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> (RuntimeException) cause;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> Error) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> (Error) cause;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to create binding instance.\"</span>, cause);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>findBindingConstructorForClass()通过传入目标类即Activity，查找辅助绑定类的构造方法。继续看findBindingConstructorForClass()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Nullable</span> <span class=\"meta\">@CheckResult</span> <span class=\"meta\">@UiThread</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) &#123;</div><div class=\"line\">  Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls);</div><div class=\"line\">  <span class=\"keyword\">if</span> (bindingCtor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"HIT: Cached in binding map.\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> bindingCtor;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String clsName = cls.getName();<span class=\"comment\">//获取绑定类的name</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (clsName.startsWith(<span class=\"string\">\"android.\"</span>) || clsName.startsWith(<span class=\"string\">\"java.\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"MISS: Reached framework class. Abandoning search.\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + <span class=\"string\">\"_ViewBinding\"</span>);<span class=\"comment\">//核心方法，通过反射加载类\"FeedbackActivity_ViewBinding\"</span></div><div class=\"line\">    <span class=\"comment\">//noinspection unchecked</span></div><div class=\"line\">    bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View.class);<span class=\"comment\">//获取\"FeedbackActivity_ViewBinding\"构造函数，</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"HIT: Loaded binding class and constructor.\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"Not found. Trying superclass \"</span> + cls.getSuperclass().getName());</div><div class=\"line\">    bindingCtor = findBindingConstructorForClass(cls.getSuperclass());</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to find binding constructor for \"</span> + clsName, e);</div><div class=\"line\">  &#125;</div><div class=\"line\">  BINDINGS.put(cls, bindingCtor);</div><div class=\"line\">  <span class=\"keyword\">return</span> bindingCtor;<span class=\"comment\">//返回绑定类的构造函数，初始化</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过反射加载FeedbackActivity_ViewBinding类，而FeedbackActivity_ViewBinding类到底像啥样呢？这里我们可以先看一下此类,后面将会分析此类怎么生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeedbackActivity_ViewBinding</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">FeedbackActivity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Unbinder</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> T target;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> View view2131624065;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@UiThread</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FeedbackActivity_ViewBinding</span><span class=\"params\">(<span class=\"keyword\">final</span> T target, View source)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">    View view;</div><div class=\"line\">    target.mContentEdit = Utils.findRequiredViewAsType(source, R.id.mContentEdit, <span class=\"string\">\"field 'mContentEdit'\"</span>, EditText.class);</div><div class=\"line\">    view = Utils.findRequiredView(source, R.id.mSubmitBtn, <span class=\"string\">\"field 'mSubmitBtn' and method 'onClick'\"</span>);</div><div class=\"line\">    target.mSubmitBtn = Utils.castView(view, R.id.mSubmitBtn, <span class=\"string\">\"field 'mSubmitBtn'\"</span>, TextView.class);</div><div class=\"line\">    view2131624065 = view;</div><div class=\"line\">    view.setOnClickListener(<span class=\"keyword\">new</span> DebouncingOnClickListener() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">(View p0)</span> </span>&#123;</div><div class=\"line\">        target.onClick();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    target.mContentCountTv = Utils.findRequiredViewAsType(source, R.id.mContentCountTv, <span class=\"string\">\"field 'mContentCountTv'\"</span>, TextView.class);</div><div class=\"line\">  &#125;</div><div class=\"line\">...省略...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中findRequiredViewAsType和findRequiredView方法皆是Utils的方法，我们查看Utils方法可以知道，两个方法最后都调了findViewById方法,从而就绑定了注解的View变量，绑定View监听事件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">findRequiredViewAsType</span><span class=\"params\">(View source, @IdRes <span class=\"keyword\">int</span> id, String who,</span></span></div><div class=\"line\">    Class&lt;T&gt; cls) &#123;</div><div class=\"line\">  View view = findRequiredView(source, id, who);</div><div class=\"line\">  <span class=\"keyword\">return</span> castView(view, id, who, cls);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> View <span class=\"title\">findRequiredView</span><span class=\"params\">(View source, @IdRes <span class=\"keyword\">int</span> id, String who)</span> </span>&#123;</div><div class=\"line\">  View view = source.findViewById(id);</div><div class=\"line\">  <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String name = getResourceEntryName(source, id);</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Required view '\"</span></div><div class=\"line\">      + name</div><div class=\"line\">      + <span class=\"string\">\"' with ID \"</span></div><div class=\"line\">      + id</div><div class=\"line\">      + <span class=\"string\">\" for \"</span></div><div class=\"line\">      + who</div><div class=\"line\">      + <span class=\"string\">\" was not found. If this view is optional add '@Nullable' (fields) or '@Optional'\"</span></div><div class=\"line\">      + <span class=\"string\">\" (methods) annotation.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，ButterKnife的绑定流程就介绍完了。<strong>ButterKnife主要就是通过注解，然后生成一个辅助类动态绑定View,解放开发者</strong>。下面我们将会分析辅助类FeedbackActivity_ViewBinding的生成。</p>\n<p><strong>2.Butterknife辅助类的生成</strong></p>\n<p>由上，我们知Butterknife框架是用注解的方式实现的，注解的实现方式，很容易让我们想到通过Java反射机制实现，但是我们知道如果通过反射，是在运行时（Runtime）来处理View的绑定等一些列事件，这样比较耗费资源，会影响应用的性能。<strong>Butterknife框架没有用java反射机制，而是使用APT(Annotation Processing Tool)编译时解析技术。</strong>提到APT，我们就必须要了解AbstractProcessor类，通过继承此类，编译器在编译的时候，会扫描所有带有你注解的类，然后再调用AbstractProcessor的process方法，对注解进行处理，然后生成相关的辅助类，如上FeedbackActivity_ViewBinding。</p>\n<p>在Butterknife框架中ButterKnifeProcessor继承了AbstractProcessor，所以我们重点来关注一下ButterKnifeProcessor的process方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">  Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</div><div class=\"line\">    TypeElement typeElement = entry.getKey();</div><div class=\"line\">    BindingSet binding = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">    JavaFile javaFile = binding.brewJava(sdk, debuggable);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      javaFile.writeTo(filer);<span class=\"comment\">//3.核心方法</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      error(typeElement, <span class=\"string\">\"Unable to write binding for type %s: %s\"</span>, typeElement, e.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历bindingMap，再利用JavaFile，就可以生成辅助类了。bindingMap的类型为Map<typeelement, bindingset=\"\">，其中TypeElement为key,BindingSet为值，TypeElement和BindingSet两个类在Butterknife框架中都是辅助生成辅助类的方法。<strong>BindingSet对辅助类的生成起到非常重要的作用，类名，变量，方法名各种信息都是储存在BindingSet类中。</strong>这里不重讲了。让我们继续分析findAndParseTargets方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Map&lt;TypeElement, BindingSet&gt; <span class=\"title\">findAndParseTargets</span><span class=\"params\">(RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    Set&lt;TypeElement&gt; erasedTargetNames = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    scanForRClasses(env);<span class=\"comment\">//1.扫描所有注解类</span></div><div class=\"line\"></div><div class=\"line\">    .........<span class=\"comment\">//省略的内容雷同BindView注解</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each @BindView element.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Element element : env.getElementsAnnotatedWith(BindView.class)) &#123;<span class=\"comment\">//2.遍历有@BindView注解的类</span></div><div class=\"line\">      <span class=\"comment\">// we don't SuperficialValidation.validateElement(element)</span></div><div class=\"line\">      <span class=\"comment\">// so that an unresolved View type can be generated by later processing rounds</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        parseBindView(element, builderMap, erasedTargetNames);<span class=\"comment\">//3.解析@BindView注解类</span></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logParsingError(element, BindView.class, e);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .........<span class=\"comment\">//省略的内容雷同BindView注解</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each annotation that corresponds to a listener.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;? extends Annotation&gt; listener : LISTENERS) &#123;<span class=\"comment\">//4.遍历监听事件注解类</span></div><div class=\"line\">      findAndParseListener(env, listener, builderMap, erasedTargetNames);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Associate superclass binders with their subclass binders. This is a queue-based tree walk</span></div><div class=\"line\">    <span class=\"comment\">// which starts at the roots (superclasses) and walks to the leafs (subclasses).</span></div><div class=\"line\">    Deque&lt;Map.Entry&lt;TypeElement, BindingSet.Builder&gt;&gt; entries =</div><div class=\"line\">        <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;(builderMap.entrySet());</div><div class=\"line\">    Map&lt;TypeElement, BindingSet&gt; bindingMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">while</span> (!entries.isEmpty()) &#123;</div><div class=\"line\">      Map.Entry&lt;TypeElement, BindingSet.Builder&gt; entry = entries.removeFirst();</div><div class=\"line\"></div><div class=\"line\">      TypeElement type = entry.getKey();</div><div class=\"line\">      BindingSet.Builder builder = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">      TypeElement parentType = findParentType(type, erasedTargetNames);</div><div class=\"line\">      <span class=\"keyword\">if</span> (parentType == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        bindingMap.put(type, builder.build());</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BindingSet parentBinding = bindingMap.get(parentType);</div><div class=\"line\">        <span class=\"keyword\">if</span> (parentBinding != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          builder.setParent(parentBinding);</div><div class=\"line\">          bindingMap.put(type, builder.build());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// Has a superclass binding but we haven't built it yet. Re-enqueue for later.</span></div><div class=\"line\">          entries.addLast(entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bindingMap;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></typeelement,></p>\n<p>方法scanForRClasses，主要是扫描所有类，区分注解类。这里不重点讲了。拿到@BindView的注解类后，遍历，然后通过parseBindView方法解析，我们继续看parseBindView方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBindView</span><span class=\"params\">(Element element, Map&lt;TypeElement, BindingSet.Builder&gt; builderMap,</span></span></div><div class=\"line\">     Set&lt;TypeElement&gt; erasedTargetNames) &#123;</div><div class=\"line\">   TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</div><div class=\"line\"></div><div class=\"line\">   .......<span class=\"comment\">//省略代码，主要检测注解的合法性，这里不介绍</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (hasError) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Assemble information on the field.</span></div><div class=\"line\">   <span class=\"keyword\">int</span> id = element.getAnnotation(BindView.class).value();<span class=\"comment\">//1.获取注解值，相当于获取view ID（R.id.mSubmitBtn）</span></div><div class=\"line\"></div><div class=\"line\">   BindingSet.Builder builder = builderMap.get(enclosingElement);<span class=\"comment\">//2.builderMap中获取BindingSet.Builder</span></div><div class=\"line\">   QualifiedId qualifiedId = elementToQualifiedId(element, id);</div><div class=\"line\">   <span class=\"keyword\">if</span> (builder != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//3.builder是否为空</span></div><div class=\"line\">     String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));</div><div class=\"line\">     <span class=\"keyword\">if</span> (existingBindingName != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//4.检测是否重复绑定</span></div><div class=\"line\">       error(element, <span class=\"string\">\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\"</span>,</div><div class=\"line\">           BindView.class.getSimpleName(), id, existingBindingName,</div><div class=\"line\">           enclosingElement.getQualifiedName(), element.getSimpleName());</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     builder = getOrCreateBindingBuilder(builderMap, enclosingElement);<span class=\"comment\">//5.为空，需要重新get或生成一个新的BindingSet.Builder</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   String name = simpleName.toString();</div><div class=\"line\">   TypeName type = TypeName.get(elementType);</div><div class=\"line\">   <span class=\"keyword\">boolean</span> required = isFieldRequired(element);</div><div class=\"line\"></div><div class=\"line\">   builder.addField(getId(qualifiedId), <span class=\"keyword\">new</span> FieldViewBinding(name, type, required));<span class=\"comment\">//6.往Builder中添加新值</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Add the type-erased version to the valid binding targets set.</span></div><div class=\"line\">   erasedTargetNames.add(enclosingElement);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>第一次，一般都为空值，所以会执行getOrCreateBindingBuilder(builderMap, enclosingElement)方法，其中传入了BuilderMap和enclosingElement,我们继续来看方法getOrCreateBindingBuilder<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> BindingSet.<span class=\"function\">Builder <span class=\"title\">getOrCreateBindingBuilder</span><span class=\"params\">(</span></span></div><div class=\"line\">    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, TypeElement enclosingElement) &#123;</div><div class=\"line\">  BindingSet.Builder builder = builderMap.get(enclosingElement);</div><div class=\"line\">  <span class=\"keyword\">if</span> (builder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    builder = BindingSet.newBuilder(enclosingElement);</div><div class=\"line\">    builderMap.put(enclosingElement, builder);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> builder;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中，再次判断了builderMap中是否已存在BindingSet.Builder，不存在就新建，通过BindingSet.newBuilder(enclosingElement)方法，让我继续看BindingSet中newBuilder方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">(TypeElement enclosingElement)</span> </span>&#123;</div><div class=\"line\">  TypeMirror typeMirror = enclosingElement.asType();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">boolean</span> isView = isSubtypeOfType(typeMirror, VIEW_TYPE);</div><div class=\"line\">  <span class=\"keyword\">boolean</span> isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);</div><div class=\"line\">  <span class=\"keyword\">boolean</span> isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);</div><div class=\"line\"></div><div class=\"line\">  TypeName targetType = TypeName.get(typeMirror);</div><div class=\"line\">  <span class=\"keyword\">if</span> (targetType <span class=\"keyword\">instanceof</span> ParameterizedTypeName) &#123;</div><div class=\"line\">    targetType = ((ParameterizedTypeName) targetType).rawType;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  String packageName = getPackage(enclosingElement).getQualifiedName().toString();</div><div class=\"line\">  String className = enclosingElement.getQualifiedName().toString().substring(</div><div class=\"line\">      packageName.length() + <span class=\"number\">1</span>).replace(<span class=\"string\">'.'</span>, <span class=\"string\">'$'</span>);</div><div class=\"line\">  ClassName bindingClassName = ClassName.get(packageName, className + <span class=\"string\">\"_ViewBinding\"</span>);<span class=\"comment\">//辅助类的类名</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">boolean</span> isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面说到BindingSet对辅助类的生成起到非常重要的作用，这里生成了辅助类的类名，并保存在bindingSet.builder中，最后put入了builderMap中。在解析的过程中，BindingSet的都伴随左右，可以看出她在ButterKnifeProcessor类中的重要性。到这里我们在回溯一下。</p>\n<p><strong>1.BindingSet.newBuilder(enclosingElement) 生成类名及相关类型定义 -&gt; 2.BuilderMap.put(enclosingElement, builder) put入Map<typeelement, bindingset.builder=\"\">中 -&gt;3.builderMap.get(enclosingElement)获取BindingSet.builder -&gt; 4.builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required))往Builder中添加注解值 -&gt;Map<typeelement, bindingset.builder=\"\">转换成Map<typeelement, bindingset=\"\"> -&gt; 遍历BindingMap -&gt; bindingSet.brewJava(sdk, debuggable).write(filter)生成辅助类。</typeelement,></typeelement,></typeelement,></strong></p>\n<p>到这里，Butterknife框架生成辅助类，就讲解的差不多了。其中核心原理就是利用BindingSet类强大的类构建能力，生成相关类名，方法和核心代码。对于BindingSet具体是怎么生成辅助类的，想深入了解的朋友也可以下载ButterKnife源码对BindingSet进行深度了解，这里主要介绍ButterKnife框架原理。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>通过了解Butterknife框架，知其思想真是值得称赞。注解绑定一下，就告别重复的findViewById等方法，节约了开发时间，提高了效率。</p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">Butterknife官方指引</a></p>\n<p><a href=\"http://blog.csdn.net/chenkai19920410/article/details/51020151\" target=\"_blank\" rel=\"external\">ButterKnife源码剖析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/77478230\" target=\"_blank\" rel=\"external\">Annontation注解的应用及介绍</a></p>\n<p><a href=\"http://www.jianshu.com/p/07ef8ba80562\" target=\"_blank\" rel=\"external\">Android编译时注解APT实战（AbstractProcessor）</a></p>\n","excerpt":"<hr>\n<p>最初的开始，findViewById()获取View控件，setOnClickListener设置View的监听事件，然后UI界面开始有响应。当初完成这个操作，有点兴奋，而这也成为我Android开发的起点。随着时间的推移，android也越来越熟悉，findViewById和setOnClickListener不知写了多少遍，偶发现有好大一部分时间，就是在写findViewById获取变量。针对这问题，在网络上发现了Jake Wharton大神的Butterknife开源框架，后用之，节约了很多时间。本篇博文将会对Butterknife源码进行解析。</p>\n<h1 id=\"一、什么是Butterknife？\"><a href=\"#一、什么是Butterknife？\" class=\"headerlink\" title=\"一、什么是Butterknife？\"></a>一、什么是Butterknife？</h1><p>Butterknife，是专门为Android View设计的绑定注解框架，专业解放各种findViewById和setOnClickListener。</p>\n<p>Butterknife地址：<a href=\"https://github.com/JakeWharton/butterknife\">https://github.com/JakeWharton/butterknife</a></p>\n<h1 id=\"二、Butterknife源码解析\"><a href=\"#二、Butterknife源码解析\" class=\"headerlink\" title=\"二、Butterknife源码解析\"></a>二、Butterknife源码解析</h1><p><strong>1.Butterknife绑定分析</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeedbackActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mContentEdit)</div><div class=\"line\">    EditText mContentEdit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mSubmitBtn)<span class=\"comment\">//1.View注解</span></div><div class=\"line\">    TextView mSubmitBtn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.mContentCountTv)</div><div class=\"line\">    TextView mContentCountTv;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_feedback);</div><div class=\"line\">        ButterKnife.bind(<span class=\"keyword\">this</span>);<span class=\"comment\">//3.与Activity绑定</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@OnClick</span>(R.id.mSubmitBtn)<span class=\"comment\">//2.View监听事件注解</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>由1知，@BindView注解FeedbackActivity的3个View变量，由2知，@OnClick注解View的监听事件。然而这三个变量和监听事件，是怎么和FeedbackActivity关联起来的呢？这里就需要我们注意3与Activity的绑定，即ButterKnife.bind(this)方法。进入ButterKnife源码看看。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * BindView annotated fields and methods in the specified &#123;<span class=\"doctag\">@link</span> Activity&#125;. The current content</div><div class=\"line\"> * view is used as the view root.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> target Target activity for view binding.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@NonNull</span> <span class=\"meta\">@UiThread</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unbinder <span class=\"title\">bind</span><span class=\"params\">(@NonNull Activity target)</span> </span>&#123;</div><div class=\"line\">  View sourceView = target.getWindow().getDecorView();</div><div class=\"line\">  <span class=\"keyword\">return</span> createBinding(target, sourceView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ButterKnife中bind有多个重载，针对View，Dialog，Activtiy等，具体可以自行查看ButterKnife源码，这里主要针对Activity。我们继续看createBinding方法,<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Unbinder <span class=\"title\">createBinding</span><span class=\"params\">(@NonNull Object target, @NonNull View source)</span> </span>&#123;</div><div class=\"line\">   Class&lt;?&gt; targetClass = target.getClass();</div><div class=\"line\">   <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"Looking up binding for \"</span> + targetClass.getName());</div><div class=\"line\"></div><div class=\"line\">   Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);<span class=\"comment\">//查找辅助绑定类的构造方法</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> Unbinder.EMPTY;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span></div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> constructor.newInstance(target, source);<span class=\"comment\">//初始化了构造方法</span></div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to invoke \"</span> + constructor, e);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to invoke \"</span> + constructor, e);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">     Throwable cause = e.getCause();</div><div class=\"line\">     <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> (RuntimeException) cause;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (cause <span class=\"keyword\">instanceof</span> Error) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> (Error) cause;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to create binding instance.\"</span>, cause);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>findBindingConstructorForClass()通过传入目标类即Activity，查找辅助绑定类的构造方法。继续看findBindingConstructorForClass()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Nullable</span> <span class=\"meta\">@CheckResult</span> <span class=\"meta\">@UiThread</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) &#123;</div><div class=\"line\">  Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls);</div><div class=\"line\">  <span class=\"keyword\">if</span> (bindingCtor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"HIT: Cached in binding map.\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> bindingCtor;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String clsName = cls.getName();<span class=\"comment\">//获取绑定类的name</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (clsName.startsWith(<span class=\"string\">\"android.\"</span>) || clsName.startsWith(<span class=\"string\">\"java.\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"MISS: Reached framework class. Abandoning search.\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + <span class=\"string\">\"_ViewBinding\"</span>);<span class=\"comment\">//核心方法，通过反射加载类\"FeedbackActivity_ViewBinding\"</span></div><div class=\"line\">    <span class=\"comment\">//noinspection unchecked</span></div><div class=\"line\">    bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View.class);<span class=\"comment\">//获取\"FeedbackActivity_ViewBinding\"构造函数，</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"HIT: Loaded binding class and constructor.\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) Log.d(TAG, <span class=\"string\">\"Not found. Trying superclass \"</span> + cls.getSuperclass().getName());</div><div class=\"line\">    bindingCtor = findBindingConstructorForClass(cls.getSuperclass());</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Unable to find binding constructor for \"</span> + clsName, e);</div><div class=\"line\">  &#125;</div><div class=\"line\">  BINDINGS.put(cls, bindingCtor);</div><div class=\"line\">  <span class=\"keyword\">return</span> bindingCtor;<span class=\"comment\">//返回绑定类的构造函数，初始化</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过反射加载FeedbackActivity_ViewBinding类，而FeedbackActivity_ViewBinding类到底像啥样呢？这里我们可以先看一下此类,后面将会分析此类怎么生成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeedbackActivity_ViewBinding</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">FeedbackActivity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Unbinder</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> T target;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> View view2131624065;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@UiThread</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FeedbackActivity_ViewBinding</span><span class=\"params\">(<span class=\"keyword\">final</span> T target, View source)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">    View view;</div><div class=\"line\">    target.mContentEdit = Utils.findRequiredViewAsType(source, R.id.mContentEdit, <span class=\"string\">\"field 'mContentEdit'\"</span>, EditText.class);</div><div class=\"line\">    view = Utils.findRequiredView(source, R.id.mSubmitBtn, <span class=\"string\">\"field 'mSubmitBtn' and method 'onClick'\"</span>);</div><div class=\"line\">    target.mSubmitBtn = Utils.castView(view, R.id.mSubmitBtn, <span class=\"string\">\"field 'mSubmitBtn'\"</span>, TextView.class);</div><div class=\"line\">    view2131624065 = view;</div><div class=\"line\">    view.setOnClickListener(<span class=\"keyword\">new</span> DebouncingOnClickListener() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">(View p0)</span> </span>&#123;</div><div class=\"line\">        target.onClick();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    target.mContentCountTv = Utils.findRequiredViewAsType(source, R.id.mContentCountTv, <span class=\"string\">\"field 'mContentCountTv'\"</span>, TextView.class);</div><div class=\"line\">  &#125;</div><div class=\"line\">...省略...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中findRequiredViewAsType和findRequiredView方法皆是Utils的方法，我们查看Utils方法可以知道，两个方法最后都调了findViewById方法,从而就绑定了注解的View变量，绑定View监听事件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">findRequiredViewAsType</span><span class=\"params\">(View source, @IdRes <span class=\"keyword\">int</span> id, String who,</div><div class=\"line\">    Class&lt;T&gt; cls)</span> </span>&#123;</div><div class=\"line\">  View view = findRequiredView(source, id, who);</div><div class=\"line\">  <span class=\"keyword\">return</span> castView(view, id, who, cls);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> View <span class=\"title\">findRequiredView</span><span class=\"params\">(View source, @IdRes <span class=\"keyword\">int</span> id, String who)</span> </span>&#123;</div><div class=\"line\">  View view = source.findViewById(id);</div><div class=\"line\">  <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String name = getResourceEntryName(source, id);</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Required view '\"</span></div><div class=\"line\">      + name</div><div class=\"line\">      + <span class=\"string\">\"' with ID \"</span></div><div class=\"line\">      + id</div><div class=\"line\">      + <span class=\"string\">\" for \"</span></div><div class=\"line\">      + who</div><div class=\"line\">      + <span class=\"string\">\" was not found. If this view is optional add '@Nullable' (fields) or '@Optional'\"</span></div><div class=\"line\">      + <span class=\"string\">\" (methods) annotation.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，ButterKnife的绑定流程就介绍完了。<strong>ButterKnife主要就是通过注解，然后生成一个辅助类动态绑定View,解放开发者</strong>。下面我们将会分析辅助类FeedbackActivity_ViewBinding的生成。</p>\n<p><strong>2.Butterknife辅助类的生成</strong></p>\n<p>由上，我们知Butterknife框架是用注解的方式实现的，注解的实现方式，很容易让我们想到通过Java反射机制实现，但是我们知道如果通过反射，是在运行时（Runtime）来处理View的绑定等一些列事件，这样比较耗费资源，会影响应用的性能。<strong>Butterknife框架没有用java反射机制，而是使用APT(Annotation Processing Tool)编译时解析技术。</strong>提到APT，我们就必须要了解AbstractProcessor类，通过继承此类，编译器在编译的时候，会扫描所有带有你注解的类，然后再调用AbstractProcessor的process方法，对注解进行处理，然后生成相关的辅助类，如上FeedbackActivity_ViewBinding。</p>\n<p>在Butterknife框架中ButterKnifeProcessor继承了AbstractProcessor，所以我们重点来关注一下ButterKnifeProcessor的process方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">  Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);<span class=\"comment\">//1.核心方法</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</div><div class=\"line\">    TypeElement typeElement = entry.getKey();</div><div class=\"line\">    BindingSet binding = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">    JavaFile javaFile = binding.brewJava(sdk, debuggable);<span class=\"comment\">//2.核心方法</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      javaFile.writeTo(filer);<span class=\"comment\">//3.核心方法</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      error(typeElement, <span class=\"string\">\"Unable to write binding for type %s: %s\"</span>, typeElement, e.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历bindingMap，再利用JavaFile，就可以生成辅助类了。bindingMap的类型为Map<TypeElement, BindingSet>，其中TypeElement为key,BindingSet为值，TypeElement和BindingSet两个类在Butterknife框架中都是辅助生成辅助类的方法。<strong>BindingSet对辅助类的生成起到非常重要的作用，类名，变量，方法名各种信息都是储存在BindingSet类中。</strong>这里不重讲了。让我们继续分析findAndParseTargets方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Map&lt;TypeElement, BindingSet&gt; <span class=\"title\">findAndParseTargets</span><span class=\"params\">(RoundEnvironment env)</span> </span>&#123;</div><div class=\"line\">    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    Set&lt;TypeElement&gt; erasedTargetNames = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    scanForRClasses(env);<span class=\"comment\">//1.扫描所有注解类</span></div><div class=\"line\"></div><div class=\"line\">    .........<span class=\"comment\">//省略的内容雷同BindView注解</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each @BindView element.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Element element : env.getElementsAnnotatedWith(BindView.class)) &#123;<span class=\"comment\">//2.遍历有@BindView注解的类</span></div><div class=\"line\">      <span class=\"comment\">// we don't SuperficialValidation.validateElement(element)</span></div><div class=\"line\">      <span class=\"comment\">// so that an unresolved View type can be generated by later processing rounds</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        parseBindView(element, builderMap, erasedTargetNames);<span class=\"comment\">//3.解析@BindView注解类</span></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        logParsingError(element, BindView.class, e);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .........<span class=\"comment\">//省略的内容雷同BindView注解</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Process each annotation that corresponds to a listener.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;? extends Annotation&gt; listener : LISTENERS) &#123;<span class=\"comment\">//4.遍历监听事件注解类</span></div><div class=\"line\">      findAndParseListener(env, listener, builderMap, erasedTargetNames);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Associate superclass binders with their subclass binders. This is a queue-based tree walk</span></div><div class=\"line\">    <span class=\"comment\">// which starts at the roots (superclasses) and walks to the leafs (subclasses).</span></div><div class=\"line\">    Deque&lt;Map.Entry&lt;TypeElement, BindingSet.Builder&gt;&gt; entries =</div><div class=\"line\">        <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;(builderMap.entrySet());</div><div class=\"line\">    Map&lt;TypeElement, BindingSet&gt; bindingMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">while</span> (!entries.isEmpty()) &#123;</div><div class=\"line\">      Map.Entry&lt;TypeElement, BindingSet.Builder&gt; entry = entries.removeFirst();</div><div class=\"line\"></div><div class=\"line\">      TypeElement type = entry.getKey();</div><div class=\"line\">      BindingSet.Builder builder = entry.getValue();</div><div class=\"line\"></div><div class=\"line\">      TypeElement parentType = findParentType(type, erasedTargetNames);</div><div class=\"line\">      <span class=\"keyword\">if</span> (parentType == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        bindingMap.put(type, builder.build());</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BindingSet parentBinding = bindingMap.get(parentType);</div><div class=\"line\">        <span class=\"keyword\">if</span> (parentBinding != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          builder.setParent(parentBinding);</div><div class=\"line\">          bindingMap.put(type, builder.build());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// Has a superclass binding but we haven't built it yet. Re-enqueue for later.</span></div><div class=\"line\">          entries.addLast(entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bindingMap;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>方法scanForRClasses，主要是扫描所有类，区分注解类。这里不重点讲了。拿到@BindView的注解类后，遍历，然后通过parseBindView方法解析，我们继续看parseBindView方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBindView</span><span class=\"params\">(Element element, Map&lt;TypeElement, BindingSet.Builder&gt; builderMap,</div><div class=\"line\">     Set&lt;TypeElement&gt; erasedTargetNames)</span> </span>&#123;</div><div class=\"line\">   TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</div><div class=\"line\"></div><div class=\"line\">   .......<span class=\"comment\">//省略代码，主要检测注解的合法性，这里不介绍</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (hasError) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Assemble information on the field.</span></div><div class=\"line\">   <span class=\"keyword\">int</span> id = element.getAnnotation(BindView.class).value();<span class=\"comment\">//1.获取注解值，相当于获取view ID（R.id.mSubmitBtn）</span></div><div class=\"line\"></div><div class=\"line\">   BindingSet.Builder builder = builderMap.get(enclosingElement);<span class=\"comment\">//2.builderMap中获取BindingSet.Builder</span></div><div class=\"line\">   QualifiedId qualifiedId = elementToQualifiedId(element, id);</div><div class=\"line\">   <span class=\"keyword\">if</span> (builder != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//3.builder是否为空</span></div><div class=\"line\">     String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));</div><div class=\"line\">     <span class=\"keyword\">if</span> (existingBindingName != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//4.检测是否重复绑定</span></div><div class=\"line\">       error(element, <span class=\"string\">\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\"</span>,</div><div class=\"line\">           BindView.class.getSimpleName(), id, existingBindingName,</div><div class=\"line\">           enclosingElement.getQualifiedName(), element.getSimpleName());</div><div class=\"line\">       <span class=\"keyword\">return</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     builder = getOrCreateBindingBuilder(builderMap, enclosingElement);<span class=\"comment\">//5.为空，需要重新get或生成一个新的BindingSet.Builder</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   String name = simpleName.toString();</div><div class=\"line\">   TypeName type = TypeName.get(elementType);</div><div class=\"line\">   <span class=\"keyword\">boolean</span> required = isFieldRequired(element);</div><div class=\"line\"></div><div class=\"line\">   builder.addField(getId(qualifiedId), <span class=\"keyword\">new</span> FieldViewBinding(name, type, required));<span class=\"comment\">//6.往Builder中添加新值</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Add the type-erased version to the valid binding targets set.</span></div><div class=\"line\">   erasedTargetNames.add(enclosingElement);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>第一次，一般都为空值，所以会执行getOrCreateBindingBuilder(builderMap, enclosingElement)方法，其中传入了BuilderMap和enclosingElement,我们继续来看方法getOrCreateBindingBuilder<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> BindingSet.<span class=\"function\">Builder <span class=\"title\">getOrCreateBindingBuilder</span><span class=\"params\">(</div><div class=\"line\">    Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, TypeElement enclosingElement)</span> </span>&#123;</div><div class=\"line\">  BindingSet.Builder builder = builderMap.get(enclosingElement);</div><div class=\"line\">  <span class=\"keyword\">if</span> (builder == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    builder = BindingSet.newBuilder(enclosingElement);</div><div class=\"line\">    builderMap.put(enclosingElement, builder);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> builder;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中，再次判断了builderMap中是否已存在BindingSet.Builder，不存在就新建，通过BindingSet.newBuilder(enclosingElement)方法，让我继续看BindingSet中newBuilder方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Builder <span class=\"title\">newBuilder</span><span class=\"params\">(TypeElement enclosingElement)</span> </span>&#123;</div><div class=\"line\">  TypeMirror typeMirror = enclosingElement.asType();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">boolean</span> isView = isSubtypeOfType(typeMirror, VIEW_TYPE);</div><div class=\"line\">  <span class=\"keyword\">boolean</span> isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);</div><div class=\"line\">  <span class=\"keyword\">boolean</span> isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);</div><div class=\"line\"></div><div class=\"line\">  TypeName targetType = TypeName.get(typeMirror);</div><div class=\"line\">  <span class=\"keyword\">if</span> (targetType <span class=\"keyword\">instanceof</span> ParameterizedTypeName) &#123;</div><div class=\"line\">    targetType = ((ParameterizedTypeName) targetType).rawType;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  String packageName = getPackage(enclosingElement).getQualifiedName().toString();</div><div class=\"line\">  String className = enclosingElement.getQualifiedName().toString().substring(</div><div class=\"line\">      packageName.length() + <span class=\"number\">1</span>).replace(<span class=\"string\">'.'</span>, <span class=\"string\">'$'</span>);</div><div class=\"line\">  ClassName bindingClassName = ClassName.get(packageName, className + <span class=\"string\">\"_ViewBinding\"</span>);<span class=\"comment\">//辅助类的类名</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">boolean</span> isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面说到BindingSet对辅助类的生成起到非常重要的作用，这里生成了辅助类的类名，并保存在bindingSet.builder中，最后put入了builderMap中。在解析的过程中，BindingSet的都伴随左右，可以看出她在ButterKnifeProcessor类中的重要性。到这里我们在回溯一下。</p>\n<p><strong>1.BindingSet.newBuilder(enclosingElement) 生成类名及相关类型定义 -&gt; 2.BuilderMap.put(enclosingElement, builder) put入Map<TypeElement, BindingSet.Builder>中 -&gt;3.builderMap.get(enclosingElement)获取BindingSet.builder -&gt; 4.builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required))往Builder中添加注解值 -&gt;Map<TypeElement, BindingSet.Builder>转换成Map<TypeElement, BindingSet> -&gt; 遍历BindingMap -&gt; bindingSet.brewJava(sdk, debuggable).write(filter)生成辅助类。</strong></p>\n<p>到这里，Butterknife框架生成辅助类，就讲解的差不多了。其中核心原理就是利用BindingSet类强大的类构建能力，生成相关类名，方法和核心代码。对于BindingSet具体是怎么生成辅助类的，想深入了解的朋友也可以下载ButterKnife源码对BindingSet进行深度了解，这里主要介绍ButterKnife框架原理。</p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>通过了解Butterknife框架，知其思想真是值得称赞。注解绑定一下，就告别重复的findViewById等方法，节约了开发时间，提高了效率。</p>\n<h1 id=\"四、相关及参考文档\"><a href=\"#四、相关及参考文档\" class=\"headerlink\" title=\"四、相关及参考文档\"></a>四、相关及参考文档</h1><p><a href=\"http://jakewharton.github.io/butterknife/\">Butterknife官方指引</a></p>\n<p><a href=\"http://blog.csdn.net/chenkai19920410/article/details/51020151\">ButterKnife源码剖析</a></p>\n<p><a href=\"http://blog.csdn.net/awenyini/article/details/77478230\">Annontation注解的应用及介绍</a></p>\n<p><a href=\"http://www.jianshu.com/p/07ef8ba80562\">Android编译时注解APT实战（AbstractProcessor）</a></p>"},{"layout":"post","title":"我之存在，因为有你","date":"2017-07-19T02:49:37.000Z","comments":1,"_content":"---\n文/霍华德*舒尔茨\n\n![](/assets/img/think_iam_because_of_you.jpeg)\n\n非常感谢对我热情洋溢的介绍。我很荣幸、非常荣幸能够来到这里（清华大学）。我知道，过去这个讲堂也曾邀请过其他非常著名的演讲者。但是今天，我和大家分享的也许和之前的有点不太一样，并且会给你们提出一些出乎意料的挑战。\n\n三年前，在星巴克的全球股东大会上，我向我们的员工、我们的股东问了一个很重要的问题。这个问题当时已经在我脑海中存在了很久，这个问题就是：在我们所生活的这个世界，每一天都在变化，不仅仅是商业上的变化，而是到处都在发生变化，一家商业上市公司的使命和责任是什么？仅仅只是盈利赚钱么？只是为股东带来回报么？如何在商业利润和社会责任之间实现平衡？这个问题就是今天晚上我想和各位分享的主题。\n\n1987年，星巴克只有11家门店，员工区区百人。我们的梦想就是：把星巴克打造成一家与众不同的企业，不仅是一个本土品牌，更可以在公司不断发展的同时，与员工共同成长，分享成功，一路向前。正如刚刚院长所提到的，我们是美国第一家向员工提供综合医疗保险和股票期权的公司。当时，我们还只是一家私人公司。很多人认为这项举措会稀释公司股票的价值，是无法长期维持的。然而，当我们回顾星巴克的发展和成就，我们发现，原来最好的成功是与彼此分享。\n\n现在，你必须要用一个与过去截然不同的方式来经营业务。1987年，星巴克只有11家门店，100名员工，我们梦想一直是把星巴克打造成一家与众不同的企业。而如今，正如刚刚院长介绍的，我们的门店已经超过了25,000家，业务遍及75个国家，拥有超过33万员工，上周接待的顾客人次达到9100万。那么问题来了：这是一家用纸杯销售咖啡的公司，很多人连那些意大利语的发音也不会，一杯定价3美元或4美元的咖啡，这些在过去都是从来没有发生过的。\n\n然而，就是这样一家企业，从1987年的11家门店发展到如今的26,000家门店，市值将近900亿美元。这些成就是怎么得来的？你们可能还会问一个相似的问题——一家公司是如何从1999年开始的一家门店，发展成今天的26，000多家门店，每周服务500万位顾客，拥有近40,000名员工？\n\n今天我们在中国宣布了一项重要举措，这是星巴克的价值观、文化和指导原则的体现。这项全新的举措印证了“我们是谁？”每家公司，无论提供什么产品、什么服务、属于什么行业或来自哪个国家，都要对你存在的意义、目的和价值做一个定义。\n\n所以今天，我们在北京宣布的这个消息：今天我们宣布，从今年6月1日起，为所有符合条件的全职中国员工，全资提供父母重大疾病保险。我们为什么要这么做呢？为什么公司要做如此巨大的投入，这也许要投入数百万美元，为这么多员工的父母购买这份保险？用这个问题带领我们再次回到1987年。答案就是：不是每一个商业决定都是出于经济利益的考量。\n<!-- more -->\n一路走来，我们所做的许多决定都并不完全出于经济利益的考虑。事实上，我想说，我们做出的许多决策，都不是从经济利益出发的，甚至经常反其道而行之，然而，这就是我们获得商业成就的主要原因。在今日我们所处的环境中，欲打造一家可以持续发展的伟大公司，其成功的秘诀就是信任。作为管理者和领导者，我们的义务和责任就是不断满足员工的期望，并与他们建立一种相互信任的关系，这样他们才能不断满足并超越顾客的期待。\n\n那么，这些理念、这些价值观、这一文化和这些指导原则从何而来呢？首先，我要说的是，我们在全世界采购和烘焙高品质的咖啡，我们可能拥有零售行业中最强的地产资源，我们的门店设计也是行业领先的。不论是咖啡品质、门店分布，还是门店设计和卓越运营，我们都引领业界。然而，所有这些在我们公司里，都只能排在第二位。我们最为看重的企业基石，是我们的文化和我们的行为举止。不论相信与否，这些文化和价值观形成于我的孩童时代。\n\n\n我从小在纽约布鲁克林的政府公房里长大。你们可能听说过“美国梦”，美国式承诺，一个人的出身并不能决定他的未来。\n\n我的父亲做过许多蓝领工作，在我7岁的时候，爸爸当时是一名运送尿布的货车司机，这也许是他所从事的工作中最糟糕的一份。\n\n1960年3月，我记得那是一个寒冷的一天我的父亲因路面结冰而滑倒，摔伤了大腿。在60年代的美国，如果你是一个没有受过教育的蓝领工人，如果你在工作中受伤，你就会被解雇。没有收入，也没有意外保险。在7岁的时候，我亲历了美国梦的破灭，我目睹了父母所经历的无助和绝望，我们当时因此陷入了巨大的困境。\n\n不论今日的我如何成功，我7岁时所经历的伤痛，直到今天仍历历在目。事实上，失败的恐惧、不安全感、脆弱无助让当时还是小男孩的我深感羞耻，然而，也由此而让我学会热诚、敏感、自重并尊重他人。\n\n因此，我意识到，如果要打造一家可持续发展的伟大公司，我们必须要采取不同的方式。我们必须要将为股东提供价值和为员工提供价值联系起来，事实上，我们反其道而行之。\n\n1992年6月，星巴克咖啡公司上市，当时我们有大约125家门店，实现了一个季度的盈利，总市值约2.5亿美元。当时，我认为我中了头彩。我打电话给我妈妈，对她说：“妈妈，我们做到了，我们的美国梦实现了。” 2.5亿美元。\n\n25年过去了，星巴克如今的市值从2.5亿美元变成了将近900亿美元。回顾曾经取得的成就，分析成功的原因，我可以肯定地告诉你们，这不是因为我有MBA的学位，因为我并没有；这也不是因为我有商学院学位，因为我也没有，而且我已经不可能再获得。但我确认有的，那就是我的生活阅历。\n\n我去过的每一个地方，我做的每一件事情，我试图永葆好奇，并且我要跟你们说，要保持绝对的好奇心。你们要具有真正的好奇心：对这个世界、对你所处的周围环境，对你能从不同的经历和不同的人身上学习所得的收获。你会因为所学到的很多东西而感到惊喜。\n\n举个例子，6个月前，星巴克准备在南非开出第一家门店。此前，我从未去过南非，因此我感到十分兴奋。我们去了，并且准备在那儿开出两家新店。顾客在我们的门外排起了长队，并且要排2小时才能进店。我参加过许多星巴克新店的开业活动，却从未目睹过这样的景象。没有广告，没有促销，只因为是星巴克。\n\n在新店开业前2天，我一如往常地和一群即将第一次穿上绿围裙的年轻人围坐在一起交流。为什么会有这样的传统？很多人认为星巴克是一家独特的，市场营销做得非常好的公司，认为星巴克是一家非常典型的善于市场营销的公司，然而，我们并不是一个致力于市场营销的公司，我们也不在乎市场营销。\n\n我知道这么说我会惹来麻烦，我这样说的原因，是因为我们是基于门店体验而打造的品牌，是因为我们的伙伴和顾客之间的情感连接所带来的体验。\n\n身穿绿围裙的伙伴就是星巴克的核心。所以，在南非，在约翰内斯堡，我想要和那些即将穿上代表我们品牌的绿围裙的年轻人坐在一起。围坐着的有50个年轻人，我请他们每一个人轮流分享自己的故事。我们沿着圆桌开始分享。他们告诉我的第一件事情是这个小城市的生活景象。\n\n你们中有多少人去过南非？请举手示意。有谁，有多少人曾经去过小城市？我说过，我出身贫穷，曾经住在政府公屋里。当我到访这些小城市时，我感到很难受，为他们贫困的生活条件和艰难的居住环境而心碎。然而，这些年轻人却表现出如此的幸福、满足和快乐，因为他们的家人。当他们逐一讲述自己的故事时，我反复听到一个之前从未听过的非洲词语，他们很多人都讲到了这个词。\n\n后来，我鼓起勇气问：这个词什么意思？Ubuntu，你们一直在说的这个词是什么意思？他们迫不及待地告诉我，“Ubuntu”是曼德拉曾经多次提及的一个词，意思是“我之存在，因为有你”。我之存在，因为有你。如果今天晚上你们要记住我演讲中的一个关键词，我希望你们记住“Ubuntu”，我之存在，因为有你。\n\n这是一种无私，这是一种分享，这是对他人的责任感——近朱者赤，个人的价值因其身边的个人和团队而体现，最好的成功是与彼此分享。那是我第一次听到他们讲述“Ubuntu”的意思以及对于年轻人意味着什么，以及是如何地适用于星巴克。\n\n今天上午，我与一部分星巴克中国的伙伴进行了面对面的交流。在星巴克，我们把员工称为伙伴，因为每个人都是公司的股东。他们有人也带来了父母。过去五年，我们每年都会举办这样的伙伴及家属交流会，会上不谈我们的销售额、利润率，也不谈盈利和股价，而是庆贺家人的团聚，表达我们对于伙伴家人的尊敬和感激之情。我们希望通过此举向伙伴的父母表达，我们将尽责尽力照顾他们的孩子。\n\n在上午的交流会上，通过与这些伙伴和他们父母的分享，我们了解到其中一些伙伴们亲历了父母患病，甚至经历过父母的逝去。几个月前，我们对中国的伙伴做了一次调查，发现父母的身体健康是伙伴们最为关心的，他们也很担心自己的经济承担能力。今天上午的交流会上，我们都流泪了，因为我们听到了伙伴生活故事的分享，我们从他们的分享中感受到他们的勇气。看到自己的父母逐渐老去，他们十分担心自己的经济承担能力。\n\n我们了解到在中国，你们会有一种可能是我们在美国没有的人生体验——你们每个人出于对自己的父母、对祖辈的尊敬而承担的巨大的责任。所以对于星巴克这样一个公司而言，当我们听到了伙伴们发出的请求，希望星巴克帮助他们，我们无法拒绝这种请求，这也是为什么今天有这样一个重要的发布，这是我们迈出的里程碑式的一步。\n\n在过去47年的历史里，我们星巴克一直这样做。在中国，星巴克公司就不是一家美国公司，而是一家中国公司，这也是为什么我们提供住房津贴，我们也提供咖啡豆股，也是为什么与宋庆龄基金会有11年的合作伙伴关系，我们做所有这些，不是营销、不是新闻发布，而是因为这是星巴克公司价值文化的精髓所在。\n\n我刚才谈到了，并不是所有商业决策都是出于经济利益的决策。我知道你们从学校毕业会加入一些企业工作，会有压力。这个压力就是赚钱的压力。如果是上市公司，你就会有季度的财务报告的压力。但是，如何打造一个可以持续的、长久的公司？我们要真正地眼光长远，要可持续地发展业务。这就好比，如果要在未来获得回报，你必须现在开始不断在你的账户上储蓄。而且每次你因为短期的压力而“提款”后，你就得存入更多。在过去的5年、10年、15年里，我们做了很多打破传统的决策，都是出于我们存在的目的。\n\n大家有没有听过星巴克在美国做的一些反种族歧视的努力？在座各位有多少人读过新闻，知道我们在全球为1万名难民提供就业机会？我们为什么这样做？我们为星巴克每一位美国伙伴都提供亚利桑那州大学的4年免费教育奖学金。为什么？这是因为虽然我们是一家盈利性的上市公司，但是我们非常坚信，我们最核心的责任不仅是赚钱。应该这样说，我们是一家以人文精神为基础的绩效驱动型的公司。\n\n每周我参加管理层会议时，都会想像有两把空着的椅子，一个坐着星巴克的顾客、一个坐着星巴克的伙伴。所以我们每天问自己，我们的战略、我们的决策是否能够让我们的顾客、让我们的伙伴真正地骄傲。如果不能让他们感到骄傲，也许我们不应该这样决策。如果这是一个短期的决策，它能够给我们带来更多的金钱，却不会让人们感到自豪，毫无疑问这是一个错误的事情，不能去做。\n\n大家可能读了很多的教科书。仁慈、爱、怜悯心，人文精神，这些词汇也许不常在商学院的教科书里出现。但是这恰恰是我们打造一个长期、持久、繁荣的企业的基石——怜悯心、仁慈心、同理心和爱。\n\n我想说，在绝大多数情况下，如果一家企业的文化和价值观不能够和这些传统美德融合，那他们将很难吸引并保留优秀的人才，人们不会认同并感觉自己属于一种比自己更伟大的存在，不会朝着一个方向一起努力。反过来想，你有很好的战略，你把价值作为你的指导原则，在企业打造信任和爱的文化，所有的员工都对自己的使命和工作有认同感，每一天他们的工作都能够实现一种价值，而领导层是一种服务型的领导层，那你几乎是不可战胜的。\n\n看看1987年的星巴克，看看今天的星巴克，回首我们走过的历程，想想中国人以前是没有喝咖啡的传统的，不错，我们星巴克的咖啡是非常棒的，但是更棒的是我们和顾客之间的关系，这是我们把文化、价值观融合起来的结果。\n\n在我们今天所处的环境中，一方面我们获取资本的过程要比以前容易很多，另一方面又存在着如此多的竞争，这么多杂音，要想真正成功绝非易事。赢和输之间的差别在哪里？那就是一个伟大的战略，和一个可持续发展的公司。\n\n我自己就是一个很好的例子，我绝对不是这个屋子里最聪明的人。星巴克成功的一个驱动力量就是我们创造的、获得广泛认可和接受的文化和价值观。不管是在中国、日本、美国、欧洲还是墨西哥，在所有我们开展业务的市场，他们都接受我们的想法，我们也从他们身上学到很多，这才是成功的精髓所在。\n\n我们都想过更好的生活，也想让我们的孩子过上更好的生活，我们想尽力让父母为我们感到自豪和骄傲，我们希望晚上回到家后能和父母、爱人、孩子分享我们今天所取得的成功。我们也希望第二天去工作时，抱着“Ubunto”的理念而全力以赴——我之存在，因为有你。\n\n我一直在想，我们所遇到过的诸多挑战和我们克服它们获得成功的方法。很多次，人们都说星巴克不会成功。就以我们在中国的发展为例。\n\n我们1999年开第一家店后，曾经好几年的时间是亏损的。当时很多美国人就说星巴克在中国肯定要失败，他们撑不住了。我们所到之处并不是都能一夜之间获得成功，而是通过对我们所坚信的核心目标和我们的热情坚持，以人为本，并认可你只能通过超越员工的期待，才能最终实现超越顾客的期待。\n\n在很多情况下，对文化、价值观、指导原则的理解和认同会比商业战略本身更重要。或者这样说，即使是世界上最伟大的战略，如果缺乏对公司的信心，员工不信任领导、公司的使命和目标，那这个战略也是无法长久的。\n\n从零开始经营一家公司就像培养一个孩子，最开始都有一个“印记期”。每个公司都有记忆，那些公司的早期行为都在设定一种企业的氛围。\n我想问问你们，有多少人听过“服务型领导力”这个词？这里聚集了全中国最聪明的学子，请你们给我一个答案。\n\n（学生：为人民服务。学生：帮助其他人获得成功。）\n\n你们有多少人愿意为一个服务型的企业领导工作？请举手。\n\n有多少人认为领导者是天生的？有多少人认为领导者是后天造就的？请举手。\n\n你们确实是最聪明的人。领导者是后天造就的，时势造英雄。生活的经验打造了领导者。而我们每个人的经历、故事，都是不一样的。领导力没有统一的风格，史蒂夫·乔布斯只有一个。所以你需要决定自己是一个什么样的人，并忠于自我。\n\n说到领导力，在很多不同的教科书里对它都有不同的定义。其中一个特质我认为被低估了，就是脆弱，尤其是对于男性。人们一般很难想象一个男人在一群人面前展示自己的脆弱，承认错误、道歉。在过去这么多年里，我学到的是，你越脆弱，越多人会帮助你。\n\n所以，脆弱也是领导力的一个特质，我希望你们能够去拥抱它、接受它。反过来说，作为一个企业的领导人，并不意味着你就能够对所有问题都找到答案。事实上，寻求帮助也是一种力量。你想打造一家好公司，你身边围绕着很多人，他们有很多想法，不同的价值观。有些人是专业技能人才，有些人可能比你还聪明，比你还了不起。但是所有人必须要有一个共同的价值观。\n\n我相信在座的各位有你们自己的期许，有你们自己的目标，想让自己成为什么样的人，你们一定想让自己的父母为你们骄傲，因为你们正在一所世界级的名校求学。但是，当你们从这里走出去时，你们想要做什么？我想谈一谈所谓的“梦想”。在过去的三四十年里，我遇见过很多人都和我说，“我也有过关于咖啡的想法”，“我的想法比你还早”，是吗？那你们做了什么呢？\n\n我想说的是，不要让任何人对你说，你的梦想是不能实现的。我经常对年轻人说，不仅要有梦想，更要有宏大的梦想。把你的失望和失败，当做学习的机会，千万不要轻易的放弃和离开。这个房间里的每个人都有能力和知识成就一番大事。不管你的梦想是什么，坚持！坚韧！走别人没走过的路。当你最终成功时，记得回到你的初心——我之存在，因为有你。\n\n我们这个房间里的每个人，都是因为受助于生命中的某人才能坐在这里，没有人是独自一路走到这里的。所以，让我们懂得回报。回报你的家庭、你的社区，整个社会。将这一价值观传递下去，不断地学习，保持好奇心。\n\n再说一个故事。我是犹太人，一有机会就会去以色列。很多年来我都有一个精神导师，他传授了我很多伟大的智慧。每次我去见他，都尽可能的跟他在一起，聆听他的教诲。有一天他跟我说了一个故事，这不是一个关于犹太人的故事，而是一个关于人文精神的故事。他告诉我在大屠杀时期发生在德国发生的事。\n\n当时，许多男女儿童像沙丁鱼罐头一样被塞进火车车厢，运送到死亡集中营。车厢里没有灯、没有食物、没有厕所，当他们到集中营时，门一打开，外面很冷很冷，但每六个人中只有一个人能拿到一条毯子。拿到毯子的人就要决定我是留着毯子自己用，还是和剩下的五个人共用这条毯子。虽然不是所有人都这么做，但是绝大部分拿到毯子的人都会和另外五个人共用这一个毯子。所以今天，我想对大家说，不管将来你们的人生道路上有何际遇、去向何方，尽量和你身边的人分享你的毯子。Ubuntu，我之存在，因为有你！\n\n谢谢大家！\n\n（完）\n\n\n[演讲视频](https://v.qq.com/x/page/y039389lgl3.html)\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"https://v.qq.com/iframe/player.html?vid=y039389lgl3&tiny=0&auto=0\" allowfullscreen></iframe>","source":"_posts/think_iam_because_of_you.md","raw":"---\nlayout: post\ntitle: \"我之存在，因为有你\"\ndate: 7/19/2017 10:49:37 AM  \ncomments: true\ntags: \n\t- 随想\n\t- 演讲\n\t- 我之存在，因为有你\n\t- 霍华德*舒尔茨\n---\n---\n文/霍华德*舒尔茨\n\n![](/assets/img/think_iam_because_of_you.jpeg)\n\n非常感谢对我热情洋溢的介绍。我很荣幸、非常荣幸能够来到这里（清华大学）。我知道，过去这个讲堂也曾邀请过其他非常著名的演讲者。但是今天，我和大家分享的也许和之前的有点不太一样，并且会给你们提出一些出乎意料的挑战。\n\n三年前，在星巴克的全球股东大会上，我向我们的员工、我们的股东问了一个很重要的问题。这个问题当时已经在我脑海中存在了很久，这个问题就是：在我们所生活的这个世界，每一天都在变化，不仅仅是商业上的变化，而是到处都在发生变化，一家商业上市公司的使命和责任是什么？仅仅只是盈利赚钱么？只是为股东带来回报么？如何在商业利润和社会责任之间实现平衡？这个问题就是今天晚上我想和各位分享的主题。\n\n1987年，星巴克只有11家门店，员工区区百人。我们的梦想就是：把星巴克打造成一家与众不同的企业，不仅是一个本土品牌，更可以在公司不断发展的同时，与员工共同成长，分享成功，一路向前。正如刚刚院长所提到的，我们是美国第一家向员工提供综合医疗保险和股票期权的公司。当时，我们还只是一家私人公司。很多人认为这项举措会稀释公司股票的价值，是无法长期维持的。然而，当我们回顾星巴克的发展和成就，我们发现，原来最好的成功是与彼此分享。\n\n现在，你必须要用一个与过去截然不同的方式来经营业务。1987年，星巴克只有11家门店，100名员工，我们梦想一直是把星巴克打造成一家与众不同的企业。而如今，正如刚刚院长介绍的，我们的门店已经超过了25,000家，业务遍及75个国家，拥有超过33万员工，上周接待的顾客人次达到9100万。那么问题来了：这是一家用纸杯销售咖啡的公司，很多人连那些意大利语的发音也不会，一杯定价3美元或4美元的咖啡，这些在过去都是从来没有发生过的。\n\n然而，就是这样一家企业，从1987年的11家门店发展到如今的26,000家门店，市值将近900亿美元。这些成就是怎么得来的？你们可能还会问一个相似的问题——一家公司是如何从1999年开始的一家门店，发展成今天的26，000多家门店，每周服务500万位顾客，拥有近40,000名员工？\n\n今天我们在中国宣布了一项重要举措，这是星巴克的价值观、文化和指导原则的体现。这项全新的举措印证了“我们是谁？”每家公司，无论提供什么产品、什么服务、属于什么行业或来自哪个国家，都要对你存在的意义、目的和价值做一个定义。\n\n所以今天，我们在北京宣布的这个消息：今天我们宣布，从今年6月1日起，为所有符合条件的全职中国员工，全资提供父母重大疾病保险。我们为什么要这么做呢？为什么公司要做如此巨大的投入，这也许要投入数百万美元，为这么多员工的父母购买这份保险？用这个问题带领我们再次回到1987年。答案就是：不是每一个商业决定都是出于经济利益的考量。\n<!-- more -->\n一路走来，我们所做的许多决定都并不完全出于经济利益的考虑。事实上，我想说，我们做出的许多决策，都不是从经济利益出发的，甚至经常反其道而行之，然而，这就是我们获得商业成就的主要原因。在今日我们所处的环境中，欲打造一家可以持续发展的伟大公司，其成功的秘诀就是信任。作为管理者和领导者，我们的义务和责任就是不断满足员工的期望，并与他们建立一种相互信任的关系，这样他们才能不断满足并超越顾客的期待。\n\n那么，这些理念、这些价值观、这一文化和这些指导原则从何而来呢？首先，我要说的是，我们在全世界采购和烘焙高品质的咖啡，我们可能拥有零售行业中最强的地产资源，我们的门店设计也是行业领先的。不论是咖啡品质、门店分布，还是门店设计和卓越运营，我们都引领业界。然而，所有这些在我们公司里，都只能排在第二位。我们最为看重的企业基石，是我们的文化和我们的行为举止。不论相信与否，这些文化和价值观形成于我的孩童时代。\n\n\n我从小在纽约布鲁克林的政府公房里长大。你们可能听说过“美国梦”，美国式承诺，一个人的出身并不能决定他的未来。\n\n我的父亲做过许多蓝领工作，在我7岁的时候，爸爸当时是一名运送尿布的货车司机，这也许是他所从事的工作中最糟糕的一份。\n\n1960年3月，我记得那是一个寒冷的一天我的父亲因路面结冰而滑倒，摔伤了大腿。在60年代的美国，如果你是一个没有受过教育的蓝领工人，如果你在工作中受伤，你就会被解雇。没有收入，也没有意外保险。在7岁的时候，我亲历了美国梦的破灭，我目睹了父母所经历的无助和绝望，我们当时因此陷入了巨大的困境。\n\n不论今日的我如何成功，我7岁时所经历的伤痛，直到今天仍历历在目。事实上，失败的恐惧、不安全感、脆弱无助让当时还是小男孩的我深感羞耻，然而，也由此而让我学会热诚、敏感、自重并尊重他人。\n\n因此，我意识到，如果要打造一家可持续发展的伟大公司，我们必须要采取不同的方式。我们必须要将为股东提供价值和为员工提供价值联系起来，事实上，我们反其道而行之。\n\n1992年6月，星巴克咖啡公司上市，当时我们有大约125家门店，实现了一个季度的盈利，总市值约2.5亿美元。当时，我认为我中了头彩。我打电话给我妈妈，对她说：“妈妈，我们做到了，我们的美国梦实现了。” 2.5亿美元。\n\n25年过去了，星巴克如今的市值从2.5亿美元变成了将近900亿美元。回顾曾经取得的成就，分析成功的原因，我可以肯定地告诉你们，这不是因为我有MBA的学位，因为我并没有；这也不是因为我有商学院学位，因为我也没有，而且我已经不可能再获得。但我确认有的，那就是我的生活阅历。\n\n我去过的每一个地方，我做的每一件事情，我试图永葆好奇，并且我要跟你们说，要保持绝对的好奇心。你们要具有真正的好奇心：对这个世界、对你所处的周围环境，对你能从不同的经历和不同的人身上学习所得的收获。你会因为所学到的很多东西而感到惊喜。\n\n举个例子，6个月前，星巴克准备在南非开出第一家门店。此前，我从未去过南非，因此我感到十分兴奋。我们去了，并且准备在那儿开出两家新店。顾客在我们的门外排起了长队，并且要排2小时才能进店。我参加过许多星巴克新店的开业活动，却从未目睹过这样的景象。没有广告，没有促销，只因为是星巴克。\n\n在新店开业前2天，我一如往常地和一群即将第一次穿上绿围裙的年轻人围坐在一起交流。为什么会有这样的传统？很多人认为星巴克是一家独特的，市场营销做得非常好的公司，认为星巴克是一家非常典型的善于市场营销的公司，然而，我们并不是一个致力于市场营销的公司，我们也不在乎市场营销。\n\n我知道这么说我会惹来麻烦，我这样说的原因，是因为我们是基于门店体验而打造的品牌，是因为我们的伙伴和顾客之间的情感连接所带来的体验。\n\n身穿绿围裙的伙伴就是星巴克的核心。所以，在南非，在约翰内斯堡，我想要和那些即将穿上代表我们品牌的绿围裙的年轻人坐在一起。围坐着的有50个年轻人，我请他们每一个人轮流分享自己的故事。我们沿着圆桌开始分享。他们告诉我的第一件事情是这个小城市的生活景象。\n\n你们中有多少人去过南非？请举手示意。有谁，有多少人曾经去过小城市？我说过，我出身贫穷，曾经住在政府公屋里。当我到访这些小城市时，我感到很难受，为他们贫困的生活条件和艰难的居住环境而心碎。然而，这些年轻人却表现出如此的幸福、满足和快乐，因为他们的家人。当他们逐一讲述自己的故事时，我反复听到一个之前从未听过的非洲词语，他们很多人都讲到了这个词。\n\n后来，我鼓起勇气问：这个词什么意思？Ubuntu，你们一直在说的这个词是什么意思？他们迫不及待地告诉我，“Ubuntu”是曼德拉曾经多次提及的一个词，意思是“我之存在，因为有你”。我之存在，因为有你。如果今天晚上你们要记住我演讲中的一个关键词，我希望你们记住“Ubuntu”，我之存在，因为有你。\n\n这是一种无私，这是一种分享，这是对他人的责任感——近朱者赤，个人的价值因其身边的个人和团队而体现，最好的成功是与彼此分享。那是我第一次听到他们讲述“Ubuntu”的意思以及对于年轻人意味着什么，以及是如何地适用于星巴克。\n\n今天上午，我与一部分星巴克中国的伙伴进行了面对面的交流。在星巴克，我们把员工称为伙伴，因为每个人都是公司的股东。他们有人也带来了父母。过去五年，我们每年都会举办这样的伙伴及家属交流会，会上不谈我们的销售额、利润率，也不谈盈利和股价，而是庆贺家人的团聚，表达我们对于伙伴家人的尊敬和感激之情。我们希望通过此举向伙伴的父母表达，我们将尽责尽力照顾他们的孩子。\n\n在上午的交流会上，通过与这些伙伴和他们父母的分享，我们了解到其中一些伙伴们亲历了父母患病，甚至经历过父母的逝去。几个月前，我们对中国的伙伴做了一次调查，发现父母的身体健康是伙伴们最为关心的，他们也很担心自己的经济承担能力。今天上午的交流会上，我们都流泪了，因为我们听到了伙伴生活故事的分享，我们从他们的分享中感受到他们的勇气。看到自己的父母逐渐老去，他们十分担心自己的经济承担能力。\n\n我们了解到在中国，你们会有一种可能是我们在美国没有的人生体验——你们每个人出于对自己的父母、对祖辈的尊敬而承担的巨大的责任。所以对于星巴克这样一个公司而言，当我们听到了伙伴们发出的请求，希望星巴克帮助他们，我们无法拒绝这种请求，这也是为什么今天有这样一个重要的发布，这是我们迈出的里程碑式的一步。\n\n在过去47年的历史里，我们星巴克一直这样做。在中国，星巴克公司就不是一家美国公司，而是一家中国公司，这也是为什么我们提供住房津贴，我们也提供咖啡豆股，也是为什么与宋庆龄基金会有11年的合作伙伴关系，我们做所有这些，不是营销、不是新闻发布，而是因为这是星巴克公司价值文化的精髓所在。\n\n我刚才谈到了，并不是所有商业决策都是出于经济利益的决策。我知道你们从学校毕业会加入一些企业工作，会有压力。这个压力就是赚钱的压力。如果是上市公司，你就会有季度的财务报告的压力。但是，如何打造一个可以持续的、长久的公司？我们要真正地眼光长远，要可持续地发展业务。这就好比，如果要在未来获得回报，你必须现在开始不断在你的账户上储蓄。而且每次你因为短期的压力而“提款”后，你就得存入更多。在过去的5年、10年、15年里，我们做了很多打破传统的决策，都是出于我们存在的目的。\n\n大家有没有听过星巴克在美国做的一些反种族歧视的努力？在座各位有多少人读过新闻，知道我们在全球为1万名难民提供就业机会？我们为什么这样做？我们为星巴克每一位美国伙伴都提供亚利桑那州大学的4年免费教育奖学金。为什么？这是因为虽然我们是一家盈利性的上市公司，但是我们非常坚信，我们最核心的责任不仅是赚钱。应该这样说，我们是一家以人文精神为基础的绩效驱动型的公司。\n\n每周我参加管理层会议时，都会想像有两把空着的椅子，一个坐着星巴克的顾客、一个坐着星巴克的伙伴。所以我们每天问自己，我们的战略、我们的决策是否能够让我们的顾客、让我们的伙伴真正地骄傲。如果不能让他们感到骄傲，也许我们不应该这样决策。如果这是一个短期的决策，它能够给我们带来更多的金钱，却不会让人们感到自豪，毫无疑问这是一个错误的事情，不能去做。\n\n大家可能读了很多的教科书。仁慈、爱、怜悯心，人文精神，这些词汇也许不常在商学院的教科书里出现。但是这恰恰是我们打造一个长期、持久、繁荣的企业的基石——怜悯心、仁慈心、同理心和爱。\n\n我想说，在绝大多数情况下，如果一家企业的文化和价值观不能够和这些传统美德融合，那他们将很难吸引并保留优秀的人才，人们不会认同并感觉自己属于一种比自己更伟大的存在，不会朝着一个方向一起努力。反过来想，你有很好的战略，你把价值作为你的指导原则，在企业打造信任和爱的文化，所有的员工都对自己的使命和工作有认同感，每一天他们的工作都能够实现一种价值，而领导层是一种服务型的领导层，那你几乎是不可战胜的。\n\n看看1987年的星巴克，看看今天的星巴克，回首我们走过的历程，想想中国人以前是没有喝咖啡的传统的，不错，我们星巴克的咖啡是非常棒的，但是更棒的是我们和顾客之间的关系，这是我们把文化、价值观融合起来的结果。\n\n在我们今天所处的环境中，一方面我们获取资本的过程要比以前容易很多，另一方面又存在着如此多的竞争，这么多杂音，要想真正成功绝非易事。赢和输之间的差别在哪里？那就是一个伟大的战略，和一个可持续发展的公司。\n\n我自己就是一个很好的例子，我绝对不是这个屋子里最聪明的人。星巴克成功的一个驱动力量就是我们创造的、获得广泛认可和接受的文化和价值观。不管是在中国、日本、美国、欧洲还是墨西哥，在所有我们开展业务的市场，他们都接受我们的想法，我们也从他们身上学到很多，这才是成功的精髓所在。\n\n我们都想过更好的生活，也想让我们的孩子过上更好的生活，我们想尽力让父母为我们感到自豪和骄傲，我们希望晚上回到家后能和父母、爱人、孩子分享我们今天所取得的成功。我们也希望第二天去工作时，抱着“Ubunto”的理念而全力以赴——我之存在，因为有你。\n\n我一直在想，我们所遇到过的诸多挑战和我们克服它们获得成功的方法。很多次，人们都说星巴克不会成功。就以我们在中国的发展为例。\n\n我们1999年开第一家店后，曾经好几年的时间是亏损的。当时很多美国人就说星巴克在中国肯定要失败，他们撑不住了。我们所到之处并不是都能一夜之间获得成功，而是通过对我们所坚信的核心目标和我们的热情坚持，以人为本，并认可你只能通过超越员工的期待，才能最终实现超越顾客的期待。\n\n在很多情况下，对文化、价值观、指导原则的理解和认同会比商业战略本身更重要。或者这样说，即使是世界上最伟大的战略，如果缺乏对公司的信心，员工不信任领导、公司的使命和目标，那这个战略也是无法长久的。\n\n从零开始经营一家公司就像培养一个孩子，最开始都有一个“印记期”。每个公司都有记忆，那些公司的早期行为都在设定一种企业的氛围。\n我想问问你们，有多少人听过“服务型领导力”这个词？这里聚集了全中国最聪明的学子，请你们给我一个答案。\n\n（学生：为人民服务。学生：帮助其他人获得成功。）\n\n你们有多少人愿意为一个服务型的企业领导工作？请举手。\n\n有多少人认为领导者是天生的？有多少人认为领导者是后天造就的？请举手。\n\n你们确实是最聪明的人。领导者是后天造就的，时势造英雄。生活的经验打造了领导者。而我们每个人的经历、故事，都是不一样的。领导力没有统一的风格，史蒂夫·乔布斯只有一个。所以你需要决定自己是一个什么样的人，并忠于自我。\n\n说到领导力，在很多不同的教科书里对它都有不同的定义。其中一个特质我认为被低估了，就是脆弱，尤其是对于男性。人们一般很难想象一个男人在一群人面前展示自己的脆弱，承认错误、道歉。在过去这么多年里，我学到的是，你越脆弱，越多人会帮助你。\n\n所以，脆弱也是领导力的一个特质，我希望你们能够去拥抱它、接受它。反过来说，作为一个企业的领导人，并不意味着你就能够对所有问题都找到答案。事实上，寻求帮助也是一种力量。你想打造一家好公司，你身边围绕着很多人，他们有很多想法，不同的价值观。有些人是专业技能人才，有些人可能比你还聪明，比你还了不起。但是所有人必须要有一个共同的价值观。\n\n我相信在座的各位有你们自己的期许，有你们自己的目标，想让自己成为什么样的人，你们一定想让自己的父母为你们骄傲，因为你们正在一所世界级的名校求学。但是，当你们从这里走出去时，你们想要做什么？我想谈一谈所谓的“梦想”。在过去的三四十年里，我遇见过很多人都和我说，“我也有过关于咖啡的想法”，“我的想法比你还早”，是吗？那你们做了什么呢？\n\n我想说的是，不要让任何人对你说，你的梦想是不能实现的。我经常对年轻人说，不仅要有梦想，更要有宏大的梦想。把你的失望和失败，当做学习的机会，千万不要轻易的放弃和离开。这个房间里的每个人都有能力和知识成就一番大事。不管你的梦想是什么，坚持！坚韧！走别人没走过的路。当你最终成功时，记得回到你的初心——我之存在，因为有你。\n\n我们这个房间里的每个人，都是因为受助于生命中的某人才能坐在这里，没有人是独自一路走到这里的。所以，让我们懂得回报。回报你的家庭、你的社区，整个社会。将这一价值观传递下去，不断地学习，保持好奇心。\n\n再说一个故事。我是犹太人，一有机会就会去以色列。很多年来我都有一个精神导师，他传授了我很多伟大的智慧。每次我去见他，都尽可能的跟他在一起，聆听他的教诲。有一天他跟我说了一个故事，这不是一个关于犹太人的故事，而是一个关于人文精神的故事。他告诉我在大屠杀时期发生在德国发生的事。\n\n当时，许多男女儿童像沙丁鱼罐头一样被塞进火车车厢，运送到死亡集中营。车厢里没有灯、没有食物、没有厕所，当他们到集中营时，门一打开，外面很冷很冷，但每六个人中只有一个人能拿到一条毯子。拿到毯子的人就要决定我是留着毯子自己用，还是和剩下的五个人共用这条毯子。虽然不是所有人都这么做，但是绝大部分拿到毯子的人都会和另外五个人共用这一个毯子。所以今天，我想对大家说，不管将来你们的人生道路上有何际遇、去向何方，尽量和你身边的人分享你的毯子。Ubuntu，我之存在，因为有你！\n\n谢谢大家！\n\n（完）\n\n\n[演讲视频](https://v.qq.com/x/page/y039389lgl3.html)\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"https://v.qq.com/iframe/player.html?vid=y039389lgl3&tiny=0&auto=0\" allowfullscreen></iframe>","slug":"think_iam_because_of_you","published":1,"updated":"2019-06-27T08:15:15.352Z","photos":[],"link":"","_id":"cjxfjaet3005dystgl68k5ocu","content":"<hr>\n<p>文/霍华德*舒尔茨</p>\n<p><img src=\"/assets/img/think_iam_because_of_you.jpeg\" alt=\"\"></p>\n<p>非常感谢对我热情洋溢的介绍。我很荣幸、非常荣幸能够来到这里（清华大学）。我知道，过去这个讲堂也曾邀请过其他非常著名的演讲者。但是今天，我和大家分享的也许和之前的有点不太一样，并且会给你们提出一些出乎意料的挑战。</p>\n<p>三年前，在星巴克的全球股东大会上，我向我们的员工、我们的股东问了一个很重要的问题。这个问题当时已经在我脑海中存在了很久，这个问题就是：在我们所生活的这个世界，每一天都在变化，不仅仅是商业上的变化，而是到处都在发生变化，一家商业上市公司的使命和责任是什么？仅仅只是盈利赚钱么？只是为股东带来回报么？如何在商业利润和社会责任之间实现平衡？这个问题就是今天晚上我想和各位分享的主题。</p>\n<p>1987年，星巴克只有11家门店，员工区区百人。我们的梦想就是：把星巴克打造成一家与众不同的企业，不仅是一个本土品牌，更可以在公司不断发展的同时，与员工共同成长，分享成功，一路向前。正如刚刚院长所提到的，我们是美国第一家向员工提供综合医疗保险和股票期权的公司。当时，我们还只是一家私人公司。很多人认为这项举措会稀释公司股票的价值，是无法长期维持的。然而，当我们回顾星巴克的发展和成就，我们发现，原来最好的成功是与彼此分享。</p>\n<p>现在，你必须要用一个与过去截然不同的方式来经营业务。1987年，星巴克只有11家门店，100名员工，我们梦想一直是把星巴克打造成一家与众不同的企业。而如今，正如刚刚院长介绍的，我们的门店已经超过了25,000家，业务遍及75个国家，拥有超过33万员工，上周接待的顾客人次达到9100万。那么问题来了：这是一家用纸杯销售咖啡的公司，很多人连那些意大利语的发音也不会，一杯定价3美元或4美元的咖啡，这些在过去都是从来没有发生过的。</p>\n<p>然而，就是这样一家企业，从1987年的11家门店发展到如今的26,000家门店，市值将近900亿美元。这些成就是怎么得来的？你们可能还会问一个相似的问题——一家公司是如何从1999年开始的一家门店，发展成今天的26，000多家门店，每周服务500万位顾客，拥有近40,000名员工？</p>\n<p>今天我们在中国宣布了一项重要举措，这是星巴克的价值观、文化和指导原则的体现。这项全新的举措印证了“我们是谁？”每家公司，无论提供什么产品、什么服务、属于什么行业或来自哪个国家，都要对你存在的意义、目的和价值做一个定义。</p>\n<p>所以今天，我们在北京宣布的这个消息：今天我们宣布，从今年6月1日起，为所有符合条件的全职中国员工，全资提供父母重大疾病保险。我们为什么要这么做呢？为什么公司要做如此巨大的投入，这也许要投入数百万美元，为这么多员工的父母购买这份保险？用这个问题带领我们再次回到1987年。答案就是：不是每一个商业决定都是出于经济利益的考量。<br><a id=\"more\"></a><br>一路走来，我们所做的许多决定都并不完全出于经济利益的考虑。事实上，我想说，我们做出的许多决策，都不是从经济利益出发的，甚至经常反其道而行之，然而，这就是我们获得商业成就的主要原因。在今日我们所处的环境中，欲打造一家可以持续发展的伟大公司，其成功的秘诀就是信任。作为管理者和领导者，我们的义务和责任就是不断满足员工的期望，并与他们建立一种相互信任的关系，这样他们才能不断满足并超越顾客的期待。</p>\n<p>那么，这些理念、这些价值观、这一文化和这些指导原则从何而来呢？首先，我要说的是，我们在全世界采购和烘焙高品质的咖啡，我们可能拥有零售行业中最强的地产资源，我们的门店设计也是行业领先的。不论是咖啡品质、门店分布，还是门店设计和卓越运营，我们都引领业界。然而，所有这些在我们公司里，都只能排在第二位。我们最为看重的企业基石，是我们的文化和我们的行为举止。不论相信与否，这些文化和价值观形成于我的孩童时代。</p>\n<p>我从小在纽约布鲁克林的政府公房里长大。你们可能听说过“美国梦”，美国式承诺，一个人的出身并不能决定他的未来。</p>\n<p>我的父亲做过许多蓝领工作，在我7岁的时候，爸爸当时是一名运送尿布的货车司机，这也许是他所从事的工作中最糟糕的一份。</p>\n<p>1960年3月，我记得那是一个寒冷的一天我的父亲因路面结冰而滑倒，摔伤了大腿。在60年代的美国，如果你是一个没有受过教育的蓝领工人，如果你在工作中受伤，你就会被解雇。没有收入，也没有意外保险。在7岁的时候，我亲历了美国梦的破灭，我目睹了父母所经历的无助和绝望，我们当时因此陷入了巨大的困境。</p>\n<p>不论今日的我如何成功，我7岁时所经历的伤痛，直到今天仍历历在目。事实上，失败的恐惧、不安全感、脆弱无助让当时还是小男孩的我深感羞耻，然而，也由此而让我学会热诚、敏感、自重并尊重他人。</p>\n<p>因此，我意识到，如果要打造一家可持续发展的伟大公司，我们必须要采取不同的方式。我们必须要将为股东提供价值和为员工提供价值联系起来，事实上，我们反其道而行之。</p>\n<p>1992年6月，星巴克咖啡公司上市，当时我们有大约125家门店，实现了一个季度的盈利，总市值约2.5亿美元。当时，我认为我中了头彩。我打电话给我妈妈，对她说：“妈妈，我们做到了，我们的美国梦实现了。” 2.5亿美元。</p>\n<p>25年过去了，星巴克如今的市值从2.5亿美元变成了将近900亿美元。回顾曾经取得的成就，分析成功的原因，我可以肯定地告诉你们，这不是因为我有MBA的学位，因为我并没有；这也不是因为我有商学院学位，因为我也没有，而且我已经不可能再获得。但我确认有的，那就是我的生活阅历。</p>\n<p>我去过的每一个地方，我做的每一件事情，我试图永葆好奇，并且我要跟你们说，要保持绝对的好奇心。你们要具有真正的好奇心：对这个世界、对你所处的周围环境，对你能从不同的经历和不同的人身上学习所得的收获。你会因为所学到的很多东西而感到惊喜。</p>\n<p>举个例子，6个月前，星巴克准备在南非开出第一家门店。此前，我从未去过南非，因此我感到十分兴奋。我们去了，并且准备在那儿开出两家新店。顾客在我们的门外排起了长队，并且要排2小时才能进店。我参加过许多星巴克新店的开业活动，却从未目睹过这样的景象。没有广告，没有促销，只因为是星巴克。</p>\n<p>在新店开业前2天，我一如往常地和一群即将第一次穿上绿围裙的年轻人围坐在一起交流。为什么会有这样的传统？很多人认为星巴克是一家独特的，市场营销做得非常好的公司，认为星巴克是一家非常典型的善于市场营销的公司，然而，我们并不是一个致力于市场营销的公司，我们也不在乎市场营销。</p>\n<p>我知道这么说我会惹来麻烦，我这样说的原因，是因为我们是基于门店体验而打造的品牌，是因为我们的伙伴和顾客之间的情感连接所带来的体验。</p>\n<p>身穿绿围裙的伙伴就是星巴克的核心。所以，在南非，在约翰内斯堡，我想要和那些即将穿上代表我们品牌的绿围裙的年轻人坐在一起。围坐着的有50个年轻人，我请他们每一个人轮流分享自己的故事。我们沿着圆桌开始分享。他们告诉我的第一件事情是这个小城市的生活景象。</p>\n<p>你们中有多少人去过南非？请举手示意。有谁，有多少人曾经去过小城市？我说过，我出身贫穷，曾经住在政府公屋里。当我到访这些小城市时，我感到很难受，为他们贫困的生活条件和艰难的居住环境而心碎。然而，这些年轻人却表现出如此的幸福、满足和快乐，因为他们的家人。当他们逐一讲述自己的故事时，我反复听到一个之前从未听过的非洲词语，他们很多人都讲到了这个词。</p>\n<p>后来，我鼓起勇气问：这个词什么意思？Ubuntu，你们一直在说的这个词是什么意思？他们迫不及待地告诉我，“Ubuntu”是曼德拉曾经多次提及的一个词，意思是“我之存在，因为有你”。我之存在，因为有你。如果今天晚上你们要记住我演讲中的一个关键词，我希望你们记住“Ubuntu”，我之存在，因为有你。</p>\n<p>这是一种无私，这是一种分享，这是对他人的责任感——近朱者赤，个人的价值因其身边的个人和团队而体现，最好的成功是与彼此分享。那是我第一次听到他们讲述“Ubuntu”的意思以及对于年轻人意味着什么，以及是如何地适用于星巴克。</p>\n<p>今天上午，我与一部分星巴克中国的伙伴进行了面对面的交流。在星巴克，我们把员工称为伙伴，因为每个人都是公司的股东。他们有人也带来了父母。过去五年，我们每年都会举办这样的伙伴及家属交流会，会上不谈我们的销售额、利润率，也不谈盈利和股价，而是庆贺家人的团聚，表达我们对于伙伴家人的尊敬和感激之情。我们希望通过此举向伙伴的父母表达，我们将尽责尽力照顾他们的孩子。</p>\n<p>在上午的交流会上，通过与这些伙伴和他们父母的分享，我们了解到其中一些伙伴们亲历了父母患病，甚至经历过父母的逝去。几个月前，我们对中国的伙伴做了一次调查，发现父母的身体健康是伙伴们最为关心的，他们也很担心自己的经济承担能力。今天上午的交流会上，我们都流泪了，因为我们听到了伙伴生活故事的分享，我们从他们的分享中感受到他们的勇气。看到自己的父母逐渐老去，他们十分担心自己的经济承担能力。</p>\n<p>我们了解到在中国，你们会有一种可能是我们在美国没有的人生体验——你们每个人出于对自己的父母、对祖辈的尊敬而承担的巨大的责任。所以对于星巴克这样一个公司而言，当我们听到了伙伴们发出的请求，希望星巴克帮助他们，我们无法拒绝这种请求，这也是为什么今天有这样一个重要的发布，这是我们迈出的里程碑式的一步。</p>\n<p>在过去47年的历史里，我们星巴克一直这样做。在中国，星巴克公司就不是一家美国公司，而是一家中国公司，这也是为什么我们提供住房津贴，我们也提供咖啡豆股，也是为什么与宋庆龄基金会有11年的合作伙伴关系，我们做所有这些，不是营销、不是新闻发布，而是因为这是星巴克公司价值文化的精髓所在。</p>\n<p>我刚才谈到了，并不是所有商业决策都是出于经济利益的决策。我知道你们从学校毕业会加入一些企业工作，会有压力。这个压力就是赚钱的压力。如果是上市公司，你就会有季度的财务报告的压力。但是，如何打造一个可以持续的、长久的公司？我们要真正地眼光长远，要可持续地发展业务。这就好比，如果要在未来获得回报，你必须现在开始不断在你的账户上储蓄。而且每次你因为短期的压力而“提款”后，你就得存入更多。在过去的5年、10年、15年里，我们做了很多打破传统的决策，都是出于我们存在的目的。</p>\n<p>大家有没有听过星巴克在美国做的一些反种族歧视的努力？在座各位有多少人读过新闻，知道我们在全球为1万名难民提供就业机会？我们为什么这样做？我们为星巴克每一位美国伙伴都提供亚利桑那州大学的4年免费教育奖学金。为什么？这是因为虽然我们是一家盈利性的上市公司，但是我们非常坚信，我们最核心的责任不仅是赚钱。应该这样说，我们是一家以人文精神为基础的绩效驱动型的公司。</p>\n<p>每周我参加管理层会议时，都会想像有两把空着的椅子，一个坐着星巴克的顾客、一个坐着星巴克的伙伴。所以我们每天问自己，我们的战略、我们的决策是否能够让我们的顾客、让我们的伙伴真正地骄傲。如果不能让他们感到骄傲，也许我们不应该这样决策。如果这是一个短期的决策，它能够给我们带来更多的金钱，却不会让人们感到自豪，毫无疑问这是一个错误的事情，不能去做。</p>\n<p>大家可能读了很多的教科书。仁慈、爱、怜悯心，人文精神，这些词汇也许不常在商学院的教科书里出现。但是这恰恰是我们打造一个长期、持久、繁荣的企业的基石——怜悯心、仁慈心、同理心和爱。</p>\n<p>我想说，在绝大多数情况下，如果一家企业的文化和价值观不能够和这些传统美德融合，那他们将很难吸引并保留优秀的人才，人们不会认同并感觉自己属于一种比自己更伟大的存在，不会朝着一个方向一起努力。反过来想，你有很好的战略，你把价值作为你的指导原则，在企业打造信任和爱的文化，所有的员工都对自己的使命和工作有认同感，每一天他们的工作都能够实现一种价值，而领导层是一种服务型的领导层，那你几乎是不可战胜的。</p>\n<p>看看1987年的星巴克，看看今天的星巴克，回首我们走过的历程，想想中国人以前是没有喝咖啡的传统的，不错，我们星巴克的咖啡是非常棒的，但是更棒的是我们和顾客之间的关系，这是我们把文化、价值观融合起来的结果。</p>\n<p>在我们今天所处的环境中，一方面我们获取资本的过程要比以前容易很多，另一方面又存在着如此多的竞争，这么多杂音，要想真正成功绝非易事。赢和输之间的差别在哪里？那就是一个伟大的战略，和一个可持续发展的公司。</p>\n<p>我自己就是一个很好的例子，我绝对不是这个屋子里最聪明的人。星巴克成功的一个驱动力量就是我们创造的、获得广泛认可和接受的文化和价值观。不管是在中国、日本、美国、欧洲还是墨西哥，在所有我们开展业务的市场，他们都接受我们的想法，我们也从他们身上学到很多，这才是成功的精髓所在。</p>\n<p>我们都想过更好的生活，也想让我们的孩子过上更好的生活，我们想尽力让父母为我们感到自豪和骄傲，我们希望晚上回到家后能和父母、爱人、孩子分享我们今天所取得的成功。我们也希望第二天去工作时，抱着“Ubunto”的理念而全力以赴——我之存在，因为有你。</p>\n<p>我一直在想，我们所遇到过的诸多挑战和我们克服它们获得成功的方法。很多次，人们都说星巴克不会成功。就以我们在中国的发展为例。</p>\n<p>我们1999年开第一家店后，曾经好几年的时间是亏损的。当时很多美国人就说星巴克在中国肯定要失败，他们撑不住了。我们所到之处并不是都能一夜之间获得成功，而是通过对我们所坚信的核心目标和我们的热情坚持，以人为本，并认可你只能通过超越员工的期待，才能最终实现超越顾客的期待。</p>\n<p>在很多情况下，对文化、价值观、指导原则的理解和认同会比商业战略本身更重要。或者这样说，即使是世界上最伟大的战略，如果缺乏对公司的信心，员工不信任领导、公司的使命和目标，那这个战略也是无法长久的。</p>\n<p>从零开始经营一家公司就像培养一个孩子，最开始都有一个“印记期”。每个公司都有记忆，那些公司的早期行为都在设定一种企业的氛围。<br>我想问问你们，有多少人听过“服务型领导力”这个词？这里聚集了全中国最聪明的学子，请你们给我一个答案。</p>\n<p>（学生：为人民服务。学生：帮助其他人获得成功。）</p>\n<p>你们有多少人愿意为一个服务型的企业领导工作？请举手。</p>\n<p>有多少人认为领导者是天生的？有多少人认为领导者是后天造就的？请举手。</p>\n<p>你们确实是最聪明的人。领导者是后天造就的，时势造英雄。生活的经验打造了领导者。而我们每个人的经历、故事，都是不一样的。领导力没有统一的风格，史蒂夫·乔布斯只有一个。所以你需要决定自己是一个什么样的人，并忠于自我。</p>\n<p>说到领导力，在很多不同的教科书里对它都有不同的定义。其中一个特质我认为被低估了，就是脆弱，尤其是对于男性。人们一般很难想象一个男人在一群人面前展示自己的脆弱，承认错误、道歉。在过去这么多年里，我学到的是，你越脆弱，越多人会帮助你。</p>\n<p>所以，脆弱也是领导力的一个特质，我希望你们能够去拥抱它、接受它。反过来说，作为一个企业的领导人，并不意味着你就能够对所有问题都找到答案。事实上，寻求帮助也是一种力量。你想打造一家好公司，你身边围绕着很多人，他们有很多想法，不同的价值观。有些人是专业技能人才，有些人可能比你还聪明，比你还了不起。但是所有人必须要有一个共同的价值观。</p>\n<p>我相信在座的各位有你们自己的期许，有你们自己的目标，想让自己成为什么样的人，你们一定想让自己的父母为你们骄傲，因为你们正在一所世界级的名校求学。但是，当你们从这里走出去时，你们想要做什么？我想谈一谈所谓的“梦想”。在过去的三四十年里，我遇见过很多人都和我说，“我也有过关于咖啡的想法”，“我的想法比你还早”，是吗？那你们做了什么呢？</p>\n<p>我想说的是，不要让任何人对你说，你的梦想是不能实现的。我经常对年轻人说，不仅要有梦想，更要有宏大的梦想。把你的失望和失败，当做学习的机会，千万不要轻易的放弃和离开。这个房间里的每个人都有能力和知识成就一番大事。不管你的梦想是什么，坚持！坚韧！走别人没走过的路。当你最终成功时，记得回到你的初心——我之存在，因为有你。</p>\n<p>我们这个房间里的每个人，都是因为受助于生命中的某人才能坐在这里，没有人是独自一路走到这里的。所以，让我们懂得回报。回报你的家庭、你的社区，整个社会。将这一价值观传递下去，不断地学习，保持好奇心。</p>\n<p>再说一个故事。我是犹太人，一有机会就会去以色列。很多年来我都有一个精神导师，他传授了我很多伟大的智慧。每次我去见他，都尽可能的跟他在一起，聆听他的教诲。有一天他跟我说了一个故事，这不是一个关于犹太人的故事，而是一个关于人文精神的故事。他告诉我在大屠杀时期发生在德国发生的事。</p>\n<p>当时，许多男女儿童像沙丁鱼罐头一样被塞进火车车厢，运送到死亡集中营。车厢里没有灯、没有食物、没有厕所，当他们到集中营时，门一打开，外面很冷很冷，但每六个人中只有一个人能拿到一条毯子。拿到毯子的人就要决定我是留着毯子自己用，还是和剩下的五个人共用这条毯子。虽然不是所有人都这么做，但是绝大部分拿到毯子的人都会和另外五个人共用这一个毯子。所以今天，我想对大家说，不管将来你们的人生道路上有何际遇、去向何方，尽量和你身边的人分享你的毯子。Ubuntu，我之存在，因为有你！</p>\n<p>谢谢大家！</p>\n<p>（完）</p>\n<p><a href=\"https://v.qq.com/x/page/y039389lgl3.html\" target=\"_blank\" rel=\"external\">演讲视频</a></p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"https://v.qq.com/iframe/player.html?vid=y039389lgl3&tiny=0&auto=0\" allowfullscreen></iframe>","excerpt":"<hr>\n<p>文/霍华德*舒尔茨</p>\n<p><img src=\"/assets/img/think_iam_because_of_you.jpeg\" alt=\"\"></p>\n<p>非常感谢对我热情洋溢的介绍。我很荣幸、非常荣幸能够来到这里（清华大学）。我知道，过去这个讲堂也曾邀请过其他非常著名的演讲者。但是今天，我和大家分享的也许和之前的有点不太一样，并且会给你们提出一些出乎意料的挑战。</p>\n<p>三年前，在星巴克的全球股东大会上，我向我们的员工、我们的股东问了一个很重要的问题。这个问题当时已经在我脑海中存在了很久，这个问题就是：在我们所生活的这个世界，每一天都在变化，不仅仅是商业上的变化，而是到处都在发生变化，一家商业上市公司的使命和责任是什么？仅仅只是盈利赚钱么？只是为股东带来回报么？如何在商业利润和社会责任之间实现平衡？这个问题就是今天晚上我想和各位分享的主题。</p>\n<p>1987年，星巴克只有11家门店，员工区区百人。我们的梦想就是：把星巴克打造成一家与众不同的企业，不仅是一个本土品牌，更可以在公司不断发展的同时，与员工共同成长，分享成功，一路向前。正如刚刚院长所提到的，我们是美国第一家向员工提供综合医疗保险和股票期权的公司。当时，我们还只是一家私人公司。很多人认为这项举措会稀释公司股票的价值，是无法长期维持的。然而，当我们回顾星巴克的发展和成就，我们发现，原来最好的成功是与彼此分享。</p>\n<p>现在，你必须要用一个与过去截然不同的方式来经营业务。1987年，星巴克只有11家门店，100名员工，我们梦想一直是把星巴克打造成一家与众不同的企业。而如今，正如刚刚院长介绍的，我们的门店已经超过了25,000家，业务遍及75个国家，拥有超过33万员工，上周接待的顾客人次达到9100万。那么问题来了：这是一家用纸杯销售咖啡的公司，很多人连那些意大利语的发音也不会，一杯定价3美元或4美元的咖啡，这些在过去都是从来没有发生过的。</p>\n<p>然而，就是这样一家企业，从1987年的11家门店发展到如今的26,000家门店，市值将近900亿美元。这些成就是怎么得来的？你们可能还会问一个相似的问题——一家公司是如何从1999年开始的一家门店，发展成今天的26，000多家门店，每周服务500万位顾客，拥有近40,000名员工？</p>\n<p>今天我们在中国宣布了一项重要举措，这是星巴克的价值观、文化和指导原则的体现。这项全新的举措印证了“我们是谁？”每家公司，无论提供什么产品、什么服务、属于什么行业或来自哪个国家，都要对你存在的意义、目的和价值做一个定义。</p>\n<p>所以今天，我们在北京宣布的这个消息：今天我们宣布，从今年6月1日起，为所有符合条件的全职中国员工，全资提供父母重大疾病保险。我们为什么要这么做呢？为什么公司要做如此巨大的投入，这也许要投入数百万美元，为这么多员工的父母购买这份保险？用这个问题带领我们再次回到1987年。答案就是：不是每一个商业决定都是出于经济利益的考量。<br>","more":"<br>一路走来，我们所做的许多决定都并不完全出于经济利益的考虑。事实上，我想说，我们做出的许多决策，都不是从经济利益出发的，甚至经常反其道而行之，然而，这就是我们获得商业成就的主要原因。在今日我们所处的环境中，欲打造一家可以持续发展的伟大公司，其成功的秘诀就是信任。作为管理者和领导者，我们的义务和责任就是不断满足员工的期望，并与他们建立一种相互信任的关系，这样他们才能不断满足并超越顾客的期待。</p>\n<p>那么，这些理念、这些价值观、这一文化和这些指导原则从何而来呢？首先，我要说的是，我们在全世界采购和烘焙高品质的咖啡，我们可能拥有零售行业中最强的地产资源，我们的门店设计也是行业领先的。不论是咖啡品质、门店分布，还是门店设计和卓越运营，我们都引领业界。然而，所有这些在我们公司里，都只能排在第二位。我们最为看重的企业基石，是我们的文化和我们的行为举止。不论相信与否，这些文化和价值观形成于我的孩童时代。</p>\n<p>我从小在纽约布鲁克林的政府公房里长大。你们可能听说过“美国梦”，美国式承诺，一个人的出身并不能决定他的未来。</p>\n<p>我的父亲做过许多蓝领工作，在我7岁的时候，爸爸当时是一名运送尿布的货车司机，这也许是他所从事的工作中最糟糕的一份。</p>\n<p>1960年3月，我记得那是一个寒冷的一天我的父亲因路面结冰而滑倒，摔伤了大腿。在60年代的美国，如果你是一个没有受过教育的蓝领工人，如果你在工作中受伤，你就会被解雇。没有收入，也没有意外保险。在7岁的时候，我亲历了美国梦的破灭，我目睹了父母所经历的无助和绝望，我们当时因此陷入了巨大的困境。</p>\n<p>不论今日的我如何成功，我7岁时所经历的伤痛，直到今天仍历历在目。事实上，失败的恐惧、不安全感、脆弱无助让当时还是小男孩的我深感羞耻，然而，也由此而让我学会热诚、敏感、自重并尊重他人。</p>\n<p>因此，我意识到，如果要打造一家可持续发展的伟大公司，我们必须要采取不同的方式。我们必须要将为股东提供价值和为员工提供价值联系起来，事实上，我们反其道而行之。</p>\n<p>1992年6月，星巴克咖啡公司上市，当时我们有大约125家门店，实现了一个季度的盈利，总市值约2.5亿美元。当时，我认为我中了头彩。我打电话给我妈妈，对她说：“妈妈，我们做到了，我们的美国梦实现了。” 2.5亿美元。</p>\n<p>25年过去了，星巴克如今的市值从2.5亿美元变成了将近900亿美元。回顾曾经取得的成就，分析成功的原因，我可以肯定地告诉你们，这不是因为我有MBA的学位，因为我并没有；这也不是因为我有商学院学位，因为我也没有，而且我已经不可能再获得。但我确认有的，那就是我的生活阅历。</p>\n<p>我去过的每一个地方，我做的每一件事情，我试图永葆好奇，并且我要跟你们说，要保持绝对的好奇心。你们要具有真正的好奇心：对这个世界、对你所处的周围环境，对你能从不同的经历和不同的人身上学习所得的收获。你会因为所学到的很多东西而感到惊喜。</p>\n<p>举个例子，6个月前，星巴克准备在南非开出第一家门店。此前，我从未去过南非，因此我感到十分兴奋。我们去了，并且准备在那儿开出两家新店。顾客在我们的门外排起了长队，并且要排2小时才能进店。我参加过许多星巴克新店的开业活动，却从未目睹过这样的景象。没有广告，没有促销，只因为是星巴克。</p>\n<p>在新店开业前2天，我一如往常地和一群即将第一次穿上绿围裙的年轻人围坐在一起交流。为什么会有这样的传统？很多人认为星巴克是一家独特的，市场营销做得非常好的公司，认为星巴克是一家非常典型的善于市场营销的公司，然而，我们并不是一个致力于市场营销的公司，我们也不在乎市场营销。</p>\n<p>我知道这么说我会惹来麻烦，我这样说的原因，是因为我们是基于门店体验而打造的品牌，是因为我们的伙伴和顾客之间的情感连接所带来的体验。</p>\n<p>身穿绿围裙的伙伴就是星巴克的核心。所以，在南非，在约翰内斯堡，我想要和那些即将穿上代表我们品牌的绿围裙的年轻人坐在一起。围坐着的有50个年轻人，我请他们每一个人轮流分享自己的故事。我们沿着圆桌开始分享。他们告诉我的第一件事情是这个小城市的生活景象。</p>\n<p>你们中有多少人去过南非？请举手示意。有谁，有多少人曾经去过小城市？我说过，我出身贫穷，曾经住在政府公屋里。当我到访这些小城市时，我感到很难受，为他们贫困的生活条件和艰难的居住环境而心碎。然而，这些年轻人却表现出如此的幸福、满足和快乐，因为他们的家人。当他们逐一讲述自己的故事时，我反复听到一个之前从未听过的非洲词语，他们很多人都讲到了这个词。</p>\n<p>后来，我鼓起勇气问：这个词什么意思？Ubuntu，你们一直在说的这个词是什么意思？他们迫不及待地告诉我，“Ubuntu”是曼德拉曾经多次提及的一个词，意思是“我之存在，因为有你”。我之存在，因为有你。如果今天晚上你们要记住我演讲中的一个关键词，我希望你们记住“Ubuntu”，我之存在，因为有你。</p>\n<p>这是一种无私，这是一种分享，这是对他人的责任感——近朱者赤，个人的价值因其身边的个人和团队而体现，最好的成功是与彼此分享。那是我第一次听到他们讲述“Ubuntu”的意思以及对于年轻人意味着什么，以及是如何地适用于星巴克。</p>\n<p>今天上午，我与一部分星巴克中国的伙伴进行了面对面的交流。在星巴克，我们把员工称为伙伴，因为每个人都是公司的股东。他们有人也带来了父母。过去五年，我们每年都会举办这样的伙伴及家属交流会，会上不谈我们的销售额、利润率，也不谈盈利和股价，而是庆贺家人的团聚，表达我们对于伙伴家人的尊敬和感激之情。我们希望通过此举向伙伴的父母表达，我们将尽责尽力照顾他们的孩子。</p>\n<p>在上午的交流会上，通过与这些伙伴和他们父母的分享，我们了解到其中一些伙伴们亲历了父母患病，甚至经历过父母的逝去。几个月前，我们对中国的伙伴做了一次调查，发现父母的身体健康是伙伴们最为关心的，他们也很担心自己的经济承担能力。今天上午的交流会上，我们都流泪了，因为我们听到了伙伴生活故事的分享，我们从他们的分享中感受到他们的勇气。看到自己的父母逐渐老去，他们十分担心自己的经济承担能力。</p>\n<p>我们了解到在中国，你们会有一种可能是我们在美国没有的人生体验——你们每个人出于对自己的父母、对祖辈的尊敬而承担的巨大的责任。所以对于星巴克这样一个公司而言，当我们听到了伙伴们发出的请求，希望星巴克帮助他们，我们无法拒绝这种请求，这也是为什么今天有这样一个重要的发布，这是我们迈出的里程碑式的一步。</p>\n<p>在过去47年的历史里，我们星巴克一直这样做。在中国，星巴克公司就不是一家美国公司，而是一家中国公司，这也是为什么我们提供住房津贴，我们也提供咖啡豆股，也是为什么与宋庆龄基金会有11年的合作伙伴关系，我们做所有这些，不是营销、不是新闻发布，而是因为这是星巴克公司价值文化的精髓所在。</p>\n<p>我刚才谈到了，并不是所有商业决策都是出于经济利益的决策。我知道你们从学校毕业会加入一些企业工作，会有压力。这个压力就是赚钱的压力。如果是上市公司，你就会有季度的财务报告的压力。但是，如何打造一个可以持续的、长久的公司？我们要真正地眼光长远，要可持续地发展业务。这就好比，如果要在未来获得回报，你必须现在开始不断在你的账户上储蓄。而且每次你因为短期的压力而“提款”后，你就得存入更多。在过去的5年、10年、15年里，我们做了很多打破传统的决策，都是出于我们存在的目的。</p>\n<p>大家有没有听过星巴克在美国做的一些反种族歧视的努力？在座各位有多少人读过新闻，知道我们在全球为1万名难民提供就业机会？我们为什么这样做？我们为星巴克每一位美国伙伴都提供亚利桑那州大学的4年免费教育奖学金。为什么？这是因为虽然我们是一家盈利性的上市公司，但是我们非常坚信，我们最核心的责任不仅是赚钱。应该这样说，我们是一家以人文精神为基础的绩效驱动型的公司。</p>\n<p>每周我参加管理层会议时，都会想像有两把空着的椅子，一个坐着星巴克的顾客、一个坐着星巴克的伙伴。所以我们每天问自己，我们的战略、我们的决策是否能够让我们的顾客、让我们的伙伴真正地骄傲。如果不能让他们感到骄傲，也许我们不应该这样决策。如果这是一个短期的决策，它能够给我们带来更多的金钱，却不会让人们感到自豪，毫无疑问这是一个错误的事情，不能去做。</p>\n<p>大家可能读了很多的教科书。仁慈、爱、怜悯心，人文精神，这些词汇也许不常在商学院的教科书里出现。但是这恰恰是我们打造一个长期、持久、繁荣的企业的基石——怜悯心、仁慈心、同理心和爱。</p>\n<p>我想说，在绝大多数情况下，如果一家企业的文化和价值观不能够和这些传统美德融合，那他们将很难吸引并保留优秀的人才，人们不会认同并感觉自己属于一种比自己更伟大的存在，不会朝着一个方向一起努力。反过来想，你有很好的战略，你把价值作为你的指导原则，在企业打造信任和爱的文化，所有的员工都对自己的使命和工作有认同感，每一天他们的工作都能够实现一种价值，而领导层是一种服务型的领导层，那你几乎是不可战胜的。</p>\n<p>看看1987年的星巴克，看看今天的星巴克，回首我们走过的历程，想想中国人以前是没有喝咖啡的传统的，不错，我们星巴克的咖啡是非常棒的，但是更棒的是我们和顾客之间的关系，这是我们把文化、价值观融合起来的结果。</p>\n<p>在我们今天所处的环境中，一方面我们获取资本的过程要比以前容易很多，另一方面又存在着如此多的竞争，这么多杂音，要想真正成功绝非易事。赢和输之间的差别在哪里？那就是一个伟大的战略，和一个可持续发展的公司。</p>\n<p>我自己就是一个很好的例子，我绝对不是这个屋子里最聪明的人。星巴克成功的一个驱动力量就是我们创造的、获得广泛认可和接受的文化和价值观。不管是在中国、日本、美国、欧洲还是墨西哥，在所有我们开展业务的市场，他们都接受我们的想法，我们也从他们身上学到很多，这才是成功的精髓所在。</p>\n<p>我们都想过更好的生活，也想让我们的孩子过上更好的生活，我们想尽力让父母为我们感到自豪和骄傲，我们希望晚上回到家后能和父母、爱人、孩子分享我们今天所取得的成功。我们也希望第二天去工作时，抱着“Ubunto”的理念而全力以赴——我之存在，因为有你。</p>\n<p>我一直在想，我们所遇到过的诸多挑战和我们克服它们获得成功的方法。很多次，人们都说星巴克不会成功。就以我们在中国的发展为例。</p>\n<p>我们1999年开第一家店后，曾经好几年的时间是亏损的。当时很多美国人就说星巴克在中国肯定要失败，他们撑不住了。我们所到之处并不是都能一夜之间获得成功，而是通过对我们所坚信的核心目标和我们的热情坚持，以人为本，并认可你只能通过超越员工的期待，才能最终实现超越顾客的期待。</p>\n<p>在很多情况下，对文化、价值观、指导原则的理解和认同会比商业战略本身更重要。或者这样说，即使是世界上最伟大的战略，如果缺乏对公司的信心，员工不信任领导、公司的使命和目标，那这个战略也是无法长久的。</p>\n<p>从零开始经营一家公司就像培养一个孩子，最开始都有一个“印记期”。每个公司都有记忆，那些公司的早期行为都在设定一种企业的氛围。<br>我想问问你们，有多少人听过“服务型领导力”这个词？这里聚集了全中国最聪明的学子，请你们给我一个答案。</p>\n<p>（学生：为人民服务。学生：帮助其他人获得成功。）</p>\n<p>你们有多少人愿意为一个服务型的企业领导工作？请举手。</p>\n<p>有多少人认为领导者是天生的？有多少人认为领导者是后天造就的？请举手。</p>\n<p>你们确实是最聪明的人。领导者是后天造就的，时势造英雄。生活的经验打造了领导者。而我们每个人的经历、故事，都是不一样的。领导力没有统一的风格，史蒂夫·乔布斯只有一个。所以你需要决定自己是一个什么样的人，并忠于自我。</p>\n<p>说到领导力，在很多不同的教科书里对它都有不同的定义。其中一个特质我认为被低估了，就是脆弱，尤其是对于男性。人们一般很难想象一个男人在一群人面前展示自己的脆弱，承认错误、道歉。在过去这么多年里，我学到的是，你越脆弱，越多人会帮助你。</p>\n<p>所以，脆弱也是领导力的一个特质，我希望你们能够去拥抱它、接受它。反过来说，作为一个企业的领导人，并不意味着你就能够对所有问题都找到答案。事实上，寻求帮助也是一种力量。你想打造一家好公司，你身边围绕着很多人，他们有很多想法，不同的价值观。有些人是专业技能人才，有些人可能比你还聪明，比你还了不起。但是所有人必须要有一个共同的价值观。</p>\n<p>我相信在座的各位有你们自己的期许，有你们自己的目标，想让自己成为什么样的人，你们一定想让自己的父母为你们骄傲，因为你们正在一所世界级的名校求学。但是，当你们从这里走出去时，你们想要做什么？我想谈一谈所谓的“梦想”。在过去的三四十年里，我遇见过很多人都和我说，“我也有过关于咖啡的想法”，“我的想法比你还早”，是吗？那你们做了什么呢？</p>\n<p>我想说的是，不要让任何人对你说，你的梦想是不能实现的。我经常对年轻人说，不仅要有梦想，更要有宏大的梦想。把你的失望和失败，当做学习的机会，千万不要轻易的放弃和离开。这个房间里的每个人都有能力和知识成就一番大事。不管你的梦想是什么，坚持！坚韧！走别人没走过的路。当你最终成功时，记得回到你的初心——我之存在，因为有你。</p>\n<p>我们这个房间里的每个人，都是因为受助于生命中的某人才能坐在这里，没有人是独自一路走到这里的。所以，让我们懂得回报。回报你的家庭、你的社区，整个社会。将这一价值观传递下去，不断地学习，保持好奇心。</p>\n<p>再说一个故事。我是犹太人，一有机会就会去以色列。很多年来我都有一个精神导师，他传授了我很多伟大的智慧。每次我去见他，都尽可能的跟他在一起，聆听他的教诲。有一天他跟我说了一个故事，这不是一个关于犹太人的故事，而是一个关于人文精神的故事。他告诉我在大屠杀时期发生在德国发生的事。</p>\n<p>当时，许多男女儿童像沙丁鱼罐头一样被塞进火车车厢，运送到死亡集中营。车厢里没有灯、没有食物、没有厕所，当他们到集中营时，门一打开，外面很冷很冷，但每六个人中只有一个人能拿到一条毯子。拿到毯子的人就要决定我是留着毯子自己用，还是和剩下的五个人共用这条毯子。虽然不是所有人都这么做，但是绝大部分拿到毯子的人都会和另外五个人共用这一个毯子。所以今天，我想对大家说，不管将来你们的人生道路上有何际遇、去向何方，尽量和你身边的人分享你的毯子。Ubuntu，我之存在，因为有你！</p>\n<p>谢谢大家！</p>\n<p>（完）</p>\n<p><a href=\"https://v.qq.com/x/page/y039389lgl3.html\">演讲视频</a></p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"https://v.qq.com/iframe/player.html?vid=y039389lgl3&tiny=0&auto=0\" allowfullscreen></iframe>"},{"layout":"post","title":"Android Camera相机开发详解","date":"2017-08-21T11:34:21.000Z","comments":1,"_content":"---\n在应用软件开发中，图片数据，对于一个公司来说是十分重要的，例如：上传图片资料，修改用户头像等，而这其中就离不开相机和相册的使用。对于ios平台来说，直接调用系统相机或相册，就可搞定一切。然而对于Android平台来说，直接调用系统相机或相册，在适配和体验上问题比较多，具体原因，相比大家也知道，安卓品牌太多太杂，性能不一。鉴于此，在开发的过程中，遇到类似问题，建议自己实现相机或相册功能，以保证体验完整。本篇博文将会重点介绍Camera相机的实现。\n\n----\n\n首先，推荐两个github项目，可以直接使用的相机和相册；另外，也推荐一个联系人选择器：\n\n相机：[CameraDemo(自定义相机)](https://github.com/awenzeng/CameraDemo)\n\n![](https://github.com/awenzeng/CameraDemo/raw/master/resource/camera_demo.gif)\n\n相册：[ImageSelector(仿微信图片选择相册)](https://github.com/ioneday/ImageSelector)\n\n联系人：[ContactSelector(联系人选择器)](https://github.com/awenzeng/ContactSelector)\n\n\n# 一、打开Camera\n```java\n        try {\n                mCamera = Camera.open();//开启相机\n            } catch (RuntimeException e) {\n                e.printStackTrace();\n                LogUtil.d(TAG, \"摄像头异常，请检查摄像头权限是否应许\");\n                ToastUtil.getInstance().toast(\"摄像头异常，请检查摄像头权限是否应许\");\n                return;\n            }\n```\n<!-- more -->\n# 二、设置Camera参数\n\n默认尺寸可以自由设置，这里取手机的分辨率为默认尺寸。\n\n**1.根据指定分辨率查找相机最佳适配分辨率并设置**\n\n```java\n    private void setCameraParams(int width, int height) {\n        LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n        List<Camera.Size> pictureSizeList = parameters.getSupportedPictureSizes();\n        sort(pictureSizeList);//排序\n        for (Camera.Size size : pictureSizeList) {\n            LogUtil.i(TAG, \"摄像头支持的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((float) height / width));//从列表中选取合适的分辨率\n        if (null == picSize) {\n            picSize = parameters.getPictureSize();\n        }\n\n        LogUtil.e(TAG, \"我们选择的摄像头分辨率：\" + \"picSize.width=\" + picSize.width + \"  picSize.height=\" + picSize.height);\n        // 根据选出的PictureSize重新设置SurfaceView大小\n        parameters.setPictureSize(picSize.width, picSize.height);\n        ....\n```\n\n**2.根据指定分辨率查找相机最佳预览分辨率并设置**\n\n```java\n    private void setCameraParams(int width, int height) {\n         LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n        /*************************** 获取摄像头支持的PreviewSize列表********************/\n        List<Camera.Size> previewSizeList = parameters.getSupportedPreviewSizes();\n        sort(previewSizeList);\n        for (Camera.Size size : previewSizeList) {\n            LogUtil.i(TAG, \"摄像支持可预览的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size preSize = getBestSupportedSize(previewSizeList, ((float) height) / width);\n        if (null != preSize) {\n            LogUtil.e(TAG, \"我们选择的预览分辨率：\" + \"preSize.width=\" + preSize.width + \"  preSize.height=\" + preSize.height);\n            parameters.setPreviewSize(preSize.width, preSize.height);\n        }\n       ......\n```\n\n**3.最佳分辨率适配算法(先排序)**\n\n```java\n    /**\n     * 如包含默认尺寸，则选默认尺寸，如没有，则选最大的尺寸\n     * 规则：在相同比例下，1.优先寻找长宽分辨率相同的->2.找长宽有一个相同的分辨率->3.找最大的分辨率\n     *\n     * @param sizes 尺寸集合\n     * @return 返回合适的尺寸\n     */\n    private Camera.Size getBestSupportedSize(List<Camera.Size> sizes, float screenRatio) {\n        Camera.Size largestSize = null;\n        int largestArea = 0;\n        for (Camera.Size size : sizes) {\n            if ((float) size.height / (float) size.width == screenRatio) {\n                if (size.width == DEFAULT_PHOTO_WIDTH && size.height == DEFAULT_PHOTO_HEIGHT) {\n                    // 包含特定的尺寸，直接取该尺寸\n                    largestSize = size;\n                    break;\n                } else if (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) {\n                    largestSize = size;\n                    break;\n                }\n                int area = size.height + size.width;\n                if (area > largestArea) {//找出最大的合适尺寸\n                    largestArea = area;\n                    largestSize = size;\n                }\n            } else if (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) {\n                largestSize = size;\n                break;\n            }\n        }\n        if (largestSize == null) {\n            largestSize = sizes.get(sizes.size() - 1);\n        }\n        return largestSize;\n    }\n```\n\n**4.对焦模式选择**\n由于部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头\n\n```java\n   //对焦模式的选择 \n        if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n        }\n```\n\n**5.图片质量**\nPixelFormat中有多种模式，源码有解。\n\n```java\n        //图片质量\n        parameters.setJpegQuality(100); // 设置照片质量\n        parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); // 预览格式\n        parameters.setPictureFormat(PixelFormat.JPEG); // 相片格式为JPEG，默认为NV21\n```\n\n**6.闪关灯及横竖屏镜头调整**\n\n```java\n        // 关闪光灯\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n\n        // 横竖屏镜头自动调整\n        if (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {\n            mCamera.setDisplayOrientation(90);\n        } else {\n            mCamera.setDisplayOrientation(0);\n        }\n```\n\n**7.相机异常监听**\n\n```java\n        //相机异常监听\n        mCamera.setErrorCallback(new Camera.ErrorCallback() {\n\n            @Override\n            public void onError(int error, Camera camera) {\n                String error_str;\n                switch (error) {\n                    case Camera.CAMERA_ERROR_SERVER_DIED: // 摄像头已损坏\n                        error_str = \"摄像头已损坏\";\n                        break;\n\n                    case Camera.CAMERA_ERROR_UNKNOWN:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n\n                    default:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n                }\n                ToastUtil.getInstance().toast(error_str);\n                Log.i(TAG, error_str);\n            }\n        });\n```\n\n完整参数设置代码：\n\n```java\n  /**\n     * 设置分辨率等参数\n     *\n     * @param width  宽\n     * @param height 高\n     */\n    private void setCameraParams(int width, int height) {\n        LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n\n        /*************************** 获取摄像头支持的PictureSize列表********************/\n        List<Camera.Size> pictureSizeList = parameters.getSupportedPictureSizes();\n        sort(pictureSizeList);//排序\n        for (Camera.Size size : pictureSizeList) {\n            LogUtil.i(TAG, \"摄像头支持的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((float) height / width));//从列表中选取合适的分辨率\n        if (null == picSize) {\n            picSize = parameters.getPictureSize();\n        }\n\n        LogUtil.e(TAG, \"我们选择的摄像头分辨率：\" + \"picSize.width=\" + picSize.width + \"  picSize.height=\" + picSize.height);\n        // 根据选出的PictureSize重新设置SurfaceView大小\n        parameters.setPictureSize(picSize.width, picSize.height);\n\n\n        /*************************** 获取摄像头支持的PreviewSize列表********************/\n        List<Camera.Size> previewSizeList = parameters.getSupportedPreviewSizes();\n        sort(previewSizeList);\n        for (Camera.Size size : previewSizeList) {\n            LogUtil.i(TAG, \"摄像支持可预览的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size preSize = getBestSupportedSize(previewSizeList, ((float) height) / width);\n        if (null != preSize) {\n            LogUtil.e(TAG, \"我们选择的预览分辨率：\" + \"preSize.width=\" + preSize.width + \"  preSize.height=\" + preSize.height);\n            parameters.setPreviewSize(preSize.width, preSize.height);\n        }\n\n        /*************************** 对焦模式的选择 ********************/\n        if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n        }\n        //图片质量\n        parameters.setJpegQuality(100); // 设置照片质量\n        parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); // 预览格式\n        parameters.setPictureFormat(PixelFormat.JPEG); // 相片格式为JPEG，默认为NV21\n\n        // 关闪光灯\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n\n        // 横竖屏镜头自动调整\n        if (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {\n            mCamera.setDisplayOrientation(90);\n        } else {\n            mCamera.setDisplayOrientation(0);\n        }\n\n        //相机异常监听\n        mCamera.setErrorCallback(new Camera.ErrorCallback() {\n\n            @Override\n            public void onError(int error, Camera camera) {\n                String error_str;\n                switch (error) {\n                    case Camera.CAMERA_ERROR_SERVER_DIED: // 摄像头已损坏\n                        error_str = \"摄像头已损坏\";\n                        break;\n\n                    case Camera.CAMERA_ERROR_UNKNOWN:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n\n                    default:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n                }\n                ToastUtil.getInstance().toast(error_str);\n                Log.i(TAG, error_str);\n            }\n        });\n        mCamera.cancelAutoFocus();\n        mCamera.setParameters(parameters);\n    }\n```\n\n# 三、对焦\n\n要实现点击对焦，并有对焦环，需要自定义实现对焦环View.\n\n**1.自定义对焦环View-CameraFocusView**\n\n核心功能，就是对焦环缩小，并变绿。利用动画改变对焦环半径即可。\n```java\n     @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        if(isShow){\n            if(radius == GREEN_RADIUS){\n                mPaint.setColor(Color.GREEN);\n            }\n            if(centerPoint!=null){\n                canvas.drawCircle(centerPoint.x, centerPoint.y, radius, mPaint);\n            }\n        }\n    }\n\n    private void showAnimView() {\n        isShow = true;\n        if (lineAnimator == null) {\n            lineAnimator = ValueAnimator.ofInt(0, 20);\n            lineAnimator.setDuration(DURATION_TIME);\n            lineAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                @Override\n                public void onAnimationUpdate(ValueAnimator animation) {\n                    int animationValue = (Integer) animation\n                            .getAnimatedValue();\n                    if(lastValue!=animationValue&&radius>=(int) ((mScreenWidth * 0.1)-20)){\n                        radius = radius - animationValue;\n                        lastValue = animationValue;\n                    }\n                    isShow = true;\n                    invalidate();\n                }\n            });\n            lineAnimator.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    super.onAnimationEnd(animation);\n                    isShow = false;\n                    lastValue = 0;\n                    mPaint.setColor(Color.WHITE);\n                    radius = (int) (mScreenWidth * 0.1);\n                    invalidate();\n                }\n            });\n        }else{\n            lineAnimator.end();\n            lineAnimator.cancel();\n            lineAnimator.setInterpolator(new AccelerateDecelerateInterpolator());\n            lineAnimator.start();\n        }\n    }\n```\n\n**2.布局界面**\n\n让对焦环自定义View获取整个界面的触摸事件\n\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.awen.camera.widget.CameraSurfaceView\n        android:id=\"@+id/cameraSurfaceView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <com.awen.camera.widget.CameraFocusView\n        android:id=\"@+id/cameraFocusView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    ......\n```\n\n**3.定义对焦接口**\n\ni.定义接口\n\n```java\n    /**\n     * 聚焦的回调接口\n     */\n    public interface IAutoFocus {\n        void autoFocus(float x,float y);\n    }\n```\n\nii.对焦环View触摸事件中触发接口：\n\n```java\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_UP:\n                int x = (int) event.getX();\n                int y = (int) event.getY();\n                lastValue = 0;\n                mPaint.setColor(Color.WHITE);\n                radius = (int) (mScreenWidth * 0.1);\n                centerPoint = null;\n                if(y>TOP_CONTROL_HEIGHT&&y<ScreenSizeUtil.getScreenHeight()-BETTOM_CONTROL_HEIGHT){//状态栏和底部禁止点击获取焦点（显示体验不好）\n                    centerPoint = new Point(x, y);\n                    showAnimView();\n                    //开始对焦\n                    if (mIAutoFocus != null) {\n                        mIAutoFocus.autoFocus(event.getX(),event.getY());\n                    }\n                }\n                break;\n        }\n        return true;\n    }\n```\n\n**4.在CameraSurfaceView实现对焦**\n\ni.计算对焦区域\n\n```java\n   private Rect caculateFocusPoint(int x, int y) {\n        Rect rect = new Rect(x - 100, y - 100, x + 100, y + 100);\n        int left = rect.left * 2000 / getWidth() - 1000;\n        int top = rect.top * 2000 / getHeight() - 1000;\n        int right = rect.right * 2000 / getWidth() - 1000;\n        int bottom = rect.bottom * 2000 / getHeight() - 1000;\n        // 如果超出了(-1000,1000)到(1000, 1000)的范围，则会导致相机崩溃\n        left = left < -1000 ? -1000 : left;\n        top = top < -1000 ? -1000 : top;\n        right = right > 1000 ? 1000 : right;\n        bottom = bottom > 1000 ? 1000 : bottom;\n        return new Rect(left, top, right, bottom);\n    }\n```\n\nii.设置参数进行对焦\n\n```java\n      private void camerFocus(Rect rect) {\n        if (mCamera != null) {\n            Camera.Parameters parameters = mCamera.getParameters();\n            if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n            }\n            if (parameters.getMaxNumFocusAreas() > 0) {\n                List<Camera.Area> focusAreas = new ArrayList<Camera.Area>();\n                focusAreas.add(new Camera.Area(rect, 1000));\n                parameters.setFocusAreas(focusAreas);\n            }\n            mCamera.cancelAutoFocus(); // 先要取消掉进程中所有的聚焦功能\n            mCamera.setParameters(parameters);\n            mCamera.autoFocus(this);\n        }\n```\n\n# 四、拍照\n\n为了图片方便预览，需要对图片进行处理，所以需要知道相机的拍照时的方向，故在拍照应先设置照片的方向参数\n\n**1.CameraOrientationDetector(Camera方向监听器)**\n\n```java\n/**\n * 方向变化监听器，监听传感器方向的改变\n * Created by AwenZeng on 2017/2/21.\n */\n\npublic class CameraOrientationDetector extends OrientationEventListener {\n    int mOrientation;\n\n    public CameraOrientationDetector(Context context, int rate) {\n        super(context, rate);\n    }\n\n    @Override\n    public void onOrientationChanged(int orientation) {\n        this.mOrientation = orientation;\n        if (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) {\n            return;\n        }\n        //保证只返回四个方向,分别为0°、90°、180°和270°中的一个\n        int newOrientation = ((orientation + 45) / 90 * 90) % 360;\n        if (newOrientation != mOrientation) {\n            mOrientation = newOrientation;\n        }\n    }\n\n    public int getOrientation() {\n        return mOrientation;\n    }\n}\n```\n\n**2.设置照片方向参数**\n\n```java\n    /**\n     * 拍照\n     *\n     * @param callback\n     */\n    public void takePicture(Camera.PictureCallback callback) {\n        if (mCamera != null) {\n            int orientation = mCameraOrientation.getOrientation();\n            Camera.Parameters cameraParameter = mCamera.getParameters();\n            if (orientation == 90) {\n                cameraParameter.setRotation(90);\n                cameraParameter.set(\"rotation\", 90);\n            } else if (orientation == 180) {\n                cameraParameter.setRotation(180);\n                cameraParameter.set(\"rotation\", 180);\n            } else if (orientation == 270) {\n                cameraParameter.setRotation(270);\n                cameraParameter.set(\"rotation\", 270);\n            } else {\n                cameraParameter.setRotation(0);\n                cameraParameter.set(\"rotation\", 0);\n            }\n            mCamera.setParameters(cameraParameter);\n        }\n        mCamera.takePicture(null, null, callback);\n    }\n```\n\n**3.保存图片** \n\n为了方便预览，对不同方向的图片，需要做正向处理。\n\n```java\n  public String handlePhoto(byte[] data, int cameraId) {\n        String filePath = FileUtil.saveFile(data, \"/DCIM\");\n        if (!TextUtils.isEmpty(filePath)) {\n            int degree = BitmapUtil.getPhotoDegree(filePath);\n            Log.i(TAG, degree + \"\");\n            Bitmap bitmap = BitmapFactory.decodeFile(filePath);\n            Bitmap tBitmap = null;\n            try {\n                Log.i(TAG, \"保存图片大小：\"+\"width = \" + bitmap.getWidth() + \"   ------ height = \" + bitmap.getHeight());\n                if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {\n                    switch (degree) {\n                        case 0:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 90);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 90:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 180);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 180:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 270);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 270:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 360);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                    }\n                } else if (cameraId == Camera.CameraInfo.CAMERA_FACING_FRONT) {\n                    switch (degree) {\n                        case 0:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 270);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 90:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 180);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 180:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 90);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 270:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 360);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                    }\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n                // 重新拍照\n                return \"\";\n            } finally {\n                if (bitmap != null) {\n                    bitmap.recycle();\n                    bitmap = null;\n                }\n                if (tBitmap != null) {\n                    tBitmap.recycle();\n                    tBitmap = null;\n                }\n                ScannerByReceiver(mContext, filePath);//图库扫描\n            }\n            return filePath;\n        }\n        return null;\n    }\n```\n\n# 五、切换摄像头\n\n```java\n   /**\n     * 切换摄像头\n     */\n    public void changeCamera(int camera_id) {\n        mCamera.stopPreview();\n        mCamera.release();\n        try {\n            openCamera(camera_id);\n            mCamera.setPreviewDisplay(holder);\n            setCameraParams(DEFAULT_PHOTO_WIDTH, DEFAULT_PHOTO_HEIGHT);\n            mCamera.startPreview();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public boolean openCamera(int camera_id) {\n        LogUtil.i(TAG, \"openCamera id = \" + camera_id);\n        try {\n            mCamera = Camera.open(camera_id); // 打开摄像头\n            cameraId = camera_id;\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            ToastUtil.getInstance().toast(\"请先开启摄像头权限\");\n            LogUtil.i(TAG, \"请先开启摄像头权限\");\n            return false;\n        }\n\n        return true;\n    }\n```\n\n# 六、打开或关闭闪光灯\n\n```java\n    /**\n     * 设置闪光灯\n     *\n     * @param isOpen\n     */\n    public void changeFlashMode(boolean isOpen, Camera mCamera, int cameraId) {\n        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) { // 后摄像头才有闪光灯\n            Camera.Parameters parameters = mCamera.getParameters();\n            PackageManager pm = mContext.getPackageManager();\n            FeatureInfo[] features = pm.getSystemAvailableFeatures();\n            for (FeatureInfo f : features) {\n                if (PackageManager.FEATURE_CAMERA_FLASH.equals(f.name)) { // 判断设备是否支持闪光灯\n                    if (isOpen) {\n                        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH); // 开闪光灯\n\n                    } else {\n                        parameters\n                                .setFlashMode(Camera.Parameters.FLASH_MODE_OFF); // 关闪光灯\n\n                    }\n                }\n            }\n            mCamera.setParameters(parameters);\n        }\n    }\n```\n\n# 注意事项\n- Android6.0以上权限收紧，所以在使用相机前，请用PermissionsModel做好权限判断。[具体Android6.0权限](http://www.cnblogs.com/cr330326/p/5181283.html)\n- 部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头\n- Android5.0以后，官方推荐使用Camera2,本例子未使用新版本。\n\n\n","source":"_posts/tech_android_camera.md","raw":"---\nlayout: post\ntitle: \"Android Camera相机开发详解\"\ndate: 8/21/2017 7:34:21 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android相机\n\t- Camera\n---\n---\n在应用软件开发中，图片数据，对于一个公司来说是十分重要的，例如：上传图片资料，修改用户头像等，而这其中就离不开相机和相册的使用。对于ios平台来说，直接调用系统相机或相册，就可搞定一切。然而对于Android平台来说，直接调用系统相机或相册，在适配和体验上问题比较多，具体原因，相比大家也知道，安卓品牌太多太杂，性能不一。鉴于此，在开发的过程中，遇到类似问题，建议自己实现相机或相册功能，以保证体验完整。本篇博文将会重点介绍Camera相机的实现。\n\n----\n\n首先，推荐两个github项目，可以直接使用的相机和相册；另外，也推荐一个联系人选择器：\n\n相机：[CameraDemo(自定义相机)](https://github.com/awenzeng/CameraDemo)\n\n![](https://github.com/awenzeng/CameraDemo/raw/master/resource/camera_demo.gif)\n\n相册：[ImageSelector(仿微信图片选择相册)](https://github.com/ioneday/ImageSelector)\n\n联系人：[ContactSelector(联系人选择器)](https://github.com/awenzeng/ContactSelector)\n\n\n# 一、打开Camera\n```java\n        try {\n                mCamera = Camera.open();//开启相机\n            } catch (RuntimeException e) {\n                e.printStackTrace();\n                LogUtil.d(TAG, \"摄像头异常，请检查摄像头权限是否应许\");\n                ToastUtil.getInstance().toast(\"摄像头异常，请检查摄像头权限是否应许\");\n                return;\n            }\n```\n<!-- more -->\n# 二、设置Camera参数\n\n默认尺寸可以自由设置，这里取手机的分辨率为默认尺寸。\n\n**1.根据指定分辨率查找相机最佳适配分辨率并设置**\n\n```java\n    private void setCameraParams(int width, int height) {\n        LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n        List<Camera.Size> pictureSizeList = parameters.getSupportedPictureSizes();\n        sort(pictureSizeList);//排序\n        for (Camera.Size size : pictureSizeList) {\n            LogUtil.i(TAG, \"摄像头支持的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((float) height / width));//从列表中选取合适的分辨率\n        if (null == picSize) {\n            picSize = parameters.getPictureSize();\n        }\n\n        LogUtil.e(TAG, \"我们选择的摄像头分辨率：\" + \"picSize.width=\" + picSize.width + \"  picSize.height=\" + picSize.height);\n        // 根据选出的PictureSize重新设置SurfaceView大小\n        parameters.setPictureSize(picSize.width, picSize.height);\n        ....\n```\n\n**2.根据指定分辨率查找相机最佳预览分辨率并设置**\n\n```java\n    private void setCameraParams(int width, int height) {\n         LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n        /*************************** 获取摄像头支持的PreviewSize列表********************/\n        List<Camera.Size> previewSizeList = parameters.getSupportedPreviewSizes();\n        sort(previewSizeList);\n        for (Camera.Size size : previewSizeList) {\n            LogUtil.i(TAG, \"摄像支持可预览的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size preSize = getBestSupportedSize(previewSizeList, ((float) height) / width);\n        if (null != preSize) {\n            LogUtil.e(TAG, \"我们选择的预览分辨率：\" + \"preSize.width=\" + preSize.width + \"  preSize.height=\" + preSize.height);\n            parameters.setPreviewSize(preSize.width, preSize.height);\n        }\n       ......\n```\n\n**3.最佳分辨率适配算法(先排序)**\n\n```java\n    /**\n     * 如包含默认尺寸，则选默认尺寸，如没有，则选最大的尺寸\n     * 规则：在相同比例下，1.优先寻找长宽分辨率相同的->2.找长宽有一个相同的分辨率->3.找最大的分辨率\n     *\n     * @param sizes 尺寸集合\n     * @return 返回合适的尺寸\n     */\n    private Camera.Size getBestSupportedSize(List<Camera.Size> sizes, float screenRatio) {\n        Camera.Size largestSize = null;\n        int largestArea = 0;\n        for (Camera.Size size : sizes) {\n            if ((float) size.height / (float) size.width == screenRatio) {\n                if (size.width == DEFAULT_PHOTO_WIDTH && size.height == DEFAULT_PHOTO_HEIGHT) {\n                    // 包含特定的尺寸，直接取该尺寸\n                    largestSize = size;\n                    break;\n                } else if (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) {\n                    largestSize = size;\n                    break;\n                }\n                int area = size.height + size.width;\n                if (area > largestArea) {//找出最大的合适尺寸\n                    largestArea = area;\n                    largestSize = size;\n                }\n            } else if (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) {\n                largestSize = size;\n                break;\n            }\n        }\n        if (largestSize == null) {\n            largestSize = sizes.get(sizes.size() - 1);\n        }\n        return largestSize;\n    }\n```\n\n**4.对焦模式选择**\n由于部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头\n\n```java\n   //对焦模式的选择 \n        if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n        }\n```\n\n**5.图片质量**\nPixelFormat中有多种模式，源码有解。\n\n```java\n        //图片质量\n        parameters.setJpegQuality(100); // 设置照片质量\n        parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); // 预览格式\n        parameters.setPictureFormat(PixelFormat.JPEG); // 相片格式为JPEG，默认为NV21\n```\n\n**6.闪关灯及横竖屏镜头调整**\n\n```java\n        // 关闪光灯\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n\n        // 横竖屏镜头自动调整\n        if (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {\n            mCamera.setDisplayOrientation(90);\n        } else {\n            mCamera.setDisplayOrientation(0);\n        }\n```\n\n**7.相机异常监听**\n\n```java\n        //相机异常监听\n        mCamera.setErrorCallback(new Camera.ErrorCallback() {\n\n            @Override\n            public void onError(int error, Camera camera) {\n                String error_str;\n                switch (error) {\n                    case Camera.CAMERA_ERROR_SERVER_DIED: // 摄像头已损坏\n                        error_str = \"摄像头已损坏\";\n                        break;\n\n                    case Camera.CAMERA_ERROR_UNKNOWN:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n\n                    default:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n                }\n                ToastUtil.getInstance().toast(error_str);\n                Log.i(TAG, error_str);\n            }\n        });\n```\n\n完整参数设置代码：\n\n```java\n  /**\n     * 设置分辨率等参数\n     *\n     * @param width  宽\n     * @param height 高\n     */\n    private void setCameraParams(int width, int height) {\n        LogUtil.i(TAG, \"setCameraParams  width=\" + width + \"  height=\" + height);\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n\n        /*************************** 获取摄像头支持的PictureSize列表********************/\n        List<Camera.Size> pictureSizeList = parameters.getSupportedPictureSizes();\n        sort(pictureSizeList);//排序\n        for (Camera.Size size : pictureSizeList) {\n            LogUtil.i(TAG, \"摄像头支持的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((float) height / width));//从列表中选取合适的分辨率\n        if (null == picSize) {\n            picSize = parameters.getPictureSize();\n        }\n\n        LogUtil.e(TAG, \"我们选择的摄像头分辨率：\" + \"picSize.width=\" + picSize.width + \"  picSize.height=\" + picSize.height);\n        // 根据选出的PictureSize重新设置SurfaceView大小\n        parameters.setPictureSize(picSize.width, picSize.height);\n\n\n        /*************************** 获取摄像头支持的PreviewSize列表********************/\n        List<Camera.Size> previewSizeList = parameters.getSupportedPreviewSizes();\n        sort(previewSizeList);\n        for (Camera.Size size : previewSizeList) {\n            LogUtil.i(TAG, \"摄像支持可预览的分辨率：\" + \" size.width=\" + size.width + \"  size.height=\" + size.height);\n        }\n        Camera.Size preSize = getBestSupportedSize(previewSizeList, ((float) height) / width);\n        if (null != preSize) {\n            LogUtil.e(TAG, \"我们选择的预览分辨率：\" + \"preSize.width=\" + preSize.width + \"  preSize.height=\" + preSize.height);\n            parameters.setPreviewSize(preSize.width, preSize.height);\n        }\n\n        /*************************** 对焦模式的选择 ********************/\n        if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n        }\n        //图片质量\n        parameters.setJpegQuality(100); // 设置照片质量\n        parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); // 预览格式\n        parameters.setPictureFormat(PixelFormat.JPEG); // 相片格式为JPEG，默认为NV21\n\n        // 关闪光灯\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n\n        // 横竖屏镜头自动调整\n        if (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {\n            mCamera.setDisplayOrientation(90);\n        } else {\n            mCamera.setDisplayOrientation(0);\n        }\n\n        //相机异常监听\n        mCamera.setErrorCallback(new Camera.ErrorCallback() {\n\n            @Override\n            public void onError(int error, Camera camera) {\n                String error_str;\n                switch (error) {\n                    case Camera.CAMERA_ERROR_SERVER_DIED: // 摄像头已损坏\n                        error_str = \"摄像头已损坏\";\n                        break;\n\n                    case Camera.CAMERA_ERROR_UNKNOWN:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n\n                    default:\n                        error_str = \"摄像头异常，请检查摄像头权限是否应许\";\n                        break;\n                }\n                ToastUtil.getInstance().toast(error_str);\n                Log.i(TAG, error_str);\n            }\n        });\n        mCamera.cancelAutoFocus();\n        mCamera.setParameters(parameters);\n    }\n```\n\n# 三、对焦\n\n要实现点击对焦，并有对焦环，需要自定义实现对焦环View.\n\n**1.自定义对焦环View-CameraFocusView**\n\n核心功能，就是对焦环缩小，并变绿。利用动画改变对焦环半径即可。\n```java\n     @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        if(isShow){\n            if(radius == GREEN_RADIUS){\n                mPaint.setColor(Color.GREEN);\n            }\n            if(centerPoint!=null){\n                canvas.drawCircle(centerPoint.x, centerPoint.y, radius, mPaint);\n            }\n        }\n    }\n\n    private void showAnimView() {\n        isShow = true;\n        if (lineAnimator == null) {\n            lineAnimator = ValueAnimator.ofInt(0, 20);\n            lineAnimator.setDuration(DURATION_TIME);\n            lineAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                @Override\n                public void onAnimationUpdate(ValueAnimator animation) {\n                    int animationValue = (Integer) animation\n                            .getAnimatedValue();\n                    if(lastValue!=animationValue&&radius>=(int) ((mScreenWidth * 0.1)-20)){\n                        radius = radius - animationValue;\n                        lastValue = animationValue;\n                    }\n                    isShow = true;\n                    invalidate();\n                }\n            });\n            lineAnimator.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    super.onAnimationEnd(animation);\n                    isShow = false;\n                    lastValue = 0;\n                    mPaint.setColor(Color.WHITE);\n                    radius = (int) (mScreenWidth * 0.1);\n                    invalidate();\n                }\n            });\n        }else{\n            lineAnimator.end();\n            lineAnimator.cancel();\n            lineAnimator.setInterpolator(new AccelerateDecelerateInterpolator());\n            lineAnimator.start();\n        }\n    }\n```\n\n**2.布局界面**\n\n让对焦环自定义View获取整个界面的触摸事件\n\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.awen.camera.widget.CameraSurfaceView\n        android:id=\"@+id/cameraSurfaceView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n    <com.awen.camera.widget.CameraFocusView\n        android:id=\"@+id/cameraFocusView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    ......\n```\n\n**3.定义对焦接口**\n\ni.定义接口\n\n```java\n    /**\n     * 聚焦的回调接口\n     */\n    public interface IAutoFocus {\n        void autoFocus(float x,float y);\n    }\n```\n\nii.对焦环View触摸事件中触发接口：\n\n```java\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_UP:\n                int x = (int) event.getX();\n                int y = (int) event.getY();\n                lastValue = 0;\n                mPaint.setColor(Color.WHITE);\n                radius = (int) (mScreenWidth * 0.1);\n                centerPoint = null;\n                if(y>TOP_CONTROL_HEIGHT&&y<ScreenSizeUtil.getScreenHeight()-BETTOM_CONTROL_HEIGHT){//状态栏和底部禁止点击获取焦点（显示体验不好）\n                    centerPoint = new Point(x, y);\n                    showAnimView();\n                    //开始对焦\n                    if (mIAutoFocus != null) {\n                        mIAutoFocus.autoFocus(event.getX(),event.getY());\n                    }\n                }\n                break;\n        }\n        return true;\n    }\n```\n\n**4.在CameraSurfaceView实现对焦**\n\ni.计算对焦区域\n\n```java\n   private Rect caculateFocusPoint(int x, int y) {\n        Rect rect = new Rect(x - 100, y - 100, x + 100, y + 100);\n        int left = rect.left * 2000 / getWidth() - 1000;\n        int top = rect.top * 2000 / getHeight() - 1000;\n        int right = rect.right * 2000 / getWidth() - 1000;\n        int bottom = rect.bottom * 2000 / getHeight() - 1000;\n        // 如果超出了(-1000,1000)到(1000, 1000)的范围，则会导致相机崩溃\n        left = left < -1000 ? -1000 : left;\n        top = top < -1000 ? -1000 : top;\n        right = right > 1000 ? 1000 : right;\n        bottom = bottom > 1000 ? 1000 : bottom;\n        return new Rect(left, top, right, bottom);\n    }\n```\n\nii.设置参数进行对焦\n\n```java\n      private void camerFocus(Rect rect) {\n        if (mCamera != null) {\n            Camera.Parameters parameters = mCamera.getParameters();\n            if(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK){\n                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);//手动区域自动对焦\n            }\n            if (parameters.getMaxNumFocusAreas() > 0) {\n                List<Camera.Area> focusAreas = new ArrayList<Camera.Area>();\n                focusAreas.add(new Camera.Area(rect, 1000));\n                parameters.setFocusAreas(focusAreas);\n            }\n            mCamera.cancelAutoFocus(); // 先要取消掉进程中所有的聚焦功能\n            mCamera.setParameters(parameters);\n            mCamera.autoFocus(this);\n        }\n```\n\n# 四、拍照\n\n为了图片方便预览，需要对图片进行处理，所以需要知道相机的拍照时的方向，故在拍照应先设置照片的方向参数\n\n**1.CameraOrientationDetector(Camera方向监听器)**\n\n```java\n/**\n * 方向变化监听器，监听传感器方向的改变\n * Created by AwenZeng on 2017/2/21.\n */\n\npublic class CameraOrientationDetector extends OrientationEventListener {\n    int mOrientation;\n\n    public CameraOrientationDetector(Context context, int rate) {\n        super(context, rate);\n    }\n\n    @Override\n    public void onOrientationChanged(int orientation) {\n        this.mOrientation = orientation;\n        if (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) {\n            return;\n        }\n        //保证只返回四个方向,分别为0°、90°、180°和270°中的一个\n        int newOrientation = ((orientation + 45) / 90 * 90) % 360;\n        if (newOrientation != mOrientation) {\n            mOrientation = newOrientation;\n        }\n    }\n\n    public int getOrientation() {\n        return mOrientation;\n    }\n}\n```\n\n**2.设置照片方向参数**\n\n```java\n    /**\n     * 拍照\n     *\n     * @param callback\n     */\n    public void takePicture(Camera.PictureCallback callback) {\n        if (mCamera != null) {\n            int orientation = mCameraOrientation.getOrientation();\n            Camera.Parameters cameraParameter = mCamera.getParameters();\n            if (orientation == 90) {\n                cameraParameter.setRotation(90);\n                cameraParameter.set(\"rotation\", 90);\n            } else if (orientation == 180) {\n                cameraParameter.setRotation(180);\n                cameraParameter.set(\"rotation\", 180);\n            } else if (orientation == 270) {\n                cameraParameter.setRotation(270);\n                cameraParameter.set(\"rotation\", 270);\n            } else {\n                cameraParameter.setRotation(0);\n                cameraParameter.set(\"rotation\", 0);\n            }\n            mCamera.setParameters(cameraParameter);\n        }\n        mCamera.takePicture(null, null, callback);\n    }\n```\n\n**3.保存图片** \n\n为了方便预览，对不同方向的图片，需要做正向处理。\n\n```java\n  public String handlePhoto(byte[] data, int cameraId) {\n        String filePath = FileUtil.saveFile(data, \"/DCIM\");\n        if (!TextUtils.isEmpty(filePath)) {\n            int degree = BitmapUtil.getPhotoDegree(filePath);\n            Log.i(TAG, degree + \"\");\n            Bitmap bitmap = BitmapFactory.decodeFile(filePath);\n            Bitmap tBitmap = null;\n            try {\n                Log.i(TAG, \"保存图片大小：\"+\"width = \" + bitmap.getWidth() + \"   ------ height = \" + bitmap.getHeight());\n                if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {\n                    switch (degree) {\n                        case 0:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 90);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 90:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 180);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 180:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 270);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 270:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 360);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                    }\n                } else if (cameraId == Camera.CameraInfo.CAMERA_FACING_FRONT) {\n                    switch (degree) {\n                        case 0:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 270);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 90:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 180);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 180:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 90);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                        case 270:\n                            tBitmap = BitmapUtil.rotateBitmap(bitmap, 360);\n                            filePath = BitmapUtil.saveBitmap(tBitmap == null ? bitmap : tBitmap, filePath);\n                            break;\n                    }\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n                // 重新拍照\n                return \"\";\n            } finally {\n                if (bitmap != null) {\n                    bitmap.recycle();\n                    bitmap = null;\n                }\n                if (tBitmap != null) {\n                    tBitmap.recycle();\n                    tBitmap = null;\n                }\n                ScannerByReceiver(mContext, filePath);//图库扫描\n            }\n            return filePath;\n        }\n        return null;\n    }\n```\n\n# 五、切换摄像头\n\n```java\n   /**\n     * 切换摄像头\n     */\n    public void changeCamera(int camera_id) {\n        mCamera.stopPreview();\n        mCamera.release();\n        try {\n            openCamera(camera_id);\n            mCamera.setPreviewDisplay(holder);\n            setCameraParams(DEFAULT_PHOTO_WIDTH, DEFAULT_PHOTO_HEIGHT);\n            mCamera.startPreview();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public boolean openCamera(int camera_id) {\n        LogUtil.i(TAG, \"openCamera id = \" + camera_id);\n        try {\n            mCamera = Camera.open(camera_id); // 打开摄像头\n            cameraId = camera_id;\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            ToastUtil.getInstance().toast(\"请先开启摄像头权限\");\n            LogUtil.i(TAG, \"请先开启摄像头权限\");\n            return false;\n        }\n\n        return true;\n    }\n```\n\n# 六、打开或关闭闪光灯\n\n```java\n    /**\n     * 设置闪光灯\n     *\n     * @param isOpen\n     */\n    public void changeFlashMode(boolean isOpen, Camera mCamera, int cameraId) {\n        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) { // 后摄像头才有闪光灯\n            Camera.Parameters parameters = mCamera.getParameters();\n            PackageManager pm = mContext.getPackageManager();\n            FeatureInfo[] features = pm.getSystemAvailableFeatures();\n            for (FeatureInfo f : features) {\n                if (PackageManager.FEATURE_CAMERA_FLASH.equals(f.name)) { // 判断设备是否支持闪光灯\n                    if (isOpen) {\n                        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH); // 开闪光灯\n\n                    } else {\n                        parameters\n                                .setFlashMode(Camera.Parameters.FLASH_MODE_OFF); // 关闪光灯\n\n                    }\n                }\n            }\n            mCamera.setParameters(parameters);\n        }\n    }\n```\n\n# 注意事项\n- Android6.0以上权限收紧，所以在使用相机前，请用PermissionsModel做好权限判断。[具体Android6.0权限](http://www.cnblogs.com/cr330326/p/5181283.html)\n- 部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头\n- Android5.0以后，官方推荐使用Camera2,本例子未使用新版本。\n\n\n","slug":"tech_android_camera","published":1,"updated":"2019-06-27T08:15:15.300Z","photos":[],"link":"","_id":"cjxfjaetd006cystg20tsmy5a","content":"<hr>\n<p>在应用软件开发中，图片数据，对于一个公司来说是十分重要的，例如：上传图片资料，修改用户头像等，而这其中就离不开相机和相册的使用。对于ios平台来说，直接调用系统相机或相册，就可搞定一切。然而对于Android平台来说，直接调用系统相机或相册，在适配和体验上问题比较多，具体原因，相比大家也知道，安卓品牌太多太杂，性能不一。鉴于此，在开发的过程中，遇到类似问题，建议自己实现相机或相册功能，以保证体验完整。本篇博文将会重点介绍Camera相机的实现。</p>\n<hr>\n<p>首先，推荐两个github项目，可以直接使用的相机和相册；另外，也推荐一个联系人选择器：</p>\n<p>相机：<a href=\"https://github.com/awenzeng/CameraDemo\" target=\"_blank\" rel=\"external\">CameraDemo(自定义相机)</a></p>\n<p><img src=\"https://github.com/awenzeng/CameraDemo/raw/master/resource/camera_demo.gif\" alt=\"\"></p>\n<p>相册：<a href=\"https://github.com/ioneday/ImageSelector\" target=\"_blank\" rel=\"external\">ImageSelector(仿微信图片选择相册)</a></p>\n<p>联系人：<a href=\"https://github.com/awenzeng/ContactSelector\" target=\"_blank\" rel=\"external\">ContactSelector(联系人选择器)</a></p>\n<h1 id=\"一、打开Camera\"><a href=\"#一、打开Camera\" class=\"headerlink\" title=\"一、打开Camera\"></a>一、打开Camera</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mCamera = Camera.open();<span class=\"comment\">//开启相机</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        LogUtil.d(TAG, <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>);</div><div class=\"line\">        ToastUtil.getInstance().toast(<span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"二、设置Camera参数\"><a href=\"#二、设置Camera参数\" class=\"headerlink\" title=\"二、设置Camera参数\"></a>二、设置Camera参数</h1><p>默认尺寸可以自由设置，这里取手机的分辨率为默认尺寸。</p>\n<p><strong>1.根据指定分辨率查找相机最佳适配分辨率并设置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">    Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\">    List&lt;Camera.Size&gt; pictureSizeList = parameters.getSupportedPictureSizes();</div><div class=\"line\">    sort(pictureSizeList);<span class=\"comment\">//排序</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : pictureSizeList) &#123;</div><div class=\"line\">        LogUtil.i(TAG, <span class=\"string\">\"摄像头支持的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((<span class=\"keyword\">float</span>) height / width));<span class=\"comment\">//从列表中选取合适的分辨率</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == picSize) &#123;</div><div class=\"line\">        picSize = parameters.getPictureSize();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    LogUtil.e(TAG, <span class=\"string\">\"我们选择的摄像头分辨率：\"</span> + <span class=\"string\">\"picSize.width=\"</span> + picSize.width + <span class=\"string\">\"  picSize.height=\"</span> + picSize.height);</div><div class=\"line\">    <span class=\"comment\">// 根据选出的PictureSize重新设置SurfaceView大小</span></div><div class=\"line\">    parameters.setPictureSize(picSize.width, picSize.height);</div><div class=\"line\">    ....</div></pre></td></tr></table></figure>\n<p><strong>2.根据指定分辨率查找相机最佳预览分辨率并设置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">     LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">    Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*************************** 获取摄像头支持的PreviewSize列表********************/</span></div><div class=\"line\">    List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</div><div class=\"line\">    sort(previewSizeList);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : previewSizeList) &#123;</div><div class=\"line\">        LogUtil.i(TAG, <span class=\"string\">\"摄像支持可预览的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Camera.Size preSize = getBestSupportedSize(previewSizeList, ((<span class=\"keyword\">float</span>) height) / width);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != preSize) &#123;</div><div class=\"line\">        LogUtil.e(TAG, <span class=\"string\">\"我们选择的预览分辨率：\"</span> + <span class=\"string\">\"preSize.width=\"</span> + preSize.width + <span class=\"string\">\"  preSize.height=\"</span> + preSize.height);</div><div class=\"line\">        parameters.setPreviewSize(preSize.width, preSize.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......</div></pre></td></tr></table></figure>\n<p><strong>3.最佳分辨率适配算法(先排序)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 如包含默认尺寸，则选默认尺寸，如没有，则选最大的尺寸</div><div class=\"line\"> * 规则：在相同比例下，1.优先寻找长宽分辨率相同的-&gt;2.找长宽有一个相同的分辨率-&gt;3.找最大的分辨率</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> sizes 尺寸集合</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 返回合适的尺寸</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">private</span> Camera.<span class=\"function\">Size <span class=\"title\">getBestSupportedSize</span><span class=\"params\">(List&lt;Camera.Size&gt; sizes, <span class=\"keyword\">float</span> screenRatio)</span> </span>&#123;</div><div class=\"line\">    Camera.Size largestSize = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> largestArea = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : sizes) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) size.height / (<span class=\"keyword\">float</span>) size.width == screenRatio) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (size.width == DEFAULT_PHOTO_WIDTH &amp;&amp; size.height == DEFAULT_PHOTO_HEIGHT) &#123;</div><div class=\"line\">                <span class=\"comment\">// 包含特定的尺寸，直接取该尺寸</span></div><div class=\"line\">                largestSize = size;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) &#123;</div><div class=\"line\">                largestSize = size;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> area = size.height + size.width;</div><div class=\"line\">            <span class=\"keyword\">if</span> (area &gt; largestArea) &#123;<span class=\"comment\">//找出最大的合适尺寸</span></div><div class=\"line\">                largestArea = area;</div><div class=\"line\">                largestSize = size;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) &#123;</div><div class=\"line\">            largestSize = size;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (largestSize == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        largestSize = sizes.get(sizes.size() - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> largestSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4.对焦模式选择</strong><br>由于部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//对焦模式的选择 </span></div><div class=\"line\">     <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">         parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p><strong>5.图片质量</strong><br>PixelFormat中有多种模式，源码有解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//图片质量</span></div><div class=\"line\">parameters.setJpegQuality(<span class=\"number\">100</span>); <span class=\"comment\">// 设置照片质量</span></div><div class=\"line\">parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); <span class=\"comment\">// 预览格式</span></div><div class=\"line\">parameters.setPictureFormat(PixelFormat.JPEG); <span class=\"comment\">// 相片格式为JPEG，默认为NV21</span></div></pre></td></tr></table></figure>\n<p><strong>6.闪关灯及横竖屏镜头调整</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 关闪光灯</span></div><div class=\"line\">parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 横竖屏镜头自动调整</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;</div><div class=\"line\">    mCamera.setDisplayOrientation(<span class=\"number\">90</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mCamera.setDisplayOrientation(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7.相机异常监听</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//相机异常监听</span></div><div class=\"line\">mCamera.setErrorCallback(<span class=\"keyword\">new</span> Camera.ErrorCallback() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> error, Camera camera)</span> </span>&#123;</div><div class=\"line\">        String error_str;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_SERVER_DIED: <span class=\"comment\">// 摄像头已损坏</span></div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头已损坏\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_UNKNOWN:</div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ToastUtil.getInstance().toast(error_str);</div><div class=\"line\">        Log.i(TAG, error_str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>完整参数设置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 设置分辨率等参数</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> width  宽</div><div class=\"line\">   * <span class=\"doctag\">@param</span> height 高</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">      LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">      Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 获取摄像头支持的PictureSize列表********************/</span></div><div class=\"line\">      List&lt;Camera.Size&gt; pictureSizeList = parameters.getSupportedPictureSizes();</div><div class=\"line\">      sort(pictureSizeList);<span class=\"comment\">//排序</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (Camera.Size size : pictureSizeList) &#123;</div><div class=\"line\">          LogUtil.i(TAG, <span class=\"string\">\"摄像头支持的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((<span class=\"keyword\">float</span>) height / width));<span class=\"comment\">//从列表中选取合适的分辨率</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == picSize) &#123;</div><div class=\"line\">          picSize = parameters.getPictureSize();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      LogUtil.e(TAG, <span class=\"string\">\"我们选择的摄像头分辨率：\"</span> + <span class=\"string\">\"picSize.width=\"</span> + picSize.width + <span class=\"string\">\"  picSize.height=\"</span> + picSize.height);</div><div class=\"line\">      <span class=\"comment\">// 根据选出的PictureSize重新设置SurfaceView大小</span></div><div class=\"line\">      parameters.setPictureSize(picSize.width, picSize.height);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 获取摄像头支持的PreviewSize列表********************/</span></div><div class=\"line\">      List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</div><div class=\"line\">      sort(previewSizeList);</div><div class=\"line\">      <span class=\"keyword\">for</span> (Camera.Size size : previewSizeList) &#123;</div><div class=\"line\">          LogUtil.i(TAG, <span class=\"string\">\"摄像支持可预览的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Camera.Size preSize = getBestSupportedSize(previewSizeList, ((<span class=\"keyword\">float</span>) height) / width);</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != preSize) &#123;</div><div class=\"line\">          LogUtil.e(TAG, <span class=\"string\">\"我们选择的预览分辨率：\"</span> + <span class=\"string\">\"preSize.width=\"</span> + preSize.width + <span class=\"string\">\"  preSize.height=\"</span> + preSize.height);</div><div class=\"line\">          parameters.setPreviewSize(preSize.width, preSize.height);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 对焦模式的选择 ********************/</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">          parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//图片质量</span></div><div class=\"line\">      parameters.setJpegQuality(<span class=\"number\">100</span>); <span class=\"comment\">// 设置照片质量</span></div><div class=\"line\">      parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); <span class=\"comment\">// 预览格式</span></div><div class=\"line\">      parameters.setPictureFormat(PixelFormat.JPEG); <span class=\"comment\">// 相片格式为JPEG，默认为NV21</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 关闪光灯</span></div><div class=\"line\">      parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 横竖屏镜头自动调整</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;</div><div class=\"line\">          mCamera.setDisplayOrientation(<span class=\"number\">90</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          mCamera.setDisplayOrientation(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//相机异常监听</span></div><div class=\"line\">      mCamera.setErrorCallback(<span class=\"keyword\">new</span> Camera.ErrorCallback() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> error, Camera camera)</span> </span>&#123;</div><div class=\"line\">              String error_str;</div><div class=\"line\">              <span class=\"keyword\">switch</span> (error) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_SERVER_DIED: <span class=\"comment\">// 摄像头已损坏</span></div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头已损坏\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_UNKNOWN:</div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              ToastUtil.getInstance().toast(error_str);</div><div class=\"line\">              Log.i(TAG, error_str);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      mCamera.cancelAutoFocus();</div><div class=\"line\">      mCamera.setParameters(parameters);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三、对焦\"><a href=\"#三、对焦\" class=\"headerlink\" title=\"三、对焦\"></a>三、对焦</h1><p>要实现点击对焦，并有对焦环，需要自定义实现对焦环View.</p>\n<p><strong>1.自定义对焦环View-CameraFocusView</strong></p>\n<p>核心功能，就是对焦环缩小，并变绿。利用动画改变对焦环半径即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"keyword\">if</span>(isShow)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(radius == GREEN_RADIUS)&#123;</div><div class=\"line\">            mPaint.setColor(Color.GREEN);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(centerPoint!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            canvas.drawCircle(centerPoint.x, centerPoint.y, radius, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showAnimView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isShow = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lineAnimator == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        lineAnimator = ValueAnimator.ofInt(<span class=\"number\">0</span>, <span class=\"number\">20</span>);</div><div class=\"line\">        lineAnimator.setDuration(DURATION_TIME);</div><div class=\"line\">        lineAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> animationValue = (Integer) animation</div><div class=\"line\">                        .getAnimatedValue();</div><div class=\"line\">                <span class=\"keyword\">if</span>(lastValue!=animationValue&amp;&amp;radius&gt;=(<span class=\"keyword\">int</span>) ((mScreenWidth * <span class=\"number\">0.1</span>)-<span class=\"number\">20</span>))&#123;</div><div class=\"line\">                    radius = radius - animationValue;</div><div class=\"line\">                    lastValue = animationValue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                isShow = <span class=\"keyword\">true</span>;</div><div class=\"line\">                invalidate();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        lineAnimator.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onAnimationEnd(animation);</div><div class=\"line\">                isShow = <span class=\"keyword\">false</span>;</div><div class=\"line\">                lastValue = <span class=\"number\">0</span>;</div><div class=\"line\">                mPaint.setColor(Color.WHITE);</div><div class=\"line\">                radius = (<span class=\"keyword\">int</span>) (mScreenWidth * <span class=\"number\">0.1</span>);</div><div class=\"line\">                invalidate();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        lineAnimator.end();</div><div class=\"line\">        lineAnimator.cancel();</div><div class=\"line\">        lineAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</div><div class=\"line\">        lineAnimator.start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.布局界面</strong></p>\n<p>让对焦环自定义View获取整个界面的触摸事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.awen.camera.widget.CameraSurfaceView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cameraSurfaceView\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.awen.camera.widget.CameraFocusView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cameraFocusView\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\">    ......</div></pre></td></tr></table></figure>\n<p><strong>3.定义对焦接口</strong></p>\n<p>i.定义接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 聚焦的回调接口</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAutoFocus</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">autoFocus</span><span class=\"params\">(<span class=\"keyword\">float</span> x,<span class=\"keyword\">float</span> y)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ii.对焦环View触摸事件中触发接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">            <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">            <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">            lastValue = <span class=\"number\">0</span>;</div><div class=\"line\">            mPaint.setColor(Color.WHITE);</div><div class=\"line\">            radius = (<span class=\"keyword\">int</span>) (mScreenWidth * <span class=\"number\">0.1</span>);</div><div class=\"line\">            centerPoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(y&gt;TOP_CONTROL_HEIGHT&amp;&amp;y&lt;ScreenSizeUtil.getScreenHeight()-BETTOM_CONTROL_HEIGHT)&#123;<span class=\"comment\">//状态栏和底部禁止点击获取焦点（显示体验不好）</span></div><div class=\"line\">                centerPoint = <span class=\"keyword\">new</span> Point(x, y);</div><div class=\"line\">                showAnimView();</div><div class=\"line\">                <span class=\"comment\">//开始对焦</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mIAutoFocus != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mIAutoFocus.autoFocus(event.getX(),event.getY());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4.在CameraSurfaceView实现对焦</strong></p>\n<p>i.计算对焦区域</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Rect <span class=\"title\">caculateFocusPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">     Rect rect = <span class=\"keyword\">new</span> Rect(x - <span class=\"number\">100</span>, y - <span class=\"number\">100</span>, x + <span class=\"number\">100</span>, y + <span class=\"number\">100</span>);</div><div class=\"line\">     <span class=\"keyword\">int</span> left = rect.left * <span class=\"number\">2000</span> / getWidth() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> top = rect.top * <span class=\"number\">2000</span> / getHeight() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> right = rect.right * <span class=\"number\">2000</span> / getWidth() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> bottom = rect.bottom * <span class=\"number\">2000</span> / getHeight() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"comment\">// 如果超出了(-1000,1000)到(1000, 1000)的范围，则会导致相机崩溃</span></div><div class=\"line\">     left = left &lt; -<span class=\"number\">1000</span> ? -<span class=\"number\">1000</span> : left;</div><div class=\"line\">     top = top &lt; -<span class=\"number\">1000</span> ? -<span class=\"number\">1000</span> : top;</div><div class=\"line\">     right = right &gt; <span class=\"number\">1000</span> ? <span class=\"number\">1000</span> : right;</div><div class=\"line\">     bottom = bottom &gt; <span class=\"number\">1000</span> ? <span class=\"number\">1000</span> : bottom;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Rect(left, top, right, bottom);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>ii.设置参数进行对焦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">camerFocus</span><span class=\"params\">(Rect rect)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">      <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">          parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (parameters.getMaxNumFocusAreas() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          List&lt;Camera.Area&gt; focusAreas = <span class=\"keyword\">new</span> ArrayList&lt;Camera.Area&gt;();</div><div class=\"line\">          focusAreas.add(<span class=\"keyword\">new</span> Camera.Area(rect, <span class=\"number\">1000</span>));</div><div class=\"line\">          parameters.setFocusAreas(focusAreas);</div><div class=\"line\">      &#125;</div><div class=\"line\">      mCamera.cancelAutoFocus(); <span class=\"comment\">// 先要取消掉进程中所有的聚焦功能</span></div><div class=\"line\">      mCamera.setParameters(parameters);</div><div class=\"line\">      mCamera.autoFocus(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"四、拍照\"><a href=\"#四、拍照\" class=\"headerlink\" title=\"四、拍照\"></a>四、拍照</h1><p>为了图片方便预览，需要对图片进行处理，所以需要知道相机的拍照时的方向，故在拍照应先设置照片的方向参数</p>\n<p><strong>1.CameraOrientationDetector(Camera方向监听器)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 方向变化监听器，监听传感器方向的改变</div><div class=\"line\"> * Created by AwenZeng on 2017/2/21.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CameraOrientationDetector</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrientationEventListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> mOrientation;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CameraOrientationDetector</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> rate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, rate);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOrientationChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> orientation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mOrientation = orientation;</div><div class=\"line\">        <span class=\"keyword\">if</span> (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//保证只返回四个方向,分别为0°、90°、180°和270°中的一个</span></div><div class=\"line\">        <span class=\"keyword\">int</span> newOrientation = ((orientation + <span class=\"number\">45</span>) / <span class=\"number\">90</span> * <span class=\"number\">90</span>) % <span class=\"number\">360</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newOrientation != mOrientation) &#123;</div><div class=\"line\">            mOrientation = newOrientation;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getOrientation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mOrientation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2.设置照片方向参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 拍照</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takePicture</span><span class=\"params\">(Camera.PictureCallback callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> orientation = mCameraOrientation.getOrientation();</div><div class=\"line\">        Camera.Parameters cameraParameter = mCamera.getParameters();</div><div class=\"line\">        <span class=\"keyword\">if</span> (orientation == <span class=\"number\">90</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">90</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">90</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orientation == <span class=\"number\">180</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">180</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">180</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orientation == <span class=\"number\">270</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">270</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">270</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">0</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mCamera.setParameters(cameraParameter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mCamera.takePicture(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, callback);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.保存图片</strong> </p>\n<p>为了方便预览，对不同方向的图片，需要做正向处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlePhoto</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data, <span class=\"keyword\">int</span> cameraId)</span> </span>&#123;</div><div class=\"line\">      String filePath = FileUtil.saveFile(data, <span class=\"string\">\"/DCIM\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(filePath)) &#123;</div><div class=\"line\">          <span class=\"keyword\">int</span> degree = BitmapUtil.getPhotoDegree(filePath);</div><div class=\"line\">          Log.i(TAG, degree + <span class=\"string\">\"\"</span>);</div><div class=\"line\">          Bitmap bitmap = BitmapFactory.decodeFile(filePath);</div><div class=\"line\">          Bitmap tBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              Log.i(TAG, <span class=\"string\">\"保存图片大小：\"</span>+<span class=\"string\">\"width = \"</span> + bitmap.getWidth() + <span class=\"string\">\"   ------ height = \"</span> + bitmap.getHeight());</div><div class=\"line\">              <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</div><div class=\"line\">                  <span class=\"keyword\">switch</span> (degree) &#123;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">90</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">90</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">180</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">180</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">270</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">270</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">360</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</div><div class=\"line\">                  <span class=\"keyword\">switch</span> (degree) &#123;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">270</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">90</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">180</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">180</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">90</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">270</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">360</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">              e.printStackTrace();</div><div class=\"line\">              <span class=\"comment\">// 重新拍照</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  bitmap.recycle();</div><div class=\"line\">                  bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">if</span> (tBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  tBitmap.recycle();</div><div class=\"line\">                  tBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              ScannerByReceiver(mContext, filePath);<span class=\"comment\">//图库扫描</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> filePath;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、切换摄像头\"><a href=\"#五、切换摄像头\" class=\"headerlink\" title=\"五、切换摄像头\"></a>五、切换摄像头</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * 切换摄像头</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> camera_id)</span> </span>&#123;</div><div class=\"line\">     mCamera.stopPreview();</div><div class=\"line\">     mCamera.release();</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         openCamera(camera_id);</div><div class=\"line\">         mCamera.setPreviewDisplay(holder);</div><div class=\"line\">         setCameraParams(DEFAULT_PHOTO_WIDTH, DEFAULT_PHOTO_HEIGHT);</div><div class=\"line\">         mCamera.startPreview();</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">openCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> camera_id)</span> </span>&#123;</div><div class=\"line\">     LogUtil.i(TAG, <span class=\"string\">\"openCamera id = \"</span> + camera_id);</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         mCamera = Camera.open(camera_id); <span class=\"comment\">// 打开摄像头</span></div><div class=\"line\">         cameraId = camera_id;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">         ToastUtil.getInstance().toast(<span class=\"string\">\"请先开启摄像头权限\"</span>);</div><div class=\"line\">         LogUtil.i(TAG, <span class=\"string\">\"请先开启摄像头权限\"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"六、打开或关闭闪光灯\"><a href=\"#六、打开或关闭闪光灯\" class=\"headerlink\" title=\"六、打开或关闭闪光灯\"></a>六、打开或关闭闪光灯</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 设置闪光灯</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> isOpen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeFlashMode</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isOpen, Camera mCamera, <span class=\"keyword\">int</span> cameraId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) &#123; <span class=\"comment\">// 后摄像头才有闪光灯</span></div><div class=\"line\">        Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">        PackageManager pm = mContext.getPackageManager();</div><div class=\"line\">        FeatureInfo[] features = pm.getSystemAvailableFeatures();</div><div class=\"line\">        <span class=\"keyword\">for</span> (FeatureInfo f : features) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (PackageManager.FEATURE_CAMERA_FLASH.equals(f.name)) &#123; <span class=\"comment\">// 判断设备是否支持闪光灯</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (isOpen) &#123;</div><div class=\"line\">                    parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH); <span class=\"comment\">// 开闪光灯</span></div><div class=\"line\"></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    parameters</div><div class=\"line\">                            .setFlashMode(Camera.Parameters.FLASH_MODE_OFF); <span class=\"comment\">// 关闪光灯</span></div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mCamera.setParameters(parameters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>Android6.0以上权限收紧，所以在使用相机前，请用PermissionsModel做好权限判断。<a href=\"http://www.cnblogs.com/cr330326/p/5181283.html\" target=\"_blank\" rel=\"external\">具体Android6.0权限</a></li>\n<li>部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头</li>\n<li>Android5.0以后，官方推荐使用Camera2,本例子未使用新版本。</li>\n</ul>\n","excerpt":"<hr>\n<p>在应用软件开发中，图片数据，对于一个公司来说是十分重要的，例如：上传图片资料，修改用户头像等，而这其中就离不开相机和相册的使用。对于ios平台来说，直接调用系统相机或相册，就可搞定一切。然而对于Android平台来说，直接调用系统相机或相册，在适配和体验上问题比较多，具体原因，相比大家也知道，安卓品牌太多太杂，性能不一。鉴于此，在开发的过程中，遇到类似问题，建议自己实现相机或相册功能，以保证体验完整。本篇博文将会重点介绍Camera相机的实现。</p>\n<hr>\n<p>首先，推荐两个github项目，可以直接使用的相机和相册；另外，也推荐一个联系人选择器：</p>\n<p>相机：<a href=\"https://github.com/awenzeng/CameraDemo\">CameraDemo(自定义相机)</a></p>\n<p><img src=\"https://github.com/awenzeng/CameraDemo/raw/master/resource/camera_demo.gif\" alt=\"\"></p>\n<p>相册：<a href=\"https://github.com/ioneday/ImageSelector\">ImageSelector(仿微信图片选择相册)</a></p>\n<p>联系人：<a href=\"https://github.com/awenzeng/ContactSelector\">ContactSelector(联系人选择器)</a></p>\n<h1 id=\"一、打开Camera\"><a href=\"#一、打开Camera\" class=\"headerlink\" title=\"一、打开Camera\"></a>一、打开Camera</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mCamera = Camera.open();<span class=\"comment\">//开启相机</span></div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        LogUtil.d(TAG, <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>);</div><div class=\"line\">        ToastUtil.getInstance().toast(<span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>","more":"<h1 id=\"二、设置Camera参数\"><a href=\"#二、设置Camera参数\" class=\"headerlink\" title=\"二、设置Camera参数\"></a>二、设置Camera参数</h1><p>默认尺寸可以自由设置，这里取手机的分辨率为默认尺寸。</p>\n<p><strong>1.根据指定分辨率查找相机最佳适配分辨率并设置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">    Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\">    List&lt;Camera.Size&gt; pictureSizeList = parameters.getSupportedPictureSizes();</div><div class=\"line\">    sort(pictureSizeList);<span class=\"comment\">//排序</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : pictureSizeList) &#123;</div><div class=\"line\">        LogUtil.i(TAG, <span class=\"string\">\"摄像头支持的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((<span class=\"keyword\">float</span>) height / width));<span class=\"comment\">//从列表中选取合适的分辨率</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == picSize) &#123;</div><div class=\"line\">        picSize = parameters.getPictureSize();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    LogUtil.e(TAG, <span class=\"string\">\"我们选择的摄像头分辨率：\"</span> + <span class=\"string\">\"picSize.width=\"</span> + picSize.width + <span class=\"string\">\"  picSize.height=\"</span> + picSize.height);</div><div class=\"line\">    <span class=\"comment\">// 根据选出的PictureSize重新设置SurfaceView大小</span></div><div class=\"line\">    parameters.setPictureSize(picSize.width, picSize.height);</div><div class=\"line\">    ....</div></pre></td></tr></table></figure>\n<p><strong>2.根据指定分辨率查找相机最佳预览分辨率并设置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">     LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">    Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*************************** 获取摄像头支持的PreviewSize列表********************/</span></div><div class=\"line\">    List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</div><div class=\"line\">    sort(previewSizeList);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : previewSizeList) &#123;</div><div class=\"line\">        LogUtil.i(TAG, <span class=\"string\">\"摄像支持可预览的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Camera.Size preSize = getBestSupportedSize(previewSizeList, ((<span class=\"keyword\">float</span>) height) / width);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != preSize) &#123;</div><div class=\"line\">        LogUtil.e(TAG, <span class=\"string\">\"我们选择的预览分辨率：\"</span> + <span class=\"string\">\"preSize.width=\"</span> + preSize.width + <span class=\"string\">\"  preSize.height=\"</span> + preSize.height);</div><div class=\"line\">        parameters.setPreviewSize(preSize.width, preSize.height);</div><div class=\"line\">    &#125;</div><div class=\"line\">   ......</div></pre></td></tr></table></figure>\n<p><strong>3.最佳分辨率适配算法(先排序)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 如包含默认尺寸，则选默认尺寸，如没有，则选最大的尺寸</div><div class=\"line\"> * 规则：在相同比例下，1.优先寻找长宽分辨率相同的-&gt;2.找长宽有一个相同的分辨率-&gt;3.找最大的分辨率</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> sizes 尺寸集合</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 返回合适的尺寸</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">private</span> Camera.<span class=\"function\">Size <span class=\"title\">getBestSupportedSize</span><span class=\"params\">(List&lt;Camera.Size&gt; sizes, <span class=\"keyword\">float</span> screenRatio)</span> </span>&#123;</div><div class=\"line\">    Camera.Size largestSize = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> largestArea = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Camera.Size size : sizes) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) size.height / (<span class=\"keyword\">float</span>) size.width == screenRatio) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (size.width == DEFAULT_PHOTO_WIDTH &amp;&amp; size.height == DEFAULT_PHOTO_HEIGHT) &#123;</div><div class=\"line\">                <span class=\"comment\">// 包含特定的尺寸，直接取该尺寸</span></div><div class=\"line\">                largestSize = size;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) &#123;</div><div class=\"line\">                largestSize = size;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> area = size.height + size.width;</div><div class=\"line\">            <span class=\"keyword\">if</span> (area &gt; largestArea) &#123;<span class=\"comment\">//找出最大的合适尺寸</span></div><div class=\"line\">                largestArea = area;</div><div class=\"line\">                largestSize = size;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (size.height == DEFAULT_PHOTO_HEIGHT || size.width == DEFAULT_PHOTO_WIDTH) &#123;</div><div class=\"line\">            largestSize = size;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (largestSize == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        largestSize = sizes.get(sizes.size() - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> largestSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4.对焦模式选择</strong><br>由于部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//对焦模式的选择 </span></div><div class=\"line\">     <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">         parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<p><strong>5.图片质量</strong><br>PixelFormat中有多种模式，源码有解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//图片质量</span></div><div class=\"line\">parameters.setJpegQuality(<span class=\"number\">100</span>); <span class=\"comment\">// 设置照片质量</span></div><div class=\"line\">parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); <span class=\"comment\">// 预览格式</span></div><div class=\"line\">parameters.setPictureFormat(PixelFormat.JPEG); <span class=\"comment\">// 相片格式为JPEG，默认为NV21</span></div></pre></td></tr></table></figure>\n<p><strong>6.闪关灯及横竖屏镜头调整</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 关闪光灯</span></div><div class=\"line\">parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 横竖屏镜头自动调整</span></div><div class=\"line\"><span class=\"keyword\">if</span> (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;</div><div class=\"line\">    mCamera.setDisplayOrientation(<span class=\"number\">90</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    mCamera.setDisplayOrientation(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>7.相机异常监听</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//相机异常监听</span></div><div class=\"line\">mCamera.setErrorCallback(<span class=\"keyword\">new</span> Camera.ErrorCallback() &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> error, Camera camera)</span> </span>&#123;</div><div class=\"line\">        String error_str;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (error) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_SERVER_DIED: <span class=\"comment\">// 摄像头已损坏</span></div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头已损坏\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_UNKNOWN:</div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ToastUtil.getInstance().toast(error_str);</div><div class=\"line\">        Log.i(TAG, error_str);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>完整参数设置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * 设置分辨率等参数</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> width  宽</div><div class=\"line\">   * <span class=\"doctag\">@param</span> height 高</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setCameraParams</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">      LogUtil.i(TAG, <span class=\"string\">\"setCameraParams  width=\"</span> + width + <span class=\"string\">\"  height=\"</span> + height);</div><div class=\"line\"></div><div class=\"line\">      Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 获取摄像头支持的PictureSize列表********************/</span></div><div class=\"line\">      List&lt;Camera.Size&gt; pictureSizeList = parameters.getSupportedPictureSizes();</div><div class=\"line\">      sort(pictureSizeList);<span class=\"comment\">//排序</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (Camera.Size size : pictureSizeList) &#123;</div><div class=\"line\">          LogUtil.i(TAG, <span class=\"string\">\"摄像头支持的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Camera.Size picSize = getBestSupportedSize(pictureSizeList, ((<span class=\"keyword\">float</span>) height / width));<span class=\"comment\">//从列表中选取合适的分辨率</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == picSize) &#123;</div><div class=\"line\">          picSize = parameters.getPictureSize();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      LogUtil.e(TAG, <span class=\"string\">\"我们选择的摄像头分辨率：\"</span> + <span class=\"string\">\"picSize.width=\"</span> + picSize.width + <span class=\"string\">\"  picSize.height=\"</span> + picSize.height);</div><div class=\"line\">      <span class=\"comment\">// 根据选出的PictureSize重新设置SurfaceView大小</span></div><div class=\"line\">      parameters.setPictureSize(picSize.width, picSize.height);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 获取摄像头支持的PreviewSize列表********************/</span></div><div class=\"line\">      List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</div><div class=\"line\">      sort(previewSizeList);</div><div class=\"line\">      <span class=\"keyword\">for</span> (Camera.Size size : previewSizeList) &#123;</div><div class=\"line\">          LogUtil.i(TAG, <span class=\"string\">\"摄像支持可预览的分辨率：\"</span> + <span class=\"string\">\" size.width=\"</span> + size.width + <span class=\"string\">\"  size.height=\"</span> + size.height);</div><div class=\"line\">      &#125;</div><div class=\"line\">      Camera.Size preSize = getBestSupportedSize(previewSizeList, ((<span class=\"keyword\">float</span>) height) / width);</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != preSize) &#123;</div><div class=\"line\">          LogUtil.e(TAG, <span class=\"string\">\"我们选择的预览分辨率：\"</span> + <span class=\"string\">\"preSize.width=\"</span> + preSize.width + <span class=\"string\">\"  preSize.height=\"</span> + preSize.height);</div><div class=\"line\">          parameters.setPreviewSize(preSize.width, preSize.height);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*************************** 对焦模式的选择 ********************/</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">          parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//图片质量</span></div><div class=\"line\">      parameters.setJpegQuality(<span class=\"number\">100</span>); <span class=\"comment\">// 设置照片质量</span></div><div class=\"line\">      parameters.setPreviewFormat(PixelFormat.YCbCr_420_SP); <span class=\"comment\">// 预览格式</span></div><div class=\"line\">      parameters.setPictureFormat(PixelFormat.JPEG); <span class=\"comment\">// 相片格式为JPEG，默认为NV21</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 关闪光灯</span></div><div class=\"line\">      parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 横竖屏镜头自动调整</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mContext.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) &#123;</div><div class=\"line\">          mCamera.setDisplayOrientation(<span class=\"number\">90</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          mCamera.setDisplayOrientation(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//相机异常监听</span></div><div class=\"line\">      mCamera.setErrorCallback(<span class=\"keyword\">new</span> Camera.ErrorCallback() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">int</span> error, Camera camera)</span> </span>&#123;</div><div class=\"line\">              String error_str;</div><div class=\"line\">              <span class=\"keyword\">switch</span> (error) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_SERVER_DIED: <span class=\"comment\">// 摄像头已损坏</span></div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头已损坏\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">case</span> Camera.CAMERA_ERROR_UNKNOWN:</div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      error_str = <span class=\"string\">\"摄像头异常，请检查摄像头权限是否应许\"</span>;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              ToastUtil.getInstance().toast(error_str);</div><div class=\"line\">              Log.i(TAG, error_str);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      mCamera.cancelAutoFocus();</div><div class=\"line\">      mCamera.setParameters(parameters);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三、对焦\"><a href=\"#三、对焦\" class=\"headerlink\" title=\"三、对焦\"></a>三、对焦</h1><p>要实现点击对焦，并有对焦环，需要自定义实现对焦环View.</p>\n<p><strong>1.自定义对焦环View-CameraFocusView</strong></p>\n<p>核心功能，就是对焦环缩小，并变绿。利用动画改变对焦环半径即可。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">    <span class=\"keyword\">if</span>(isShow)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(radius == GREEN_RADIUS)&#123;</div><div class=\"line\">            mPaint.setColor(Color.GREEN);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(centerPoint!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            canvas.drawCircle(centerPoint.x, centerPoint.y, radius, mPaint);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showAnimView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isShow = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lineAnimator == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        lineAnimator = ValueAnimator.ofInt(<span class=\"number\">0</span>, <span class=\"number\">20</span>);</div><div class=\"line\">        lineAnimator.setDuration(DURATION_TIME);</div><div class=\"line\">        lineAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> animationValue = (Integer) animation</div><div class=\"line\">                        .getAnimatedValue();</div><div class=\"line\">                <span class=\"keyword\">if</span>(lastValue!=animationValue&amp;&amp;radius&gt;=(<span class=\"keyword\">int</span>) ((mScreenWidth * <span class=\"number\">0.1</span>)-<span class=\"number\">20</span>))&#123;</div><div class=\"line\">                    radius = radius - animationValue;</div><div class=\"line\">                    lastValue = animationValue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                isShow = <span class=\"keyword\">true</span>;</div><div class=\"line\">                invalidate();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        lineAnimator.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onAnimationEnd(animation);</div><div class=\"line\">                isShow = <span class=\"keyword\">false</span>;</div><div class=\"line\">                lastValue = <span class=\"number\">0</span>;</div><div class=\"line\">                mPaint.setColor(Color.WHITE);</div><div class=\"line\">                radius = (<span class=\"keyword\">int</span>) (mScreenWidth * <span class=\"number\">0.1</span>);</div><div class=\"line\">                invalidate();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        lineAnimator.end();</div><div class=\"line\">        lineAnimator.cancel();</div><div class=\"line\">        lineAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</div><div class=\"line\">        lineAnimator.start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2.布局界面</strong></p>\n<p>让对焦环自定义View获取整个界面的触摸事件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.awen.camera.widget.CameraSurfaceView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cameraSurfaceView\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.awen.camera.widget.CameraFocusView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/cameraFocusView\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></div><div class=\"line\">    ......</div></pre></td></tr></table></figure>\n<p><strong>3.定义对焦接口</strong></p>\n<p>i.定义接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 聚焦的回调接口</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAutoFocus</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">autoFocus</span><span class=\"params\">(<span class=\"keyword\">float</span> x,<span class=\"keyword\">float</span> y)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ii.对焦环View触摸事件中触发接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">            <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">            <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">            lastValue = <span class=\"number\">0</span>;</div><div class=\"line\">            mPaint.setColor(Color.WHITE);</div><div class=\"line\">            radius = (<span class=\"keyword\">int</span>) (mScreenWidth * <span class=\"number\">0.1</span>);</div><div class=\"line\">            centerPoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(y&gt;TOP_CONTROL_HEIGHT&amp;&amp;y&lt;ScreenSizeUtil.getScreenHeight()-BETTOM_CONTROL_HEIGHT)&#123;<span class=\"comment\">//状态栏和底部禁止点击获取焦点（显示体验不好）</span></div><div class=\"line\">                centerPoint = <span class=\"keyword\">new</span> Point(x, y);</div><div class=\"line\">                showAnimView();</div><div class=\"line\">                <span class=\"comment\">//开始对焦</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mIAutoFocus != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mIAutoFocus.autoFocus(event.getX(),event.getY());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>4.在CameraSurfaceView实现对焦</strong></p>\n<p>i.计算对焦区域</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Rect <span class=\"title\">caculateFocusPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">     Rect rect = <span class=\"keyword\">new</span> Rect(x - <span class=\"number\">100</span>, y - <span class=\"number\">100</span>, x + <span class=\"number\">100</span>, y + <span class=\"number\">100</span>);</div><div class=\"line\">     <span class=\"keyword\">int</span> left = rect.left * <span class=\"number\">2000</span> / getWidth() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> top = rect.top * <span class=\"number\">2000</span> / getHeight() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> right = rect.right * <span class=\"number\">2000</span> / getWidth() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"keyword\">int</span> bottom = rect.bottom * <span class=\"number\">2000</span> / getHeight() - <span class=\"number\">1000</span>;</div><div class=\"line\">     <span class=\"comment\">// 如果超出了(-1000,1000)到(1000, 1000)的范围，则会导致相机崩溃</span></div><div class=\"line\">     left = left &lt; -<span class=\"number\">1000</span> ? -<span class=\"number\">1000</span> : left;</div><div class=\"line\">     top = top &lt; -<span class=\"number\">1000</span> ? -<span class=\"number\">1000</span> : top;</div><div class=\"line\">     right = right &gt; <span class=\"number\">1000</span> ? <span class=\"number\">1000</span> : right;</div><div class=\"line\">     bottom = bottom &gt; <span class=\"number\">1000</span> ? <span class=\"number\">1000</span> : bottom;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Rect(left, top, right, bottom);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>ii.设置参数进行对焦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">camerFocus</span><span class=\"params\">(Rect rect)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">      <span class=\"keyword\">if</span>(cameraId == Camera.CameraInfo.CAMERA_FACING_BACK)&#123;</div><div class=\"line\">          parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<span class=\"comment\">//手动区域自动对焦</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (parameters.getMaxNumFocusAreas() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          List&lt;Camera.Area&gt; focusAreas = <span class=\"keyword\">new</span> ArrayList&lt;Camera.Area&gt;();</div><div class=\"line\">          focusAreas.add(<span class=\"keyword\">new</span> Camera.Area(rect, <span class=\"number\">1000</span>));</div><div class=\"line\">          parameters.setFocusAreas(focusAreas);</div><div class=\"line\">      &#125;</div><div class=\"line\">      mCamera.cancelAutoFocus(); <span class=\"comment\">// 先要取消掉进程中所有的聚焦功能</span></div><div class=\"line\">      mCamera.setParameters(parameters);</div><div class=\"line\">      mCamera.autoFocus(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"四、拍照\"><a href=\"#四、拍照\" class=\"headerlink\" title=\"四、拍照\"></a>四、拍照</h1><p>为了图片方便预览，需要对图片进行处理，所以需要知道相机的拍照时的方向，故在拍照应先设置照片的方向参数</p>\n<p><strong>1.CameraOrientationDetector(Camera方向监听器)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 方向变化监听器，监听传感器方向的改变</div><div class=\"line\"> * Created by AwenZeng on 2017/2/21.</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CameraOrientationDetector</span> <span class=\"keyword\">extends</span> <span class=\"title\">OrientationEventListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> mOrientation;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CameraOrientationDetector</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> rate)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, rate);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOrientationChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> orientation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mOrientation = orientation;</div><div class=\"line\">        <span class=\"keyword\">if</span> (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//保证只返回四个方向,分别为0°、90°、180°和270°中的一个</span></div><div class=\"line\">        <span class=\"keyword\">int</span> newOrientation = ((orientation + <span class=\"number\">45</span>) / <span class=\"number\">90</span> * <span class=\"number\">90</span>) % <span class=\"number\">360</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (newOrientation != mOrientation) &#123;</div><div class=\"line\">            mOrientation = newOrientation;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getOrientation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mOrientation;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2.设置照片方向参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 拍照</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> callback</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takePicture</span><span class=\"params\">(Camera.PictureCallback callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> orientation = mCameraOrientation.getOrientation();</div><div class=\"line\">        Camera.Parameters cameraParameter = mCamera.getParameters();</div><div class=\"line\">        <span class=\"keyword\">if</span> (orientation == <span class=\"number\">90</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">90</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">90</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orientation == <span class=\"number\">180</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">180</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">180</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (orientation == <span class=\"number\">270</span>) &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">270</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">270</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cameraParameter.setRotation(<span class=\"number\">0</span>);</div><div class=\"line\">            cameraParameter.set(<span class=\"string\">\"rotation\"</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mCamera.setParameters(cameraParameter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mCamera.takePicture(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, callback);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.保存图片</strong> </p>\n<p>为了方便预览，对不同方向的图片，需要做正向处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handlePhoto</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data, <span class=\"keyword\">int</span> cameraId)</span> </span>&#123;</div><div class=\"line\">      String filePath = FileUtil.saveFile(data, <span class=\"string\">\"/DCIM\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!TextUtils.isEmpty(filePath)) &#123;</div><div class=\"line\">          <span class=\"keyword\">int</span> degree = BitmapUtil.getPhotoDegree(filePath);</div><div class=\"line\">          Log.i(TAG, degree + <span class=\"string\">\"\"</span>);</div><div class=\"line\">          Bitmap bitmap = BitmapFactory.decodeFile(filePath);</div><div class=\"line\">          Bitmap tBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              Log.i(TAG, <span class=\"string\">\"保存图片大小：\"</span>+<span class=\"string\">\"width = \"</span> + bitmap.getWidth() + <span class=\"string\">\"   ------ height = \"</span> + bitmap.getHeight());</div><div class=\"line\">              <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</div><div class=\"line\">                  <span class=\"keyword\">switch</span> (degree) &#123;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">90</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">90</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">180</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">180</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">270</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">270</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">360</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</div><div class=\"line\">                  <span class=\"keyword\">switch</span> (degree) &#123;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">270</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">90</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">180</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">180</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">90</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                      <span class=\"keyword\">case</span> <span class=\"number\">270</span>:</div><div class=\"line\">                          tBitmap = BitmapUtil.rotateBitmap(bitmap, <span class=\"number\">360</span>);</div><div class=\"line\">                          filePath = BitmapUtil.saveBitmap(tBitmap == <span class=\"keyword\">null</span> ? bitmap : tBitmap, filePath);</div><div class=\"line\">                          <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">              e.printStackTrace();</div><div class=\"line\">              <span class=\"comment\">// 重新拍照</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  bitmap.recycle();</div><div class=\"line\">                  bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">if</span> (tBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  tBitmap.recycle();</div><div class=\"line\">                  tBitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              ScannerByReceiver(mContext, filePath);<span class=\"comment\">//图库扫描</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> filePath;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、切换摄像头\"><a href=\"#五、切换摄像头\" class=\"headerlink\" title=\"五、切换摄像头\"></a>五、切换摄像头</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * 切换摄像头</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> camera_id)</span> </span>&#123;</div><div class=\"line\">     mCamera.stopPreview();</div><div class=\"line\">     mCamera.release();</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         openCamera(camera_id);</div><div class=\"line\">         mCamera.setPreviewDisplay(holder);</div><div class=\"line\">         setCameraParams(DEFAULT_PHOTO_WIDTH, DEFAULT_PHOTO_HEIGHT);</div><div class=\"line\">         mCamera.startPreview();</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">openCamera</span><span class=\"params\">(<span class=\"keyword\">int</span> camera_id)</span> </span>&#123;</div><div class=\"line\">     LogUtil.i(TAG, <span class=\"string\">\"openCamera id = \"</span> + camera_id);</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         mCamera = Camera.open(camera_id); <span class=\"comment\">// 打开摄像头</span></div><div class=\"line\">         cameraId = camera_id;</div><div class=\"line\"></div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">         ToastUtil.getInstance().toast(<span class=\"string\">\"请先开启摄像头权限\"</span>);</div><div class=\"line\">         LogUtil.i(TAG, <span class=\"string\">\"请先开启摄像头权限\"</span>);</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"六、打开或关闭闪光灯\"><a href=\"#六、打开或关闭闪光灯\" class=\"headerlink\" title=\"六、打开或关闭闪光灯\"></a>六、打开或关闭闪光灯</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 设置闪光灯</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> isOpen</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeFlashMode</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isOpen, Camera mCamera, <span class=\"keyword\">int</span> cameraId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) &#123; <span class=\"comment\">// 后摄像头才有闪光灯</span></div><div class=\"line\">        Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">        PackageManager pm = mContext.getPackageManager();</div><div class=\"line\">        FeatureInfo[] features = pm.getSystemAvailableFeatures();</div><div class=\"line\">        <span class=\"keyword\">for</span> (FeatureInfo f : features) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (PackageManager.FEATURE_CAMERA_FLASH.equals(f.name)) &#123; <span class=\"comment\">// 判断设备是否支持闪光灯</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (isOpen) &#123;</div><div class=\"line\">                    parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH); <span class=\"comment\">// 开闪光灯</span></div><div class=\"line\"></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    parameters</div><div class=\"line\">                            .setFlashMode(Camera.Parameters.FLASH_MODE_OFF); <span class=\"comment\">// 关闪光灯</span></div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mCamera.setParameters(parameters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>Android6.0以上权限收紧，所以在使用相机前，请用PermissionsModel做好权限判断。<a href=\"http://www.cnblogs.com/cr330326/p/5181283.html\">具体Android6.0权限</a></li>\n<li>部分智能手机，前置摄像头无对焦模式，对焦参数设置应区分前置摄像头</li>\n<li>Android5.0以后，官方推荐使用Camera2,本例子未使用新版本。</li>\n</ul>"},{"layout":"post","title":"Activity启动流程源码分析(应用中)","date":"2017-12-26T12:25:27.000Z","comments":1,"_content":"---\n在移动应用开发中，Android四大组件之一Activity是最常用的。很多界面，如：闪屏、主界面、次功能界面等都需要Activity来作为主要的载体；界面与界面之间，即不同的Activity之间也都存在跳转切换，弄懂这其中跳转切换原理，将有助于我们更好的理解Android中Activity之间的交互逻辑，从而更好的开发Android应用。本篇博文将会重点介绍Android应用中的Activity的启动流程。\n\n在开始介绍之前，我们需要了解一些概念，如：\n\n- **ActivityThread：** 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。\n- **ApplicationThread：** ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。\n- **Instrumentation：** ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。\n- **ActivityManagerService(AMS)：** Activity管理系统服务类，主要是对所有的Activity进行管理。\n- **ActivityStack：** Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。\n\n\n# 一、Activity启动流程\nActivity启动流程图：\n<!-- more -->\n\n![](/assets/img/tech_activity_start_flow.png)\n\n此流程图，主要是根据Android源码中代码执行顺序来梳理的。浅绿色部分为应用进程，浅蓝色部分为系统服务进程，两个进程间通过Binder驱动来进行通信，第一次Binder通信主要的类有：ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)；第二次Binder通信主要的类有:ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)。\n\n# 二、Activity启动流程源码分析\n根据上面流程图，下面让我们一起来看看源码，首先从Activity的startActivity开始：\n```java\n\n    @Override\n    public void startActivity(Intent intent) {\n        startActivity(intent, null);\n    }\n\n    @Override\n    public void startActivity(Intent intent, Bundle options) {\n        if (options != null) {\n            startActivityForResult(intent, -1, options);\n        } else {\n            // Note we want to go through this call for compatibility with\n            // applications that may have overridden the method.\n            startActivityForResult(intent, -1);\n        }\n    }\n\n    public void startActivityForResult(Intent intent, int requestCode) {\n        startActivityForResult(intent, requestCode, null);\n    }\n\n    public void startActivityForResult(Intent intent, int requestCode, Bundle options) {\n        if (mParent == null) {//1.核心代码\n            Instrumentation.ActivityResult ar =\n                mInstrumentation.execStartActivity(\n                    this, mMainThread.getApplicationThread(), mToken, this,\n                    intent, requestCode, options);\n            if (ar != null) {\n                mMainThread.sendActivityResult(\n                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),\n                    ar.getResultData());\n            }\n            if (requestCode >= 0) {\n                // If this start is requesting a result, we can avoid making\n                // the activity visible until the result is received.  Setting\n                // this code during onCreate(Bundle savedInstanceState) or onResume() will keep the\n                // activity hidden during this time, to avoid flickering.\n                // This can only be done when a result is requested because\n                // that guarantees we will get information back when the\n                // activity is finished, no matter what happens to it.\n                mStartedActivity = true;\n            }\n        } else {//2.核心代码\n            if (options != null) {\n                mParent.startActivityFromChild(this, intent, requestCode, options);\n\n            } else {\n                // Note we want to go through this method for compatibility with\n                // existing applications that may have overridden it.\n                mParent.startActivityFromChild(this, intent, requestCode);\n            }\n        }\n    }\n\n```\n在Activity源码中，startActivity之后都会调用startActivityForResult；在注释1处，当mParent为空时，会直接调用Instrumentation中的execStartActivity方法，当mParent不为空时，调用mParent.startActivityFromChild方法。通过跟踪查找发现，mParent也是Activity，在Activity attach的时候会初始化，从ActivityRecord中获得值。我们继续来看看startActivityFromChild方法\n```java\n    public void startActivityFromChild(Activity child, Intent intent,\n            int requestCode) {\n        startActivityFromChild(child, intent, requestCode, null);\n    }\n\n    public void startActivityFromChild(Activity child, Intent intent, \n            int requestCode, Bundle options) {\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, child,\n                intent, requestCode, options);\n        if (ar != null) {\n            mMainThread.sendActivityResult(\n                mToken, child.mEmbeddedID, requestCode,\n                ar.getResultCode(), ar.getResultData());\n        }\n    }\n```\n由此发现，startActivityForResult之后都调用了Instrumentation中的execStartActivity方法。我们继续来看看execStartActivity方法：\n```java\n    public ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options) {\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        ......\n        try {\n            intent.setAllowFds(false);\n            intent.migrateExtraStreamToClipData();\n            //核心代码\n            int result = ActivityManagerNative.getDefault()\n                .startActivity(whoThread, intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, null, options);\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n        }\n        return null;\n    }\n```\n这里主要是调用了ActivityManagerNative.getDefault()中的startActivity(...)方法，这里就涉及到Binder的一次跨进程通信，通过跨进程通信调用了ActivityManagerService中的startActivity方法。具体Binder怎么跨进程通信的，我已写过文章[ Android跨进程通信方式(IPC)解析](http://blog.csdn.net/awenyini/article/details/78815629)，想了解的同学，可以点击看看。下面我们继续来看看AMS中的startActivity方法：\n```java\n    public final int startActivity(IApplicationThread caller,\n            Intent intent, String resolvedType, IBinder resultTo,\n            String resultWho, int requestCode, int startFlags,\n            String profileFile, ParcelFileDescriptor profileFd, Bundle options) {\n        enforceNotIsolatedCaller(\"startActivity\");\n        ......\n        return mMainStack.startActivityMayWait(caller, -1, intent, resolvedType,\n                resultTo, resultWho, requestCode, startFlags, profileFile, profileFd,\n                null, null, options, userId);\n    }\n```\n在AMS的startActivity方法中，又调用ActivityStack中的startActivityMayWait()方法,我们再来看看ActivityStack的源码：\n```java\n final int startActivityMayWait(IApplicationThread caller, int callingUid,\n            Intent intent, String resolvedType, IBinder resultTo,\n            String resultWho, int requestCode, int startFlags, String profileFile,\n            ParcelFileDescriptor profileFd, WaitResult outResult, Configuration config,\n            Bundle options, int userId) {\n       \n            ......\n            \n            //核心代码\n            int res = startActivityLocked(caller, intent, resolvedType,\n                    aInfo, resultTo, resultWho, requestCode, callingPid, callingUid,\n                    startFlags, options, componentSpecified, null);\n            \n           ......\n            \n           return res;\n        }\n    }\n```\n我们这里主要分析启动流程，所以省略掉部分细节。让我们继续看ActivityStack中的startActivityLocked()方法\n```java\n  final int startActivityLocked(IApplicationThread caller,\n            Intent intent, String resolvedType, ActivityInfo aInfo, IBinder resultTo,\n            String resultWho, int requestCode,\n            int callingPid, int callingUid, int startFlags, Bundle options,\n            boolean componentSpecified, ActivityRecord[] outActivity) {\n\n        ......\n        \n        //创建一个新的ActivityRecord\n        ActivityRecord r = new ActivityRecord(mService, this, callerApp, callingUid,\n                intent, resolvedType, aInfo, mService.mConfiguration,\n                resultRecord, resultWho, requestCode, componentSpecified);\n        ......\n\n        err = startActivityUncheckedLocked(r, sourceRecord,\n                startFlags, true, options);\n         ......\n        return err;\n    }\n```\n同上，也省略的部分细节。我们继续\n```java\n    final int startActivityUncheckedLocked(ActivityRecord r,\n            ActivityRecord sourceRecord, int startFlags, boolean doResume,\n            Bundle options) {\n       ......\n\n        if (sourceRecord == null) {\n            if ((launchFlags&Intent.FLAG_ACTIVITY_NEW_TASK) == 0) {\n                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n            }\n        } else if (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {        \n            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n        } else if (r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE\n                || r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK) {        \n            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n        }\n        \n        ......//省略代码：Activity四种启动模式standard,singleTop,singleTask,singleInstance的判断\n\n        if (sourceRecord != null) {\n           .......\n           if (!addingToTask &&(launchFlags&Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != 0) {\n                // In this case, we are launching an activity in our own task\n                // that may already be running somewhere in the history, and\n                // we want to shuffle it to the front of the stack if so.\n               \n                int where = findActivityInHistoryLocked(r, sourceRecord.task.taskId);\n                if (where >= 0) {\n                    ActivityRecord top = moveActivityToFrontLocked(where);\n                    logStartActivity(EventLogTags.AM_NEW_INTENT, r, top.task);\n                    top.updateOptionsLocked(options);\n                    top.deliverNewIntentLocked(callingUid, r.intent);\n                    if (doResume) {\n                        resumeTopActivityLocked(null);//核心代码\n                    }\n                    return ActivityManager.START_DELIVERED_TO_TOP;\n                }\n            }\n            // An existing activity is starting this new activity, so we want\n            // to keep the new one in the same task as the one that is starting\n            // it.\n            r.setTask(sourceRecord.task, sourceRecord.thumbHolder, false);\n            if (DEBUG_TASKS) Slog.v(TAG, \"Starting new activity \" + r\n                    + \" in existing task \" + r.task);\n\n        } else {\n          ......\n        }\n        ......\n        return ActivityManager.START_SUCCESS;\n    }\n\n```\n在startActivityUncheckedLocked()方法中，主要针对Activity的启动模式进行了检测判断，从而启动Activity。我们知道，Activity有四种启动模式，分别为standard,singleTop,singleTask和singleInstance,但这里我们主要是分析Activity的启动流程，所以具体启动模式的判断逻辑细节，这里就不展开分析了。我们主要来看一下，把Activity启动放到栈顶的方法resumeTopActivityLocked()\n```java\n  final boolean resumeTopActivityLocked(ActivityRecord prev) {\n        return resumeTopActivityLocked(prev, null);\n    }\n\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n       \n        //找到一个栈顶的未finish的Activity的ActivityRecord\n        ActivityRecord next = topRunningActivityLocked(null);\n\n        ......\n\n        if (next == null) {//栈顶无Activity，直接启动Launcher        \n            if (mMainStack) {\n                ActivityOptions.abort(options);\n                return mService.startHomeActivityLocked(0);\n            }\n        }\n\n        ......\n\n        //如果Activity所在的进程已经存在\n        if (next.app != null && next.app.thread != null) {\n           ......\n            \n            try {\n                .......\n                //重新显示Activity\n                if (next.newIntents != null) {\n                    next.app.thread.scheduleNewIntent(next.newIntents, next.appToken);\n                }\n\n                EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,\n                        System.identityHashCode(next),\n                        next.task.taskId, next.shortComponentName);\n                \n                next.sleeping = false;\n                showAskCompatModeDialogLocked(next);\n                next.app.pendingUiClean = true;\n                //执行Activity onResume方法\n                next.app.thread.scheduleResumeActivity(next.appToken,\n                        mService.isNextTransitionForward());\n                \n                checkReadyForSleepLocked();\n\n            } catch (Exception e) {\n\n                //如果启动异常，就重启Activity\n                if (DEBUG_STATES) Slog.v(TAG, \"Resume failed; resetting state to \"\n                        + lastState + \": \" + next);\n                next.state = lastState;\n                mResumedActivity = lastResumedActivity;\n                Slog.i(TAG, \"Restarting because process died: \" + next);\n                if (!next.hasBeenLaunched) {\n                    next.hasBeenLaunched = true;\n                } else {\n                    if (SHOW_APP_STARTING_PREVIEW && mMainStack) {\n                        mService.mWindowManager.setAppStartingWindow(\n                                next.appToken, next.packageName, next.theme,\n                                mService.compatibilityInfoForPackageLocked(\n                                        next.info.applicationInfo),\n                                next.nonLocalizedLabel,\n                                next.labelRes, next.icon, next.windowFlags,\n                                null, true);\n                    }\n                }\n                startSpecificActivityLocked(next, true, false);//核心代码，重启Activity\n                return true;\n            }\n\n            // From this point on, if something goes wrong there is no way\n            // to recover the activity.\n            try {\n                next.visible = true;\n                completeResumeLocked(next);\n            } catch (Exception e) {\n                // If any exception gets thrown, toss away this\n                // activity and try the next one.\n                Slog.w(TAG, \"Exception thrown during resume of \" + next, e);\n                requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, null,\n                        \"resume-exception\");\n                return true;\n            }\n\n            // Didn't need to use the icicle, and it is now out of date.\n            if (DEBUG_SAVED_STATE) Slog.i(TAG, \"Resumed activity; didn't need icicle of: \" + next);\n            next.icicle = null;\n            next.haveState = false;\n            next.stopped = false;\n\n        } else {\n            //Activity所在的进程不存在，启动Activity\n            if (!next.hasBeenLaunched) {\n                next.hasBeenLaunched = true;\n            } else {\n                if (SHOW_APP_STARTING_PREVIEW) {\n                    mService.mWindowManager.setAppStartingWindow(\n                            next.appToken, next.packageName, next.theme,\n                            mService.compatibilityInfoForPackageLocked(\n                                    next.info.applicationInfo),\n                            next.nonLocalizedLabel,\n                            next.labelRes, next.icon, next.windowFlags,\n                            null, true);\n                }\n                if (DEBUG_SWITCH) Slog.v(TAG, \"Restarting: \" + next);\n            }\n            startSpecificActivityLocked(next, true, true);//启动Activity\n        }\n\n        return true;\n    }\n```\n通过上面注释中的分析，在判断Activity进程之后，就会通过startSpecificActivityLocked()方法来启动Activity,我们继续看\n```java\n private final void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid);\n        \n        if (r.launchTime == 0) {\n            r.launchTime = SystemClock.uptimeMillis();\n            if (mInitialStartTime == 0) {\n                mInitialStartTime = r.launchTime;\n            }\n        } else if (mInitialStartTime == 0) {\n            mInitialStartTime = SystemClock.uptimeMillis();\n        }\n        \n        if (app != null && app.thread != null) {//Activity所在进程判断，进程存在时，直接启动Activity\n            try {\n                app.addPackage(r.info.packageName);\n\n                realStartActivityLocked(r, app, andResume, checkConfig);//核心代码\n\n                return;\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Exception when starting activity \"\n                        + r.intent.getComponent().flattenToShortString(), e);\n            }\n\n            // If a dead object exception was thrown -- fall through to\n            // restart the application.\n        }\n\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false);\n    }\n```\n在startSpecificActivityLocked()方法中也对Activity的进程是否存在做了判断，当进程存在时直接调用realStartActivityLocked()方法启动Activity；当Activity的进程不存在时，就会调用AMS的startProcessLocked()方法创建进程，这里其实是Activity的另一种启动流程，从Laucher启动，只有从Launcher启动才会没有进程，这里先不做深度分析，后续我们针对Activity的Launcher启动再写一篇博文。已补博文[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)。下面让我们继续看realStartActivityLocked()方法：\n```java\n  final boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n             \n            .......\n\n            app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info,\n                    new Configuration(mService.mConfiguration),\n                    r.compat, r.icicle, results, newIntents, !andResume,\n                    mService.isNextTransitionForward(), profileFile, profileFd,\n                    profileAutoStop);\n            \n           ......\n        \n        return true;\n    }\n```\n这里主要通过调用app.thread.scheduleLaunchActivity(...)方法实现了跨进程通信，这里主要实现了流程图中的第二次Binder跨进程通信。通过Binder跨进程通信调用了ApplicationThread中的scheduleLaunchActivity(...)方法，具体Binder怎么跨进程通信的，我已写过文章[ Android跨进程通信方式(IPC)解析](http://blog.csdn.net/awenyini/article/details/78815629)，想了解的同学，可以点击看看。下面我们继续来看看ApplicationThread中的scheduleLaunchActivity方法：\n```java\n  public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n                ActivityInfo info, Configuration curConfig, CompatibilityInfo compatInfo,\n                Bundle state, List<ResultInfo> pendingResults,\n                List<Intent> pendingNewIntents, boolean notResumed, boolean isForward,\n                String profileName, ParcelFileDescriptor profileFd, boolean autoStopProfiler) {\n            ActivityClientRecord r = new ActivityClientRecord();\n            ......\n\n            queueOrSendMessage(H.LAUNCH_ACTIVITY, r);\n   }\n\n  public void handleMessage(Message msg) {\n            if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n            switch (msg.what) {\n                case LAUNCH_ACTIVITY: {\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\n                    ActivityClientRecord r = (ActivityClientRecord)msg.obj;\n\n                    r.packageInfo = getPackageInfoNoCheck(\n                            r.activityInfo.applicationInfo, r.compatInfo);\n                    handleLaunchActivity(r, null);//核心代码\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                } break;\n             .......\n           }\n}\n```\n由上易知，通过Handler消息循环机制，从而执行handleLaunchActivity()方法，我们继续来看此方法\n```java\n  private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n      \n        .......\n\n        Activity a = performLaunchActivity(r, customIntent);\n\n        ......\n    }\n\n   private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n        // System.out.println(\"##### [\" + System.currentTimeMillis() + \"] ActivityThread.performLaunchActivity(\" + r + \")\");\n\n        ActivityInfo aInfo = r.activityInfo;\n        if (r.packageInfo == null) {\n            r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,\n                    Context.CONTEXT_INCLUDE_CODE);\n        }\n\n        ComponentName component = r.intent.getComponent();\n        if (component == null) {\n            component = r.intent.resolveActivity(\n                mInitialApplication.getPackageManager());\n            r.intent.setComponent(component);\n        }\n\n        if (r.activityInfo.targetActivity != null) {\n            component = new ComponentName(r.activityInfo.packageName,\n                    r.activityInfo.targetActivity);\n        }\n\n        Activity activity = null;\n        try {\n            //1.核心代码\n            java.lang.ClassLoader cl = r.packageInfo.getClassLoader(); \n            activity = mInstrumentation.newActivity(\n                    cl, component.getClassName(), r.intent);\n            StrictMode.incrementExpectedActivityCount(activity.getClass());\n            r.intent.setExtrasClassLoader(cl);\n            if (r.state != null) {\n                r.state.setClassLoader(cl);\n            }\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(activity, e)) {\n                throw new RuntimeException(\n                    \"Unable to instantiate activity \" + component\n                    + \": \" + e.toString(), e);\n            }\n        }\n\n        try {\n            Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n            if (localLOGV) Slog.v(TAG, \"Performing launch of \" + r);\n            if (localLOGV) Slog.v(\n                    TAG, r + \": app=\" + app\n                    + \", appName=\" + app.getPackageName()\n                    + \", pkg=\" + r.packageInfo.getPackageName()\n                    + \", comp=\" + r.intent.getComponent().toShortString()\n                    + \", dir=\" + r.packageInfo.getAppDir());\n\n            if (activity != null) {\n                ContextImpl appContext = new ContextImpl();\n                appContext.init(r.packageInfo, r.token, this);\n                appContext.setOuterContext(activity);\n                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());\n                Configuration config = new Configuration(mCompatConfiguration);\n                if (DEBUG_CONFIGURATION) Slog.v(TAG, \"Launching activity \"\n                        + r.activityInfo.name + \" with config \" + config);\n                        \n                //2.核心代码\n                activity.attach(appContext, this, getInstrumentation(), r.token,\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                        r.embeddedID, r.lastNonConfigurationInstances, config);\n\n                if (customIntent != null) {\n                    activity.mIntent = customIntent;\n                }\n                r.lastNonConfigurationInstances = null;\n                activity.mStartedActivity = false;\n                int theme = r.activityInfo.getThemeResource();\n                if (theme != 0) {\n                    activity.setTheme(theme);\n                }\n\n                activity.mCalled = false;\n                //3.核心代码\n                mInstrumentation.callActivityOnCreate(activity, r.state);\n\n                if (!activity.mCalled) {\n                    throw new SuperNotCalledException(\n                        \"Activity \" + r.intent.getComponent().toShortString() +\n                        \" did not call through to super.onCreate()\");\n                }\n                r.activity = activity;\n                r.stopped = true;\n                if (!r.activity.mFinished) {\n                    activity.performStart();\n                    r.stopped = false;\n                }\n\n                if (!r.activity.mFinished) {\n                    if (r.state != null) {\n                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);\n                    }\n                }\n\n                if (!r.activity.mFinished) {\n                    activity.mCalled = false;\n                    mInstrumentation.callActivityOnPostCreate(activity, r.state);\n                    if (!activity.mCalled) {\n                        throw new SuperNotCalledException(\n                            \"Activity \" + r.intent.getComponent().toShortString() +\n                            \" did not call through to super.onPostCreate()\");\n                    }\n                }\n            }\n            r.paused = true;\n\n            mActivities.put(r.token, r);\n\n        } catch (SuperNotCalledException e) {\n            throw e;\n\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(activity, e)) {\n                throw new RuntimeException(\n                    \"Unable to start activity \" + component\n                    + \": \" + e.toString(), e);\n            }\n        }\n\n        return activity;\n    }\n```\n注释1处，通过mInstrumentation.newActivity()方法对Activity进行初始化\n```java\n    public Activity newActivity(ClassLoader cl, String className,\n            Intent intent)\n            throws InstantiationException, IllegalAccessException,\n            ClassNotFoundException {\n        return (Activity)cl.loadClass(className).newInstance();\n    }\n```\n由上我们知道，主要通过反射机制实现Activity的初始化。再来看注释2，调用了Activity.attach(...)方法\n```java\n final void attach(Context context, ActivityThread aThread, Instrumentation instr, IBinder token,\n            Application application, Intent intent, ActivityInfo info, CharSequence title, \n            Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        attach(context, aThread, instr, token, 0, application, intent, info, title, parent, id,\n            lastNonConfigurationInstances, config);\n    }\n    \n    final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n\n        attachBaseContext(context);\n\n        mFragments.attachActivity(this);\n        \n        mWindow = PolicyManager.makeNewWindow(this);\n        mWindow.setCallback(this);\n        mWindow.getLayoutInflater().setPrivateFactory(this);\n        if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {\n            mWindow.setSoftInputMode(info.softInputMode);\n        }\n        if (info.uiOptions != 0) {\n            mWindow.setUiOptions(info.uiOptions);\n        }\n        mUiThread = Thread.currentThread();\n        \n        mMainThread = aThread;\n        mInstrumentation = instr; \n        mToken = token;\n        mIdent = ident;\n        mApplication = application;\n        mIntent = intent;\n        mComponent = intent.getComponent();\n        mActivityInfo = info;\n        mTitle = title;\n        mParent = parent;\n        mEmbeddedID = id;\n        mLastNonConfigurationInstances = lastNonConfigurationInstances;\n\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n此方法主要就是对Activity进行了初始化，初始化了许多的属性，具体如上。我们再看注释3，方法mInstrumentation.callActivityOnCreate(activity, r.state)，我们也来看看源码\n```java\n    public void callActivityOnCreate(Activity activity, Bundle icicle) {\n        if (mWaitingActivities != null) {\n            synchronized (mSync) {\n                final int N = mWaitingActivities.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityWaiter aw = mWaitingActivities.get(i);\n                    final Intent intent = aw.intent;\n                    if (intent.filterEquals(activity.getIntent())) {\n                        aw.activity = activity;\n                        mMessageQueue.addIdleHandler(new ActivityGoing(aw));\n                    }\n                }\n            }\n        }\n        \n        activity.performCreate(icicle);//核心代码\n        \n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    am.match(activity, activity, activity.getIntent());\n                }\n            }\n        }\n    }\n```\n其实，主要也就是调用了Activity的OnCreate()方法，我们继续来看看\n```java\n    final void performCreate(Bundle icicle) {\n        onCreate(icicle);\n        mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(\n                com.android.internal.R.styleable.Window_windowNoDisplay, false);\n        mFragments.dispatchActivityCreated();\n    }\n```\n的确如此，最后调用了Activity的OnCreate方法，从而就启动了Activity。好了，到这里，Activity的启动流程就说完了。\n\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)\n\n[Android Activity启动流程源码全解析（1）](https://www.jianshu.com/p/8a8ec5c17495)\n\n[Android Activity启动流程源码全解析（2）](https://www.jianshu.com/p/067acea47ba6)\n","source":"_posts/tech_android_framework_startactivity.md","raw":"---\nlayout: post\ntitle: \"Activity启动流程源码分析(应用中)\"\ndate: 12/26/2017 8:25:27 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Activity启动流程\n\t- Android框架源码解析\n---\n---\n在移动应用开发中，Android四大组件之一Activity是最常用的。很多界面，如：闪屏、主界面、次功能界面等都需要Activity来作为主要的载体；界面与界面之间，即不同的Activity之间也都存在跳转切换，弄懂这其中跳转切换原理，将有助于我们更好的理解Android中Activity之间的交互逻辑，从而更好的开发Android应用。本篇博文将会重点介绍Android应用中的Activity的启动流程。\n\n在开始介绍之前，我们需要了解一些概念，如：\n\n- **ActivityThread：** 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。\n- **ApplicationThread：** ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。\n- **Instrumentation：** ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。\n- **ActivityManagerService(AMS)：** Activity管理系统服务类，主要是对所有的Activity进行管理。\n- **ActivityStack：** Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。\n\n\n# 一、Activity启动流程\nActivity启动流程图：\n<!-- more -->\n\n![](/assets/img/tech_activity_start_flow.png)\n\n此流程图，主要是根据Android源码中代码执行顺序来梳理的。浅绿色部分为应用进程，浅蓝色部分为系统服务进程，两个进程间通过Binder驱动来进行通信，第一次Binder通信主要的类有：ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)；第二次Binder通信主要的类有:ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)。\n\n# 二、Activity启动流程源码分析\n根据上面流程图，下面让我们一起来看看源码，首先从Activity的startActivity开始：\n```java\n\n    @Override\n    public void startActivity(Intent intent) {\n        startActivity(intent, null);\n    }\n\n    @Override\n    public void startActivity(Intent intent, Bundle options) {\n        if (options != null) {\n            startActivityForResult(intent, -1, options);\n        } else {\n            // Note we want to go through this call for compatibility with\n            // applications that may have overridden the method.\n            startActivityForResult(intent, -1);\n        }\n    }\n\n    public void startActivityForResult(Intent intent, int requestCode) {\n        startActivityForResult(intent, requestCode, null);\n    }\n\n    public void startActivityForResult(Intent intent, int requestCode, Bundle options) {\n        if (mParent == null) {//1.核心代码\n            Instrumentation.ActivityResult ar =\n                mInstrumentation.execStartActivity(\n                    this, mMainThread.getApplicationThread(), mToken, this,\n                    intent, requestCode, options);\n            if (ar != null) {\n                mMainThread.sendActivityResult(\n                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),\n                    ar.getResultData());\n            }\n            if (requestCode >= 0) {\n                // If this start is requesting a result, we can avoid making\n                // the activity visible until the result is received.  Setting\n                // this code during onCreate(Bundle savedInstanceState) or onResume() will keep the\n                // activity hidden during this time, to avoid flickering.\n                // This can only be done when a result is requested because\n                // that guarantees we will get information back when the\n                // activity is finished, no matter what happens to it.\n                mStartedActivity = true;\n            }\n        } else {//2.核心代码\n            if (options != null) {\n                mParent.startActivityFromChild(this, intent, requestCode, options);\n\n            } else {\n                // Note we want to go through this method for compatibility with\n                // existing applications that may have overridden it.\n                mParent.startActivityFromChild(this, intent, requestCode);\n            }\n        }\n    }\n\n```\n在Activity源码中，startActivity之后都会调用startActivityForResult；在注释1处，当mParent为空时，会直接调用Instrumentation中的execStartActivity方法，当mParent不为空时，调用mParent.startActivityFromChild方法。通过跟踪查找发现，mParent也是Activity，在Activity attach的时候会初始化，从ActivityRecord中获得值。我们继续来看看startActivityFromChild方法\n```java\n    public void startActivityFromChild(Activity child, Intent intent,\n            int requestCode) {\n        startActivityFromChild(child, intent, requestCode, null);\n    }\n\n    public void startActivityFromChild(Activity child, Intent intent, \n            int requestCode, Bundle options) {\n        Instrumentation.ActivityResult ar =\n            mInstrumentation.execStartActivity(\n                this, mMainThread.getApplicationThread(), mToken, child,\n                intent, requestCode, options);\n        if (ar != null) {\n            mMainThread.sendActivityResult(\n                mToken, child.mEmbeddedID, requestCode,\n                ar.getResultCode(), ar.getResultData());\n        }\n    }\n```\n由此发现，startActivityForResult之后都调用了Instrumentation中的execStartActivity方法。我们继续来看看execStartActivity方法：\n```java\n    public ActivityResult execStartActivity(\n            Context who, IBinder contextThread, IBinder token, Activity target,\n            Intent intent, int requestCode, Bundle options) {\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\n        ......\n        try {\n            intent.setAllowFds(false);\n            intent.migrateExtraStreamToClipData();\n            //核心代码\n            int result = ActivityManagerNative.getDefault()\n                .startActivity(whoThread, intent,\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\n                        token, target != null ? target.mEmbeddedID : null,\n                        requestCode, 0, null, null, options);\n            checkStartActivityResult(result, intent);\n        } catch (RemoteException e) {\n        }\n        return null;\n    }\n```\n这里主要是调用了ActivityManagerNative.getDefault()中的startActivity(...)方法，这里就涉及到Binder的一次跨进程通信，通过跨进程通信调用了ActivityManagerService中的startActivity方法。具体Binder怎么跨进程通信的，我已写过文章[ Android跨进程通信方式(IPC)解析](http://blog.csdn.net/awenyini/article/details/78815629)，想了解的同学，可以点击看看。下面我们继续来看看AMS中的startActivity方法：\n```java\n    public final int startActivity(IApplicationThread caller,\n            Intent intent, String resolvedType, IBinder resultTo,\n            String resultWho, int requestCode, int startFlags,\n            String profileFile, ParcelFileDescriptor profileFd, Bundle options) {\n        enforceNotIsolatedCaller(\"startActivity\");\n        ......\n        return mMainStack.startActivityMayWait(caller, -1, intent, resolvedType,\n                resultTo, resultWho, requestCode, startFlags, profileFile, profileFd,\n                null, null, options, userId);\n    }\n```\n在AMS的startActivity方法中，又调用ActivityStack中的startActivityMayWait()方法,我们再来看看ActivityStack的源码：\n```java\n final int startActivityMayWait(IApplicationThread caller, int callingUid,\n            Intent intent, String resolvedType, IBinder resultTo,\n            String resultWho, int requestCode, int startFlags, String profileFile,\n            ParcelFileDescriptor profileFd, WaitResult outResult, Configuration config,\n            Bundle options, int userId) {\n       \n            ......\n            \n            //核心代码\n            int res = startActivityLocked(caller, intent, resolvedType,\n                    aInfo, resultTo, resultWho, requestCode, callingPid, callingUid,\n                    startFlags, options, componentSpecified, null);\n            \n           ......\n            \n           return res;\n        }\n    }\n```\n我们这里主要分析启动流程，所以省略掉部分细节。让我们继续看ActivityStack中的startActivityLocked()方法\n```java\n  final int startActivityLocked(IApplicationThread caller,\n            Intent intent, String resolvedType, ActivityInfo aInfo, IBinder resultTo,\n            String resultWho, int requestCode,\n            int callingPid, int callingUid, int startFlags, Bundle options,\n            boolean componentSpecified, ActivityRecord[] outActivity) {\n\n        ......\n        \n        //创建一个新的ActivityRecord\n        ActivityRecord r = new ActivityRecord(mService, this, callerApp, callingUid,\n                intent, resolvedType, aInfo, mService.mConfiguration,\n                resultRecord, resultWho, requestCode, componentSpecified);\n        ......\n\n        err = startActivityUncheckedLocked(r, sourceRecord,\n                startFlags, true, options);\n         ......\n        return err;\n    }\n```\n同上，也省略的部分细节。我们继续\n```java\n    final int startActivityUncheckedLocked(ActivityRecord r,\n            ActivityRecord sourceRecord, int startFlags, boolean doResume,\n            Bundle options) {\n       ......\n\n        if (sourceRecord == null) {\n            if ((launchFlags&Intent.FLAG_ACTIVITY_NEW_TASK) == 0) {\n                launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n            }\n        } else if (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {        \n            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n        } else if (r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE\n                || r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK) {        \n            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;\n        }\n        \n        ......//省略代码：Activity四种启动模式standard,singleTop,singleTask,singleInstance的判断\n\n        if (sourceRecord != null) {\n           .......\n           if (!addingToTask &&(launchFlags&Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != 0) {\n                // In this case, we are launching an activity in our own task\n                // that may already be running somewhere in the history, and\n                // we want to shuffle it to the front of the stack if so.\n               \n                int where = findActivityInHistoryLocked(r, sourceRecord.task.taskId);\n                if (where >= 0) {\n                    ActivityRecord top = moveActivityToFrontLocked(where);\n                    logStartActivity(EventLogTags.AM_NEW_INTENT, r, top.task);\n                    top.updateOptionsLocked(options);\n                    top.deliverNewIntentLocked(callingUid, r.intent);\n                    if (doResume) {\n                        resumeTopActivityLocked(null);//核心代码\n                    }\n                    return ActivityManager.START_DELIVERED_TO_TOP;\n                }\n            }\n            // An existing activity is starting this new activity, so we want\n            // to keep the new one in the same task as the one that is starting\n            // it.\n            r.setTask(sourceRecord.task, sourceRecord.thumbHolder, false);\n            if (DEBUG_TASKS) Slog.v(TAG, \"Starting new activity \" + r\n                    + \" in existing task \" + r.task);\n\n        } else {\n          ......\n        }\n        ......\n        return ActivityManager.START_SUCCESS;\n    }\n\n```\n在startActivityUncheckedLocked()方法中，主要针对Activity的启动模式进行了检测判断，从而启动Activity。我们知道，Activity有四种启动模式，分别为standard,singleTop,singleTask和singleInstance,但这里我们主要是分析Activity的启动流程，所以具体启动模式的判断逻辑细节，这里就不展开分析了。我们主要来看一下，把Activity启动放到栈顶的方法resumeTopActivityLocked()\n```java\n  final boolean resumeTopActivityLocked(ActivityRecord prev) {\n        return resumeTopActivityLocked(prev, null);\n    }\n\n    final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {\n       \n        //找到一个栈顶的未finish的Activity的ActivityRecord\n        ActivityRecord next = topRunningActivityLocked(null);\n\n        ......\n\n        if (next == null) {//栈顶无Activity，直接启动Launcher        \n            if (mMainStack) {\n                ActivityOptions.abort(options);\n                return mService.startHomeActivityLocked(0);\n            }\n        }\n\n        ......\n\n        //如果Activity所在的进程已经存在\n        if (next.app != null && next.app.thread != null) {\n           ......\n            \n            try {\n                .......\n                //重新显示Activity\n                if (next.newIntents != null) {\n                    next.app.thread.scheduleNewIntent(next.newIntents, next.appToken);\n                }\n\n                EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,\n                        System.identityHashCode(next),\n                        next.task.taskId, next.shortComponentName);\n                \n                next.sleeping = false;\n                showAskCompatModeDialogLocked(next);\n                next.app.pendingUiClean = true;\n                //执行Activity onResume方法\n                next.app.thread.scheduleResumeActivity(next.appToken,\n                        mService.isNextTransitionForward());\n                \n                checkReadyForSleepLocked();\n\n            } catch (Exception e) {\n\n                //如果启动异常，就重启Activity\n                if (DEBUG_STATES) Slog.v(TAG, \"Resume failed; resetting state to \"\n                        + lastState + \": \" + next);\n                next.state = lastState;\n                mResumedActivity = lastResumedActivity;\n                Slog.i(TAG, \"Restarting because process died: \" + next);\n                if (!next.hasBeenLaunched) {\n                    next.hasBeenLaunched = true;\n                } else {\n                    if (SHOW_APP_STARTING_PREVIEW && mMainStack) {\n                        mService.mWindowManager.setAppStartingWindow(\n                                next.appToken, next.packageName, next.theme,\n                                mService.compatibilityInfoForPackageLocked(\n                                        next.info.applicationInfo),\n                                next.nonLocalizedLabel,\n                                next.labelRes, next.icon, next.windowFlags,\n                                null, true);\n                    }\n                }\n                startSpecificActivityLocked(next, true, false);//核心代码，重启Activity\n                return true;\n            }\n\n            // From this point on, if something goes wrong there is no way\n            // to recover the activity.\n            try {\n                next.visible = true;\n                completeResumeLocked(next);\n            } catch (Exception e) {\n                // If any exception gets thrown, toss away this\n                // activity and try the next one.\n                Slog.w(TAG, \"Exception thrown during resume of \" + next, e);\n                requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, null,\n                        \"resume-exception\");\n                return true;\n            }\n\n            // Didn't need to use the icicle, and it is now out of date.\n            if (DEBUG_SAVED_STATE) Slog.i(TAG, \"Resumed activity; didn't need icicle of: \" + next);\n            next.icicle = null;\n            next.haveState = false;\n            next.stopped = false;\n\n        } else {\n            //Activity所在的进程不存在，启动Activity\n            if (!next.hasBeenLaunched) {\n                next.hasBeenLaunched = true;\n            } else {\n                if (SHOW_APP_STARTING_PREVIEW) {\n                    mService.mWindowManager.setAppStartingWindow(\n                            next.appToken, next.packageName, next.theme,\n                            mService.compatibilityInfoForPackageLocked(\n                                    next.info.applicationInfo),\n                            next.nonLocalizedLabel,\n                            next.labelRes, next.icon, next.windowFlags,\n                            null, true);\n                }\n                if (DEBUG_SWITCH) Slog.v(TAG, \"Restarting: \" + next);\n            }\n            startSpecificActivityLocked(next, true, true);//启动Activity\n        }\n\n        return true;\n    }\n```\n通过上面注释中的分析，在判断Activity进程之后，就会通过startSpecificActivityLocked()方法来启动Activity,我们继续看\n```java\n private final void startSpecificActivityLocked(ActivityRecord r,\n            boolean andResume, boolean checkConfig) {\n        // Is this activity's application already running?\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n                r.info.applicationInfo.uid);\n        \n        if (r.launchTime == 0) {\n            r.launchTime = SystemClock.uptimeMillis();\n            if (mInitialStartTime == 0) {\n                mInitialStartTime = r.launchTime;\n            }\n        } else if (mInitialStartTime == 0) {\n            mInitialStartTime = SystemClock.uptimeMillis();\n        }\n        \n        if (app != null && app.thread != null) {//Activity所在进程判断，进程存在时，直接启动Activity\n            try {\n                app.addPackage(r.info.packageName);\n\n                realStartActivityLocked(r, app, andResume, checkConfig);//核心代码\n\n                return;\n            } catch (RemoteException e) {\n                Slog.w(TAG, \"Exception when starting activity \"\n                        + r.intent.getComponent().flattenToShortString(), e);\n            }\n\n            // If a dead object exception was thrown -- fall through to\n            // restart the application.\n        }\n\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n                \"activity\", r.intent.getComponent(), false, false);\n    }\n```\n在startSpecificActivityLocked()方法中也对Activity的进程是否存在做了判断，当进程存在时直接调用realStartActivityLocked()方法启动Activity；当Activity的进程不存在时，就会调用AMS的startProcessLocked()方法创建进程，这里其实是Activity的另一种启动流程，从Laucher启动，只有从Launcher启动才会没有进程，这里先不做深度分析，后续我们针对Activity的Launcher启动再写一篇博文。已补博文[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)。下面让我们继续看realStartActivityLocked()方法：\n```java\n  final boolean realStartActivityLocked(ActivityRecord r,\n            ProcessRecord app, boolean andResume, boolean checkConfig)\n            throws RemoteException {\n             \n            .......\n\n            app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                    System.identityHashCode(r), r.info,\n                    new Configuration(mService.mConfiguration),\n                    r.compat, r.icicle, results, newIntents, !andResume,\n                    mService.isNextTransitionForward(), profileFile, profileFd,\n                    profileAutoStop);\n            \n           ......\n        \n        return true;\n    }\n```\n这里主要通过调用app.thread.scheduleLaunchActivity(...)方法实现了跨进程通信，这里主要实现了流程图中的第二次Binder跨进程通信。通过Binder跨进程通信调用了ApplicationThread中的scheduleLaunchActivity(...)方法，具体Binder怎么跨进程通信的，我已写过文章[ Android跨进程通信方式(IPC)解析](http://blog.csdn.net/awenyini/article/details/78815629)，想了解的同学，可以点击看看。下面我们继续来看看ApplicationThread中的scheduleLaunchActivity方法：\n```java\n  public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident,\n                ActivityInfo info, Configuration curConfig, CompatibilityInfo compatInfo,\n                Bundle state, List<ResultInfo> pendingResults,\n                List<Intent> pendingNewIntents, boolean notResumed, boolean isForward,\n                String profileName, ParcelFileDescriptor profileFd, boolean autoStopProfiler) {\n            ActivityClientRecord r = new ActivityClientRecord();\n            ......\n\n            queueOrSendMessage(H.LAUNCH_ACTIVITY, r);\n   }\n\n  public void handleMessage(Message msg) {\n            if (DEBUG_MESSAGES) Slog.v(TAG, \">>> handling: \" + codeToString(msg.what));\n            switch (msg.what) {\n                case LAUNCH_ACTIVITY: {\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\n                    ActivityClientRecord r = (ActivityClientRecord)msg.obj;\n\n                    r.packageInfo = getPackageInfoNoCheck(\n                            r.activityInfo.applicationInfo, r.compatInfo);\n                    handleLaunchActivity(r, null);//核心代码\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n                } break;\n             .......\n           }\n}\n```\n由上易知，通过Handler消息循环机制，从而执行handleLaunchActivity()方法，我们继续来看此方法\n```java\n  private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n      \n        .......\n\n        Activity a = performLaunchActivity(r, customIntent);\n\n        ......\n    }\n\n   private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n        // System.out.println(\"##### [\" + System.currentTimeMillis() + \"] ActivityThread.performLaunchActivity(\" + r + \")\");\n\n        ActivityInfo aInfo = r.activityInfo;\n        if (r.packageInfo == null) {\n            r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,\n                    Context.CONTEXT_INCLUDE_CODE);\n        }\n\n        ComponentName component = r.intent.getComponent();\n        if (component == null) {\n            component = r.intent.resolveActivity(\n                mInitialApplication.getPackageManager());\n            r.intent.setComponent(component);\n        }\n\n        if (r.activityInfo.targetActivity != null) {\n            component = new ComponentName(r.activityInfo.packageName,\n                    r.activityInfo.targetActivity);\n        }\n\n        Activity activity = null;\n        try {\n            //1.核心代码\n            java.lang.ClassLoader cl = r.packageInfo.getClassLoader(); \n            activity = mInstrumentation.newActivity(\n                    cl, component.getClassName(), r.intent);\n            StrictMode.incrementExpectedActivityCount(activity.getClass());\n            r.intent.setExtrasClassLoader(cl);\n            if (r.state != null) {\n                r.state.setClassLoader(cl);\n            }\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(activity, e)) {\n                throw new RuntimeException(\n                    \"Unable to instantiate activity \" + component\n                    + \": \" + e.toString(), e);\n            }\n        }\n\n        try {\n            Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n            if (localLOGV) Slog.v(TAG, \"Performing launch of \" + r);\n            if (localLOGV) Slog.v(\n                    TAG, r + \": app=\" + app\n                    + \", appName=\" + app.getPackageName()\n                    + \", pkg=\" + r.packageInfo.getPackageName()\n                    + \", comp=\" + r.intent.getComponent().toShortString()\n                    + \", dir=\" + r.packageInfo.getAppDir());\n\n            if (activity != null) {\n                ContextImpl appContext = new ContextImpl();\n                appContext.init(r.packageInfo, r.token, this);\n                appContext.setOuterContext(activity);\n                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());\n                Configuration config = new Configuration(mCompatConfiguration);\n                if (DEBUG_CONFIGURATION) Slog.v(TAG, \"Launching activity \"\n                        + r.activityInfo.name + \" with config \" + config);\n                        \n                //2.核心代码\n                activity.attach(appContext, this, getInstrumentation(), r.token,\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                        r.embeddedID, r.lastNonConfigurationInstances, config);\n\n                if (customIntent != null) {\n                    activity.mIntent = customIntent;\n                }\n                r.lastNonConfigurationInstances = null;\n                activity.mStartedActivity = false;\n                int theme = r.activityInfo.getThemeResource();\n                if (theme != 0) {\n                    activity.setTheme(theme);\n                }\n\n                activity.mCalled = false;\n                //3.核心代码\n                mInstrumentation.callActivityOnCreate(activity, r.state);\n\n                if (!activity.mCalled) {\n                    throw new SuperNotCalledException(\n                        \"Activity \" + r.intent.getComponent().toShortString() +\n                        \" did not call through to super.onCreate()\");\n                }\n                r.activity = activity;\n                r.stopped = true;\n                if (!r.activity.mFinished) {\n                    activity.performStart();\n                    r.stopped = false;\n                }\n\n                if (!r.activity.mFinished) {\n                    if (r.state != null) {\n                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);\n                    }\n                }\n\n                if (!r.activity.mFinished) {\n                    activity.mCalled = false;\n                    mInstrumentation.callActivityOnPostCreate(activity, r.state);\n                    if (!activity.mCalled) {\n                        throw new SuperNotCalledException(\n                            \"Activity \" + r.intent.getComponent().toShortString() +\n                            \" did not call through to super.onPostCreate()\");\n                    }\n                }\n            }\n            r.paused = true;\n\n            mActivities.put(r.token, r);\n\n        } catch (SuperNotCalledException e) {\n            throw e;\n\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(activity, e)) {\n                throw new RuntimeException(\n                    \"Unable to start activity \" + component\n                    + \": \" + e.toString(), e);\n            }\n        }\n\n        return activity;\n    }\n```\n注释1处，通过mInstrumentation.newActivity()方法对Activity进行初始化\n```java\n    public Activity newActivity(ClassLoader cl, String className,\n            Intent intent)\n            throws InstantiationException, IllegalAccessException,\n            ClassNotFoundException {\n        return (Activity)cl.loadClass(className).newInstance();\n    }\n```\n由上我们知道，主要通过反射机制实现Activity的初始化。再来看注释2，调用了Activity.attach(...)方法\n```java\n final void attach(Context context, ActivityThread aThread, Instrumentation instr, IBinder token,\n            Application application, Intent intent, ActivityInfo info, CharSequence title, \n            Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n        attach(context, aThread, instr, token, 0, application, intent, info, title, parent, id,\n            lastNonConfigurationInstances, config);\n    }\n    \n    final void attach(Context context, ActivityThread aThread,\n            Instrumentation instr, IBinder token, int ident,\n            Application application, Intent intent, ActivityInfo info,\n            CharSequence title, Activity parent, String id,\n            NonConfigurationInstances lastNonConfigurationInstances,\n            Configuration config) {\n\n        attachBaseContext(context);\n\n        mFragments.attachActivity(this);\n        \n        mWindow = PolicyManager.makeNewWindow(this);\n        mWindow.setCallback(this);\n        mWindow.getLayoutInflater().setPrivateFactory(this);\n        if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {\n            mWindow.setSoftInputMode(info.softInputMode);\n        }\n        if (info.uiOptions != 0) {\n            mWindow.setUiOptions(info.uiOptions);\n        }\n        mUiThread = Thread.currentThread();\n        \n        mMainThread = aThread;\n        mInstrumentation = instr; \n        mToken = token;\n        mIdent = ident;\n        mApplication = application;\n        mIntent = intent;\n        mComponent = intent.getComponent();\n        mActivityInfo = info;\n        mTitle = title;\n        mParent = parent;\n        mEmbeddedID = id;\n        mLastNonConfigurationInstances = lastNonConfigurationInstances;\n\n        mWindow.setWindowManager(null, mToken, mComponent.flattenToString(),\n                (info.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);\n        if (mParent != null) {\n            mWindow.setContainer(mParent.getWindow());\n        }\n        mWindowManager = mWindow.getWindowManager();\n        mCurrentConfig = config;\n    }\n```\n此方法主要就是对Activity进行了初始化，初始化了许多的属性，具体如上。我们再看注释3，方法mInstrumentation.callActivityOnCreate(activity, r.state)，我们也来看看源码\n```java\n    public void callActivityOnCreate(Activity activity, Bundle icicle) {\n        if (mWaitingActivities != null) {\n            synchronized (mSync) {\n                final int N = mWaitingActivities.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityWaiter aw = mWaitingActivities.get(i);\n                    final Intent intent = aw.intent;\n                    if (intent.filterEquals(activity.getIntent())) {\n                        aw.activity = activity;\n                        mMessageQueue.addIdleHandler(new ActivityGoing(aw));\n                    }\n                }\n            }\n        }\n        \n        activity.performCreate(icicle);//核心代码\n        \n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    am.match(activity, activity, activity.getIntent());\n                }\n            }\n        }\n    }\n```\n其实，主要也就是调用了Activity的OnCreate()方法，我们继续来看看\n```java\n    final void performCreate(Bundle icicle) {\n        onCreate(icicle);\n        mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(\n                com.android.internal.R.styleable.Window_windowNoDisplay, false);\n        mFragments.dispatchActivityCreated();\n    }\n```\n的确如此，最后调用了Activity的OnCreate方法，从而就启动了Activity。好了，到这里，Activity的启动流程就说完了。\n\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n\n[Activity启动流程源码分析(Launcher中)](http://blog.csdn.net/awenyini/article/details/78915225)\n\n[Android Activity启动流程源码全解析（1）](https://www.jianshu.com/p/8a8ec5c17495)\n\n[Android Activity启动流程源码全解析（2）](https://www.jianshu.com/p/067acea47ba6)\n","slug":"tech_android_framework_startactivity","published":1,"updated":"2019-06-27T08:15:15.316Z","photos":[],"link":"","_id":"cjxfjaete006dystg2xo1d2zr","content":"<hr>\n<p>在移动应用开发中，Android四大组件之一Activity是最常用的。很多界面，如：闪屏、主界面、次功能界面等都需要Activity来作为主要的载体；界面与界面之间，即不同的Activity之间也都存在跳转切换，弄懂这其中跳转切换原理，将有助于我们更好的理解Android中Activity之间的交互逻辑，从而更好的开发Android应用。本篇博文将会重点介绍Android应用中的Activity的启动流程。</p>\n<p>在开始介绍之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ActivityThread：</strong> 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。</li>\n<li><strong>ApplicationThread：</strong> ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。</li>\n<li><strong>Instrumentation：</strong> ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。</li>\n<li><strong>ActivityManagerService(AMS)：</strong> Activity管理系统服务类，主要是对所有的Activity进行管理。</li>\n<li><strong>ActivityStack：</strong> Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。</li>\n</ul>\n<h1 id=\"一、Activity启动流程\"><a href=\"#一、Activity启动流程\" class=\"headerlink\" title=\"一、Activity启动流程\"></a>一、Activity启动流程</h1><p>Activity启动流程图：<br><a id=\"more\"></a></p>\n<p><img src=\"/assets/img/tech_activity_start_flow.png\" alt=\"\"></p>\n<p>此流程图，主要是根据Android源码中代码执行顺序来梳理的。浅绿色部分为应用进程，浅蓝色部分为系统服务进程，两个进程间通过Binder驱动来进行通信，第一次Binder通信主要的类有：ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)；第二次Binder通信主要的类有:ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)。</p>\n<h1 id=\"二、Activity启动流程源码分析\"><a href=\"#二、Activity启动流程源码分析\" class=\"headerlink\" title=\"二、Activity启动流程源码分析\"></a>二、Activity启动流程源码分析</h1><p>根据上面流程图，下面让我们一起来看看源码，首先从Activity的startActivity开始：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    startActivity(intent, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">    startActivityForResult(intent, requestCode, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">        Instrumentation.ActivityResult ar =</div><div class=\"line\">            mInstrumentation.execStartActivity(</div><div class=\"line\">                <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, <span class=\"keyword\">this</span>,</div><div class=\"line\">                intent, requestCode, options);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mMainThread.sendActivityResult(</div><div class=\"line\">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class=\"line\">                ar.getResultData());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If this start is requesting a result, we can avoid making</span></div><div class=\"line\">            <span class=\"comment\">// the activity visible until the result is received.  Setting</span></div><div class=\"line\">            <span class=\"comment\">// this code during onCreate(Bundle savedInstanceState) or onResume() will keep the</span></div><div class=\"line\">            <span class=\"comment\">// activity hidden during this time, to avoid flickering.</span></div><div class=\"line\">            <span class=\"comment\">// This can only be done when a result is requested because</span></div><div class=\"line\">            <span class=\"comment\">// that guarantees we will get information back when the</span></div><div class=\"line\">            <span class=\"comment\">// activity is finished, no matter what happens to it.</span></div><div class=\"line\">            mStartedActivity = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mParent.startActivityFromChild(<span class=\"keyword\">this</span>, intent, requestCode, options);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Note we want to go through this method for compatibility with</span></div><div class=\"line\">            <span class=\"comment\">// existing applications that may have overridden it.</span></div><div class=\"line\">            mParent.startActivityFromChild(<span class=\"keyword\">this</span>, intent, requestCode);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Activity源码中，startActivity之后都会调用startActivityForResult；在注释1处，当mParent为空时，会直接调用Instrumentation中的execStartActivity方法，当mParent不为空时，调用mParent.startActivityFromChild方法。通过跟踪查找发现，mParent也是Activity，在Activity attach的时候会初始化，从ActivityRecord中获得值。我们继续来看看startActivityFromChild方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityFromChild</span><span class=\"params\">(Activity child, Intent intent,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode) &#123;</div><div class=\"line\">    startActivityFromChild(child, intent, requestCode, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityFromChild</span><span class=\"params\">(Activity child, Intent intent, </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode, Bundle options) &#123;</div><div class=\"line\">    Instrumentation.ActivityResult ar =</div><div class=\"line\">        mInstrumentation.execStartActivity(</div><div class=\"line\">            <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, child,</div><div class=\"line\">            intent, requestCode, options);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMainThread.sendActivityResult(</div><div class=\"line\">            mToken, child.mEmbeddedID, requestCode,</div><div class=\"line\">            ar.getResultCode(), ar.getResultData());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此发现，startActivityForResult之后都调用了Instrumentation中的execStartActivity方法。我们继续来看看execStartActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</span></span></div><div class=\"line\">        Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options) &#123;</div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.setAllowFds(<span class=\"keyword\">false</span>);</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        <span class=\"comment\">//核心代码</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivity(whoThread, intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要是调用了ActivityManagerNative.getDefault()中的startActivity(…)方法，这里就涉及到Binder的一次跨进程通信，通过跨进程通信调用了ActivityManagerService中的startActivity方法。具体Binder怎么跨进程通信的，我已写过文章<a href=\"http://blog.csdn.net/awenyini/article/details/78815629\" target=\"_blank\" rel=\"external\"> Android跨进程通信方式(IPC)解析</a>，想了解的同学，可以点击看看。下面我们继续来看看AMS中的startActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller,</span></span></div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo,</div><div class=\"line\">        String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">        String profileFile, ParcelFileDescriptor profileFd, Bundle options) &#123;</div><div class=\"line\">    enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">return</span> mMainStack.startActivityMayWait(caller, -<span class=\"number\">1</span>, intent, resolvedType,</div><div class=\"line\">            resultTo, resultWho, requestCode, startFlags, profileFile, profileFd,</div><div class=\"line\">            <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, userId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AMS的startActivity方法中，又调用ActivityStack中的startActivityMayWait()方法,我们再来看看ActivityStack的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityMayWait</span><span class=\"params\">(IApplicationThread caller, <span class=\"keyword\">int</span> callingUid,</span></span></div><div class=\"line\">           Intent intent, String resolvedType, IBinder resultTo,</div><div class=\"line\">           String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags, String profileFile,</div><div class=\"line\">           ParcelFileDescriptor profileFd, WaitResult outResult, Configuration config,</div><div class=\"line\">           Bundle options, <span class=\"keyword\">int</span> userId) &#123;</div><div class=\"line\">      </div><div class=\"line\">           ......</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"comment\">//核心代码</span></div><div class=\"line\">           <span class=\"keyword\">int</span> res = startActivityLocked(caller, intent, resolvedType,</div><div class=\"line\">                   aInfo, resultTo, resultWho, requestCode, callingPid, callingUid,</div><div class=\"line\">                   startFlags, options, componentSpecified, <span class=\"keyword\">null</span>);</div><div class=\"line\">           </div><div class=\"line\">          ......</div><div class=\"line\">           </div><div class=\"line\">          <span class=\"keyword\">return</span> res;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们这里主要分析启动流程，所以省略掉部分细节。让我们继续看ActivityStack中的startActivityLocked()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(IApplicationThread caller,</span></span></div><div class=\"line\">          Intent intent, String resolvedType, ActivityInfo aInfo, IBinder resultTo,</div><div class=\"line\">          String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">          <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, <span class=\"keyword\">int</span> startFlags, Bundle options,</div><div class=\"line\">          <span class=\"keyword\">boolean</span> componentSpecified, ActivityRecord[] outActivity) &#123;</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//创建一个新的ActivityRecord</span></div><div class=\"line\">      ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord(mService, <span class=\"keyword\">this</span>, callerApp, callingUid,</div><div class=\"line\">              intent, resolvedType, aInfo, mService.mConfiguration,</div><div class=\"line\">              resultRecord, resultWho, requestCode, componentSpecified);</div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      err = startActivityUncheckedLocked(r, sourceRecord,</div><div class=\"line\">              startFlags, <span class=\"keyword\">true</span>, options);</div><div class=\"line\">       ......</div><div class=\"line\">      <span class=\"keyword\">return</span> err;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>同上，也省略的部分细节。我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUncheckedLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">        ActivityRecord sourceRecord, <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume,</div><div class=\"line\">        Bundle options) &#123;</div><div class=\"line\">   ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((launchFlags&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) &#123;        </div><div class=\"line\">        launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE</div><div class=\"line\">            || r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK) &#123;        </div><div class=\"line\">        launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    ......<span class=\"comment\">//省略代码：Activity四种启动模式standard,singleTop,singleTask,singleInstance的判断</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       .......</div><div class=\"line\">       <span class=\"keyword\">if</span> (!addingToTask &amp;&amp;(launchFlags&amp;Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// In this case, we are launching an activity in our own task</span></div><div class=\"line\">            <span class=\"comment\">// that may already be running somewhere in the history, and</span></div><div class=\"line\">            <span class=\"comment\">// we want to shuffle it to the front of the stack if so.</span></div><div class=\"line\">           </div><div class=\"line\">            <span class=\"keyword\">int</span> where = findActivityInHistoryLocked(r, sourceRecord.task.taskId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (where &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                ActivityRecord top = moveActivityToFrontLocked(where);</div><div class=\"line\">                logStartActivity(EventLogTags.AM_NEW_INTENT, r, top.task);</div><div class=\"line\">                top.updateOptionsLocked(options);</div><div class=\"line\">                top.deliverNewIntentLocked(callingUid, r.intent);</div><div class=\"line\">                <span class=\"keyword\">if</span> (doResume) &#123;</div><div class=\"line\">                    resumeTopActivityLocked(<span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// An existing activity is starting this new activity, so we want</span></div><div class=\"line\">        <span class=\"comment\">// to keep the new one in the same task as the one that is starting</span></div><div class=\"line\">        <span class=\"comment\">// it.</span></div><div class=\"line\">        r.setTask(sourceRecord.task, sourceRecord.thumbHolder, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG_TASKS) Slog.v(TAG, <span class=\"string\">\"Starting new activity \"</span> + r</div><div class=\"line\">                + <span class=\"string\">\" in existing task \"</span> + r.task);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      ......</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在startActivityUncheckedLocked()方法中，主要针对Activity的启动模式进行了检测判断，从而启动Activity。我们知道，Activity有四种启动模式，分别为standard,singleTop,singleTask和singleInstance,但这里我们主要是分析Activity的启动流程，所以具体启动模式的判断逻辑细节，这里就不展开分析了。我们主要来看一下，把Activity启动放到栈顶的方法resumeTopActivityLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> resumeTopActivityLocked(prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">//找到一个栈顶的未finish的Activity的ActivityRecord</span></div><div class=\"line\">      ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//栈顶无Activity，直接启动Launcher        </span></div><div class=\"line\">          <span class=\"keyword\">if</span> (mMainStack) &#123;</div><div class=\"line\">              ActivityOptions.abort(options);</div><div class=\"line\">              <span class=\"keyword\">return</span> mService.startHomeActivityLocked(<span class=\"number\">0</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//如果Activity所在的进程已经存在</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ......</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              .......</div><div class=\"line\">              <span class=\"comment\">//重新显示Activity</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (next.newIntents != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  next.app.thread.scheduleNewIntent(next.newIntents, next.appToken);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,</div><div class=\"line\">                      System.identityHashCode(next),</div><div class=\"line\">                      next.task.taskId, next.shortComponentName);</div><div class=\"line\">              </div><div class=\"line\">              next.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">              showAskCompatModeDialogLocked(next);</div><div class=\"line\">              next.app.pendingUiClean = <span class=\"keyword\">true</span>;</div><div class=\"line\">              <span class=\"comment\">//执行Activity onResume方法</span></div><div class=\"line\">              next.app.thread.scheduleResumeActivity(next.appToken,</div><div class=\"line\">                      mService.isNextTransitionForward());</div><div class=\"line\">              </div><div class=\"line\">              checkReadyForSleepLocked();</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//如果启动异常，就重启Activity</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_STATES) Slog.v(TAG, <span class=\"string\">\"Resume failed; resetting state to \"</span></div><div class=\"line\">                      + lastState + <span class=\"string\">\": \"</span> + next);</div><div class=\"line\">              next.state = lastState;</div><div class=\"line\">              mResumedActivity = lastResumedActivity;</div><div class=\"line\">              Slog.i(TAG, <span class=\"string\">\"Restarting because process died: \"</span> + next);</div><div class=\"line\">              <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">                  next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; mMainStack) &#123;</div><div class=\"line\">                      mService.mWindowManager.setAppStartingWindow(</div><div class=\"line\">                              next.appToken, next.packageName, next.theme,</div><div class=\"line\">                              mService.compatibilityInfoForPackageLocked(</div><div class=\"line\">                                      next.info.applicationInfo),</div><div class=\"line\">                              next.nonLocalizedLabel,</div><div class=\"line\">                              next.labelRes, next.icon, next.windowFlags,</div><div class=\"line\">                              <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">              startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);<span class=\"comment\">//核心代码，重启Activity</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// From this point on, if something goes wrong there is no way</span></div><div class=\"line\">          <span class=\"comment\">// to recover the activity.</span></div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              next.visible = <span class=\"keyword\">true</span>;</div><div class=\"line\">              completeResumeLocked(next);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">              <span class=\"comment\">// If any exception gets thrown, toss away this</span></div><div class=\"line\">              <span class=\"comment\">// activity and try the next one.</span></div><div class=\"line\">              Slog.w(TAG, <span class=\"string\">\"Exception thrown during resume of \"</span> + next, e);</div><div class=\"line\">              requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, <span class=\"keyword\">null</span>,</div><div class=\"line\">                      <span class=\"string\">\"resume-exception\"</span>);</div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Didn't need to use the icicle, and it is now out of date.</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (DEBUG_SAVED_STATE) Slog.i(TAG, <span class=\"string\">\"Resumed activity; didn't need icicle of: \"</span> + next);</div><div class=\"line\">          next.icicle = <span class=\"keyword\">null</span>;</div><div class=\"line\">          next.haveState = <span class=\"keyword\">false</span>;</div><div class=\"line\">          next.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//Activity所在的进程不存在，启动Activity</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">              next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW) &#123;</div><div class=\"line\">                  mService.mWindowManager.setAppStartingWindow(</div><div class=\"line\">                          next.appToken, next.packageName, next.theme,</div><div class=\"line\">                          mService.compatibilityInfoForPackageLocked(</div><div class=\"line\">                                  next.info.applicationInfo),</div><div class=\"line\">                          next.nonLocalizedLabel,</div><div class=\"line\">                          next.labelRes, next.icon, next.windowFlags,</div><div class=\"line\">                          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_SWITCH) Slog.v(TAG, <span class=\"string\">\"Restarting: \"</span> + next);</div><div class=\"line\">          &#125;</div><div class=\"line\">          startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);<span class=\"comment\">//启动Activity</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面注释中的分析，在判断Activity进程之后，就会通过startSpecificActivityLocked()方法来启动Activity,我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig) &#123;</div><div class=\"line\">       <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">       ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">               r.info.applicationInfo.uid);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (r.launchTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           r.launchTime = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               mInitialStartTime = r.launchTime;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mInitialStartTime = SystemClock.uptimeMillis();</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//Activity所在进程判断，进程存在时，直接启动Activity</span></div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               app.addPackage(r.info.packageName);</div><div class=\"line\"></div><div class=\"line\">               realStartActivityLocked(r, app, andResume, checkConfig);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                       + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">           <span class=\"comment\">// restart the application.</span></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">               <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在startSpecificActivityLocked()方法中也对Activity的进程是否存在做了判断，当进程存在时直接调用realStartActivityLocked()方法启动Activity；当Activity的进程不存在时，就会调用AMS的startProcessLocked()方法创建进程，这里其实是Activity的另一种启动流程，从Laucher启动，只有从Launcher启动才会没有进程，这里先不做深度分析，后续我们针对Activity的Launcher启动再写一篇博文。已补博文<a href=\"http://blog.csdn.net/awenyini/article/details/78915225\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(Launcher中)</a>。下面让我们继续看realStartActivityLocked()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</span></span></div><div class=\"line\">          ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</div><div class=\"line\">          <span class=\"keyword\">throws</span> RemoteException &#123;</div><div class=\"line\">           </div><div class=\"line\">          .......</div><div class=\"line\"></div><div class=\"line\">          app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                  System.identityHashCode(r), r.info,</div><div class=\"line\">                  <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                  r.compat, r.icicle, results, newIntents, !andResume,</div><div class=\"line\">                  mService.isNextTransitionForward(), profileFile, profileFd,</div><div class=\"line\">                  profileAutoStop);</div><div class=\"line\">          </div><div class=\"line\">         ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要通过调用app.thread.scheduleLaunchActivity(…)方法实现了跨进程通信，这里主要实现了流程图中的第二次Binder跨进程通信。通过Binder跨进程通信调用了ApplicationThread中的scheduleLaunchActivity(…)方法，具体Binder怎么跨进程通信的，我已写过文章<a href=\"http://blog.csdn.net/awenyini/article/details/78815629\" target=\"_blank\" rel=\"external\"> Android跨进程通信方式(IPC)解析</a>，想了解的同学，可以点击看看。下面我们继续来看看ApplicationThread中的scheduleLaunchActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</span></span></div><div class=\"line\">                ActivityInfo info, Configuration curConfig, CompatibilityInfo compatInfo,</div><div class=\"line\">                Bundle state, List&lt;ResultInfo&gt; pendingResults,</div><div class=\"line\">                List&lt;Intent&gt; pendingNewIntents, <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward,</div><div class=\"line\">                String profileName, ParcelFileDescriptor profileFd, <span class=\"keyword\">boolean</span> autoStopProfiler) &#123;</div><div class=\"line\">            ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\">            ......</div><div class=\"line\"></div><div class=\"line\">            queueOrSendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"activityStart\"</span>);</div><div class=\"line\">                    ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class=\"line\"></div><div class=\"line\">                    r.packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                            r.activityInfo.applicationInfo, r.compatInfo);</div><div class=\"line\">                    handleLaunchActivity(r, <span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">             .......</div><div class=\"line\">           &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，通过Handler消息循环机制，从而执行handleLaunchActivity()方法，我们继续来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">      .......</div><div class=\"line\"></div><div class=\"line\">      Activity a = performLaunchActivity(r, customIntent);</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> Activity <span class=\"title\">performLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// System.out.println(\"##### [\" + System.currentTimeMillis() + \"] ActivityThread.performLaunchActivity(\" + r + \")\");</span></div><div class=\"line\"></div><div class=\"line\">      ActivityInfo aInfo = r.activityInfo;</div><div class=\"line\">      <span class=\"keyword\">if</span> (r.packageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class=\"line\">                  Context.CONTEXT_INCLUDE_CODE);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ComponentName component = r.intent.getComponent();</div><div class=\"line\">      <span class=\"keyword\">if</span> (component == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          component = r.intent.resolveActivity(</div><div class=\"line\">              mInitialApplication.getPackageManager());</div><div class=\"line\">          r.intent.setComponent(component);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (r.activityInfo.targetActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          component = <span class=\"keyword\">new</span> ComponentName(r.activityInfo.packageName,</div><div class=\"line\">                  r.activityInfo.targetActivity);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//1.核心代码</span></div><div class=\"line\">          java.lang.ClassLoader cl = r.packageInfo.getClassLoader(); </div><div class=\"line\">          activity = mInstrumentation.newActivity(</div><div class=\"line\">                  cl, component.getClassName(), r.intent);</div><div class=\"line\">          StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class=\"line\">          r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">          <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              r.state.setClassLoader(cl);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                  <span class=\"string\">\"Unable to instantiate activity \"</span> + component</div><div class=\"line\">                  + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (localLOGV) Slog.v(TAG, <span class=\"string\">\"Performing launch of \"</span> + r);</div><div class=\"line\">          <span class=\"keyword\">if</span> (localLOGV) Slog.v(</div><div class=\"line\">                  TAG, r + <span class=\"string\">\": app=\"</span> + app</div><div class=\"line\">                  + <span class=\"string\">\", appName=\"</span> + app.getPackageName()</div><div class=\"line\">                  + <span class=\"string\">\", pkg=\"</span> + r.packageInfo.getPackageName()</div><div class=\"line\">                  + <span class=\"string\">\", comp=\"</span> + r.intent.getComponent().toShortString()</div><div class=\"line\">                  + <span class=\"string\">\", dir=\"</span> + r.packageInfo.getAppDir());</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ContextImpl appContext = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">              appContext.init(r.packageInfo, r.token, <span class=\"keyword\">this</span>);</div><div class=\"line\">              appContext.setOuterContext(activity);</div><div class=\"line\">              CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class=\"line\">              Configuration config = <span class=\"keyword\">new</span> Configuration(mCompatConfiguration);</div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class=\"string\">\"Launching activity \"</span></div><div class=\"line\">                      + r.activityInfo.name + <span class=\"string\">\" with config \"</span> + config);</div><div class=\"line\">                      </div><div class=\"line\">              <span class=\"comment\">//2.核心代码</span></div><div class=\"line\">              activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">                      r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">                      r.embeddedID, r.lastNonConfigurationInstances, config);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (customIntent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  activity.mIntent = customIntent;</div><div class=\"line\">              &#125;</div><div class=\"line\">              r.lastNonConfigurationInstances = <span class=\"keyword\">null</span>;</div><div class=\"line\">              activity.mStartedActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">int</span> theme = r.activityInfo.getThemeResource();</div><div class=\"line\">              <span class=\"keyword\">if</span> (theme != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  activity.setTheme(theme);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"comment\">//3.核心代码</span></div><div class=\"line\">              mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!activity.mCalled) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(</div><div class=\"line\">                      <span class=\"string\">\"Activity \"</span> + r.intent.getComponent().toShortString() +</div><div class=\"line\">                      <span class=\"string\">\" did not call through to super.onCreate()\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">              r.activity = activity;</div><div class=\"line\">              r.stopped = <span class=\"keyword\">true</span>;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  activity.performStart();</div><div class=\"line\">                  r.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                      mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">                  mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (!activity.mCalled) &#123;</div><div class=\"line\">                      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(</div><div class=\"line\">                          <span class=\"string\">\"Activity \"</span> + r.intent.getComponent().toShortString() +</div><div class=\"line\">                          <span class=\"string\">\" did not call through to super.onPostCreate()\"</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">          r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">          mActivities.put(r.token, r);</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (SuperNotCalledException e) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> e;</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                  <span class=\"string\">\"Unable to start activity \"</span> + component</div><div class=\"line\">                  + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> activity;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，通过mInstrumentation.newActivity()方法对Activity进行初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Activity <span class=\"title\">newActivity</span><span class=\"params\">(ClassLoader cl, String className,</span></span></div><div class=\"line\">        Intent intent)</div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException,</div><div class=\"line\">        ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (Activity)cl.loadClass(className).newInstance();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上我们知道，主要通过反射机制实现Activity的初始化。再来看注释2，调用了Activity.attach(…)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread, Instrumentation instr, IBinder token,</span></span></div><div class=\"line\">           Application application, Intent intent, ActivityInfo info, CharSequence title, </div><div class=\"line\">           Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config) &#123;</div><div class=\"line\">       attach(context, aThread, instr, token, <span class=\"number\">0</span>, application, intent, info, title, parent, id,</div><div class=\"line\">           lastNonConfigurationInstances, config);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</span></span></div><div class=\"line\">           Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">           Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">           CharSequence title, Activity parent, String id,</div><div class=\"line\">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config) &#123;</div><div class=\"line\"></div><div class=\"line\">       attachBaseContext(context);</div><div class=\"line\"></div><div class=\"line\">       mFragments.attachActivity(<span class=\"keyword\">this</span>);</div><div class=\"line\">       </div><div class=\"line\">       mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);</div><div class=\"line\">       mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">       mWindow.getLayoutInflater().setPrivateFactory(<span class=\"keyword\">this</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</div><div class=\"line\">           mWindow.setSoftInputMode(info.softInputMode);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (info.uiOptions != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mWindow.setUiOptions(info.uiOptions);</div><div class=\"line\">       &#125;</div><div class=\"line\">       mUiThread = Thread.currentThread();</div><div class=\"line\">       </div><div class=\"line\">       mMainThread = aThread;</div><div class=\"line\">       mInstrumentation = instr; </div><div class=\"line\">       mToken = token;</div><div class=\"line\">       mIdent = ident;</div><div class=\"line\">       mApplication = application;</div><div class=\"line\">       mIntent = intent;</div><div class=\"line\">       mComponent = intent.getComponent();</div><div class=\"line\">       mActivityInfo = info;</div><div class=\"line\">       mTitle = title;</div><div class=\"line\">       mParent = parent;</div><div class=\"line\">       mEmbeddedID = id;</div><div class=\"line\">       mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class=\"line\"></div><div class=\"line\">       mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">               (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">       &#125;</div><div class=\"line\">       mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">       mCurrentConfig = config;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要就是对Activity进行了初始化，初始化了许多的属性，具体如上。我们再看注释3，方法mInstrumentation.callActivityOnCreate(activity, r.state)，我们也来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWaitingActivities != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mWaitingActivities.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityWaiter aw = mWaitingActivities.get(i);</div><div class=\"line\">                <span class=\"keyword\">final</span> Intent intent = aw.intent;</div><div class=\"line\">                <span class=\"keyword\">if</span> (intent.filterEquals(activity.getIntent())) &#123;</div><div class=\"line\">                    aw.activity = activity;</div><div class=\"line\">                    mMessageQueue.addIdleHandler(<span class=\"keyword\">new</span> ActivityGoing(aw));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    activity.performCreate(icicle);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (mActivityMonitors != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mActivityMonitors.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class=\"line\">                am.match(activity, activity, activity.getIntent());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实，主要也就是调用了Activity的OnCreate()方法，我们继续来看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    onCreate(icicle);</div><div class=\"line\">    mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(</div><div class=\"line\">            com.android.internal.R.styleable.Window_windowNoDisplay, <span class=\"keyword\">false</span>);</div><div class=\"line\">    mFragments.dispatchActivityCreated();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>的确如此，最后调用了Activity的OnCreate方法，从而就启动了Activity。好了，到这里，Activity的启动流程就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78915225\" target=\"_blank\" rel=\"external\">Activity启动流程源码分析(Launcher中)</a></p>\n<p><a href=\"https://www.jianshu.com/p/8a8ec5c17495\" target=\"_blank\" rel=\"external\">Android Activity启动流程源码全解析（1）</a></p>\n<p><a href=\"https://www.jianshu.com/p/067acea47ba6\" target=\"_blank\" rel=\"external\">Android Activity启动流程源码全解析（2）</a></p>\n","excerpt":"<hr>\n<p>在移动应用开发中，Android四大组件之一Activity是最常用的。很多界面，如：闪屏、主界面、次功能界面等都需要Activity来作为主要的载体；界面与界面之间，即不同的Activity之间也都存在跳转切换，弄懂这其中跳转切换原理，将有助于我们更好的理解Android中Activity之间的交互逻辑，从而更好的开发Android应用。本篇博文将会重点介绍Android应用中的Activity的启动流程。</p>\n<p>在开始介绍之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>ActivityThread：</strong> 应用的启动入口类，当应用启动，会首先执行其main方法，开启主线程消息循环机制。</li>\n<li><strong>ApplicationThread：</strong> ActivityThread的内部类，主要与系统进程AMS通信，从而对应用进程的具体Activity操作进行管理。</li>\n<li><strong>Instrumentation：</strong> ActivityThread的属性变量，主要辅助ActivityThread类调用Activity的生命周期相关方法。</li>\n<li><strong>ActivityManagerService(AMS)：</strong> Activity管理系统服务类，主要是对所有的Activity进行管理。</li>\n<li><strong>ActivityStack：</strong> Activity任务栈，AMS的属性变量，AMS中Activtiy的实际管理者。</li>\n</ul>\n<h1 id=\"一、Activity启动流程\"><a href=\"#一、Activity启动流程\" class=\"headerlink\" title=\"一、Activity启动流程\"></a>一、Activity启动流程</h1><p>Activity启动流程图：<br>","more":"</p>\n<p><img src=\"/assets/img/tech_activity_start_flow.png\" alt=\"\"></p>\n<p>此流程图，主要是根据Android源码中代码执行顺序来梳理的。浅绿色部分为应用进程，浅蓝色部分为系统服务进程，两个进程间通过Binder驱动来进行通信，第一次Binder通信主要的类有：ActivityManagerService(AMS),ActivityManagerNative(AMN),ActivityManagerProxy(AMP)；第二次Binder通信主要的类有:ApplicationThread(AT),ApplicationThreadNative(ATN)，ApplicationThreadProxy(ATP)。</p>\n<h1 id=\"二、Activity启动流程源码分析\"><a href=\"#二、Activity启动流程源码分析\" class=\"headerlink\" title=\"二、Activity启动流程源码分析\"></a>二、Activity启动流程源码分析</h1><p>根据上面流程图，下面让我们一起来看看源码，首先从Activity的startActivity开始：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    startActivity(intent, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>, options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Note we want to go through this call for compatibility with</span></div><div class=\"line\">        <span class=\"comment\">// applications that may have overridden the method.</span></div><div class=\"line\">        startActivityForResult(intent, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">    startActivityForResult(intent, requestCode, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityForResult</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//1.核心代码</span></div><div class=\"line\">        Instrumentation.ActivityResult ar =</div><div class=\"line\">            mInstrumentation.execStartActivity(</div><div class=\"line\">                <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, <span class=\"keyword\">this</span>,</div><div class=\"line\">                intent, requestCode, options);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mMainThread.sendActivityResult(</div><div class=\"line\">                mToken, mEmbeddedID, requestCode, ar.getResultCode(),</div><div class=\"line\">                ar.getResultData());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If this start is requesting a result, we can avoid making</span></div><div class=\"line\">            <span class=\"comment\">// the activity visible until the result is received.  Setting</span></div><div class=\"line\">            <span class=\"comment\">// this code during onCreate(Bundle savedInstanceState) or onResume() will keep the</span></div><div class=\"line\">            <span class=\"comment\">// activity hidden during this time, to avoid flickering.</span></div><div class=\"line\">            <span class=\"comment\">// This can only be done when a result is requested because</span></div><div class=\"line\">            <span class=\"comment\">// that guarantees we will get information back when the</span></div><div class=\"line\">            <span class=\"comment\">// activity is finished, no matter what happens to it.</span></div><div class=\"line\">            mStartedActivity = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//2.核心代码</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (options != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mParent.startActivityFromChild(<span class=\"keyword\">this</span>, intent, requestCode, options);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Note we want to go through this method for compatibility with</span></div><div class=\"line\">            <span class=\"comment\">// existing applications that may have overridden it.</span></div><div class=\"line\">            mParent.startActivityFromChild(<span class=\"keyword\">this</span>, intent, requestCode);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Activity源码中，startActivity之后都会调用startActivityForResult；在注释1处，当mParent为空时，会直接调用Instrumentation中的execStartActivity方法，当mParent不为空时，调用mParent.startActivityFromChild方法。通过跟踪查找发现，mParent也是Activity，在Activity attach的时候会初始化，从ActivityRecord中获得值。我们继续来看看startActivityFromChild方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityFromChild</span><span class=\"params\">(Activity child, Intent intent,</div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">    startActivityFromChild(child, intent, requestCode, <span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityFromChild</span><span class=\"params\">(Activity child, Intent intent, </div><div class=\"line\">        <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">    Instrumentation.ActivityResult ar =</div><div class=\"line\">        mInstrumentation.execStartActivity(</div><div class=\"line\">            <span class=\"keyword\">this</span>, mMainThread.getApplicationThread(), mToken, child,</div><div class=\"line\">            intent, requestCode, options);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMainThread.sendActivityResult(</div><div class=\"line\">            mToken, child.mEmbeddedID, requestCode,</div><div class=\"line\">            ar.getResultCode(), ar.getResultData());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由此发现，startActivityForResult之后都调用了Instrumentation中的execStartActivity方法。我们继续来看看execStartActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActivityResult <span class=\"title\">execStartActivity</span><span class=\"params\">(</div><div class=\"line\">        Context who, IBinder contextThread, IBinder token, Activity target,</div><div class=\"line\">        Intent intent, <span class=\"keyword\">int</span> requestCode, Bundle options)</span> </span>&#123;</div><div class=\"line\">    IApplicationThread whoThread = (IApplicationThread) contextThread;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        intent.setAllowFds(<span class=\"keyword\">false</span>);</div><div class=\"line\">        intent.migrateExtraStreamToClipData();</div><div class=\"line\">        <span class=\"comment\">//核心代码</span></div><div class=\"line\">        <span class=\"keyword\">int</span> result = ActivityManagerNative.getDefault()</div><div class=\"line\">            .startActivity(whoThread, intent,</div><div class=\"line\">                    intent.resolveTypeIfNeeded(who.getContentResolver()),</div><div class=\"line\">                    token, target != <span class=\"keyword\">null</span> ? target.mEmbeddedID : <span class=\"keyword\">null</span>,</div><div class=\"line\">                    requestCode, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options);</div><div class=\"line\">        checkStartActivityResult(result, intent);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要是调用了ActivityManagerNative.getDefault()中的startActivity(…)方法，这里就涉及到Binder的一次跨进程通信，通过跨进程通信调用了ActivityManagerService中的startActivity方法。具体Binder怎么跨进程通信的，我已写过文章<a href=\"http://blog.csdn.net/awenyini/article/details/78815629\"> Android跨进程通信方式(IPC)解析</a>，想了解的同学，可以点击看看。下面我们继续来看看AMS中的startActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivity</span><span class=\"params\">(IApplicationThread caller,</div><div class=\"line\">        Intent intent, String resolvedType, IBinder resultTo,</div><div class=\"line\">        String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags,</div><div class=\"line\">        String profileFile, ParcelFileDescriptor profileFd, Bundle options)</span> </span>&#123;</div><div class=\"line\">    enforceNotIsolatedCaller(<span class=\"string\">\"startActivity\"</span>);</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">return</span> mMainStack.startActivityMayWait(caller, -<span class=\"number\">1</span>, intent, resolvedType,</div><div class=\"line\">            resultTo, resultWho, requestCode, startFlags, profileFile, profileFd,</div><div class=\"line\">            <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, options, userId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AMS的startActivity方法中，又调用ActivityStack中的startActivityMayWait()方法,我们再来看看ActivityStack的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityMayWait</span><span class=\"params\">(IApplicationThread caller, <span class=\"keyword\">int</span> callingUid,</div><div class=\"line\">           Intent intent, String resolvedType, IBinder resultTo,</div><div class=\"line\">           String resultWho, <span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> startFlags, String profileFile,</div><div class=\"line\">           ParcelFileDescriptor profileFd, WaitResult outResult, Configuration config,</div><div class=\"line\">           Bundle options, <span class=\"keyword\">int</span> userId)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">           ......</div><div class=\"line\">           </div><div class=\"line\">           <span class=\"comment\">//核心代码</span></div><div class=\"line\">           <span class=\"keyword\">int</span> res = startActivityLocked(caller, intent, resolvedType,</div><div class=\"line\">                   aInfo, resultTo, resultWho, requestCode, callingPid, callingUid,</div><div class=\"line\">                   startFlags, options, componentSpecified, <span class=\"keyword\">null</span>);</div><div class=\"line\">           </div><div class=\"line\">          ......</div><div class=\"line\">           </div><div class=\"line\">          <span class=\"keyword\">return</span> res;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>我们这里主要分析启动流程，所以省略掉部分细节。让我们继续看ActivityStack中的startActivityLocked()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityLocked</span><span class=\"params\">(IApplicationThread caller,</div><div class=\"line\">          Intent intent, String resolvedType, ActivityInfo aInfo, IBinder resultTo,</div><div class=\"line\">          String resultWho, <span class=\"keyword\">int</span> requestCode,</div><div class=\"line\">          <span class=\"keyword\">int</span> callingPid, <span class=\"keyword\">int</span> callingUid, <span class=\"keyword\">int</span> startFlags, Bundle options,</div><div class=\"line\">          <span class=\"keyword\">boolean</span> componentSpecified, ActivityRecord[] outActivity)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//创建一个新的ActivityRecord</span></div><div class=\"line\">      ActivityRecord r = <span class=\"keyword\">new</span> ActivityRecord(mService, <span class=\"keyword\">this</span>, callerApp, callingUid,</div><div class=\"line\">              intent, resolvedType, aInfo, mService.mConfiguration,</div><div class=\"line\">              resultRecord, resultWho, requestCode, componentSpecified);</div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      err = startActivityUncheckedLocked(r, sourceRecord,</div><div class=\"line\">              startFlags, <span class=\"keyword\">true</span>, options);</div><div class=\"line\">       ......</div><div class=\"line\">      <span class=\"keyword\">return</span> err;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>同上，也省略的部分细节。我们继续<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">startActivityUncheckedLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">        ActivityRecord sourceRecord, <span class=\"keyword\">int</span> startFlags, <span class=\"keyword\">boolean</span> doResume,</div><div class=\"line\">        Bundle options)</span> </span>&#123;</div><div class=\"line\">   ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sourceRecord == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((launchFlags&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sourceRecord.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) &#123;        </div><div class=\"line\">        launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE</div><div class=\"line\">            || r.launchMode == ActivityInfo.LAUNCH_SINGLE_TASK) &#123;        </div><div class=\"line\">        launchFlags |= Intent.FLAG_ACTIVITY_NEW_TASK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    ......<span class=\"comment\">//省略代码：Activity四种启动模式standard,singleTop,singleTask,singleInstance的判断</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (sourceRecord != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       .......</div><div class=\"line\">       <span class=\"keyword\">if</span> (!addingToTask &amp;&amp;(launchFlags&amp;Intent.FLAG_ACTIVITY_REORDER_TO_FRONT) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// In this case, we are launching an activity in our own task</span></div><div class=\"line\">            <span class=\"comment\">// that may already be running somewhere in the history, and</span></div><div class=\"line\">            <span class=\"comment\">// we want to shuffle it to the front of the stack if so.</span></div><div class=\"line\">           </div><div class=\"line\">            <span class=\"keyword\">int</span> where = findActivityInHistoryLocked(r, sourceRecord.task.taskId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (where &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                ActivityRecord top = moveActivityToFrontLocked(where);</div><div class=\"line\">                logStartActivity(EventLogTags.AM_NEW_INTENT, r, top.task);</div><div class=\"line\">                top.updateOptionsLocked(options);</div><div class=\"line\">                top.deliverNewIntentLocked(callingUid, r.intent);</div><div class=\"line\">                <span class=\"keyword\">if</span> (doResume) &#123;</div><div class=\"line\">                    resumeTopActivityLocked(<span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> ActivityManager.START_DELIVERED_TO_TOP;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// An existing activity is starting this new activity, so we want</span></div><div class=\"line\">        <span class=\"comment\">// to keep the new one in the same task as the one that is starting</span></div><div class=\"line\">        <span class=\"comment\">// it.</span></div><div class=\"line\">        r.setTask(sourceRecord.task, sourceRecord.thumbHolder, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG_TASKS) Slog.v(TAG, <span class=\"string\">\"Starting new activity \"</span> + r</div><div class=\"line\">                + <span class=\"string\">\" in existing task \"</span> + r.task);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      ......</div><div class=\"line\">    &#125;</div><div class=\"line\">    ......</div><div class=\"line\">    <span class=\"keyword\">return</span> ActivityManager.START_SUCCESS;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在startActivityUncheckedLocked()方法中，主要针对Activity的启动模式进行了检测判断，从而启动Activity。我们知道，Activity有四种启动模式，分别为standard,singleTop,singleTask和singleInstance,但这里我们主要是分析Activity的启动流程，所以具体启动模式的判断逻辑细节，这里就不展开分析了。我们主要来看一下，把Activity启动放到栈顶的方法resumeTopActivityLocked()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> resumeTopActivityLocked(prev, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">resumeTopActivityLocked</span><span class=\"params\">(ActivityRecord prev, Bundle options)</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\">      <span class=\"comment\">//找到一个栈顶的未finish的Activity的ActivityRecord</span></div><div class=\"line\">      ActivityRecord next = topRunningActivityLocked(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//栈顶无Activity，直接启动Launcher        </span></div><div class=\"line\">          <span class=\"keyword\">if</span> (mMainStack) &#123;</div><div class=\"line\">              ActivityOptions.abort(options);</div><div class=\"line\">              <span class=\"keyword\">return</span> mService.startHomeActivityLocked(<span class=\"number\">0</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//如果Activity所在的进程已经存在</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (next.app != <span class=\"keyword\">null</span> &amp;&amp; next.app.thread != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         ......</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              .......</div><div class=\"line\">              <span class=\"comment\">//重新显示Activity</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (next.newIntents != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  next.app.thread.scheduleNewIntent(next.newIntents, next.appToken);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              EventLog.writeEvent(EventLogTags.AM_RESUME_ACTIVITY,</div><div class=\"line\">                      System.identityHashCode(next),</div><div class=\"line\">                      next.task.taskId, next.shortComponentName);</div><div class=\"line\">              </div><div class=\"line\">              next.sleeping = <span class=\"keyword\">false</span>;</div><div class=\"line\">              showAskCompatModeDialogLocked(next);</div><div class=\"line\">              next.app.pendingUiClean = <span class=\"keyword\">true</span>;</div><div class=\"line\">              <span class=\"comment\">//执行Activity onResume方法</span></div><div class=\"line\">              next.app.thread.scheduleResumeActivity(next.appToken,</div><div class=\"line\">                      mService.isNextTransitionForward());</div><div class=\"line\">              </div><div class=\"line\">              checkReadyForSleepLocked();</div><div class=\"line\"></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//如果启动异常，就重启Activity</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_STATES) Slog.v(TAG, <span class=\"string\">\"Resume failed; resetting state to \"</span></div><div class=\"line\">                      + lastState + <span class=\"string\">\": \"</span> + next);</div><div class=\"line\">              next.state = lastState;</div><div class=\"line\">              mResumedActivity = lastResumedActivity;</div><div class=\"line\">              Slog.i(TAG, <span class=\"string\">\"Restarting because process died: \"</span> + next);</div><div class=\"line\">              <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">                  next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; mMainStack) &#123;</div><div class=\"line\">                      mService.mWindowManager.setAppStartingWindow(</div><div class=\"line\">                              next.appToken, next.packageName, next.theme,</div><div class=\"line\">                              mService.compatibilityInfoForPackageLocked(</div><div class=\"line\">                                      next.info.applicationInfo),</div><div class=\"line\">                              next.nonLocalizedLabel,</div><div class=\"line\">                              next.labelRes, next.icon, next.windowFlags,</div><div class=\"line\">                              <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">              startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);<span class=\"comment\">//核心代码，重启Activity</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// From this point on, if something goes wrong there is no way</span></div><div class=\"line\">          <span class=\"comment\">// to recover the activity.</span></div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              next.visible = <span class=\"keyword\">true</span>;</div><div class=\"line\">              completeResumeLocked(next);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">              <span class=\"comment\">// If any exception gets thrown, toss away this</span></div><div class=\"line\">              <span class=\"comment\">// activity and try the next one.</span></div><div class=\"line\">              Slog.w(TAG, <span class=\"string\">\"Exception thrown during resume of \"</span> + next, e);</div><div class=\"line\">              requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, <span class=\"keyword\">null</span>,</div><div class=\"line\">                      <span class=\"string\">\"resume-exception\"</span>);</div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// Didn't need to use the icicle, and it is now out of date.</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (DEBUG_SAVED_STATE) Slog.i(TAG, <span class=\"string\">\"Resumed activity; didn't need icicle of: \"</span> + next);</div><div class=\"line\">          next.icicle = <span class=\"keyword\">null</span>;</div><div class=\"line\">          next.haveState = <span class=\"keyword\">false</span>;</div><div class=\"line\">          next.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//Activity所在的进程不存在，启动Activity</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (!next.hasBeenLaunched) &#123;</div><div class=\"line\">              next.hasBeenLaunched = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (SHOW_APP_STARTING_PREVIEW) &#123;</div><div class=\"line\">                  mService.mWindowManager.setAppStartingWindow(</div><div class=\"line\">                          next.appToken, next.packageName, next.theme,</div><div class=\"line\">                          mService.compatibilityInfoForPackageLocked(</div><div class=\"line\">                                  next.info.applicationInfo),</div><div class=\"line\">                          next.nonLocalizedLabel,</div><div class=\"line\">                          next.labelRes, next.icon, next.windowFlags,</div><div class=\"line\">                          <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_SWITCH) Slog.v(TAG, <span class=\"string\">\"Restarting: \"</span> + next);</div><div class=\"line\">          &#125;</div><div class=\"line\">          startSpecificActivityLocked(next, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);<span class=\"comment\">//启动Activity</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面注释中的分析，在判断Activity进程之后，就会通过startSpecificActivityLocked()方法来启动Activity,我们继续看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">startSpecificActivityLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// Is this activity's application already running?</span></div><div class=\"line\">       ProcessRecord app = mService.getProcessRecordLocked(r.processName,</div><div class=\"line\">               r.info.applicationInfo.uid);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (r.launchTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           r.launchTime = SystemClock.uptimeMillis();</div><div class=\"line\">           <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               mInitialStartTime = r.launchTime;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mInitialStartTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mInitialStartTime = SystemClock.uptimeMillis();</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (app != <span class=\"keyword\">null</span> &amp;&amp; app.thread != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//Activity所在进程判断，进程存在时，直接启动Activity</span></div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               app.addPackage(r.info.packageName);</div><div class=\"line\"></div><div class=\"line\">               realStartActivityLocked(r, app, andResume, checkConfig);<span class=\"comment\">//核心代码</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">               Slog.w(TAG, <span class=\"string\">\"Exception when starting activity \"</span></div><div class=\"line\">                       + r.intent.getComponent().flattenToShortString(), e);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// If a dead object exception was thrown -- fall through to</span></div><div class=\"line\">           <span class=\"comment\">// restart the application.</span></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class=\"keyword\">true</span>, <span class=\"number\">0</span>,</div><div class=\"line\">               <span class=\"string\">\"activity\"</span>, r.intent.getComponent(), <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>在startSpecificActivityLocked()方法中也对Activity的进程是否存在做了判断，当进程存在时直接调用realStartActivityLocked()方法启动Activity；当Activity的进程不存在时，就会调用AMS的startProcessLocked()方法创建进程，这里其实是Activity的另一种启动流程，从Laucher启动，只有从Launcher启动才会没有进程，这里先不做深度分析，后续我们针对Activity的Launcher启动再写一篇博文。已补博文<a href=\"http://blog.csdn.net/awenyini/article/details/78915225\">Activity启动流程源码分析(Launcher中)</a>。下面让我们继续看realStartActivityLocked()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realStartActivityLocked</span><span class=\"params\">(ActivityRecord r,</div><div class=\"line\">          ProcessRecord app, <span class=\"keyword\">boolean</span> andResume, <span class=\"keyword\">boolean</span> checkConfig)</span></div><div class=\"line\">          <span class=\"keyword\">throws</span> RemoteException </span>&#123;</div><div class=\"line\">           </div><div class=\"line\">          .......</div><div class=\"line\"></div><div class=\"line\">          app.thread.scheduleLaunchActivity(<span class=\"keyword\">new</span> Intent(r.intent), r.appToken,</div><div class=\"line\">                  System.identityHashCode(r), r.info,</div><div class=\"line\">                  <span class=\"keyword\">new</span> Configuration(mService.mConfiguration),</div><div class=\"line\">                  r.compat, r.icicle, results, newIntents, !andResume,</div><div class=\"line\">                  mService.isNextTransitionForward(), profileFile, profileFd,</div><div class=\"line\">                  profileAutoStop);</div><div class=\"line\">          </div><div class=\"line\">         ......</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要通过调用app.thread.scheduleLaunchActivity(…)方法实现了跨进程通信，这里主要实现了流程图中的第二次Binder跨进程通信。通过Binder跨进程通信调用了ApplicationThread中的scheduleLaunchActivity(…)方法，具体Binder怎么跨进程通信的，我已写过文章<a href=\"http://blog.csdn.net/awenyini/article/details/78815629\"> Android跨进程通信方式(IPC)解析</a>，想了解的同学，可以点击看看。下面我们继续来看看ApplicationThread中的scheduleLaunchActivity方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleLaunchActivity</span><span class=\"params\">(Intent intent, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">                ActivityInfo info, Configuration curConfig, CompatibilityInfo compatInfo,</div><div class=\"line\">                Bundle state, List&lt;ResultInfo&gt; pendingResults,</div><div class=\"line\">                List&lt;Intent&gt; pendingNewIntents, <span class=\"keyword\">boolean</span> notResumed, <span class=\"keyword\">boolean</span> isForward,</div><div class=\"line\">                String profileName, ParcelFileDescriptor profileFd, <span class=\"keyword\">boolean</span> autoStopProfiler)</span> </span>&#123;</div><div class=\"line\">            ActivityClientRecord r = <span class=\"keyword\">new</span> ActivityClientRecord();</div><div class=\"line\">            ......</div><div class=\"line\"></div><div class=\"line\">            queueOrSendMessage(H.LAUNCH_ACTIVITY, r);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class=\"string\">\"&gt;&gt;&gt; handling: \"</span> + codeToString(msg.what));</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> LAUNCH_ACTIVITY: &#123;</div><div class=\"line\">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class=\"string\">\"activityStart\"</span>);</div><div class=\"line\">                    ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class=\"line\"></div><div class=\"line\">                    r.packageInfo = getPackageInfoNoCheck(</div><div class=\"line\">                            r.activityInfo.applicationInfo, r.compatInfo);</div><div class=\"line\">                    handleLaunchActivity(r, <span class=\"keyword\">null</span>);<span class=\"comment\">//核心代码</span></div><div class=\"line\">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class=\"line\">                &#125; <span class=\"keyword\">break</span>;</div><div class=\"line\">             .......</div><div class=\"line\">           &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上易知，通过Handler消息循环机制，从而执行handleLaunchActivity()方法，我们继续来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">      .......</div><div class=\"line\"></div><div class=\"line\">      Activity a = performLaunchActivity(r, customIntent);</div><div class=\"line\"></div><div class=\"line\">      ......</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> Activity <span class=\"title\">performLaunchActivity</span><span class=\"params\">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// System.out.println(\"##### [\" + System.currentTimeMillis() + \"] ActivityThread.performLaunchActivity(\" + r + \")\");</span></div><div class=\"line\"></div><div class=\"line\">      ActivityInfo aInfo = r.activityInfo;</div><div class=\"line\">      <span class=\"keyword\">if</span> (r.packageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class=\"line\">                  Context.CONTEXT_INCLUDE_CODE);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ComponentName component = r.intent.getComponent();</div><div class=\"line\">      <span class=\"keyword\">if</span> (component == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          component = r.intent.resolveActivity(</div><div class=\"line\">              mInitialApplication.getPackageManager());</div><div class=\"line\">          r.intent.setComponent(component);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (r.activityInfo.targetActivity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          component = <span class=\"keyword\">new</span> ComponentName(r.activityInfo.packageName,</div><div class=\"line\">                  r.activityInfo.targetActivity);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      Activity activity = <span class=\"keyword\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">//1.核心代码</span></div><div class=\"line\">          java.lang.ClassLoader cl = r.packageInfo.getClassLoader(); </div><div class=\"line\">          activity = mInstrumentation.newActivity(</div><div class=\"line\">                  cl, component.getClassName(), r.intent);</div><div class=\"line\">          StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class=\"line\">          r.intent.setExtrasClassLoader(cl);</div><div class=\"line\">          <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              r.state.setClassLoader(cl);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                  <span class=\"string\">\"Unable to instantiate activity \"</span> + component</div><div class=\"line\">                  + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Application app = r.packageInfo.makeApplication(<span class=\"keyword\">false</span>, mInstrumentation);</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (localLOGV) Slog.v(TAG, <span class=\"string\">\"Performing launch of \"</span> + r);</div><div class=\"line\">          <span class=\"keyword\">if</span> (localLOGV) Slog.v(</div><div class=\"line\">                  TAG, r + <span class=\"string\">\": app=\"</span> + app</div><div class=\"line\">                  + <span class=\"string\">\", appName=\"</span> + app.getPackageName()</div><div class=\"line\">                  + <span class=\"string\">\", pkg=\"</span> + r.packageInfo.getPackageName()</div><div class=\"line\">                  + <span class=\"string\">\", comp=\"</span> + r.intent.getComponent().toShortString()</div><div class=\"line\">                  + <span class=\"string\">\", dir=\"</span> + r.packageInfo.getAppDir());</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ContextImpl appContext = <span class=\"keyword\">new</span> ContextImpl();</div><div class=\"line\">              appContext.init(r.packageInfo, r.token, <span class=\"keyword\">this</span>);</div><div class=\"line\">              appContext.setOuterContext(activity);</div><div class=\"line\">              CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class=\"line\">              Configuration config = <span class=\"keyword\">new</span> Configuration(mCompatConfiguration);</div><div class=\"line\">              <span class=\"keyword\">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class=\"string\">\"Launching activity \"</span></div><div class=\"line\">                      + r.activityInfo.name + <span class=\"string\">\" with config \"</span> + config);</div><div class=\"line\">                      </div><div class=\"line\">              <span class=\"comment\">//2.核心代码</span></div><div class=\"line\">              activity.attach(appContext, <span class=\"keyword\">this</span>, getInstrumentation(), r.token,</div><div class=\"line\">                      r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class=\"line\">                      r.embeddedID, r.lastNonConfigurationInstances, config);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (customIntent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  activity.mIntent = customIntent;</div><div class=\"line\">              &#125;</div><div class=\"line\">              r.lastNonConfigurationInstances = <span class=\"keyword\">null</span>;</div><div class=\"line\">              activity.mStartedActivity = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">int</span> theme = r.activityInfo.getThemeResource();</div><div class=\"line\">              <span class=\"keyword\">if</span> (theme != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  activity.setTheme(theme);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"comment\">//3.核心代码</span></div><div class=\"line\">              mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!activity.mCalled) &#123;</div><div class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(</div><div class=\"line\">                      <span class=\"string\">\"Activity \"</span> + r.intent.getComponent().toShortString() +</div><div class=\"line\">                      <span class=\"string\">\" did not call through to super.onCreate()\"</span>);</div><div class=\"line\">              &#125;</div><div class=\"line\">              r.activity = activity;</div><div class=\"line\">              r.stopped = <span class=\"keyword\">true</span>;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  activity.performStart();</div><div class=\"line\">                  r.stopped = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (r.state != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                      mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (!r.activity.mFinished) &#123;</div><div class=\"line\">                  activity.mCalled = <span class=\"keyword\">false</span>;</div><div class=\"line\">                  mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (!activity.mCalled) &#123;</div><div class=\"line\">                      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(</div><div class=\"line\">                          <span class=\"string\">\"Activity \"</span> + r.intent.getComponent().toShortString() +</div><div class=\"line\">                          <span class=\"string\">\" did not call through to super.onPostCreate()\"</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">          r.paused = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">          mActivities.put(r.token, r);</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (SuperNotCalledException e) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> e;</div><div class=\"line\"></div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                  <span class=\"string\">\"Unable to start activity \"</span> + component</div><div class=\"line\">                  + <span class=\"string\">\": \"</span> + e.toString(), e);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> activity;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>注释1处，通过mInstrumentation.newActivity()方法对Activity进行初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Activity <span class=\"title\">newActivity</span><span class=\"params\">(ClassLoader cl, String className,</div><div class=\"line\">        Intent intent)</span></div><div class=\"line\">        <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException,</div><div class=\"line\">        ClassNotFoundException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (Activity)cl.loadClass(className).newInstance();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由上我们知道，主要通过反射机制实现Activity的初始化。再来看注释2，调用了Activity.attach(…)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread, Instrumentation instr, IBinder token,</div><div class=\"line\">           Application application, Intent intent, ActivityInfo info, CharSequence title, </div><div class=\"line\">           Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config)</span> </span>&#123;</div><div class=\"line\">       attach(context, aThread, instr, token, <span class=\"number\">0</span>, application, intent, info, title, parent, id,</div><div class=\"line\">           lastNonConfigurationInstances, config);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context, ActivityThread aThread,</div><div class=\"line\">           Instrumentation instr, IBinder token, <span class=\"keyword\">int</span> ident,</div><div class=\"line\">           Application application, Intent intent, ActivityInfo info,</div><div class=\"line\">           CharSequence title, Activity parent, String id,</div><div class=\"line\">           NonConfigurationInstances lastNonConfigurationInstances,</div><div class=\"line\">           Configuration config)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       attachBaseContext(context);</div><div class=\"line\"></div><div class=\"line\">       mFragments.attachActivity(<span class=\"keyword\">this</span>);</div><div class=\"line\">       </div><div class=\"line\">       mWindow = PolicyManager.makeNewWindow(<span class=\"keyword\">this</span>);</div><div class=\"line\">       mWindow.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">       mWindow.getLayoutInflater().setPrivateFactory(<span class=\"keyword\">this</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</div><div class=\"line\">           mWindow.setSoftInputMode(info.softInputMode);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (info.uiOptions != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           mWindow.setUiOptions(info.uiOptions);</div><div class=\"line\">       &#125;</div><div class=\"line\">       mUiThread = Thread.currentThread();</div><div class=\"line\">       </div><div class=\"line\">       mMainThread = aThread;</div><div class=\"line\">       mInstrumentation = instr; </div><div class=\"line\">       mToken = token;</div><div class=\"line\">       mIdent = ident;</div><div class=\"line\">       mApplication = application;</div><div class=\"line\">       mIntent = intent;</div><div class=\"line\">       mComponent = intent.getComponent();</div><div class=\"line\">       mActivityInfo = info;</div><div class=\"line\">       mTitle = title;</div><div class=\"line\">       mParent = parent;</div><div class=\"line\">       mEmbeddedID = id;</div><div class=\"line\">       mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class=\"line\"></div><div class=\"line\">       mWindow.setWindowManager(<span class=\"keyword\">null</span>, mToken, mComponent.flattenToString(),</div><div class=\"line\">               (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mWindow.setContainer(mParent.getWindow());</div><div class=\"line\">       &#125;</div><div class=\"line\">       mWindowManager = mWindow.getWindowManager();</div><div class=\"line\">       mCurrentConfig = config;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>此方法主要就是对Activity进行了初始化，初始化了许多的属性，具体如上。我们再看注释3，方法mInstrumentation.callActivityOnCreate(activity, r.state)，我们也来看看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callActivityOnCreate</span><span class=\"params\">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWaitingActivities != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mWaitingActivities.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityWaiter aw = mWaitingActivities.get(i);</div><div class=\"line\">                <span class=\"keyword\">final</span> Intent intent = aw.intent;</div><div class=\"line\">                <span class=\"keyword\">if</span> (intent.filterEquals(activity.getIntent())) &#123;</div><div class=\"line\">                    aw.activity = activity;</div><div class=\"line\">                    mMessageQueue.addIdleHandler(<span class=\"keyword\">new</span> ActivityGoing(aw));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    activity.performCreate(icicle);<span class=\"comment\">//核心代码</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (mActivityMonitors != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mSync) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mActivityMonitors.size();</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> ActivityMonitor am = mActivityMonitors.get(i);</div><div class=\"line\">                am.match(activity, activity, activity.getIntent());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实，主要也就是调用了Activity的OnCreate()方法，我们继续来看看<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">performCreate</span><span class=\"params\">(Bundle icicle)</span> </span>&#123;</div><div class=\"line\">    onCreate(icicle);</div><div class=\"line\">    mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(</div><div class=\"line\">            com.android.internal.R.styleable.Window_windowNoDisplay, <span class=\"keyword\">false</span>);</div><div class=\"line\">    mFragments.dispatchActivityCreated();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>的确如此，最后调用了Activity的OnCreate方法，从而就启动了Activity。好了，到这里，Activity的启动流程就说完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/awenyini/article/details/78915225\">Activity启动流程源码分析(Launcher中)</a></p>\n<p><a href=\"https://www.jianshu.com/p/8a8ec5c17495\">Android Activity启动流程源码全解析（1）</a></p>\n<p><a href=\"https://www.jianshu.com/p/067acea47ba6\">Android Activity启动流程源码全解析（2）</a></p>"},{"layout":"post","title":"View绘制三大流程源码分析","date":"2018-01-08T11:39:30.000Z","comments":1,"_content":"---\n在上篇博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，关于DecorView作为Activity、Window中的顶级View的绘制，我们已经作了一个详细的分析。但在具体说到View的绘制的时候，我们没有详细说明，所以本篇博文将会对View的绘制原理作深度分析。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **View：**是所有UI组件的基类,是Android平台中用户界面体现的基础单位。\n- **ViewGroup:**是容纳UI组件的容器,它本身也是View的子类。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **MeasureSpec：** View的内部类，主要就是View测量模式的工具类\n\n# 一、View绘制三大流程分析\n在DecorView的具体绘制中，我们涉及了View绘制的三大流程，具体分别为measure(测量)、layout(布局)和draw(绘制)。下面我们就来一一分析：\n<!-- more -->\n\n**1.performMeasure(测量)**\n\n我们知道ViewRootImpl是View绘制的辅助类，View的绘制都是在ViewRootImpl的帮助下完成的，所以要了解View的measure(测量)，我们就必须看看ViewRootImpl中的performMeasure()方法\n```java\n    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"measure\");\n        try {\n            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n在[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们知道mView就是DecorView,而**DecorView继承于FrameLayout,FrameLayout又继承于ViewGroup，ViewGroup又继承于View**，根据他们之间的关系，我们知道，mView.measure()是调用了父类View的measure()方法(因为只有View有measure方法)，所以来分析View的measure()方法\n```java\n    public final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n        if ((mPrivateFlags & FORCE_LAYOUT) == FORCE_LAYOUT ||\n                widthMeasureSpec != mOldWidthMeasureSpec ||\n            ........\n\n            onMeasure(widthMeasureSpec, heightMeasureSpec);//核心方法\n\n            ........\n        }\n\n        mOldWidthMeasureSpec = widthMeasureSpec;\n        mOldHeightMeasureSpec = heightMeasureSpec;\n    }\n```\n此onMeasure()方法，在DecorView，Framelayout和View中都有定义，并且DecorView和FrameLayout重载了此方法，根据调用关系，这里调用了DecorView的onMeasure(),我们来看看此方法\n```java\n @Override\n        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n            final DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();\n            final boolean isPortrait = metrics.widthPixels < metrics.heightPixels;\n\n            final int widthMode = getMode(widthMeasureSpec);\n            final int heightMode = getMode(heightMeasureSpec);\n\n            ......\n\n            super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n            ......\n        }\n```\n关于测量模式，这里我们先不说，后面我们会说到，这里调用了父类FrameLayout中的onMeasure()方法，这里我们来看一下源码\n```java\n  @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int count = getChildCount();\n\n        ........//计算top,left,bottom,right的margin值，从而确定FrameLayout的宽高\n\n        //设置宽高\n        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n                resolveSizeAndState(maxHeight, heightMeasureSpec,\n                        childState << MEASURED_HEIGHT_STATE_SHIFT));\n\n        count = mMatchParentChildren.size();\n        if (count > 1) {\n            for (int i = 0; i < count; i++) {\n                final View child = mMatchParentChildren.get(i);//获取子View\n\n                final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();//子View配置参数\n                int childWidthMeasureSpec;\n                int childHeightMeasureSpec;\n                \n                if (lp.width == LayoutParams.MATCH_PARENT) {\n                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -\n                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -\n                            lp.leftMargin - lp.rightMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +\n                            lp.leftMargin + lp.rightMargin,\n                            lp.width);\n                }\n                \n                if (lp.height == LayoutParams.MATCH_PARENT) {\n                    childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() -\n                            getPaddingTopWithForeground() - getPaddingBottomWithForeground() -\n                            lp.topMargin - lp.bottomMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,\n                            getPaddingTopWithForeground() + getPaddingBottomWithForeground() +\n                            lp.topMargin + lp.bottomMargin,\n                            lp.height);\n                }\n\n                child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n            }\n        }\n    }\n```\n由于FrameLayout是一个容器，可以装载其他的View，所以这里需要进行遍历其中的子View，并一一进行measure(测量)。\n\n在具体说此方法前，我们先要了解一下View的测量模式及MeasureSpec类，具体我们先来看看MeasureSpec类的源码\n```java\n    public static class MeasureSpec {\n\n        private static final int MODE_SHIFT = 30;\n        private static final int MODE_MASK  = 0x3 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The parent has not imposed any constraint\n         * on the child. It can be whatever size it wants.\n         * 父View不对子View有任何限制，子View需要多大就多大\n         */\n        public static final int UNSPECIFIED = 0 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The parent has determined an exact size\n         * for the child. The child is going to be given those bounds regardless\n         * of how big it wants to be.\n         * 父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数* 值这两种模式\n         */\n        public static final int EXACTLY     = 1 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The child can be as large as it wants up\n         * to the specified size.\n         * 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。\n         */\n        public static final int AT_MOST     = 2 << MODE_SHIFT;\n\n\n       /**\n         * 用实际值和测量模式组装成measureSpec测量规格\n         * 将size和mode打包成一个32位的int型数值\n         * 高2位表示SpecMode，测量模式，低30位表示SpecSize，某种测量模式下的规格大小\n         */\n        public static int makeMeasureSpec(int size, int mode) {\n            return size + mode;\n        }\n\n        //将32位的MeasureSpec解包，返回SpecMode,测量模式(EXACTLY、UNSPECIFIED或AT_MOST）\n        public static int getMode(int measureSpec) {\n            return (measureSpec & MODE_MASK);\n        }\n\n        \n        //将32位的MeasureSpec解包，返回SpecSize\n        public static int getSize(int measureSpec) {\n            return (measureSpec & ~MODE_MASK);\n        }\n    }\n```\n这里主要通过位运算，来实现View的三种测量模式UNSPECIFIED、EXACTLY和AT_MOST。相关定义如下：\n\n- **UNSPECIFIED：**父View不对子View有任何限制，子View需要多大就多大\n- **EXACTLY：**父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数值这两种模式\n- **AT_MOST：** 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。\n\n我们继续上面FrameLayout的onMeasure()方法继续分析，可以发现，此方法主要就是组装子View宽高的测量规格MeasureSpec，然后作为参数传给子View的measure()方法。这里我们只来看一个组装就好，我们来看宽的组装的测量规格MeasureSpec，我们来看看相关代码\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        ........\n               final View child = mMatchParentChildren.get(i);//获取子View\n\n                final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();//子View配置参数\n                int childWidthMeasureSpec;\n                int childHeightMeasureSpec;\n                \n                if (lp.width == LayoutParams.MATCH_PARENT) {\n                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -\n                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -\n                            lp.leftMargin - lp.rightMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +\n                            lp.leftMargin + lp.rightMargin,\n                            lp.width);\n                }\n\n      ........\n}\n```\n当子View的布局参数lp.width为LayoutParams.MATCH_PARENT时，生成后的测量规格MeasureSpec是以测量模式为MeasureSpec.EXACTLY的值。当lp.width不为LayoutParams.MATCH_PARENT时，这是调用了ViewGroup中的getChildMeasureSpec()方法，来生成相关值，这里我们来看此方法\n```java\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n```\n这里主要传入了FrameLayout的测量规格MeasureSpec，根据FrameLayout的测量规格和子View具体的padding和childDimension值，从而决定子view宽的测量规格MeasureSpec。具体创建细节，这里就不说。回到FrameLayout的onMeasure()方法，这样当子View的宽高的测量规格都计算出来之后，就会调用子View的measure()方法。如果子View不再是ViewGroup，那样就会调用子View(或自定义View)的onMeasure()方法，从而完成View的测量；如果子View还是ViewGroup，那就会按我们说的逻辑再走一遍measure方法。\n\n**2.performLayout(布局)**\n说完View绘制的measure(测量)，我们来看看View绘制的layout(布局)。同样的，我们先来看ViewRootImpl中的performLayout()方法\n```java\n    private void performLayout() {\n        mLayoutRequested = false;\n        mScrollMayChange = true;\n\n        final View host = mView;\n        if (DEBUG_ORIENTATION || DEBUG_LAYOUT) {\n            Log.v(TAG, \"Laying out \" + host + \" to (\" +\n                    host.getMeasuredWidth() + \", \" + host.getMeasuredHeight() + \")\");\n        }\n\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"layout\");\n        try {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n由相关继承类的关系，我们知道，这里调用的是View的layout()方法\n```java\n public void layout(int l, int t, int r, int b) {\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        boolean changed = setFrame(l, t, r, b); \n        if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {\n\n            onLayout(changed, l, t, r, b);//核心方法\n\n            mPrivateFlags &= ~LAYOUT_REQUIRED;\n\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n        mPrivateFlags &= ~FORCE_LAYOUT;\n    }\n```\n通过源码我们知道，ViewGroup是一个抽象的View的子类，而FrameLayout是ViewGroup的实现类，所以这里onLayout()是FrameLayout中的方法，我们来看一下此方法\n```java\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        final int count = getChildCount();\n\n        final int parentLeft = getPaddingLeftWithForeground();\n        final int parentRight = right - left - getPaddingRightWithForeground();\n\n        final int parentTop = getPaddingTopWithForeground();\n        final int parentBottom = bottom - top - getPaddingBottomWithForeground();\n\n        mForegroundBoundsChanged = true;\n        \n        for (int i = 0; i < count; i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n                final int width = child.getMeasuredWidth();\n                final int height = child.getMeasuredHeight();\n\n                int childLeft;\n                int childTop;\n\n                int gravity = lp.gravity;\n                if (gravity == -1) {\n                    gravity = DEFAULT_CHILD_GRAVITY;\n                }\n\n                final int layoutDirection = getResolvedLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;\n\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.LEFT:\n                        childLeft = parentLeft + lp.leftMargin;\n                        break;\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = parentLeft + (parentRight - parentLeft - width) / 2 +\n                        lp.leftMargin - lp.rightMargin;\n                        break;\n                    case Gravity.RIGHT:\n                        childLeft = parentRight - width - lp.rightMargin;\n                        break;\n                    default:\n                        childLeft = parentLeft + lp.leftMargin;\n                }\n\n                switch (verticalGravity) {\n                    case Gravity.TOP:\n                        childTop = parentTop + lp.topMargin;\n                        break;\n                    case Gravity.CENTER_VERTICAL:\n                        childTop = parentTop + (parentBottom - parentTop - height) / 2 +\n                        lp.topMargin - lp.bottomMargin;\n                        break;\n                    case Gravity.BOTTOM:\n                        childTop = parentBottom - height - lp.bottomMargin;\n                        break;\n                    default:\n                        childTop = parentTop + lp.topMargin;\n                }\n                child.layout(childLeft, childTop, childLeft + width, childTop + height);\n            }\n        }\n    }\n```\n这里主要就是通过padding和margin算出子View的top,left,bottom,right四个顶点的值，从而再调其子View的layout方法。如果子View child不是ViewGroup，最后直接调用子View(或自定义View)的onLayout()方法，如果child是ViewGroup，那就再走一遍流程。\n\n**3.performDraw(绘制)**\n\n从[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们知道performDraw()绘制有两种方式，分别为Hardware渲染(硬件加速)和Software渲染，因为两种绘制方式最后也都走到调用View的draw()方法，所以这里我们来看看software渲染方式的绘制\n```java\n private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int yoff,\n            boolean scalingRequired, Rect dirty) {\n\n        // Draw with software renderer.\n        Canvas canvas;\n        try {\n            .......\n\n            canvas = mSurface.lockCanvas(dirty);\n\n           ......\n          \n        } catch (Surface.OutOfResourcesException e) {\n           .....\n        } catch (IllegalArgumentException e) {\n          .....\n        }\n\n        try {\n            .......\n            try {\n\n               ......\n\n                mView.draw(canvas);//核心方法\n\n                drawAccessibilityFocusedDrawableIfNeeded(canvas);\n            } finally {\n                if (!attachInfo.mSetIgnoreDirtyState) {\n                    // Only clear the flag if it was not set during the mView.draw() call\n                    attachInfo.mIgnoreDirtyState = false;\n                }\n            }\n        } finally {\n          .....\n        }\n        return true;\n    }\n```\n同上，通过分析知，这里mView.draw(canvas)其实是调用View.draw(canvas)方法，让我们来看看此方法\n```java\n  public void draw(Canvas canvas) {\n        final int privateFlags = mPrivateFlags;\n        final boolean dirtyOpaque = (privateFlags & DIRTY_MASK) == DIRTY_OPAQUE &&\n                (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n        mPrivateFlags = (privateFlags & ~DIRTY_MASK) | DRAWN;\n\n        /*\n         * Draw traversal performs several drawing steps which must be executed\n         * in the appropriate order:\n         *\n         *      1. Draw the background\n         *      2. If necessary, save the canvas' layers to prepare for fading\n         *      3. Draw view's content\n         *      4. Draw children\n         *      5. If necessary, draw the fading edges and restore layers\n         *      6. Draw decorations (scrollbars for instance)\n         */\n\n        // 第一步,如果有背景，绘制背景\n        int saveCount;\n\n        if (!dirtyOpaque) {\n            final Drawable background = mBackground;\n            if (background != null) {\n                final int scrollX = mScrollX;\n                final int scrollY = mScrollY;\n\n                if (mBackgroundSizeChanged) {\n                    background.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n                    mBackgroundSizeChanged = false;\n                }\n\n                if ((scrollX | scrollY) == 0) {\n                    background.draw(canvas);\n                } else {\n                    canvas.translate(scrollX, scrollY);\n                    background.draw(canvas);\n                    canvas.translate(-scrollX, -scrollY);\n                }\n            }\n        }\n        ........\n\n        //第二步,保存画布的层级\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\n        // 第三步，绘制内容\n        if (!dirtyOpaque)\n           onDraw(canvas);//核心方法\n\n        //第四步，分发绘制子View\n        dispatchDraw(canvas);\n\n        //第五步，绘制fade效果和restore Layers\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        // Step 6, draw decorations (scrollbars)\n        onDrawScrollBars(canvas);\n    }\n```\n从此方法，我们知道View的draw()分五步,分别为：\n\n- 第一步，如果有背景，绘制背景\n- 第二步，保存画布的层级\n- 第三步，绘制内容\n- 第四步，分发绘制子View\n- 第五步，绘制fade效果和restore Layers\n\n由于我们的DecorView是FrameLayout,是ViewGroup，所以我们来看一下第四步，分发绘制子View，来看ViewGroup中dispatchDraw()方法(此方法主要是ViewGroup中实现)\n```java\n  protected void dispatchDraw(Canvas canvas) {\n        final int count = mChildrenCount;\n        final View[] children = mChildren;\n        .......\n\n        if ((flags & FLAG_USE_CHILD_DRAWING_ORDER) == 0) {\n            for (int i = 0; i < count; i++) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                    more |= drawChild(canvas, child, drawingTime);\n                }\n            }\n        } else {\n            for (int i = 0; i < count; i++) {\n                final View child = children[getChildDrawingOrder(count, i)];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                    more |= drawChild(canvas, child, drawingTime);\n                }\n            }\n        }\n\n        // Draw any disappearing views that have animations\n        if (mDisappearingChildren != null) {\n            final ArrayList<View> disappearingChildren = mDisappearingChildren;\n            final int disappearingCount = disappearingChildren.size() - 1;\n            // Go backwards -- we may delete as animations finish\n            for (int i = disappearingCount; i >= 0; i--) {\n                final View child = disappearingChildren.get(i);\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n       .......\n    }\n\n    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n        return child.draw(canvas, this, drawingTime);\n    }\n```\n通过遍历ViewGroup中的子View，然后在调用子View的draw方法，这里draw()方法和我们前面的view的draw()有点不一样，因为是三个参数的，我们再来看此方法\n```java\n  /**\n     * This method is called by ViewGroup.drawChild() to have each child view draw itself.\n     * This draw() method is an implementation detail and is not intended to be overridden or\n     * to be called from anywhere else other than ViewGroup.drawChild().\n     */\n    boolean draw(Canvas canvas, ViewGroup parent, long drawingTime) {\n        ......\n        if (hasNoCache) {\n          .......\n\n            if (!layerRendered) {\n                if (!hasDisplayList) {\n                    // Fast path for layouts with no backgrounds\n                    if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {\n                        mPrivateFlags &= ~DIRTY_MASK;\n                        dispatchDraw(canvas);\n                    } else {\n                        draw(canvas);\n                    }\n                } else {\n                    mPrivateFlags &= ~DIRTY_MASK;\n                    ((HardwareCanvas) canvas).drawDisplayList(displayList, null, flags);\n                }\n            }\n        } else if (cache != null) {\n           .....\n           \n        }\n         ......\n\n        return more;\n    }\n```\n可以发现，最后还是调用回了View的draw(canvas)方法。所以对于View的draw(绘制)，其实也和measure(测量)和layout(布局)一样，如果View是ViewGroup，就是在draw的时候会进行分发绘制子View，如果view就是View,那就会调用View(或自定义View)的onDraw()方法，绘制内容。\n\n到这里，我们View的三大绘制原理就分析完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n[Android View 测量流程(Measure)完全解析](http://blog.csdn.net/a553181867/article/details/51494058)\n\n[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tech_android_framework_view_draw.md","raw":"---\nlayout: post\ntitle: \"View绘制三大流程源码分析\"\ndate: 1/8/2018 7:39:30 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- Android框架源码解析\n---\n---\n在上篇博文[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，关于DecorView作为Activity、Window中的顶级View的绘制，我们已经作了一个详细的分析。但在具体说到View的绘制的时候，我们没有详细说明，所以本篇博文将会对View的绘制原理作深度分析。\n\n在开始分析之前，我们需要了解一些概念，如：\n\n- **View：**是所有UI组件的基类,是Android平台中用户界面体现的基础单位。\n- **ViewGroup:**是容纳UI组件的容器,它本身也是View的子类。\n- **ViewRootImpl:**是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。\n- **MeasureSpec：** View的内部类，主要就是View测量模式的工具类\n\n# 一、View绘制三大流程分析\n在DecorView的具体绘制中，我们涉及了View绘制的三大流程，具体分别为measure(测量)、layout(布局)和draw(绘制)。下面我们就来一一分析：\n<!-- more -->\n\n**1.performMeasure(测量)**\n\n我们知道ViewRootImpl是View绘制的辅助类，View的绘制都是在ViewRootImpl的帮助下完成的，所以要了解View的measure(测量)，我们就必须看看ViewRootImpl中的performMeasure()方法\n```java\n    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"measure\");\n        try {\n            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n在[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们知道mView就是DecorView,而**DecorView继承于FrameLayout,FrameLayout又继承于ViewGroup，ViewGroup又继承于View**，根据他们之间的关系，我们知道，mView.measure()是调用了父类View的measure()方法(因为只有View有measure方法)，所以来分析View的measure()方法\n```java\n    public final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n        if ((mPrivateFlags & FORCE_LAYOUT) == FORCE_LAYOUT ||\n                widthMeasureSpec != mOldWidthMeasureSpec ||\n            ........\n\n            onMeasure(widthMeasureSpec, heightMeasureSpec);//核心方法\n\n            ........\n        }\n\n        mOldWidthMeasureSpec = widthMeasureSpec;\n        mOldHeightMeasureSpec = heightMeasureSpec;\n    }\n```\n此onMeasure()方法，在DecorView，Framelayout和View中都有定义，并且DecorView和FrameLayout重载了此方法，根据调用关系，这里调用了DecorView的onMeasure(),我们来看看此方法\n```java\n @Override\n        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n            final DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();\n            final boolean isPortrait = metrics.widthPixels < metrics.heightPixels;\n\n            final int widthMode = getMode(widthMeasureSpec);\n            final int heightMode = getMode(heightMeasureSpec);\n\n            ......\n\n            super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n            ......\n        }\n```\n关于测量模式，这里我们先不说，后面我们会说到，这里调用了父类FrameLayout中的onMeasure()方法，这里我们来看一下源码\n```java\n  @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int count = getChildCount();\n\n        ........//计算top,left,bottom,right的margin值，从而确定FrameLayout的宽高\n\n        //设置宽高\n        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),\n                resolveSizeAndState(maxHeight, heightMeasureSpec,\n                        childState << MEASURED_HEIGHT_STATE_SHIFT));\n\n        count = mMatchParentChildren.size();\n        if (count > 1) {\n            for (int i = 0; i < count; i++) {\n                final View child = mMatchParentChildren.get(i);//获取子View\n\n                final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();//子View配置参数\n                int childWidthMeasureSpec;\n                int childHeightMeasureSpec;\n                \n                if (lp.width == LayoutParams.MATCH_PARENT) {\n                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -\n                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -\n                            lp.leftMargin - lp.rightMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +\n                            lp.leftMargin + lp.rightMargin,\n                            lp.width);\n                }\n                \n                if (lp.height == LayoutParams.MATCH_PARENT) {\n                    childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() -\n                            getPaddingTopWithForeground() - getPaddingBottomWithForeground() -\n                            lp.topMargin - lp.bottomMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,\n                            getPaddingTopWithForeground() + getPaddingBottomWithForeground() +\n                            lp.topMargin + lp.bottomMargin,\n                            lp.height);\n                }\n\n                child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n            }\n        }\n    }\n```\n由于FrameLayout是一个容器，可以装载其他的View，所以这里需要进行遍历其中的子View，并一一进行measure(测量)。\n\n在具体说此方法前，我们先要了解一下View的测量模式及MeasureSpec类，具体我们先来看看MeasureSpec类的源码\n```java\n    public static class MeasureSpec {\n\n        private static final int MODE_SHIFT = 30;\n        private static final int MODE_MASK  = 0x3 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The parent has not imposed any constraint\n         * on the child. It can be whatever size it wants.\n         * 父View不对子View有任何限制，子View需要多大就多大\n         */\n        public static final int UNSPECIFIED = 0 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The parent has determined an exact size\n         * for the child. The child is going to be given those bounds regardless\n         * of how big it wants to be.\n         * 父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数* 值这两种模式\n         */\n        public static final int EXACTLY     = 1 << MODE_SHIFT;\n\n        /**\n         * Measure specification mode: The child can be as large as it wants up\n         * to the specified size.\n         * 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。\n         */\n        public static final int AT_MOST     = 2 << MODE_SHIFT;\n\n\n       /**\n         * 用实际值和测量模式组装成measureSpec测量规格\n         * 将size和mode打包成一个32位的int型数值\n         * 高2位表示SpecMode，测量模式，低30位表示SpecSize，某种测量模式下的规格大小\n         */\n        public static int makeMeasureSpec(int size, int mode) {\n            return size + mode;\n        }\n\n        //将32位的MeasureSpec解包，返回SpecMode,测量模式(EXACTLY、UNSPECIFIED或AT_MOST）\n        public static int getMode(int measureSpec) {\n            return (measureSpec & MODE_MASK);\n        }\n\n        \n        //将32位的MeasureSpec解包，返回SpecSize\n        public static int getSize(int measureSpec) {\n            return (measureSpec & ~MODE_MASK);\n        }\n    }\n```\n这里主要通过位运算，来实现View的三种测量模式UNSPECIFIED、EXACTLY和AT_MOST。相关定义如下：\n\n- **UNSPECIFIED：**父View不对子View有任何限制，子View需要多大就多大\n- **EXACTLY：**父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数值这两种模式\n- **AT_MOST：** 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。\n\n我们继续上面FrameLayout的onMeasure()方法继续分析，可以发现，此方法主要就是组装子View宽高的测量规格MeasureSpec，然后作为参数传给子View的measure()方法。这里我们只来看一个组装就好，我们来看宽的组装的测量规格MeasureSpec，我们来看看相关代码\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        ........\n               final View child = mMatchParentChildren.get(i);//获取子View\n\n                final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();//子View配置参数\n                int childWidthMeasureSpec;\n                int childHeightMeasureSpec;\n                \n                if (lp.width == LayoutParams.MATCH_PARENT) {\n                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -\n                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -\n                            lp.leftMargin - lp.rightMargin,\n                            MeasureSpec.EXACTLY);\n                } else {\n                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,\n                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +\n                            lp.leftMargin + lp.rightMargin,\n                            lp.width);\n                }\n\n      ........\n}\n```\n当子View的布局参数lp.width为LayoutParams.MATCH_PARENT时，生成后的测量规格MeasureSpec是以测量模式为MeasureSpec.EXACTLY的值。当lp.width不为LayoutParams.MATCH_PARENT时，这是调用了ViewGroup中的getChildMeasureSpec()方法，来生成相关值，这里我们来看此方法\n```java\n  public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = 0;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n```\n这里主要传入了FrameLayout的测量规格MeasureSpec，根据FrameLayout的测量规格和子View具体的padding和childDimension值，从而决定子view宽的测量规格MeasureSpec。具体创建细节，这里就不说。回到FrameLayout的onMeasure()方法，这样当子View的宽高的测量规格都计算出来之后，就会调用子View的measure()方法。如果子View不再是ViewGroup，那样就会调用子View(或自定义View)的onMeasure()方法，从而完成View的测量；如果子View还是ViewGroup，那就会按我们说的逻辑再走一遍measure方法。\n\n**2.performLayout(布局)**\n说完View绘制的measure(测量)，我们来看看View绘制的layout(布局)。同样的，我们先来看ViewRootImpl中的performLayout()方法\n```java\n    private void performLayout() {\n        mLayoutRequested = false;\n        mScrollMayChange = true;\n\n        final View host = mView;\n        if (DEBUG_ORIENTATION || DEBUG_LAYOUT) {\n            Log.v(TAG, \"Laying out \" + host + \" to (\" +\n                    host.getMeasuredWidth() + \", \" + host.getMeasuredHeight() + \")\");\n        }\n\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"layout\");\n        try {\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\n        } finally {\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n        }\n    }\n```\n由相关继承类的关系，我们知道，这里调用的是View的layout()方法\n```java\n public void layout(int l, int t, int r, int b) {\n        int oldL = mLeft;\n        int oldT = mTop;\n        int oldB = mBottom;\n        int oldR = mRight;\n        boolean changed = setFrame(l, t, r, b); \n        if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {\n\n            onLayout(changed, l, t, r, b);//核心方法\n\n            mPrivateFlags &= ~LAYOUT_REQUIRED;\n\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnLayoutChangeListeners != null) {\n                ArrayList<OnLayoutChangeListener> listenersCopy =\n                        (ArrayList<OnLayoutChangeListener>)li.mOnLayoutChangeListeners.clone();\n                int numListeners = listenersCopy.size();\n                for (int i = 0; i < numListeners; ++i) {\n                    listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);\n                }\n            }\n        }\n        mPrivateFlags &= ~FORCE_LAYOUT;\n    }\n```\n通过源码我们知道，ViewGroup是一个抽象的View的子类，而FrameLayout是ViewGroup的实现类，所以这里onLayout()是FrameLayout中的方法，我们来看一下此方法\n```java\n  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        final int count = getChildCount();\n\n        final int parentLeft = getPaddingLeftWithForeground();\n        final int parentRight = right - left - getPaddingRightWithForeground();\n\n        final int parentTop = getPaddingTopWithForeground();\n        final int parentBottom = bottom - top - getPaddingBottomWithForeground();\n\n        mForegroundBoundsChanged = true;\n        \n        for (int i = 0; i < count; i++) {\n            final View child = getChildAt(i);\n            if (child.getVisibility() != GONE) {\n                final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n                final int width = child.getMeasuredWidth();\n                final int height = child.getMeasuredHeight();\n\n                int childLeft;\n                int childTop;\n\n                int gravity = lp.gravity;\n                if (gravity == -1) {\n                    gravity = DEFAULT_CHILD_GRAVITY;\n                }\n\n                final int layoutDirection = getResolvedLayoutDirection();\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\n                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;\n\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\n                    case Gravity.LEFT:\n                        childLeft = parentLeft + lp.leftMargin;\n                        break;\n                    case Gravity.CENTER_HORIZONTAL:\n                        childLeft = parentLeft + (parentRight - parentLeft - width) / 2 +\n                        lp.leftMargin - lp.rightMargin;\n                        break;\n                    case Gravity.RIGHT:\n                        childLeft = parentRight - width - lp.rightMargin;\n                        break;\n                    default:\n                        childLeft = parentLeft + lp.leftMargin;\n                }\n\n                switch (verticalGravity) {\n                    case Gravity.TOP:\n                        childTop = parentTop + lp.topMargin;\n                        break;\n                    case Gravity.CENTER_VERTICAL:\n                        childTop = parentTop + (parentBottom - parentTop - height) / 2 +\n                        lp.topMargin - lp.bottomMargin;\n                        break;\n                    case Gravity.BOTTOM:\n                        childTop = parentBottom - height - lp.bottomMargin;\n                        break;\n                    default:\n                        childTop = parentTop + lp.topMargin;\n                }\n                child.layout(childLeft, childTop, childLeft + width, childTop + height);\n            }\n        }\n    }\n```\n这里主要就是通过padding和margin算出子View的top,left,bottom,right四个顶点的值，从而再调其子View的layout方法。如果子View child不是ViewGroup，最后直接调用子View(或自定义View)的onLayout()方法，如果child是ViewGroup，那就再走一遍流程。\n\n**3.performDraw(绘制)**\n\n从[DecorView绘制流程源码分析](http://blog.csdn.net/awenyini/article/details/78983463)中，我们知道performDraw()绘制有两种方式，分别为Hardware渲染(硬件加速)和Software渲染，因为两种绘制方式最后也都走到调用View的draw()方法，所以这里我们来看看software渲染方式的绘制\n```java\n private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int yoff,\n            boolean scalingRequired, Rect dirty) {\n\n        // Draw with software renderer.\n        Canvas canvas;\n        try {\n            .......\n\n            canvas = mSurface.lockCanvas(dirty);\n\n           ......\n          \n        } catch (Surface.OutOfResourcesException e) {\n           .....\n        } catch (IllegalArgumentException e) {\n          .....\n        }\n\n        try {\n            .......\n            try {\n\n               ......\n\n                mView.draw(canvas);//核心方法\n\n                drawAccessibilityFocusedDrawableIfNeeded(canvas);\n            } finally {\n                if (!attachInfo.mSetIgnoreDirtyState) {\n                    // Only clear the flag if it was not set during the mView.draw() call\n                    attachInfo.mIgnoreDirtyState = false;\n                }\n            }\n        } finally {\n          .....\n        }\n        return true;\n    }\n```\n同上，通过分析知，这里mView.draw(canvas)其实是调用View.draw(canvas)方法，让我们来看看此方法\n```java\n  public void draw(Canvas canvas) {\n        final int privateFlags = mPrivateFlags;\n        final boolean dirtyOpaque = (privateFlags & DIRTY_MASK) == DIRTY_OPAQUE &&\n                (mAttachInfo == null || !mAttachInfo.mIgnoreDirtyState);\n        mPrivateFlags = (privateFlags & ~DIRTY_MASK) | DRAWN;\n\n        /*\n         * Draw traversal performs several drawing steps which must be executed\n         * in the appropriate order:\n         *\n         *      1. Draw the background\n         *      2. If necessary, save the canvas' layers to prepare for fading\n         *      3. Draw view's content\n         *      4. Draw children\n         *      5. If necessary, draw the fading edges and restore layers\n         *      6. Draw decorations (scrollbars for instance)\n         */\n\n        // 第一步,如果有背景，绘制背景\n        int saveCount;\n\n        if (!dirtyOpaque) {\n            final Drawable background = mBackground;\n            if (background != null) {\n                final int scrollX = mScrollX;\n                final int scrollY = mScrollY;\n\n                if (mBackgroundSizeChanged) {\n                    background.setBounds(0, 0,  mRight - mLeft, mBottom - mTop);\n                    mBackgroundSizeChanged = false;\n                }\n\n                if ((scrollX | scrollY) == 0) {\n                    background.draw(canvas);\n                } else {\n                    canvas.translate(scrollX, scrollY);\n                    background.draw(canvas);\n                    canvas.translate(-scrollX, -scrollY);\n                }\n            }\n        }\n        ........\n\n        //第二步,保存画布的层级\n        int paddingLeft = mPaddingLeft;\n\n        final boolean offsetRequired = isPaddingOffsetRequired();\n        if (offsetRequired) {\n            paddingLeft += getLeftPaddingOffset();\n        }\n\n        int left = mScrollX + paddingLeft;\n        int right = left + mRight - mLeft - mPaddingRight - paddingLeft;\n        int top = mScrollY + getFadeTop(offsetRequired);\n        int bottom = top + getFadeHeight(offsetRequired);\n\n        if (offsetRequired) {\n            right += getRightPaddingOffset();\n            bottom += getBottomPaddingOffset();\n        }\n\n        final ScrollabilityCache scrollabilityCache = mScrollCache;\n        final float fadeHeight = scrollabilityCache.fadingEdgeLength;\n        int length = (int) fadeHeight;\n\n        // clip the fade length if top and bottom fades overlap\n        // overlapping fades produce odd-looking artifacts\n        if (verticalEdges && (top + length > bottom - length)) {\n            length = (bottom - top) / 2;\n        }\n\n        // also clip horizontal fades if necessary\n        if (horizontalEdges && (left + length > right - length)) {\n            length = (right - left) / 2;\n        }\n\n        if (verticalEdges) {\n            topFadeStrength = Math.max(0.0f, Math.min(1.0f, getTopFadingEdgeStrength()));\n            drawTop = topFadeStrength * fadeHeight > 1.0f;\n            bottomFadeStrength = Math.max(0.0f, Math.min(1.0f, getBottomFadingEdgeStrength()));\n            drawBottom = bottomFadeStrength * fadeHeight > 1.0f;\n        }\n\n        if (horizontalEdges) {\n            leftFadeStrength = Math.max(0.0f, Math.min(1.0f, getLeftFadingEdgeStrength()));\n            drawLeft = leftFadeStrength * fadeHeight > 1.0f;\n            rightFadeStrength = Math.max(0.0f, Math.min(1.0f, getRightFadingEdgeStrength()));\n            drawRight = rightFadeStrength * fadeHeight > 1.0f;\n        }\n\n        saveCount = canvas.getSaveCount();\n\n        int solidColor = getSolidColor();\n        if (solidColor == 0) {\n            final int flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;\n\n            if (drawTop) {\n                canvas.saveLayer(left, top, right, top + length, null, flags);\n            }\n\n            if (drawBottom) {\n                canvas.saveLayer(left, bottom - length, right, bottom, null, flags);\n            }\n\n            if (drawLeft) {\n                canvas.saveLayer(left, top, left + length, bottom, null, flags);\n            }\n\n            if (drawRight) {\n                canvas.saveLayer(right - length, top, right, bottom, null, flags);\n            }\n        } else {\n            scrollabilityCache.setFadeColor(solidColor);\n        }\n\n        // 第三步，绘制内容\n        if (!dirtyOpaque)\n           onDraw(canvas);//核心方法\n\n        //第四步，分发绘制子View\n        dispatchDraw(canvas);\n\n        //第五步，绘制fade效果和restore Layers\n        final Paint p = scrollabilityCache.paint;\n        final Matrix matrix = scrollabilityCache.matrix;\n        final Shader fade = scrollabilityCache.shader;\n\n        if (drawTop) {\n            matrix.setScale(1, fadeHeight * topFadeStrength);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, top, right, top + length, p);\n        }\n\n        if (drawBottom) {\n            matrix.setScale(1, fadeHeight * bottomFadeStrength);\n            matrix.postRotate(180);\n            matrix.postTranslate(left, bottom);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, bottom - length, right, bottom, p);\n        }\n\n        if (drawLeft) {\n            matrix.setScale(1, fadeHeight * leftFadeStrength);\n            matrix.postRotate(-90);\n            matrix.postTranslate(left, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(left, top, left + length, bottom, p);\n        }\n\n        if (drawRight) {\n            matrix.setScale(1, fadeHeight * rightFadeStrength);\n            matrix.postRotate(90);\n            matrix.postTranslate(right, top);\n            fade.setLocalMatrix(matrix);\n            canvas.drawRect(right - length, top, right, bottom, p);\n        }\n\n        canvas.restoreToCount(saveCount);\n\n        // Step 6, draw decorations (scrollbars)\n        onDrawScrollBars(canvas);\n    }\n```\n从此方法，我们知道View的draw()分五步,分别为：\n\n- 第一步，如果有背景，绘制背景\n- 第二步，保存画布的层级\n- 第三步，绘制内容\n- 第四步，分发绘制子View\n- 第五步，绘制fade效果和restore Layers\n\n由于我们的DecorView是FrameLayout,是ViewGroup，所以我们来看一下第四步，分发绘制子View，来看ViewGroup中dispatchDraw()方法(此方法主要是ViewGroup中实现)\n```java\n  protected void dispatchDraw(Canvas canvas) {\n        final int count = mChildrenCount;\n        final View[] children = mChildren;\n        .......\n\n        if ((flags & FLAG_USE_CHILD_DRAWING_ORDER) == 0) {\n            for (int i = 0; i < count; i++) {\n                final View child = children[i];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                    more |= drawChild(canvas, child, drawingTime);\n                }\n            }\n        } else {\n            for (int i = 0; i < count; i++) {\n                final View child = children[getChildDrawingOrder(count, i)];\n                if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE || child.getAnimation() != null) {\n                    more |= drawChild(canvas, child, drawingTime);\n                }\n            }\n        }\n\n        // Draw any disappearing views that have animations\n        if (mDisappearingChildren != null) {\n            final ArrayList<View> disappearingChildren = mDisappearingChildren;\n            final int disappearingCount = disappearingChildren.size() - 1;\n            // Go backwards -- we may delete as animations finish\n            for (int i = disappearingCount; i >= 0; i--) {\n                final View child = disappearingChildren.get(i);\n                more |= drawChild(canvas, child, drawingTime);\n            }\n        }\n       .......\n    }\n\n    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\n        return child.draw(canvas, this, drawingTime);\n    }\n```\n通过遍历ViewGroup中的子View，然后在调用子View的draw方法，这里draw()方法和我们前面的view的draw()有点不一样，因为是三个参数的，我们再来看此方法\n```java\n  /**\n     * This method is called by ViewGroup.drawChild() to have each child view draw itself.\n     * This draw() method is an implementation detail and is not intended to be overridden or\n     * to be called from anywhere else other than ViewGroup.drawChild().\n     */\n    boolean draw(Canvas canvas, ViewGroup parent, long drawingTime) {\n        ......\n        if (hasNoCache) {\n          .......\n\n            if (!layerRendered) {\n                if (!hasDisplayList) {\n                    // Fast path for layouts with no backgrounds\n                    if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {\n                        mPrivateFlags &= ~DIRTY_MASK;\n                        dispatchDraw(canvas);\n                    } else {\n                        draw(canvas);\n                    }\n                } else {\n                    mPrivateFlags &= ~DIRTY_MASK;\n                    ((HardwareCanvas) canvas).drawDisplayList(displayList, null, flags);\n                }\n            }\n        } else if (cache != null) {\n           .....\n           \n        }\n         ......\n\n        return more;\n    }\n```\n可以发现，最后还是调用回了View的draw(canvas)方法。所以对于View的draw(绘制)，其实也和measure(测量)和layout(布局)一样，如果View是ViewGroup，就是在draw的时候会进行分发绘制子View，如果view就是View,那就会调用View(或自定义View)的onDraw()方法，绘制内容。\n\n到这里，我们View的三大绘制原理就分析完了。\n\n**注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。**\n\n# 三、参考文档\n[Android View 测量流程(Measure)完全解析](http://blog.csdn.net/a553181867/article/details/51494058)\n\n[View的绘制原理](http://blog.csdn.net/u014316462/article/details/52054352)\n\n\n\n\n\n\n\n\n\n\n","slug":"tech_android_framework_view_draw","published":1,"updated":"2019-06-27T08:15:15.321Z","photos":[],"link":"","_id":"cjxfjaetf006fystg9xusg2sk","content":"<hr>\n<p>在上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>中，关于DecorView作为Activity、Window中的顶级View的绘制，我们已经作了一个详细的分析。但在具体说到View的绘制的时候，我们没有详细说明，所以本篇博文将会对View的绘制原理作深度分析。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>View：</strong>是所有UI组件的基类,是Android平台中用户界面体现的基础单位。</li>\n<li><strong>ViewGroup:</strong>是容纳UI组件的容器,它本身也是View的子类。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>MeasureSpec：</strong> View的内部类，主要就是View测量模式的工具类</li>\n</ul>\n<h1 id=\"一、View绘制三大流程分析\"><a href=\"#一、View绘制三大流程分析\" class=\"headerlink\" title=\"一、View绘制三大流程分析\"></a>一、View绘制三大流程分析</h1><p>在DecorView的具体绘制中，我们涉及了View绘制的三大流程，具体分别为measure(测量)、layout(布局)和draw(绘制)。下面我们就来一一分析：<br><a id=\"more\"></a></p>\n<p><strong>1.performMeasure(测量)</strong></p>\n<p>我们知道ViewRootImpl是View绘制的辅助类，View的绘制都是在ViewRootImpl的帮助下完成的，所以要了解View的measure(测量)，我们就必须看看ViewRootImpl中的performMeasure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"measure\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>中，我们知道mView就是DecorView,而<strong>DecorView继承于FrameLayout,FrameLayout又继承于ViewGroup，ViewGroup又继承于View</strong>，根据他们之间的关系，我们知道，mView.measure()是调用了父类View的measure()方法(因为只有View有measure方法)，所以来分析View的measure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; FORCE_LAYOUT) == FORCE_LAYOUT ||</div><div class=\"line\">            widthMeasureSpec != mOldWidthMeasureSpec ||</div><div class=\"line\">        ........</div><div class=\"line\"></div><div class=\"line\">        onMeasure(widthMeasureSpec, heightMeasureSpec);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">        ........</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mOldWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">    mOldHeightMeasureSpec = heightMeasureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此onMeasure()方法，在DecorView，Framelayout和View中都有定义，并且DecorView和FrameLayout重载了此方法，根据调用关系，这里调用了DecorView的onMeasure(),我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isPortrait = metrics.widthPixels &lt; metrics.heightPixels;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = getMode(widthMeasureSpec);</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">           ......</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">           ......</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>关于测量模式，这里我们先不说，后面我们会说到，这里调用了父类FrameLayout中的onMeasure()方法，这里我们来看一下源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">      ........<span class=\"comment\">//计算top,left,bottom,right的margin值，从而确定FrameLayout的宽高</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//设置宽高</span></div><div class=\"line\">      setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">              resolveSizeAndState(maxHeight, heightMeasureSpec,</div><div class=\"line\">                      childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\"></div><div class=\"line\">      count = mMatchParentChildren.size();</div><div class=\"line\">      <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = mMatchParentChildren.get(i);<span class=\"comment\">//获取子View</span></div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();<span class=\"comment\">//子View配置参数</span></div><div class=\"line\">              <span class=\"keyword\">int</span> childWidthMeasureSpec;</div><div class=\"line\">              <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                  childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -</div><div class=\"line\">                          getPaddingLeftWithForeground() - getPaddingRightWithForeground() -</div><div class=\"line\">                          lp.leftMargin - lp.rightMargin,</div><div class=\"line\">                          MeasureSpec.EXACTLY);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                          getPaddingLeftWithForeground() + getPaddingRightWithForeground() +</div><div class=\"line\">                          lp.leftMargin + lp.rightMargin,</div><div class=\"line\">                          lp.width);</div><div class=\"line\">              &#125;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (lp.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                  childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() -</div><div class=\"line\">                          getPaddingTopWithForeground() - getPaddingBottomWithForeground() -</div><div class=\"line\">                          lp.topMargin - lp.bottomMargin,</div><div class=\"line\">                          MeasureSpec.EXACTLY);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,</div><div class=\"line\">                          getPaddingTopWithForeground() + getPaddingBottomWithForeground() +</div><div class=\"line\">                          lp.topMargin + lp.bottomMargin,</div><div class=\"line\">                          lp.height);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由于FrameLayout是一个容器，可以装载其他的View，所以这里需要进行遍历其中的子View，并一一进行measure(测量)。</p>\n<p>在具体说此方法前，我们先要了解一下View的测量模式及MeasureSpec类，具体我们先来看看MeasureSpec类的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeasureSpec</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK  = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Measure specification mode: The parent has not imposed any constraint</div><div class=\"line\">     * on the child. It can be whatever size it wants.</div><div class=\"line\">     * 父View不对子View有任何限制，子View需要多大就多大</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Measure specification mode: The parent has determined an exact size</div><div class=\"line\">     * for the child. The child is going to be given those bounds regardless</div><div class=\"line\">     * of how big it wants to be.</div><div class=\"line\">     * 父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数* 值这两种模式</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY     = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Measure specification mode: The child can be as large as it wants up</div><div class=\"line\">     * to the specified size.</div><div class=\"line\">     * 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST     = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * 用实际值和测量模式组装成measureSpec测量规格</div><div class=\"line\">     * 将size和mode打包成一个32位的int型数值</div><div class=\"line\">     * 高2位表示SpecMode，测量模式，低30位表示SpecSize，某种测量模式下的规格大小</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//将32位的MeasureSpec解包，返回SpecMode,测量模式(EXACTLY、UNSPECIFIED或AT_MOST）</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//将32位的MeasureSpec解包，返回SpecSize</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要通过位运算，来实现View的三种测量模式UNSPECIFIED、EXACTLY和AT_MOST。相关定义如下：</p>\n<ul>\n<li><strong>UNSPECIFIED：</strong>父View不对子View有任何限制，子View需要多大就多大</li>\n<li><strong>EXACTLY：</strong>父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数值这两种模式</li>\n<li><strong>AT_MOST：</strong> 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。</li>\n</ul>\n<p>我们继续上面FrameLayout的onMeasure()方法继续分析，可以发现，此方法主要就是组装子View宽高的测量规格MeasureSpec，然后作为参数传给子View的measure()方法。这里我们只来看一个组装就好，我们来看宽的组装的测量规格MeasureSpec，我们来看看相关代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        ........</div><div class=\"line\">               <span class=\"keyword\">final</span> View child = mMatchParentChildren.get(i);<span class=\"comment\">//获取子View</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();<span class=\"comment\">//子View配置参数</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childWidthMeasureSpec;</div><div class=\"line\">                <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -</div><div class=\"line\">                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -</div><div class=\"line\">                            lp.leftMargin - lp.rightMargin,</div><div class=\"line\">                            MeasureSpec.EXACTLY);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin,</div><div class=\"line\">                            lp.width);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">      ........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当子View的布局参数lp.width为LayoutParams.MATCH_PARENT时，生成后的测量规格MeasureSpec是以测量模式为MeasureSpec.EXACTLY的值。当lp.width不为LayoutParams.MATCH_PARENT时，这是调用了ViewGroup中的getChildMeasureSpec()方法，来生成相关值，这里我们来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要传入了FrameLayout的测量规格MeasureSpec，根据FrameLayout的测量规格和子View具体的padding和childDimension值，从而决定子view宽的测量规格MeasureSpec。具体创建细节，这里就不说。回到FrameLayout的onMeasure()方法，这样当子View的宽高的测量规格都计算出来之后，就会调用子View的measure()方法。如果子View不再是ViewGroup，那样就会调用子View(或自定义View)的onMeasure()方法，从而完成View的测量；如果子View还是ViewGroup，那就会按我们说的逻辑再走一遍measure方法。</p>\n<p><strong>2.performLayout(布局)</strong><br>说完View绘制的measure(测量)，我们来看看View绘制的layout(布局)。同样的，我们先来看ViewRootImpl中的performLayout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mLayoutRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\">    mScrollMayChange = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) &#123;</div><div class=\"line\">        Log.v(TAG, <span class=\"string\">\"Laying out \"</span> + host + <span class=\"string\">\" to (\"</span> +</div><div class=\"line\">                host.getMeasuredWidth() + <span class=\"string\">\", \"</span> + host.getMeasuredHeight() + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由相关继承类的关系，我们知道，这里调用的是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b); </div><div class=\"line\">       <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;</div><div class=\"line\"></div><div class=\"line\">           onLayout(changed, l, t, r, b);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">           mPrivateFlags &amp;= ~LAYOUT_REQUIRED;</div><div class=\"line\"></div><div class=\"line\">           ListenerInfo li = mListenerInfo;</div><div class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                       (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">               <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                   listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mPrivateFlags &amp;= ~FORCE_LAYOUT;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>通过源码我们知道，ViewGroup是一个抽象的View的子类，而FrameLayout是ViewGroup的实现类，所以这里onLayout()是FrameLayout中的方法，我们来看一下此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentLeft = getPaddingLeftWithForeground();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentRight = right - left - getPaddingRightWithForeground();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentTop = getPaddingTopWithForeground();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</div><div class=\"line\"></div><div class=\"line\">      mForegroundBoundsChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> View child = getChildAt(i);</div><div class=\"line\">          <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = child.getMeasuredWidth();</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\">              <span class=\"keyword\">int</span> childTop;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">              <span class=\"keyword\">if</span> (gravity == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                  gravity = DEFAULT_CHILD_GRAVITY;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getResolvedLayoutDirection();</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                      childLeft = parentLeft + lp.leftMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                      childLeft = parentLeft + (parentRight - parentLeft - width) / <span class=\"number\">2</span> +</div><div class=\"line\">                      lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                      childLeft = parentRight - width - lp.rightMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      childLeft = parentLeft + lp.leftMargin;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">switch</span> (verticalGravity) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">                      childTop = parentTop + lp.topMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">                      childTop = parentTop + (parentBottom - parentTop - height) / <span class=\"number\">2</span> +</div><div class=\"line\">                      lp.topMargin - lp.bottomMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">                      childTop = parentBottom - height - lp.bottomMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      childTop = parentTop + lp.topMargin;</div><div class=\"line\">              &#125;</div><div class=\"line\">              child.layout(childLeft, childTop, childLeft + width, childTop + height);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是通过padding和margin算出子View的top,left,bottom,right四个顶点的值，从而再调其子View的layout方法。如果子View child不是ViewGroup，最后直接调用子View(或自定义View)的onLayout()方法，如果child是ViewGroup，那就再走一遍流程。</p>\n<p><strong>3.performDraw(绘制)</strong></p>\n<p>从<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\" target=\"_blank\" rel=\"external\">DecorView绘制流程源码分析</a>中，我们知道performDraw()绘制有两种方式，分别为Hardware渲染(硬件加速)和Software渲染，因为两种绘制方式最后也都走到调用View的draw()方法，所以这里我们来看看software渲染方式的绘制<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawSoftware</span><span class=\"params\">(Surface surface, AttachInfo attachInfo, <span class=\"keyword\">int</span> yoff,</span></span></div><div class=\"line\">           <span class=\"keyword\">boolean</span> scalingRequired, Rect dirty) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Draw with software renderer.</span></div><div class=\"line\">       Canvas canvas;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\"></div><div class=\"line\">           canvas = mSurface.lockCanvas(dirty);</div><div class=\"line\"></div><div class=\"line\">          ......</div><div class=\"line\">         </div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Surface.OutOfResourcesException e) &#123;</div><div class=\"line\">          .....</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\"></div><div class=\"line\">               mView.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">               drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class=\"line\">           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Only clear the flag if it was not set during the mView.draw() call</span></div><div class=\"line\">                   attachInfo.mIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>同上，通过分析知，这里mView.draw(canvas)其实是调用View.draw(canvas)方法，让我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> privateFlags = mPrivateFlags;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> dirtyOpaque = (privateFlags &amp; DIRTY_MASK) == DIRTY_OPAQUE &amp;&amp;</div><div class=\"line\">              (mAttachInfo == <span class=\"keyword\">null</span> || !mAttachInfo.mIgnoreDirtyState);</div><div class=\"line\">      mPrivateFlags = (privateFlags &amp; ~DIRTY_MASK) | DRAWN;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*</span></div><div class=\"line\">       * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">       * in the appropriate order:</div><div class=\"line\">       *</div><div class=\"line\">       *      1. Draw the background</div><div class=\"line\">       *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">       *      3. Draw view's content</div><div class=\"line\">       *      4. Draw children</div><div class=\"line\">       *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">       *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">       */</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 第一步,如果有背景，绘制背景</span></div><div class=\"line\">      <span class=\"keyword\">int</span> saveCount;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">          <span class=\"keyword\">if</span> (background != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (mBackgroundSizeChanged) &#123;</div><div class=\"line\">                  background.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">                  mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  background.draw(canvas);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  canvas.translate(scrollX, scrollY);</div><div class=\"line\">                  background.draw(canvas);</div><div class=\"line\">                  canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      ........</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第二步,保存画布的层级</span></div><div class=\"line\">      <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</div><div class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</div><div class=\"line\">          paddingLeft += getLeftPaddingOffset();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</div><div class=\"line\">      <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</div><div class=\"line\">          right += getRightPaddingOffset();</div><div class=\"line\">          bottom += getBottomPaddingOffset();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</div><div class=\"line\">      <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></div><div class=\"line\">      <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</div><div class=\"line\">          length = (bottom - top) / <span class=\"number\">2</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// also clip horizontal fades if necessary</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</div><div class=\"line\">          length = (right - left) / <span class=\"number\">2</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges) &#123;</div><div class=\"line\">          topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</div><div class=\"line\">          drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">          bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</div><div class=\"line\">          drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges) &#123;</div><div class=\"line\">          leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</div><div class=\"line\">          drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">          rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</div><div class=\"line\">          drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      saveCount = canvas.getSaveCount();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> solidColor = getSolidColor();</div><div class=\"line\">      <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">              canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawBottom) &#123;</div><div class=\"line\">              canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawLeft) &#123;</div><div class=\"line\">              canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawRight) &#123;</div><div class=\"line\">              canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          scrollabilityCache.setFadeColor(solidColor);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 第三步，绘制内容</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!dirtyOpaque)</div><div class=\"line\">         onDraw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第四步，分发绘制子View</span></div><div class=\"line\">      dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第五步，绘制fade效果和restore Layers</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</div><div class=\"line\">      <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</div><div class=\"line\">      <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">          matrix.postTranslate(left, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawBottom) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</div><div class=\"line\">          matrix.postRotate(<span class=\"number\">180</span>);</div><div class=\"line\">          matrix.postTranslate(left, bottom);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, bottom - length, right, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawLeft) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</div><div class=\"line\">          matrix.postRotate(-<span class=\"number\">90</span>);</div><div class=\"line\">          matrix.postTranslate(left, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, top, left + length, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawRight) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</div><div class=\"line\">          matrix.postRotate(<span class=\"number\">90</span>);</div><div class=\"line\">          matrix.postTranslate(right, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(right - length, top, right, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      canvas.restoreToCount(saveCount);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">      onDrawScrollBars(canvas);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>从此方法，我们知道View的draw()分五步,分别为：</p>\n<ul>\n<li>第一步，如果有背景，绘制背景</li>\n<li>第二步，保存画布的层级</li>\n<li>第三步，绘制内容</li>\n<li>第四步，分发绘制子View</li>\n<li>第五步，绘制fade效果和restore Layers</li>\n</ul>\n<p>由于我们的DecorView是FrameLayout,是ViewGroup，所以我们来看一下第四步，分发绘制子View，来看ViewGroup中dispatchDraw()方法(此方法主要是ViewGroup中实现)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">      <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">      .......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> ((flags &amp; FLAG_USE_CHILD_DRAWING_ORDER) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">              <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = children[getChildDrawingOrder(count, i)];</div><div class=\"line\">              <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Draw any disappearing views that have animations</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mDisappearingChildren != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> disappearingCount = disappearingChildren.size() - <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"comment\">// Go backwards -- we may delete as animations finish</span></div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disappearingCount; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = disappearingChildren.get(i);</div><div class=\"line\">              more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">     .......</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历ViewGroup中的子View，然后在调用子View的draw方法，这里draw()方法和我们前面的view的draw()有点不一样，因为是三个参数的，我们再来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * This method is called by ViewGroup.drawChild() to have each child view draw itself.</div><div class=\"line\">   * This draw() method is an implementation detail and is not intended to be overridden or</div><div class=\"line\">   * to be called from anywhere else other than ViewGroup.drawChild().</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas, ViewGroup parent, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">if</span> (hasNoCache) &#123;</div><div class=\"line\">        .......</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (!layerRendered) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!hasDisplayList) &#123;</div><div class=\"line\">                  <span class=\"comment\">// Fast path for layouts with no backgrounds</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> ((mPrivateFlags &amp; SKIP_DRAW) == SKIP_DRAW) &#123;</div><div class=\"line\">                      mPrivateFlags &amp;= ~DIRTY_MASK;</div><div class=\"line\">                      dispatchDraw(canvas);</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      draw(canvas);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  mPrivateFlags &amp;= ~DIRTY_MASK;</div><div class=\"line\">                  ((HardwareCanvas) canvas).drawDisplayList(displayList, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">       ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> more;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，最后还是调用回了View的draw(canvas)方法。所以对于View的draw(绘制)，其实也和measure(测量)和layout(布局)一样，如果View是ViewGroup，就是在draw的时候会进行分发绘制子View，如果view就是View,那就会调用View(或自定义View)的onDraw()方法，绘制内容。</p>\n<p>到这里，我们View的三大绘制原理就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/a553181867/article/details/51494058\" target=\"_blank\" rel=\"external\">Android View 测量流程(Measure)完全解析</a></p>\n<p><a href=\"http://blog.csdn.net/u014316462/article/details/52054352\" target=\"_blank\" rel=\"external\">View的绘制原理</a></p>\n","excerpt":"<hr>\n<p>在上篇博文<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>中，关于DecorView作为Activity、Window中的顶级View的绘制，我们已经作了一个详细的分析。但在具体说到View的绘制的时候，我们没有详细说明，所以本篇博文将会对View的绘制原理作深度分析。</p>\n<p>在开始分析之前，我们需要了解一些概念，如：</p>\n<ul>\n<li><strong>View：</strong>是所有UI组件的基类,是Android平台中用户界面体现的基础单位。</li>\n<li><strong>ViewGroup:</strong>是容纳UI组件的容器,它本身也是View的子类。</li>\n<li><strong>ViewRootImpl:</strong>是View的绘制的辅助类，所有View的绘制都离不开ViewRootImpl。</li>\n<li><strong>MeasureSpec：</strong> View的内部类，主要就是View测量模式的工具类</li>\n</ul>\n<h1 id=\"一、View绘制三大流程分析\"><a href=\"#一、View绘制三大流程分析\" class=\"headerlink\" title=\"一、View绘制三大流程分析\"></a>一、View绘制三大流程分析</h1><p>在DecorView的具体绘制中，我们涉及了View绘制的三大流程，具体分别为measure(测量)、layout(布局)和draw(绘制)。下面我们就来一一分析：<br>","more":"</p>\n<p><strong>1.performMeasure(测量)</strong></p>\n<p>我们知道ViewRootImpl是View绘制的辅助类，View的绘制都是在ViewRootImpl的帮助下完成的，所以要了解View的measure(测量)，我们就必须看看ViewRootImpl中的performMeasure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"measure\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>中，我们知道mView就是DecorView,而<strong>DecorView继承于FrameLayout,FrameLayout又继承于ViewGroup，ViewGroup又继承于View</strong>，根据他们之间的关系，我们知道，mView.measure()是调用了父类View的measure()方法(因为只有View有measure方法)，所以来分析View的measure()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; FORCE_LAYOUT) == FORCE_LAYOUT ||</div><div class=\"line\">            widthMeasureSpec != mOldWidthMeasureSpec ||</div><div class=\"line\">        ........</div><div class=\"line\"></div><div class=\"line\">        onMeasure(widthMeasureSpec, heightMeasureSpec);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">        ........</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mOldWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">    mOldHeightMeasureSpec = heightMeasureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此onMeasure()方法，在DecorView，Framelayout和View中都有定义，并且DecorView和FrameLayout重载了此方法，根据调用关系，这里调用了DecorView的onMeasure(),我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isPortrait = metrics.widthPixels &lt; metrics.heightPixels;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = getMode(widthMeasureSpec);</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = getMode(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">           ......</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">           ......</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>关于测量模式，这里我们先不说，后面我们会说到，这里调用了父类FrameLayout中的onMeasure()方法，这里我们来看一下源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">      ........<span class=\"comment\">//计算top,left,bottom,right的margin值，从而确定FrameLayout的宽高</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//设置宽高</span></div><div class=\"line\">      setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</div><div class=\"line\">              resolveSizeAndState(maxHeight, heightMeasureSpec,</div><div class=\"line\">                      childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));</div><div class=\"line\"></div><div class=\"line\">      count = mMatchParentChildren.size();</div><div class=\"line\">      <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = mMatchParentChildren.get(i);<span class=\"comment\">//获取子View</span></div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();<span class=\"comment\">//子View配置参数</span></div><div class=\"line\">              <span class=\"keyword\">int</span> childWidthMeasureSpec;</div><div class=\"line\">              <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                  childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -</div><div class=\"line\">                          getPaddingLeftWithForeground() - getPaddingRightWithForeground() -</div><div class=\"line\">                          lp.leftMargin - lp.rightMargin,</div><div class=\"line\">                          MeasureSpec.EXACTLY);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                          getPaddingLeftWithForeground() + getPaddingRightWithForeground() +</div><div class=\"line\">                          lp.leftMargin + lp.rightMargin,</div><div class=\"line\">                          lp.width);</div><div class=\"line\">              &#125;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (lp.height == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                  childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() -</div><div class=\"line\">                          getPaddingTopWithForeground() - getPaddingBottomWithForeground() -</div><div class=\"line\">                          lp.topMargin - lp.bottomMargin,</div><div class=\"line\">                          MeasureSpec.EXACTLY);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,</div><div class=\"line\">                          getPaddingTopWithForeground() + getPaddingBottomWithForeground() +</div><div class=\"line\">                          lp.topMargin + lp.bottomMargin,</div><div class=\"line\">                          lp.height);</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由于FrameLayout是一个容器，可以装载其他的View，所以这里需要进行遍历其中的子View，并一一进行measure(测量)。</p>\n<p>在具体说此方法前，我们先要了解一下View的测量模式及MeasureSpec类，具体我们先来看看MeasureSpec类的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeasureSpec</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_SHIFT = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MODE_MASK  = <span class=\"number\">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Measure specification mode: The parent has not imposed any constraint</div><div class=\"line\">     * on the child. It can be whatever size it wants.</div><div class=\"line\">     * 父View不对子View有任何限制，子View需要多大就多大</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNSPECIFIED = <span class=\"number\">0</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Measure specification mode: The parent has determined an exact size</div><div class=\"line\">     * for the child. The child is going to be given those bounds regardless</div><div class=\"line\">     * of how big it wants to be.</div><div class=\"line\">     * 父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数* 值这两种模式</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXACTLY     = <span class=\"number\">1</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Measure specification mode: The child can be as large as it wants up</div><div class=\"line\">     * to the specified size.</div><div class=\"line\">     * 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AT_MOST     = <span class=\"number\">2</span> &lt;&lt; MODE_SHIFT;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">     * 用实际值和测量模式组装成measureSpec测量规格</div><div class=\"line\">     * 将size和mode打包成一个32位的int型数值</div><div class=\"line\">     * 高2位表示SpecMode，测量模式，低30位表示SpecSize，某种测量模式下的规格大小</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">makeMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size + mode;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//将32位的MeasureSpec解包，返回SpecMode,测量模式(EXACTLY、UNSPECIFIED或AT_MOST）</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMode</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (measureSpec &amp; MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//将32位的MeasureSpec解包，返回SpecSize</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(<span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (measureSpec &amp; ~MODE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要通过位运算，来实现View的三种测量模式UNSPECIFIED、EXACTLY和AT_MOST。相关定义如下：</p>\n<ul>\n<li><strong>UNSPECIFIED：</strong>父View不对子View有任何限制，子View需要多大就多大</li>\n<li><strong>EXACTLY：</strong>父View已经测量出子View所需要的精确大小，这时候View的最终大小就是SpecSize所指定的值。对应于match_parent和精确数值这两种模式</li>\n<li><strong>AT_MOST：</strong> 子View的最终大小是父View指定的SpecSize值，并且子View的大小不能大于这个值，即对应wrap_content这种模式。</li>\n</ul>\n<p>我们继续上面FrameLayout的onMeasure()方法继续分析，可以发现，此方法主要就是组装子View宽高的测量规格MeasureSpec，然后作为参数传给子View的measure()方法。这里我们只来看一个组装就好，我们来看宽的组装的测量规格MeasureSpec，我们来看看相关代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        ........</div><div class=\"line\">               <span class=\"keyword\">final</span> View child = mMatchParentChildren.get(i);<span class=\"comment\">//获取子View</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();<span class=\"comment\">//子View配置参数</span></div><div class=\"line\">                <span class=\"keyword\">int</span> childWidthMeasureSpec;</div><div class=\"line\">                <span class=\"keyword\">int</span> childHeightMeasureSpec;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (lp.width == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() -</div><div class=\"line\">                            getPaddingLeftWithForeground() - getPaddingRightWithForeground() -</div><div class=\"line\">                            lp.leftMargin - lp.rightMargin,</div><div class=\"line\">                            MeasureSpec.EXACTLY);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</div><div class=\"line\">                            getPaddingLeftWithForeground() + getPaddingRightWithForeground() +</div><div class=\"line\">                            lp.leftMargin + lp.rightMargin,</div><div class=\"line\">                            lp.width);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">      ........</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当子View的布局参数lp.width为LayoutParams.MATCH_PARENT时，生成后的测量规格MeasureSpec是以测量模式为MeasureSpec.EXACTLY的值。当lp.width不为LayoutParams.MATCH_PARENT时，这是调用了ViewGroup中的getChildMeasureSpec()方法，来生成相关值，这里我们来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</div><div class=\"line\">      <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">      <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">              <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">              <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">              resultSize = size;</div><div class=\"line\">              resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">      <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">          <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">              resultSize = childDimension;</div><div class=\"line\">              resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">              <span class=\"comment\">// be</span></div><div class=\"line\">              resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">              <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">              <span class=\"comment\">// big it should be</span></div><div class=\"line\">              resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">              resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要传入了FrameLayout的测量规格MeasureSpec，根据FrameLayout的测量规格和子View具体的padding和childDimension值，从而决定子view宽的测量规格MeasureSpec。具体创建细节，这里就不说。回到FrameLayout的onMeasure()方法，这样当子View的宽高的测量规格都计算出来之后，就会调用子View的measure()方法。如果子View不再是ViewGroup，那样就会调用子View(或自定义View)的onMeasure()方法，从而完成View的测量；如果子View还是ViewGroup，那就会按我们说的逻辑再走一遍measure方法。</p>\n<p><strong>2.performLayout(布局)</strong><br>说完View绘制的measure(测量)，我们来看看View绘制的layout(布局)。同样的，我们先来看ViewRootImpl中的performLayout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mLayoutRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\">    mScrollMayChange = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) &#123;</div><div class=\"line\">        Log.v(TAG, <span class=\"string\">\"Laying out \"</span> + host + <span class=\"string\">\" to (\"</span> +</div><div class=\"line\">                host.getMeasuredWidth() + <span class=\"string\">\", \"</span> + host.getMeasuredHeight() + <span class=\"string\">\")\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"layout\"</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由相关继承类的关系，我们知道，这里调用的是View的layout()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">       <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b); </div><div class=\"line\">       <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;</div><div class=\"line\"></div><div class=\"line\">           onLayout(changed, l, t, r, b);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">           mPrivateFlags &amp;= ~LAYOUT_REQUIRED;</div><div class=\"line\"></div><div class=\"line\">           ListenerInfo li = mListenerInfo;</div><div class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</div><div class=\"line\">                       (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</div><div class=\"line\">               <span class=\"keyword\">int</span> numListeners = listenersCopy.size();</div><div class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;</div><div class=\"line\">                   listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mPrivateFlags &amp;= ~FORCE_LAYOUT;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>通过源码我们知道，ViewGroup是一个抽象的View的子类，而FrameLayout是ViewGroup的实现类，所以这里onLayout()是FrameLayout中的方法，我们来看一下此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getChildCount();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentLeft = getPaddingLeftWithForeground();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentRight = right - left - getPaddingRightWithForeground();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentTop = getPaddingTopWithForeground();</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</div><div class=\"line\"></div><div class=\"line\">      mForegroundBoundsChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> View child = getChildAt(i);</div><div class=\"line\">          <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = child.getMeasuredWidth();</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = child.getMeasuredHeight();</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">int</span> childLeft;</div><div class=\"line\">              <span class=\"keyword\">int</span> childTop;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">int</span> gravity = lp.gravity;</div><div class=\"line\">              <span class=\"keyword\">if</span> (gravity == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                  gravity = DEFAULT_CHILD_GRAVITY;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutDirection = getResolvedLayoutDirection();</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.LEFT:</div><div class=\"line\">                      childLeft = parentLeft + lp.leftMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.CENTER_HORIZONTAL:</div><div class=\"line\">                      childLeft = parentLeft + (parentRight - parentLeft - width) / <span class=\"number\">2</span> +</div><div class=\"line\">                      lp.leftMargin - lp.rightMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.RIGHT:</div><div class=\"line\">                      childLeft = parentRight - width - lp.rightMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      childLeft = parentLeft + lp.leftMargin;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">switch</span> (verticalGravity) &#123;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.TOP:</div><div class=\"line\">                      childTop = parentTop + lp.topMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.CENTER_VERTICAL:</div><div class=\"line\">                      childTop = parentTop + (parentBottom - parentTop - height) / <span class=\"number\">2</span> +</div><div class=\"line\">                      lp.topMargin - lp.bottomMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">case</span> Gravity.BOTTOM:</div><div class=\"line\">                      childTop = parentBottom - height - lp.bottomMargin;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  <span class=\"keyword\">default</span>:</div><div class=\"line\">                      childTop = parentTop + lp.topMargin;</div><div class=\"line\">              &#125;</div><div class=\"line\">              child.layout(childLeft, childTop, childLeft + width, childTop + height);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这里主要就是通过padding和margin算出子View的top,left,bottom,right四个顶点的值，从而再调其子View的layout方法。如果子View child不是ViewGroup，最后直接调用子View(或自定义View)的onLayout()方法，如果child是ViewGroup，那就再走一遍流程。</p>\n<p><strong>3.performDraw(绘制)</strong></p>\n<p>从<a href=\"http://blog.csdn.net/awenyini/article/details/78983463\">DecorView绘制流程源码分析</a>中，我们知道performDraw()绘制有两种方式，分别为Hardware渲染(硬件加速)和Software渲染，因为两种绘制方式最后也都走到调用View的draw()方法，所以这里我们来看看software渲染方式的绘制<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawSoftware</span><span class=\"params\">(Surface surface, AttachInfo attachInfo, <span class=\"keyword\">int</span> yoff,</div><div class=\"line\">           <span class=\"keyword\">boolean</span> scalingRequired, Rect dirty)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// Draw with software renderer.</span></div><div class=\"line\">       Canvas canvas;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\"></div><div class=\"line\">           canvas = mSurface.lockCanvas(dirty);</div><div class=\"line\"></div><div class=\"line\">          ......</div><div class=\"line\">         </div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (Surface.OutOfResourcesException e) &#123;</div><div class=\"line\">          .....</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           .......</div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\"></div><div class=\"line\">               mView.draw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">               drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class=\"line\">           &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Only clear the flag if it was not set during the mView.draw() call</span></div><div class=\"line\">                   attachInfo.mIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         .....</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>同上，通过分析知，这里mView.draw(canvas)其实是调用View.draw(canvas)方法，让我们来看看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> privateFlags = mPrivateFlags;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> dirtyOpaque = (privateFlags &amp; DIRTY_MASK) == DIRTY_OPAQUE &amp;&amp;</div><div class=\"line\">              (mAttachInfo == <span class=\"keyword\">null</span> || !mAttachInfo.mIgnoreDirtyState);</div><div class=\"line\">      mPrivateFlags = (privateFlags &amp; ~DIRTY_MASK) | DRAWN;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">/*</div><div class=\"line\">       * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">       * in the appropriate order:</div><div class=\"line\">       *</div><div class=\"line\">       *      1. Draw the background</div><div class=\"line\">       *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">       *      3. Draw view's content</div><div class=\"line\">       *      4. Draw children</div><div class=\"line\">       *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">       *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">       */</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 第一步,如果有背景，绘制背景</span></div><div class=\"line\">      <span class=\"keyword\">int</span> saveCount;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> Drawable background = mBackground;</div><div class=\"line\">          <span class=\"keyword\">if</span> (background != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollX = mScrollX;</div><div class=\"line\">              <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scrollY = mScrollY;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (mBackgroundSizeChanged) &#123;</div><div class=\"line\">                  background.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>,  mRight - mLeft, mBottom - mTop);</div><div class=\"line\">                  mBackgroundSizeChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> ((scrollX | scrollY) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                  background.draw(canvas);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  canvas.translate(scrollX, scrollY);</div><div class=\"line\">                  background.draw(canvas);</div><div class=\"line\">                  canvas.translate(-scrollX, -scrollY);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      ........</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第二步,保存画布的层级</span></div><div class=\"line\">      <span class=\"keyword\">int</span> paddingLeft = mPaddingLeft;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> offsetRequired = isPaddingOffsetRequired();</div><div class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</div><div class=\"line\">          paddingLeft += getLeftPaddingOffset();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> left = mScrollX + paddingLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</div><div class=\"line\">      <span class=\"keyword\">int</span> top = mScrollY + getFadeTop(offsetRequired);</div><div class=\"line\">      <span class=\"keyword\">int</span> bottom = top + getFadeHeight(offsetRequired);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (offsetRequired) &#123;</div><div class=\"line\">          right += getRightPaddingOffset();</div><div class=\"line\">          bottom += getBottomPaddingOffset();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</div><div class=\"line\">      <span class=\"keyword\">int</span> length = (<span class=\"keyword\">int</span>) fadeHeight;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// clip the fade length if top and bottom fades overlap</span></div><div class=\"line\">      <span class=\"comment\">// overlapping fades produce odd-looking artifacts</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</div><div class=\"line\">          length = (bottom - top) / <span class=\"number\">2</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// also clip horizontal fades if necessary</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</div><div class=\"line\">          length = (right - left) / <span class=\"number\">2</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (verticalEdges) &#123;</div><div class=\"line\">          topFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getTopFadingEdgeStrength()));</div><div class=\"line\">          drawTop = topFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">          bottomFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getBottomFadingEdgeStrength()));</div><div class=\"line\">          drawBottom = bottomFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (horizontalEdges) &#123;</div><div class=\"line\">          leftFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getLeftFadingEdgeStrength()));</div><div class=\"line\">          drawLeft = leftFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">          rightFadeStrength = Math.max(<span class=\"number\">0.0f</span>, Math.min(<span class=\"number\">1.0f</span>, getRightFadingEdgeStrength()));</div><div class=\"line\">          drawRight = rightFadeStrength * fadeHeight &gt; <span class=\"number\">1.0f</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      saveCount = canvas.getSaveCount();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> solidColor = getSolidColor();</div><div class=\"line\">      <span class=\"keyword\">if</span> (solidColor == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">              canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawBottom) &#123;</div><div class=\"line\">              canvas.saveLayer(left, bottom - length, right, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawLeft) &#123;</div><div class=\"line\">              canvas.saveLayer(left, top, left + length, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (drawRight) &#123;</div><div class=\"line\">              canvas.saveLayer(right - length, top, right, bottom, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          scrollabilityCache.setFadeColor(solidColor);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 第三步，绘制内容</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!dirtyOpaque)</div><div class=\"line\">         onDraw(canvas);<span class=\"comment\">//核心方法</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第四步，分发绘制子View</span></div><div class=\"line\">      dispatchDraw(canvas);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//第五步，绘制fade效果和restore Layers</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Paint p = scrollabilityCache.paint;</div><div class=\"line\">      <span class=\"keyword\">final</span> Matrix matrix = scrollabilityCache.matrix;</div><div class=\"line\">      <span class=\"keyword\">final</span> Shader fade = scrollabilityCache.shader;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">          matrix.postTranslate(left, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawBottom) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * bottomFadeStrength);</div><div class=\"line\">          matrix.postRotate(<span class=\"number\">180</span>);</div><div class=\"line\">          matrix.postTranslate(left, bottom);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, bottom - length, right, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawLeft) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * leftFadeStrength);</div><div class=\"line\">          matrix.postRotate(-<span class=\"number\">90</span>);</div><div class=\"line\">          matrix.postTranslate(left, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(left, top, left + length, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (drawRight) &#123;</div><div class=\"line\">          matrix.setScale(<span class=\"number\">1</span>, fadeHeight * rightFadeStrength);</div><div class=\"line\">          matrix.postRotate(<span class=\"number\">90</span>);</div><div class=\"line\">          matrix.postTranslate(right, top);</div><div class=\"line\">          fade.setLocalMatrix(matrix);</div><div class=\"line\">          canvas.drawRect(right - length, top, right, bottom, p);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      canvas.restoreToCount(saveCount);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">      onDrawScrollBars(canvas);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>从此方法，我们知道View的draw()分五步,分别为：</p>\n<ul>\n<li>第一步，如果有背景，绘制背景</li>\n<li>第二步，保存画布的层级</li>\n<li>第三步，绘制内容</li>\n<li>第四步，分发绘制子View</li>\n<li>第五步，绘制fade效果和restore Layers</li>\n</ul>\n<p>由于我们的DecorView是FrameLayout,是ViewGroup，所以我们来看一下第四步，分发绘制子View，来看ViewGroup中dispatchDraw()方法(此方法主要是ViewGroup中实现)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mChildrenCount;</div><div class=\"line\">      <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">      .......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> ((flags &amp; FLAG_USE_CHILD_DRAWING_ORDER) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = children[i];</div><div class=\"line\">              <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = children[getChildDrawingOrder(count, i)];</div><div class=\"line\">              <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Draw any disappearing views that have animations</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mDisappearingChildren != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> disappearingCount = disappearingChildren.size() - <span class=\"number\">1</span>;</div><div class=\"line\">          <span class=\"comment\">// Go backwards -- we may delete as animations finish</span></div><div class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disappearingCount; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> View child = disappearingChildren.get(i);</div><div class=\"line\">              more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">     .......</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历ViewGroup中的子View，然后在调用子View的draw方法，这里draw()方法和我们前面的view的draw()有点不一样，因为是三个参数的，我们再来看此方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * This method is called by ViewGroup.drawChild() to have each child view draw itself.</div><div class=\"line\">   * This draw() method is an implementation detail and is not intended to be overridden or</div><div class=\"line\">   * to be called from anywhere else other than ViewGroup.drawChild().</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas, ViewGroup parent, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">if</span> (hasNoCache) &#123;</div><div class=\"line\">        .......</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (!layerRendered) &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (!hasDisplayList) &#123;</div><div class=\"line\">                  <span class=\"comment\">// Fast path for layouts with no backgrounds</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> ((mPrivateFlags &amp; SKIP_DRAW) == SKIP_DRAW) &#123;</div><div class=\"line\">                      mPrivateFlags &amp;= ~DIRTY_MASK;</div><div class=\"line\">                      dispatchDraw(canvas);</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      draw(canvas);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  mPrivateFlags &amp;= ~DIRTY_MASK;</div><div class=\"line\">                  ((HardwareCanvas) canvas).drawDisplayList(displayList, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">         .....</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">       ......</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> more;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>可以发现，最后还是调用回了View的draw(canvas)方法。所以对于View的draw(绘制)，其实也和measure(测量)和layout(布局)一样，如果View是ViewGroup，就是在draw的时候会进行分发绘制子View，如果view就是View,那就会调用View(或自定义View)的onDraw()方法，绘制内容。</p>\n<p>到这里，我们View的三大绘制原理就分析完了。</p>\n<p><strong>注：源码采用android-4.1.1_r1版本，建议下载源码然后自己走一遍流程，这样更能加深理解。</strong></p>\n<h1 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h1><p><a href=\"http://blog.csdn.net/a553181867/article/details/51494058\">Android View 测量流程(Measure)完全解析</a></p>\n<p><a href=\"http://blog.csdn.net/u014316462/article/details/52054352\">View的绘制原理</a></p>"},{"layout":"post","title":"Android悬浮窗原理解析","date":"2017-10-17T03:35:14.000Z","comments":1,"_content":"---\n悬浮窗，在大多数应用中还是很少见的，目前我们接触到的悬浮窗，差不多都是一些系统级的应用软件，例如：360安全卫士，腾讯手机管家等；在某些服务行业如金融，餐饮等，也会在应用中添加悬浮窗，例如：美团的偷红包，博闻金融快捷联系等。但两种悬浮窗还是有区别的：\n\n- **系统悬浮窗：所有界面都会展示，包括主屏、锁屏**\n- **应用悬浮窗：只在应用Activity中展示。**\n \n# 一、窗口Window\n在了解悬浮窗之前，首先我们需要认识一下Android窗口Window。Android Framework将窗口分为三个类型：\n\n1. 应用窗口：所谓应用窗口指的就是该窗口对应一个Activity，因此，要创建应用窗口就必须在Activity中完成了。\n2. 子窗口：所谓子窗口指的是必须依附在某个父窗口之上，比如PopWindow，Dialog。\n3. 系统窗口：所谓系统窗口指的是由系统进程创建，不依赖于任何应用或者不依附在任何父窗口之上，如：Toast,来电窗口等。\n\nFramework定义了三种窗口类型，这三种类型定义在WindowManager的内部类LayoutParams中，WindowManager将这三种类型 进行了细化，把每一种类型都用一个int常量来表示，这些常量代表窗口所在的层，WindowManagerService在进行窗口叠加的时候，会按照常量的大小分配不同的层，常量值越大，代表位置越靠上面，所以我们可以猜想一下，应用程序Window的层值常量要小于子Window的层值常量，子Window的层值常量要小于系统Window的层值常量。Window的层级关系如下所示。\n\n![](/assets/img/tech_android_window.png)\n<!-- more -->\n\n- 应用窗口：层级范围是1~99\n- 子窗口：层级范围是1000~1999\n- 系统窗口：层级范围是2000~2999\n\n**1.各级别type值在WindowManager中的定义分别为：**\n\ni.应用窗口（1~99）\n\n```java\n   //第一个应用窗口\n   public static final int FIRST_APPLICATION_WINDOW = 1;\n   //所有程序窗口的base窗口，其他应用程序窗口都显示在它上面\n   public static final int TYPE_BASE_APPLICATION   = 1;\n   //所有Activity的窗口，只能配合Activity在当前APP使用\n   public static final int TYPE_APPLICATION        = 2;\n   //目标应用窗口未启动之前的那个窗口\n   public static final int TYPE_APPLICATION_STARTING = 3;\n   //最后一个应用窗口\n   public static final int LAST_APPLICATION_WINDOW = 99;\n```\nii.子窗口（1000~1999）\n\n```java\n  //第一个子窗口\n  public static final int FIRST_SUB_WINDOW        = 1000;\n  // 面板窗口，显示于宿主窗口的上层,只能配合Activity在当前APP使用\n  public static final int TYPE_APPLICATION_PANEL  = FIRST_SUB_WINDOW;\n  // 媒体窗口（例如视频），显示于宿主窗口下层\n  public static final int TYPE_APPLICATION_MEDIA  = FIRST_SUB_WINDOW+1;\n  // 应用程序窗口的子面板，只能配合Activity在当前APP使用(PopupWindow默认就是这个Type)\n  public static final int TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW+2;\n  //对话框窗口,只能配合Activity在当前APP使用\n  public static final int TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW+3;\n  //\n  public static final int TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW+4;\n  //最后一个子窗口\n public static final int LAST_SUB_WINDOW         = 1999;\n```\n\niii.系统窗口（2000~2999）\n\n```java\n        //系统窗口，非应用程序创建\n        public static final int FIRST_SYSTEM_WINDOW     = 2000;\n        //状态栏，只能有一个状态栏，位于屏幕顶端，其他窗口都位于它下方\n        public static final int TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW;\n        //搜索栏，只能有一个搜索栏，位于屏幕上方\n        public static final int TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+1; \n        //\n        //电话窗口，它用于电话交互（特别是呼入），置于所有应用程序之上，状态栏之下,属于悬浮窗(并且给一个Activity的话按下HOME键会出现看不到桌面上的图标异常情况)\n        public static final int TYPE_PHONE              = FIRST_SYSTEM_WINDOW+2;\n        //\n        //系统警告提示窗口，出现在应用程序窗口之上,属于悬浮窗, 但是会被禁止\n        public static final int TYPE_SYSTEM_ALERT       = FIRST_SYSTEM_WINDOW+3;\n        //\n        //信息窗口，用于显示Toast, 不属于悬浮窗, 但有悬浮窗的功能, 缺点是在Android2.3上无法接收点击事件\n        public static final int TYPE_TOAST              = FIRST_SYSTEM_WINDOW+5;\n        //\n        public static final int TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+4;\n        //锁屏窗口\n        public static final int TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+4;\n        //系统顶层窗口，显示在其他一切内容之上，此窗口不能获得输入焦点，否则影响锁屏\n        public static final int TYPE_SYSTEM_OVERLAY     = FIRST_SYSTEM_WINDOW+6;\n        //电话优先，当锁屏时显示，此窗口不能获得输入焦点，否则影响锁屏\n        public static final int TYPE_PRIORITY_PHONE     = FIRST_SYSTEM_WINDOW+7;\n        //系统对话框窗口\n        public static final int TYPE_SYSTEM_DIALOG      = FIRST_SYSTEM_WINDOW+8;\n        //锁屏时显示的对话框\n        public static final int TYPE_KEYGUARD_DIALOG    = FIRST_SYSTEM_WINDOW+9;\n        //系统内部错误提示，显示在任何窗口之上\n        public static final int TYPE_SYSTEM_ERROR       = FIRST_SYSTEM_WINDOW+10;\n        //内部输入法窗口，显示于普通UI之上，应用程序可重新布局以免被此窗口覆盖\n        public static final int TYPE_INPUT_METHOD       = FIRST_SYSTEM_WINDOW+11;\n        //内部输入法对话框，显示于当前输入法窗口之上\n        public static final int TYPE_INPUT_METHOD_DIALOG= FIRST_SYSTEM_WINDOW+12;\n        //墙纸窗口\n        public static final int TYPE_WALLPAPER          = FIRST_SYSTEM_WINDOW+13;\n        //状态栏的滑动面板\n        public static final int TYPE_STATUS_BAR_PANEL   = FIRST_SYSTEM_WINDOW+14;\n        //安全系统覆盖窗口，这些窗户必须不带输入焦点，否则会干扰键盘\n        public static final int TYPE_SECURE_SYSTEM_OVERLAY = FIRST_SYSTEM_WINDOW+15;\n        //最后一个系统窗口\n        public static final int LAST_SYSTEM_WINDOW      = 2999;\n```\n\n**2.窗口flags显示属性在WindowManager中也有定义：**\n\n```java\n        //窗口特征标记\n        public int flags;\n        //当该window对用户可见的时候，允许锁屏\n        public static final int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON     = 0x00000001;\n        //窗口后面的所有内容都变暗\n        public static final int FLAG_DIM_BEHIND        = 0x00000002;\n        //Flag：窗口后面的所有内容都变模糊\n        public static final int FLAG_BLUR_BEHIND        = 0x00000004;\n        //窗口不能获得焦点\n        public static final int FLAG_NOT_FOCUSABLE      = 0x00000008;\n        //窗口不接受触摸屏事件\n        public static final int FLAG_NOT_TOUCHABLE      = 0x00000010;\n        //即使在该window在可获得焦点情况下，允许该窗口之外的点击事件传递到当前窗口后面的的窗口去\n        public static final int FLAG_NOT_TOUCH_MODAL    = 0x00000020;\n        //当手机处于睡眠状态时，如果屏幕被按下，那么该window将第一个收到触摸事件\n        public static final int FLAG_TOUCHABLE_WHEN_WAKING = 0x00000040;\n        //当该window对用户可见时，屏幕出于常亮状态\n        public static final int FLAG_KEEP_SCREEN_ON     = 0x00000080;\n        //：让window占满整个手机屏幕，不留任何边界\n        public static final int FLAG_LAYOUT_IN_SCREEN   = 0x00000100;\n        //允许窗口超出整个手机屏幕\n        public static final int FLAG_LAYOUT_NO_LIMITS   = 0x00000200;\n        //window全屏显示\n        public static final int FLAG_FULLSCREEN      = 0x00000400;\n        //恢复window非全屏显示\n        public static final int FLAG_FORCE_NOT_FULLSCREEN   = 0x00000800;\n        //开启窗口抖动\n        public static final int FLAG_DITHER             = 0x00001000;\n        //安全内容窗口，该窗口显示时不允许截屏\n        public static final int FLAG_SECURE             = 0x00002000;\n        //锁屏时显示该窗口\n        public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;\n        //系统的墙纸显示在该窗口之后\n        public static final int FLAG_SHOW_WALLPAPER = 0x00100000;\n        //当window被显示的时候，系统将把它当做一个用户活动事件，以点亮手机屏幕\n        public static final int FLAG_TURN_SCREEN_ON = 0x00200000;\n        //该窗口显示，消失键盘\n        public static final int FLAG_DISMISS_KEYGUARD = 0x00400000;\n        //当该window在可以接受触摸屏情况下，让因在该window之外，而发送到后面的window的触摸屏可以支持split touch\n        public static final int FLAG_SPLIT_TOUCH = 0x00800000;\n        //对该window进行硬件加速，该flag必须在Activity或Dialog的Content View之前进行设置\n        public static final int FLAG_HARDWARE_ACCELERATED = 0x01000000;\n        //让window占满整个手机屏幕，不留任何边界\n        public static final int FLAG_LAYOUT_IN_OVERSCAN = 0x02000000;\n        //透明状态栏\n        public static final int FLAG_TRANSLUCENT_STATUS = 0x04000000;\n        //透明导航栏\n        public static final int FLAG_TRANSLUCENT_NAVIGATION = 0x08000000;\n```\n\n**3.添加View到Window的流程代码：**\n\n```java\n\n      contactView = new ContactView(mContext);\n        if (layoutParams == null) {\n            layoutParams = new WindowManager.LayoutParams();\n            layoutParams.width = contactView.width;\n            layoutParams.height = contactView.height;\n            layoutParams.x += ScreenSizeUtil.getScreenWidth();\n            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(150);\n            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 23) {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;//Type设置\n            } else {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;\n            }\n            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;//Flags设置,窗口属性\n            layoutParams.format = PixelFormat.RGBA_8888;\n        }\n        windowManager.addView(contactView, layoutParams);//向窗口中添加View\n```\n\n悬浮窗添加原理：[View添加到Window源码解析](http://www.jianshu.com/p/634cd056b90c)\n\nWindow在Android系统中十分重要，其Activity，Dialog的创建都离不开Window.具体Activity，Dialog是怎么添加到Window上的，详情如：\n[Activity的加载流程](http://www.jianshu.com/p/c5c3ef2b1b03);     \n[Dialog加载绘制流程](http://www.jianshu.com/p/f9303d30eb2b)\n\n# 二、两种悬浮窗\n在前言中已说到，悬浮窗在app中，分为两种：系统级别和应用级别。其中系统级别可以在任何界面展示，包括主屏、锁屏（看需要），应用级别只在应用中展示。通过上面对Window的认识，我们可以知道实现方式：\n\n- **系统级别可以通过type设置为：TYPE_TOAST、TYPE_PHONE、TYPE_SYSTEM_ALERT；**\n- **应用级别可以通过type设置为：TYPE_APPLICATION、TYPE_APPLICATION_ATTACHED_DIALOG；**\n\n**悬浮窗添加流程：**\n\nWindowManager.addView -> ViewRootImpl.setView -> WindowSession.addToDisplay(AIDL进行IPC) -> WindowManagerService.addWindow() -> ViewRootImpl.setView\n\n**1.系统悬浮窗**\n\n对于系统级别的悬浮窗来说，不同的设置，不同的Android版本，需要权限和交互都不同。通过阅读源码android4.4知：\n\nandroid 7.1.1的addWindow方法为：\n\n```java\n\n   public int addWindow(Session session, IWindow client, int seq,\n            WindowManager.LayoutParams attrs, int viewVisibility, int displayId,\n            Rect outContentInsets, InputChannel outInputChannel) {\n        int[] appOp = new int[1];\n        int res = mPolicy.checkAddPermission(attrs, appOp);\n        if (res != WindowManagerGlobal.ADD_OKAY) {\n            return res;\n        }\n        ......\n        final int type = attrs.type;\n        ......\n        } else if (type == TYPE_TOAST) {//android 7.1.1 添加代码（其他版本无）\n                // Apps targeting SDK above N MR1 cannot arbitrary add toast windows.\n                addToastWindowRequiresToken = doesAddToastWindowRequireToken(attrs.packageName,\n                        callingUid, attachedWindow);\n                if (addToastWindowRequiresToken && token.windowType != TYPE_TOAST) {\n                    Slog.w(TAG_WM, \"Attempted to add a toast window with bad token \"\n                            + attrs.token + \".  Aborting.\");\n                    return WindowManagerGlobal.ADD_BAD_APP_TOKEN;\n                }\n        }....\n        synchronized(mWindowMap) {\n            ......\n\n            mPolicy.adjustWindowParamsLw(win.mAttrs);\n            ......\n        }\n        ......\n\n        return res;\n    }\n```\n\n权限检查checkAddPermission()方法：\n\n```java\n\n    //权限检查\n    @Override\n    public int checkAddPermission(WindowManager.LayoutParams attrs, int[] outAppOp) {\n        int type = attrs.type;\n\n        outAppOp[0] = AppOpsManager.OP_NONE;\n\n        if (type < WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW\n                || type > WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {\n            return WindowManagerGlobal.ADD_OKAY;\n        }\n        String permission = null;\n        switch (type) {\n            case TYPE_TOAST:\n                // XXX right now the app process has complete control over\n                // this...  should introduce a token to let the system\n                // monitor/control what they are doing.\n                break;\n            case TYPE_DREAM:\n            case TYPE_INPUT_METHOD:\n            case TYPE_WALLPAPER:\n            case TYPE_PRIVATE_PRESENTATION:\n                // The window manager will check these.\n                break;\n            case TYPE_PHONE:\n            case TYPE_PRIORITY_PHONE:\n            case TYPE_SYSTEM_ALERT:\n            case TYPE_SYSTEM_ERROR:\n            case TYPE_SYSTEM_OVERLAY:\n                permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW;\n                outAppOp[0] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW;\n                break;\n            default:\n                permission = android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;\n        }\n        if (permission != null) {\n            if (mContext.checkCallingOrSelfPermission(permission)\n                    != PackageManager.PERMISSION_GRANTED) {\n                return WindowManagerGlobal.ADD_PERMISSION_DENIED;\n            }\n        }\n        return WindowManagerGlobal.ADD_OKAY;\n    }\n```\nwindow的flags属性添加adjustWindowParamsLw()方法\n\n```java\n//window的flags属性添加\n//Android 2.0 - 2.3.7 PhoneWindowManager\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n            case TYPE_TOAST:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                break;\n        }\n    }\n\n    //Android 4.0.1 - 4.3.1 PhoneWindowManager\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n            case TYPE_TOAST:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                attrs.flags &= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;\n                break;\n        }\n    }\n\n\n   //Android 4.4 PhoneWindowManager\n    @Override\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                attrs.flags &= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;\n                break;\n        }\n    }\n```\n\n由上可知：\n\n- **Type为TYPE_TOAST：版本低于android4.4的，不能接受触摸事件，无法操作；版本高于Android 7.1.1的无法添加悬浮窗**\n- **Type为TYPE_PHONE：所有android版本都需要权限，版本低于android6.0的manifest中添加权限android.Manifest.permission.SYSTEM_ALERT_WINDOW即可，高于andorid6.0的需要判断权限且手动添加。**\n- **Type为TYPE_SYSTEM_ALERT：同TYPE_PHONE**\n\n所以系统级别的悬浮窗，android不同版本需要特别处理。\n\n**2.应用悬浮窗**\n\n对于应用悬浮窗来说，android版本对其影响不大。\n\n- **Type为TYPE_APPLICATION：只要Activity建立了，就可以添加。**\n- **Type为TYPE_APPLICATION_ATTACHED_DIALOG：需要在Activity获取焦点，并且用户可操作时才可添加。**\n\n\n\n# 三、悬浮窗的实现\n  \n悬浮窗添加比较简单,主要是由WindowManager接口的实现类WindowManagerImpl进行操作，WindowManager接口又继承至ViewManager,其中主要方法为：\n\n```java\n    public void addView(View view, ViewGroup.LayoutParams params);//添加View到Window\n    public void updateViewLayout(View view, ViewGroup.LayoutParams params);//更新View在Window中的位置\n    public void removeView(View view);//删除View\n```\n主要实现代码：\n\n```java\n\npublic class ContactWindowUtil {\n    private ContactView contactView;\n    private View dialogView;\n    private WindowManager windowManager;\n    private WindowManager.LayoutParams layoutParams;\n    private WindowManager.LayoutParams dialogParams;\n    private Context mContext;\n    private ContactWindowListener mListener;\n    private ValueAnimator valueAnimator;\n    private int direction;\n    private final int LEFT = 0;\n    private final int RIGHT = 1;\n\n    public interface ContactWindowListener {\n        void onDataCallBack(String str);\n    }\n\n    public void setDialogListener(ContactWindowListener listener) {\n        mListener = listener;\n    }\n\n    //私有化构造函数\n    public ContactWindowUtil(Context context) {\n        mContext = context;\n        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);\n//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void showContactView() {\n        hideContactView();\n        contactView = new ContactView(mContext);\n        if (layoutParams == null) {\n            layoutParams = new WindowManager.LayoutParams();\n            layoutParams.width = contactView.width;\n            layoutParams.height = contactView.height;\n            layoutParams.x += ScreenSizeUtil.getScreenWidth();\n            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(150);\n            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 23) {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;\n            } else {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;\n            }\n            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;\n            layoutParams.format = PixelFormat.RGBA_8888;\n        }\n\n        contactView.setOnTouchListener(touchListener);\n        contactView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                showContactDialog();\n            }\n        });\n        windowManager.addView(contactView, layoutParams);\n    }\n\n    /**\n     * 显示联系弹框\n     */\n    private void showContactDialog() {\n        hideDialogView();\n        if (dialogParams == null) {\n            dialogParams = new WindowManager.LayoutParams();\n            dialogParams.width = WindowManager.LayoutParams.MATCH_PARENT;\n            dialogParams.height = WindowManager.LayoutParams.MATCH_PARENT;\n            dialogParams.gravity = Gravity.CENTER;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 25){\n                dialogParams.type = WindowManager.LayoutParams.TYPE_TOAST;\n            } else {\n                dialogParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;\n            }\n            dialogParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN\n                    | WindowManager.LayoutParams.FLAG_FULLSCREEN;\n            dialogParams.format = PixelFormat.RGBA_8888;\n        }\n        LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        dialogView = layoutInflater.inflate(R.layout.window_contact, null);\n        TextView okTv = dialogView.findViewById(R.id.mOkTv);\n        TextView cancleTv = dialogView.findViewById(R.id.mCancleTv);\n        final TextView contentTv = dialogView.findViewById(R.id.mContentTv);\n        contentTv.setText(String.format(\"您确认拨打%s客服电话吗\", \"4008-111-222\"));\n        cancleTv.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n            }\n        });\n        okTv.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n                mListener.onDataCallBack(\"\");\n            }\n        });\n        dialogView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n            }\n        });\n        windowManager.addView(dialogView, dialogParams);\n    }\n\n\n    public void hideAllView() {\n        hideContactView();\n        hideDialogView();\n    }\n\n    public void hideContactView() {\n        if (contactView != null) {\n            windowManager.removeView(contactView);\n            contactView = null;\n            stopAnim();\n        }\n    }\n\n    public void hideDialogView() {\n        if (dialogView != null) {\n            windowManager.removeView(dialogView);\n            dialogView = null;\n        }\n    }\n\n    View.OnTouchListener touchListener = new View.OnTouchListener() {\n        float startX;\n        float startY;\n        float moveX;\n        float moveY;\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    startX = event.getRawX();\n                    startY = event.getRawY();\n\n                    moveX = event.getRawX();\n                    moveY = event.getRawY();\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    float x = event.getRawX() - moveX;\n                    float y = event.getRawY() - moveY;\n                    //计算偏移量，刷新视图\n                    layoutParams.x += x;\n                    layoutParams.y += y;\n                    windowManager.updateViewLayout(contactView, layoutParams);\n                    moveX = event.getRawX();\n                    moveY = event.getRawY();\n                    break;\n                case MotionEvent.ACTION_UP:\n                    //判断松手时View的横坐标是靠近屏幕哪一侧，将View移动到依靠屏幕\n                    float endX = event.getRawX();\n                    float endY = event.getRawY();\n                    if (endX < ScreenSizeUtil.getScreenWidth() / 2) {\n                        direction = LEFT;\n                        endX = 0;\n                    } else {\n                        direction = RIGHT;\n                        endX = ScreenSizeUtil.getScreenWidth() - contactView.width;\n                    }\n                    if(moveX != startX){\n                        starAnim((int) moveX, (int) endX,direction);\n                    }\n                    //如果初始落点与松手落点的坐标差值超过5个像素，则拦截该点击事件\n                    //否则继续传递，将事件交给OnClickListener函数处理\n                    if (Math.abs(startX - moveX) > 5) {\n                        return true;\n                    }\n                    break;\n            }\n            return false;\n        }\n    };\n\n\n    private void starAnim(int startX, int endX,final int direction) {\n        if (valueAnimator != null) {\n            valueAnimator.cancel();\n            valueAnimator = null;\n        }\n        valueAnimator = ValueAnimator.ofInt(startX, endX);\n        valueAnimator.setDuration(500);\n        valueAnimator.setRepeatCount(0);\n        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                if(direction == LEFT){\n                    layoutParams.x = (int) animation.getAnimatedValue()-contactView.width/2;\n                }else{\n                    layoutParams.x = (int) animation.getAnimatedValue();\n                }\n                if (contactView != null) {\n                    windowManager.updateViewLayout(contactView, layoutParams);\n                }\n            }\n        });\n        valueAnimator.setInterpolator(new LinearInterpolator());\n        valueAnimator.start();\n    }\n\n    private void stopAnim() {\n        if (valueAnimator != null) {\n            valueAnimator.cancel();\n            valueAnimator = null;\n        }\n    }\n}\n```\n\n**悬浮窗源码:**[https://github.com/awenzeng/FloatWindowDemo](https://github.com/awenzeng/FloatWindowDemo)\n\n# 四、注意\n\n1.应用悬浮窗WindowManager的获取环境必须是Activity环境，系统悬浮窗可以Activity环境，也可以是全局的环境。如：\n\n```java\n        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);\n//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);\n```\n\n2.应用级别悬浮窗也可以通过系统级别的方式实现，主要控制一下显示与隐藏就好。**但如果只在应用中展示悬浮窗，建议使用应用级别，那样会省去许多不必要的麻烦。**\n\n3.系统级别Type为TYPE_PHONE、TYPE_SYSTEM_ALERT是权限判断及设置代码：\n\n```java\n /** \n     * 请求用户给予悬浮窗的权限 \n     */  \n    public void askForPermission() {  \n        if (!Settings.canDrawOverlays(this)) {  \n            Toast.makeText(TestFloatWinActivity.this, \"当前无权限，请授权！\", Toast.LENGTH_SHORT).show();  \n            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,  \n                    Uri.parse(\"package:\" + getPackageName()));  \n            startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);  \n        } else {  \n            startService(floatWinIntent);  \n        }  \n    }  \n```\n\n# 五、参考文献\n\n[Android源码解析Window系列第（一）篇---Window的基本认识和Activity的加载流程](http://www.jianshu.com/p/c5c3ef2b1b03)\n\n[Android 悬浮窗的小结](https://www.liaohuqiu.net/cn/posts/android-windows-manager/)\n\n[Android悬浮窗TYPE_TOAST小结: 源码分析](http://www.jianshu.com/p/634cd056b90c)\n\n[Android无需权限显示悬浮窗, 兼谈逆向分析app](http://www.jianshu.com/p/167fd5f47d5c)\n\n[Android 悬浮窗权限各机型各系统适配大全](http://blog.csdn.net/self_study/article/details/52859790)","source":"_posts/tech_android_framework_window.md","raw":"---\nlayout: post\ntitle: \"Android悬浮窗原理解析\"\ndate: 10/17/2017 11:35:14 AM \ncomments: true\ntags: \n\t- 技术 \n\t- Android\n\t- 悬浮窗\n\t- WindowManager\n---\n---\n悬浮窗，在大多数应用中还是很少见的，目前我们接触到的悬浮窗，差不多都是一些系统级的应用软件，例如：360安全卫士，腾讯手机管家等；在某些服务行业如金融，餐饮等，也会在应用中添加悬浮窗，例如：美团的偷红包，博闻金融快捷联系等。但两种悬浮窗还是有区别的：\n\n- **系统悬浮窗：所有界面都会展示，包括主屏、锁屏**\n- **应用悬浮窗：只在应用Activity中展示。**\n \n# 一、窗口Window\n在了解悬浮窗之前，首先我们需要认识一下Android窗口Window。Android Framework将窗口分为三个类型：\n\n1. 应用窗口：所谓应用窗口指的就是该窗口对应一个Activity，因此，要创建应用窗口就必须在Activity中完成了。\n2. 子窗口：所谓子窗口指的是必须依附在某个父窗口之上，比如PopWindow，Dialog。\n3. 系统窗口：所谓系统窗口指的是由系统进程创建，不依赖于任何应用或者不依附在任何父窗口之上，如：Toast,来电窗口等。\n\nFramework定义了三种窗口类型，这三种类型定义在WindowManager的内部类LayoutParams中，WindowManager将这三种类型 进行了细化，把每一种类型都用一个int常量来表示，这些常量代表窗口所在的层，WindowManagerService在进行窗口叠加的时候，会按照常量的大小分配不同的层，常量值越大，代表位置越靠上面，所以我们可以猜想一下，应用程序Window的层值常量要小于子Window的层值常量，子Window的层值常量要小于系统Window的层值常量。Window的层级关系如下所示。\n\n![](/assets/img/tech_android_window.png)\n<!-- more -->\n\n- 应用窗口：层级范围是1~99\n- 子窗口：层级范围是1000~1999\n- 系统窗口：层级范围是2000~2999\n\n**1.各级别type值在WindowManager中的定义分别为：**\n\ni.应用窗口（1~99）\n\n```java\n   //第一个应用窗口\n   public static final int FIRST_APPLICATION_WINDOW = 1;\n   //所有程序窗口的base窗口，其他应用程序窗口都显示在它上面\n   public static final int TYPE_BASE_APPLICATION   = 1;\n   //所有Activity的窗口，只能配合Activity在当前APP使用\n   public static final int TYPE_APPLICATION        = 2;\n   //目标应用窗口未启动之前的那个窗口\n   public static final int TYPE_APPLICATION_STARTING = 3;\n   //最后一个应用窗口\n   public static final int LAST_APPLICATION_WINDOW = 99;\n```\nii.子窗口（1000~1999）\n\n```java\n  //第一个子窗口\n  public static final int FIRST_SUB_WINDOW        = 1000;\n  // 面板窗口，显示于宿主窗口的上层,只能配合Activity在当前APP使用\n  public static final int TYPE_APPLICATION_PANEL  = FIRST_SUB_WINDOW;\n  // 媒体窗口（例如视频），显示于宿主窗口下层\n  public static final int TYPE_APPLICATION_MEDIA  = FIRST_SUB_WINDOW+1;\n  // 应用程序窗口的子面板，只能配合Activity在当前APP使用(PopupWindow默认就是这个Type)\n  public static final int TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW+2;\n  //对话框窗口,只能配合Activity在当前APP使用\n  public static final int TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW+3;\n  //\n  public static final int TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW+4;\n  //最后一个子窗口\n public static final int LAST_SUB_WINDOW         = 1999;\n```\n\niii.系统窗口（2000~2999）\n\n```java\n        //系统窗口，非应用程序创建\n        public static final int FIRST_SYSTEM_WINDOW     = 2000;\n        //状态栏，只能有一个状态栏，位于屏幕顶端，其他窗口都位于它下方\n        public static final int TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW;\n        //搜索栏，只能有一个搜索栏，位于屏幕上方\n        public static final int TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+1; \n        //\n        //电话窗口，它用于电话交互（特别是呼入），置于所有应用程序之上，状态栏之下,属于悬浮窗(并且给一个Activity的话按下HOME键会出现看不到桌面上的图标异常情况)\n        public static final int TYPE_PHONE              = FIRST_SYSTEM_WINDOW+2;\n        //\n        //系统警告提示窗口，出现在应用程序窗口之上,属于悬浮窗, 但是会被禁止\n        public static final int TYPE_SYSTEM_ALERT       = FIRST_SYSTEM_WINDOW+3;\n        //\n        //信息窗口，用于显示Toast, 不属于悬浮窗, 但有悬浮窗的功能, 缺点是在Android2.3上无法接收点击事件\n        public static final int TYPE_TOAST              = FIRST_SYSTEM_WINDOW+5;\n        //\n        public static final int TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+4;\n        //锁屏窗口\n        public static final int TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+4;\n        //系统顶层窗口，显示在其他一切内容之上，此窗口不能获得输入焦点，否则影响锁屏\n        public static final int TYPE_SYSTEM_OVERLAY     = FIRST_SYSTEM_WINDOW+6;\n        //电话优先，当锁屏时显示，此窗口不能获得输入焦点，否则影响锁屏\n        public static final int TYPE_PRIORITY_PHONE     = FIRST_SYSTEM_WINDOW+7;\n        //系统对话框窗口\n        public static final int TYPE_SYSTEM_DIALOG      = FIRST_SYSTEM_WINDOW+8;\n        //锁屏时显示的对话框\n        public static final int TYPE_KEYGUARD_DIALOG    = FIRST_SYSTEM_WINDOW+9;\n        //系统内部错误提示，显示在任何窗口之上\n        public static final int TYPE_SYSTEM_ERROR       = FIRST_SYSTEM_WINDOW+10;\n        //内部输入法窗口，显示于普通UI之上，应用程序可重新布局以免被此窗口覆盖\n        public static final int TYPE_INPUT_METHOD       = FIRST_SYSTEM_WINDOW+11;\n        //内部输入法对话框，显示于当前输入法窗口之上\n        public static final int TYPE_INPUT_METHOD_DIALOG= FIRST_SYSTEM_WINDOW+12;\n        //墙纸窗口\n        public static final int TYPE_WALLPAPER          = FIRST_SYSTEM_WINDOW+13;\n        //状态栏的滑动面板\n        public static final int TYPE_STATUS_BAR_PANEL   = FIRST_SYSTEM_WINDOW+14;\n        //安全系统覆盖窗口，这些窗户必须不带输入焦点，否则会干扰键盘\n        public static final int TYPE_SECURE_SYSTEM_OVERLAY = FIRST_SYSTEM_WINDOW+15;\n        //最后一个系统窗口\n        public static final int LAST_SYSTEM_WINDOW      = 2999;\n```\n\n**2.窗口flags显示属性在WindowManager中也有定义：**\n\n```java\n        //窗口特征标记\n        public int flags;\n        //当该window对用户可见的时候，允许锁屏\n        public static final int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON     = 0x00000001;\n        //窗口后面的所有内容都变暗\n        public static final int FLAG_DIM_BEHIND        = 0x00000002;\n        //Flag：窗口后面的所有内容都变模糊\n        public static final int FLAG_BLUR_BEHIND        = 0x00000004;\n        //窗口不能获得焦点\n        public static final int FLAG_NOT_FOCUSABLE      = 0x00000008;\n        //窗口不接受触摸屏事件\n        public static final int FLAG_NOT_TOUCHABLE      = 0x00000010;\n        //即使在该window在可获得焦点情况下，允许该窗口之外的点击事件传递到当前窗口后面的的窗口去\n        public static final int FLAG_NOT_TOUCH_MODAL    = 0x00000020;\n        //当手机处于睡眠状态时，如果屏幕被按下，那么该window将第一个收到触摸事件\n        public static final int FLAG_TOUCHABLE_WHEN_WAKING = 0x00000040;\n        //当该window对用户可见时，屏幕出于常亮状态\n        public static final int FLAG_KEEP_SCREEN_ON     = 0x00000080;\n        //：让window占满整个手机屏幕，不留任何边界\n        public static final int FLAG_LAYOUT_IN_SCREEN   = 0x00000100;\n        //允许窗口超出整个手机屏幕\n        public static final int FLAG_LAYOUT_NO_LIMITS   = 0x00000200;\n        //window全屏显示\n        public static final int FLAG_FULLSCREEN      = 0x00000400;\n        //恢复window非全屏显示\n        public static final int FLAG_FORCE_NOT_FULLSCREEN   = 0x00000800;\n        //开启窗口抖动\n        public static final int FLAG_DITHER             = 0x00001000;\n        //安全内容窗口，该窗口显示时不允许截屏\n        public static final int FLAG_SECURE             = 0x00002000;\n        //锁屏时显示该窗口\n        public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;\n        //系统的墙纸显示在该窗口之后\n        public static final int FLAG_SHOW_WALLPAPER = 0x00100000;\n        //当window被显示的时候，系统将把它当做一个用户活动事件，以点亮手机屏幕\n        public static final int FLAG_TURN_SCREEN_ON = 0x00200000;\n        //该窗口显示，消失键盘\n        public static final int FLAG_DISMISS_KEYGUARD = 0x00400000;\n        //当该window在可以接受触摸屏情况下，让因在该window之外，而发送到后面的window的触摸屏可以支持split touch\n        public static final int FLAG_SPLIT_TOUCH = 0x00800000;\n        //对该window进行硬件加速，该flag必须在Activity或Dialog的Content View之前进行设置\n        public static final int FLAG_HARDWARE_ACCELERATED = 0x01000000;\n        //让window占满整个手机屏幕，不留任何边界\n        public static final int FLAG_LAYOUT_IN_OVERSCAN = 0x02000000;\n        //透明状态栏\n        public static final int FLAG_TRANSLUCENT_STATUS = 0x04000000;\n        //透明导航栏\n        public static final int FLAG_TRANSLUCENT_NAVIGATION = 0x08000000;\n```\n\n**3.添加View到Window的流程代码：**\n\n```java\n\n      contactView = new ContactView(mContext);\n        if (layoutParams == null) {\n            layoutParams = new WindowManager.LayoutParams();\n            layoutParams.width = contactView.width;\n            layoutParams.height = contactView.height;\n            layoutParams.x += ScreenSizeUtil.getScreenWidth();\n            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(150);\n            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 23) {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;//Type设置\n            } else {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;\n            }\n            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;//Flags设置,窗口属性\n            layoutParams.format = PixelFormat.RGBA_8888;\n        }\n        windowManager.addView(contactView, layoutParams);//向窗口中添加View\n```\n\n悬浮窗添加原理：[View添加到Window源码解析](http://www.jianshu.com/p/634cd056b90c)\n\nWindow在Android系统中十分重要，其Activity，Dialog的创建都离不开Window.具体Activity，Dialog是怎么添加到Window上的，详情如：\n[Activity的加载流程](http://www.jianshu.com/p/c5c3ef2b1b03);     \n[Dialog加载绘制流程](http://www.jianshu.com/p/f9303d30eb2b)\n\n# 二、两种悬浮窗\n在前言中已说到，悬浮窗在app中，分为两种：系统级别和应用级别。其中系统级别可以在任何界面展示，包括主屏、锁屏（看需要），应用级别只在应用中展示。通过上面对Window的认识，我们可以知道实现方式：\n\n- **系统级别可以通过type设置为：TYPE_TOAST、TYPE_PHONE、TYPE_SYSTEM_ALERT；**\n- **应用级别可以通过type设置为：TYPE_APPLICATION、TYPE_APPLICATION_ATTACHED_DIALOG；**\n\n**悬浮窗添加流程：**\n\nWindowManager.addView -> ViewRootImpl.setView -> WindowSession.addToDisplay(AIDL进行IPC) -> WindowManagerService.addWindow() -> ViewRootImpl.setView\n\n**1.系统悬浮窗**\n\n对于系统级别的悬浮窗来说，不同的设置，不同的Android版本，需要权限和交互都不同。通过阅读源码android4.4知：\n\nandroid 7.1.1的addWindow方法为：\n\n```java\n\n   public int addWindow(Session session, IWindow client, int seq,\n            WindowManager.LayoutParams attrs, int viewVisibility, int displayId,\n            Rect outContentInsets, InputChannel outInputChannel) {\n        int[] appOp = new int[1];\n        int res = mPolicy.checkAddPermission(attrs, appOp);\n        if (res != WindowManagerGlobal.ADD_OKAY) {\n            return res;\n        }\n        ......\n        final int type = attrs.type;\n        ......\n        } else if (type == TYPE_TOAST) {//android 7.1.1 添加代码（其他版本无）\n                // Apps targeting SDK above N MR1 cannot arbitrary add toast windows.\n                addToastWindowRequiresToken = doesAddToastWindowRequireToken(attrs.packageName,\n                        callingUid, attachedWindow);\n                if (addToastWindowRequiresToken && token.windowType != TYPE_TOAST) {\n                    Slog.w(TAG_WM, \"Attempted to add a toast window with bad token \"\n                            + attrs.token + \".  Aborting.\");\n                    return WindowManagerGlobal.ADD_BAD_APP_TOKEN;\n                }\n        }....\n        synchronized(mWindowMap) {\n            ......\n\n            mPolicy.adjustWindowParamsLw(win.mAttrs);\n            ......\n        }\n        ......\n\n        return res;\n    }\n```\n\n权限检查checkAddPermission()方法：\n\n```java\n\n    //权限检查\n    @Override\n    public int checkAddPermission(WindowManager.LayoutParams attrs, int[] outAppOp) {\n        int type = attrs.type;\n\n        outAppOp[0] = AppOpsManager.OP_NONE;\n\n        if (type < WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW\n                || type > WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) {\n            return WindowManagerGlobal.ADD_OKAY;\n        }\n        String permission = null;\n        switch (type) {\n            case TYPE_TOAST:\n                // XXX right now the app process has complete control over\n                // this...  should introduce a token to let the system\n                // monitor/control what they are doing.\n                break;\n            case TYPE_DREAM:\n            case TYPE_INPUT_METHOD:\n            case TYPE_WALLPAPER:\n            case TYPE_PRIVATE_PRESENTATION:\n                // The window manager will check these.\n                break;\n            case TYPE_PHONE:\n            case TYPE_PRIORITY_PHONE:\n            case TYPE_SYSTEM_ALERT:\n            case TYPE_SYSTEM_ERROR:\n            case TYPE_SYSTEM_OVERLAY:\n                permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW;\n                outAppOp[0] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW;\n                break;\n            default:\n                permission = android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;\n        }\n        if (permission != null) {\n            if (mContext.checkCallingOrSelfPermission(permission)\n                    != PackageManager.PERMISSION_GRANTED) {\n                return WindowManagerGlobal.ADD_PERMISSION_DENIED;\n            }\n        }\n        return WindowManagerGlobal.ADD_OKAY;\n    }\n```\nwindow的flags属性添加adjustWindowParamsLw()方法\n\n```java\n//window的flags属性添加\n//Android 2.0 - 2.3.7 PhoneWindowManager\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n            case TYPE_TOAST:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                break;\n        }\n    }\n\n    //Android 4.0.1 - 4.3.1 PhoneWindowManager\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n            case TYPE_TOAST:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                attrs.flags &= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;\n                break;\n        }\n    }\n\n\n   //Android 4.4 PhoneWindowManager\n    @Override\n    public void adjustWindowParamsLw(WindowManager.LayoutParams attrs) {\n        switch (attrs.type) {\n            case TYPE_SYSTEM_OVERLAY:\n            case TYPE_SECURE_SYSTEM_OVERLAY:\n                // These types of windows can't receive input events.\n                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n                attrs.flags &= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;\n                break;\n        }\n    }\n```\n\n由上可知：\n\n- **Type为TYPE_TOAST：版本低于android4.4的，不能接受触摸事件，无法操作；版本高于Android 7.1.1的无法添加悬浮窗**\n- **Type为TYPE_PHONE：所有android版本都需要权限，版本低于android6.0的manifest中添加权限android.Manifest.permission.SYSTEM_ALERT_WINDOW即可，高于andorid6.0的需要判断权限且手动添加。**\n- **Type为TYPE_SYSTEM_ALERT：同TYPE_PHONE**\n\n所以系统级别的悬浮窗，android不同版本需要特别处理。\n\n**2.应用悬浮窗**\n\n对于应用悬浮窗来说，android版本对其影响不大。\n\n- **Type为TYPE_APPLICATION：只要Activity建立了，就可以添加。**\n- **Type为TYPE_APPLICATION_ATTACHED_DIALOG：需要在Activity获取焦点，并且用户可操作时才可添加。**\n\n\n\n# 三、悬浮窗的实现\n  \n悬浮窗添加比较简单,主要是由WindowManager接口的实现类WindowManagerImpl进行操作，WindowManager接口又继承至ViewManager,其中主要方法为：\n\n```java\n    public void addView(View view, ViewGroup.LayoutParams params);//添加View到Window\n    public void updateViewLayout(View view, ViewGroup.LayoutParams params);//更新View在Window中的位置\n    public void removeView(View view);//删除View\n```\n主要实现代码：\n\n```java\n\npublic class ContactWindowUtil {\n    private ContactView contactView;\n    private View dialogView;\n    private WindowManager windowManager;\n    private WindowManager.LayoutParams layoutParams;\n    private WindowManager.LayoutParams dialogParams;\n    private Context mContext;\n    private ContactWindowListener mListener;\n    private ValueAnimator valueAnimator;\n    private int direction;\n    private final int LEFT = 0;\n    private final int RIGHT = 1;\n\n    public interface ContactWindowListener {\n        void onDataCallBack(String str);\n    }\n\n    public void setDialogListener(ContactWindowListener listener) {\n        mListener = listener;\n    }\n\n    //私有化构造函数\n    public ContactWindowUtil(Context context) {\n        mContext = context;\n        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);\n//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void showContactView() {\n        hideContactView();\n        contactView = new ContactView(mContext);\n        if (layoutParams == null) {\n            layoutParams = new WindowManager.LayoutParams();\n            layoutParams.width = contactView.width;\n            layoutParams.height = contactView.height;\n            layoutParams.x += ScreenSizeUtil.getScreenWidth();\n            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(150);\n            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 23) {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;\n            } else {\n                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;\n            }\n            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;\n            layoutParams.format = PixelFormat.RGBA_8888;\n        }\n\n        contactView.setOnTouchListener(touchListener);\n        contactView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                showContactDialog();\n            }\n        });\n        windowManager.addView(contactView, layoutParams);\n    }\n\n    /**\n     * 显示联系弹框\n     */\n    private void showContactDialog() {\n        hideDialogView();\n        if (dialogParams == null) {\n            dialogParams = new WindowManager.LayoutParams();\n            dialogParams.width = WindowManager.LayoutParams.MATCH_PARENT;\n            dialogParams.height = WindowManager.LayoutParams.MATCH_PARENT;\n            dialogParams.gravity = Gravity.CENTER;\n            if (Build.VERSION.SDK_INT > 18 && Build.VERSION.SDK_INT < 25){\n                dialogParams.type = WindowManager.LayoutParams.TYPE_TOAST;\n            } else {\n                dialogParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;\n            }\n            dialogParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN\n                    | WindowManager.LayoutParams.FLAG_FULLSCREEN;\n            dialogParams.format = PixelFormat.RGBA_8888;\n        }\n        LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        dialogView = layoutInflater.inflate(R.layout.window_contact, null);\n        TextView okTv = dialogView.findViewById(R.id.mOkTv);\n        TextView cancleTv = dialogView.findViewById(R.id.mCancleTv);\n        final TextView contentTv = dialogView.findViewById(R.id.mContentTv);\n        contentTv.setText(String.format(\"您确认拨打%s客服电话吗\", \"4008-111-222\"));\n        cancleTv.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n            }\n        });\n        okTv.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n                mListener.onDataCallBack(\"\");\n            }\n        });\n        dialogView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                hideDialogView();\n            }\n        });\n        windowManager.addView(dialogView, dialogParams);\n    }\n\n\n    public void hideAllView() {\n        hideContactView();\n        hideDialogView();\n    }\n\n    public void hideContactView() {\n        if (contactView != null) {\n            windowManager.removeView(contactView);\n            contactView = null;\n            stopAnim();\n        }\n    }\n\n    public void hideDialogView() {\n        if (dialogView != null) {\n            windowManager.removeView(dialogView);\n            dialogView = null;\n        }\n    }\n\n    View.OnTouchListener touchListener = new View.OnTouchListener() {\n        float startX;\n        float startY;\n        float moveX;\n        float moveY;\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    startX = event.getRawX();\n                    startY = event.getRawY();\n\n                    moveX = event.getRawX();\n                    moveY = event.getRawY();\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    float x = event.getRawX() - moveX;\n                    float y = event.getRawY() - moveY;\n                    //计算偏移量，刷新视图\n                    layoutParams.x += x;\n                    layoutParams.y += y;\n                    windowManager.updateViewLayout(contactView, layoutParams);\n                    moveX = event.getRawX();\n                    moveY = event.getRawY();\n                    break;\n                case MotionEvent.ACTION_UP:\n                    //判断松手时View的横坐标是靠近屏幕哪一侧，将View移动到依靠屏幕\n                    float endX = event.getRawX();\n                    float endY = event.getRawY();\n                    if (endX < ScreenSizeUtil.getScreenWidth() / 2) {\n                        direction = LEFT;\n                        endX = 0;\n                    } else {\n                        direction = RIGHT;\n                        endX = ScreenSizeUtil.getScreenWidth() - contactView.width;\n                    }\n                    if(moveX != startX){\n                        starAnim((int) moveX, (int) endX,direction);\n                    }\n                    //如果初始落点与松手落点的坐标差值超过5个像素，则拦截该点击事件\n                    //否则继续传递，将事件交给OnClickListener函数处理\n                    if (Math.abs(startX - moveX) > 5) {\n                        return true;\n                    }\n                    break;\n            }\n            return false;\n        }\n    };\n\n\n    private void starAnim(int startX, int endX,final int direction) {\n        if (valueAnimator != null) {\n            valueAnimator.cancel();\n            valueAnimator = null;\n        }\n        valueAnimator = ValueAnimator.ofInt(startX, endX);\n        valueAnimator.setDuration(500);\n        valueAnimator.setRepeatCount(0);\n        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                if(direction == LEFT){\n                    layoutParams.x = (int) animation.getAnimatedValue()-contactView.width/2;\n                }else{\n                    layoutParams.x = (int) animation.getAnimatedValue();\n                }\n                if (contactView != null) {\n                    windowManager.updateViewLayout(contactView, layoutParams);\n                }\n            }\n        });\n        valueAnimator.setInterpolator(new LinearInterpolator());\n        valueAnimator.start();\n    }\n\n    private void stopAnim() {\n        if (valueAnimator != null) {\n            valueAnimator.cancel();\n            valueAnimator = null;\n        }\n    }\n}\n```\n\n**悬浮窗源码:**[https://github.com/awenzeng/FloatWindowDemo](https://github.com/awenzeng/FloatWindowDemo)\n\n# 四、注意\n\n1.应用悬浮窗WindowManager的获取环境必须是Activity环境，系统悬浮窗可以Activity环境，也可以是全局的环境。如：\n\n```java\n        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);\n//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);\n```\n\n2.应用级别悬浮窗也可以通过系统级别的方式实现，主要控制一下显示与隐藏就好。**但如果只在应用中展示悬浮窗，建议使用应用级别，那样会省去许多不必要的麻烦。**\n\n3.系统级别Type为TYPE_PHONE、TYPE_SYSTEM_ALERT是权限判断及设置代码：\n\n```java\n /** \n     * 请求用户给予悬浮窗的权限 \n     */  \n    public void askForPermission() {  \n        if (!Settings.canDrawOverlays(this)) {  \n            Toast.makeText(TestFloatWinActivity.this, \"当前无权限，请授权！\", Toast.LENGTH_SHORT).show();  \n            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,  \n                    Uri.parse(\"package:\" + getPackageName()));  \n            startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);  \n        } else {  \n            startService(floatWinIntent);  \n        }  \n    }  \n```\n\n# 五、参考文献\n\n[Android源码解析Window系列第（一）篇---Window的基本认识和Activity的加载流程](http://www.jianshu.com/p/c5c3ef2b1b03)\n\n[Android 悬浮窗的小结](https://www.liaohuqiu.net/cn/posts/android-windows-manager/)\n\n[Android悬浮窗TYPE_TOAST小结: 源码分析](http://www.jianshu.com/p/634cd056b90c)\n\n[Android无需权限显示悬浮窗, 兼谈逆向分析app](http://www.jianshu.com/p/167fd5f47d5c)\n\n[Android 悬浮窗权限各机型各系统适配大全](http://blog.csdn.net/self_study/article/details/52859790)","slug":"tech_android_framework_window","published":1,"updated":"2019-06-27T08:15:15.323Z","photos":[],"link":"","_id":"cjxfjaetg006hystgg4v9ssy4","content":"<hr>\n<p>悬浮窗，在大多数应用中还是很少见的，目前我们接触到的悬浮窗，差不多都是一些系统级的应用软件，例如：360安全卫士，腾讯手机管家等；在某些服务行业如金融，餐饮等，也会在应用中添加悬浮窗，例如：美团的偷红包，博闻金融快捷联系等。但两种悬浮窗还是有区别的：</p>\n<ul>\n<li><strong>系统悬浮窗：所有界面都会展示，包括主屏、锁屏</strong></li>\n<li><strong>应用悬浮窗：只在应用Activity中展示。</strong></li>\n</ul>\n<h1 id=\"一、窗口Window\"><a href=\"#一、窗口Window\" class=\"headerlink\" title=\"一、窗口Window\"></a>一、窗口Window</h1><p>在了解悬浮窗之前，首先我们需要认识一下Android窗口Window。Android Framework将窗口分为三个类型：</p>\n<ol>\n<li>应用窗口：所谓应用窗口指的就是该窗口对应一个Activity，因此，要创建应用窗口就必须在Activity中完成了。</li>\n<li>子窗口：所谓子窗口指的是必须依附在某个父窗口之上，比如PopWindow，Dialog。</li>\n<li>系统窗口：所谓系统窗口指的是由系统进程创建，不依赖于任何应用或者不依附在任何父窗口之上，如：Toast,来电窗口等。</li>\n</ol>\n<p>Framework定义了三种窗口类型，这三种类型定义在WindowManager的内部类LayoutParams中，WindowManager将这三种类型 进行了细化，把每一种类型都用一个int常量来表示，这些常量代表窗口所在的层，WindowManagerService在进行窗口叠加的时候，会按照常量的大小分配不同的层，常量值越大，代表位置越靠上面，所以我们可以猜想一下，应用程序Window的层值常量要小于子Window的层值常量，子Window的层值常量要小于系统Window的层值常量。Window的层级关系如下所示。</p>\n<p><img src=\"/assets/img/tech_android_window.png\" alt=\"\"><br><a id=\"more\"></a></p>\n<ul>\n<li>应用窗口：层级范围是1~99</li>\n<li>子窗口：层级范围是1000~1999</li>\n<li>系统窗口：层级范围是2000~2999</li>\n</ul>\n<p><strong>1.各级别type值在WindowManager中的定义分别为：</strong></p>\n<p>i.应用窗口（1~99）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个应用窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_APPLICATION_WINDOW = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//所有程序窗口的base窗口，其他应用程序窗口都显示在它上面</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_BASE_APPLICATION   = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//所有Activity的窗口，只能配合Activity在当前APP使用</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION        = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">//目标应用窗口未启动之前的那个窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_STARTING = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">//最后一个应用窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_APPLICATION_WINDOW = <span class=\"number\">99</span>;</div></pre></td></tr></table></figure>\n<p>ii.子窗口（1000~1999）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//第一个子窗口</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_SUB_WINDOW        = <span class=\"number\">1000</span>;</div><div class=\"line\"> <span class=\"comment\">// 面板窗口，显示于宿主窗口的上层,只能配合Activity在当前APP使用</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_PANEL  = FIRST_SUB_WINDOW;</div><div class=\"line\"> <span class=\"comment\">// 媒体窗口（例如视频），显示于宿主窗口下层</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_MEDIA  = FIRST_SUB_WINDOW+<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"comment\">// 应用程序窗口的子面板，只能配合Activity在当前APP使用(PopupWindow默认就是这个Type)</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW+<span class=\"number\">2</span>;</div><div class=\"line\"> <span class=\"comment\">//对话框窗口,只能配合Activity在当前APP使用</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW+<span class=\"number\">3</span>;</div><div class=\"line\"> <span class=\"comment\">//</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"> <span class=\"comment\">//最后一个子窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_SUB_WINDOW         = <span class=\"number\">1999</span>;</div></pre></td></tr></table></figure>\n<p>iii.系统窗口（2000~2999）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//系统窗口，非应用程序创建</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_SYSTEM_WINDOW     = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"comment\">//状态栏，只能有一个状态栏，位于屏幕顶端，其他窗口都位于它下方</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW;</div><div class=\"line\"><span class=\"comment\">//搜索栏，只能有一个搜索栏，位于屏幕上方</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+<span class=\"number\">1</span>; </div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//电话窗口，它用于电话交互（特别是呼入），置于所有应用程序之上，状态栏之下,属于悬浮窗(并且给一个Activity的话按下HOME键会出现看不到桌面上的图标异常情况)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_PHONE              = FIRST_SYSTEM_WINDOW+<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//系统警告提示窗口，出现在应用程序窗口之上,属于悬浮窗, 但是会被禁止</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_ALERT       = FIRST_SYSTEM_WINDOW+<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//信息窗口，用于显示Toast, 不属于悬浮窗, 但有悬浮窗的功能, 缺点是在Android2.3上无法接收点击事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_TOAST              = FIRST_SYSTEM_WINDOW+<span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"comment\">//系统顶层窗口，显示在其他一切内容之上，此窗口不能获得输入焦点，否则影响锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_OVERLAY     = FIRST_SYSTEM_WINDOW+<span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"comment\">//电话优先，当锁屏时显示，此窗口不能获得输入焦点，否则影响锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_PRIORITY_PHONE     = FIRST_SYSTEM_WINDOW+<span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"comment\">//系统对话框窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_DIALOG      = FIRST_SYSTEM_WINDOW+<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏时显示的对话框</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD_DIALOG    = FIRST_SYSTEM_WINDOW+<span class=\"number\">9</span>;</div><div class=\"line\"><span class=\"comment\">//系统内部错误提示，显示在任何窗口之上</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_ERROR       = FIRST_SYSTEM_WINDOW+<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">//内部输入法窗口，显示于普通UI之上，应用程序可重新布局以免被此窗口覆盖</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INPUT_METHOD       = FIRST_SYSTEM_WINDOW+<span class=\"number\">11</span>;</div><div class=\"line\"><span class=\"comment\">//内部输入法对话框，显示于当前输入法窗口之上</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INPUT_METHOD_DIALOG= FIRST_SYSTEM_WINDOW+<span class=\"number\">12</span>;</div><div class=\"line\"><span class=\"comment\">//墙纸窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_WALLPAPER          = FIRST_SYSTEM_WINDOW+<span class=\"number\">13</span>;</div><div class=\"line\"><span class=\"comment\">//状态栏的滑动面板</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_STATUS_BAR_PANEL   = FIRST_SYSTEM_WINDOW+<span class=\"number\">14</span>;</div><div class=\"line\"><span class=\"comment\">//安全系统覆盖窗口，这些窗户必须不带输入焦点，否则会干扰键盘</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SECURE_SYSTEM_OVERLAY = FIRST_SYSTEM_WINDOW+<span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"comment\">//最后一个系统窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_SYSTEM_WINDOW      = <span class=\"number\">2999</span>;</div></pre></td></tr></table></figure>\n<p><strong>2.窗口flags显示属性在WindowManager中也有定义：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//窗口特征标记</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> flags;</div><div class=\"line\"><span class=\"comment\">//当该window对用户可见的时候，允许锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_ALLOW_LOCK_WHILE_SCREEN_ON     = <span class=\"number\">0x00000001</span>;</div><div class=\"line\"><span class=\"comment\">//窗口后面的所有内容都变暗</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DIM_BEHIND        = <span class=\"number\">0x00000002</span>;</div><div class=\"line\"><span class=\"comment\">//Flag：窗口后面的所有内容都变模糊</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_BLUR_BEHIND        = <span class=\"number\">0x00000004</span>;</div><div class=\"line\"><span class=\"comment\">//窗口不能获得焦点</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_FOCUSABLE      = <span class=\"number\">0x00000008</span>;</div><div class=\"line\"><span class=\"comment\">//窗口不接受触摸屏事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_TOUCHABLE      = <span class=\"number\">0x00000010</span>;</div><div class=\"line\"><span class=\"comment\">//即使在该window在可获得焦点情况下，允许该窗口之外的点击事件传递到当前窗口后面的的窗口去</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_TOUCH_MODAL    = <span class=\"number\">0x00000020</span>;</div><div class=\"line\"><span class=\"comment\">//当手机处于睡眠状态时，如果屏幕被按下，那么该window将第一个收到触摸事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TOUCHABLE_WHEN_WAKING = <span class=\"number\">0x00000040</span>;</div><div class=\"line\"><span class=\"comment\">//当该window对用户可见时，屏幕出于常亮状态</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_KEEP_SCREEN_ON     = <span class=\"number\">0x00000080</span>;</div><div class=\"line\"><span class=\"comment\">//：让window占满整个手机屏幕，不留任何边界</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_IN_SCREEN   = <span class=\"number\">0x00000100</span>;</div><div class=\"line\"><span class=\"comment\">//允许窗口超出整个手机屏幕</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_NO_LIMITS   = <span class=\"number\">0x00000200</span>;</div><div class=\"line\"><span class=\"comment\">//window全屏显示</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_FULLSCREEN      = <span class=\"number\">0x00000400</span>;</div><div class=\"line\"><span class=\"comment\">//恢复window非全屏显示</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_FORCE_NOT_FULLSCREEN   = <span class=\"number\">0x00000800</span>;</div><div class=\"line\"><span class=\"comment\">//开启窗口抖动</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DITHER             = <span class=\"number\">0x00001000</span>;</div><div class=\"line\"><span class=\"comment\">//安全内容窗口，该窗口显示时不允许截屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SECURE             = <span class=\"number\">0x00002000</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏时显示该窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SHOW_WHEN_LOCKED = <span class=\"number\">0x00080000</span>;</div><div class=\"line\"><span class=\"comment\">//系统的墙纸显示在该窗口之后</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SHOW_WALLPAPER = <span class=\"number\">0x00100000</span>;</div><div class=\"line\"><span class=\"comment\">//当window被显示的时候，系统将把它当做一个用户活动事件，以点亮手机屏幕</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TURN_SCREEN_ON = <span class=\"number\">0x00200000</span>;</div><div class=\"line\"><span class=\"comment\">//该窗口显示，消失键盘</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DISMISS_KEYGUARD = <span class=\"number\">0x00400000</span>;</div><div class=\"line\"><span class=\"comment\">//当该window在可以接受触摸屏情况下，让因在该window之外，而发送到后面的window的触摸屏可以支持split touch</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SPLIT_TOUCH = <span class=\"number\">0x00800000</span>;</div><div class=\"line\"><span class=\"comment\">//对该window进行硬件加速，该flag必须在Activity或Dialog的Content View之前进行设置</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_HARDWARE_ACCELERATED = <span class=\"number\">0x01000000</span>;</div><div class=\"line\"><span class=\"comment\">//让window占满整个手机屏幕，不留任何边界</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_IN_OVERSCAN = <span class=\"number\">0x02000000</span>;</div><div class=\"line\"><span class=\"comment\">//透明状态栏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TRANSLUCENT_STATUS = <span class=\"number\">0x04000000</span>;</div><div class=\"line\"><span class=\"comment\">//透明导航栏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TRANSLUCENT_NAVIGATION = <span class=\"number\">0x08000000</span>;</div></pre></td></tr></table></figure>\n<p><strong>3.添加View到Window的流程代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">contactView = <span class=\"keyword\">new</span> ContactView(mContext);</div><div class=\"line\">  <span class=\"keyword\">if</span> (layoutParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      layoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">      layoutParams.width = contactView.width;</div><div class=\"line\">      layoutParams.height = contactView.height;</div><div class=\"line\">      layoutParams.x += ScreenSizeUtil.getScreenWidth();</div><div class=\"line\">      layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(<span class=\"number\">150</span>);</div><div class=\"line\">      layoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">          layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;<span class=\"comment\">//Type设置</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;</div><div class=\"line\">      &#125;</div><div class=\"line\">      layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;<span class=\"comment\">//Flags设置,窗口属性</span></div><div class=\"line\">      layoutParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">  &#125;</div><div class=\"line\">  windowManager.addView(contactView, layoutParams);<span class=\"comment\">//向窗口中添加View</span></div></pre></td></tr></table></figure>\n<p>悬浮窗添加原理：<a href=\"http://www.jianshu.com/p/634cd056b90c\" target=\"_blank\" rel=\"external\">View添加到Window源码解析</a></p>\n<p>Window在Android系统中十分重要，其Activity，Dialog的创建都离不开Window.具体Activity，Dialog是怎么添加到Window上的，详情如：<br><a href=\"http://www.jianshu.com/p/c5c3ef2b1b03\" target=\"_blank\" rel=\"external\">Activity的加载流程</a>;<br><a href=\"http://www.jianshu.com/p/f9303d30eb2b\" target=\"_blank\" rel=\"external\">Dialog加载绘制流程</a></p>\n<h1 id=\"二、两种悬浮窗\"><a href=\"#二、两种悬浮窗\" class=\"headerlink\" title=\"二、两种悬浮窗\"></a>二、两种悬浮窗</h1><p>在前言中已说到，悬浮窗在app中，分为两种：系统级别和应用级别。其中系统级别可以在任何界面展示，包括主屏、锁屏（看需要），应用级别只在应用中展示。通过上面对Window的认识，我们可以知道实现方式：</p>\n<ul>\n<li><strong>系统级别可以通过type设置为：TYPE_TOAST、TYPE_PHONE、TYPE_SYSTEM_ALERT；</strong></li>\n<li><strong>应用级别可以通过type设置为：TYPE_APPLICATION、TYPE_APPLICATION_ATTACHED_DIALOG；</strong></li>\n</ul>\n<p><strong>悬浮窗添加流程：</strong></p>\n<p>WindowManager.addView -&gt; ViewRootImpl.setView -&gt; WindowSession.addToDisplay(AIDL进行IPC) -&gt; WindowManagerService.addWindow() -&gt; ViewRootImpl.setView</p>\n<p><strong>1.系统悬浮窗</strong></p>\n<p>对于系统级别的悬浮窗来说，不同的设置，不同的Android版本，需要权限和交互都不同。通过阅读源码android4.4知：</p>\n<p>android 7.1.1的addWindow方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addWindow</span><span class=\"params\">(Session session, IWindow client, <span class=\"keyword\">int</span> seq,</span></span></div><div class=\"line\">         WindowManager.LayoutParams attrs, <span class=\"keyword\">int</span> viewVisibility, <span class=\"keyword\">int</span> displayId,</div><div class=\"line\">         Rect outContentInsets, InputChannel outInputChannel) &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span>[] appOp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</div><div class=\"line\">     <span class=\"keyword\">int</span> res = mPolicy.checkAddPermission(attrs, appOp);</div><div class=\"line\">     <span class=\"keyword\">if</span> (res != WindowManagerGlobal.ADD_OKAY) &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> res;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ......</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type = attrs.type;</div><div class=\"line\">     ......</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == TYPE_TOAST) &#123;<span class=\"comment\">//android 7.1.1 添加代码（其他版本无）</span></div><div class=\"line\">             <span class=\"comment\">// Apps targeting SDK above N MR1 cannot arbitrary add toast windows.</span></div><div class=\"line\">             addToastWindowRequiresToken = doesAddToastWindowRequireToken(attrs.packageName,</div><div class=\"line\">                     callingUid, attachedWindow);</div><div class=\"line\">             <span class=\"keyword\">if</span> (addToastWindowRequiresToken &amp;&amp; token.windowType != TYPE_TOAST) &#123;</div><div class=\"line\">                 Slog.w(TAG_WM, <span class=\"string\">\"Attempted to add a toast window with bad token \"</span></div><div class=\"line\">                         + attrs.token + <span class=\"string\">\".  Aborting.\"</span>);</div><div class=\"line\">                 <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN;</div><div class=\"line\">             &#125;</div><div class=\"line\">     &#125;....</div><div class=\"line\">     <span class=\"keyword\">synchronized</span>(mWindowMap) &#123;</div><div class=\"line\">         ......</div><div class=\"line\"></div><div class=\"line\">         mPolicy.adjustWindowParamsLw(win.mAttrs);</div><div class=\"line\">         ......</div><div class=\"line\">     &#125;</div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> res;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>权限检查checkAddPermission()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//权限检查</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">checkAddPermission</span><span class=\"params\">(WindowManager.LayoutParams attrs, <span class=\"keyword\">int</span>[] outAppOp)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> type = attrs.type;</div><div class=\"line\"></div><div class=\"line\">    outAppOp[<span class=\"number\">0</span>] = AppOpsManager.OP_NONE;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (type &lt; WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW</div><div class=\"line\">            || type &gt; WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_OKAY;</div><div class=\"line\">    &#125;</div><div class=\"line\">    String permission = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">            <span class=\"comment\">// XXX right now the app process has complete control over</span></div><div class=\"line\">            <span class=\"comment\">// this...  should introduce a token to let the system</span></div><div class=\"line\">            <span class=\"comment\">// monitor/control what they are doing.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_DREAM:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_INPUT_METHOD:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_WALLPAPER:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PRIVATE_PRESENTATION:</div><div class=\"line\">            <span class=\"comment\">// The window manager will check these.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PHONE:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PRIORITY_PHONE:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_ALERT:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_ERROR:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW;</div><div class=\"line\">            outAppOp[<span class=\"number\">0</span>] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            permission = android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (permission != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mContext.checkCallingOrSelfPermission(permission)</div><div class=\"line\">                != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_PERMISSION_DENIED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_OKAY;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>window的flags属性添加adjustWindowParamsLw()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//window的flags属性添加</span></div><div class=\"line\"><span class=\"comment\">//Android 2.0 - 2.3.7 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Android 4.0.1 - 4.3.1 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                attrs.flags &amp;= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Android 4.4 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                attrs.flags &amp;= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>由上可知：</p>\n<ul>\n<li><strong>Type为TYPE_TOAST：版本低于android4.4的，不能接受触摸事件，无法操作；版本高于Android 7.1.1的无法添加悬浮窗</strong></li>\n<li><strong>Type为TYPE_PHONE：所有android版本都需要权限，版本低于android6.0的manifest中添加权限android.Manifest.permission.SYSTEM_ALERT_WINDOW即可，高于andorid6.0的需要判断权限且手动添加。</strong></li>\n<li><strong>Type为TYPE_SYSTEM_ALERT：同TYPE_PHONE</strong></li>\n</ul>\n<p>所以系统级别的悬浮窗，android不同版本需要特别处理。</p>\n<p><strong>2.应用悬浮窗</strong></p>\n<p>对于应用悬浮窗来说，android版本对其影响不大。</p>\n<ul>\n<li><strong>Type为TYPE_APPLICATION：只要Activity建立了，就可以添加。</strong></li>\n<li><strong>Type为TYPE_APPLICATION_ATTACHED_DIALOG：需要在Activity获取焦点，并且用户可操作时才可添加。</strong></li>\n</ul>\n<h1 id=\"三、悬浮窗的实现\"><a href=\"#三、悬浮窗的实现\" class=\"headerlink\" title=\"三、悬浮窗的实现\"></a>三、悬浮窗的实现</h1><p>悬浮窗添加比较简单,主要是由WindowManager接口的实现类WindowManagerImpl进行操作，WindowManager接口又继承至ViewManager,其中主要方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;<span class=\"comment\">//添加View到Window</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;<span class=\"comment\">//更新View在Window中的位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span></span>;<span class=\"comment\">//删除View</span></div></pre></td></tr></table></figure>\n<p>主要实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactWindowUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ContactView contactView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View dialogView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager windowManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams layoutParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams dialogParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> ContactWindowListener mListener;</div><div class=\"line\">    <span class=\"keyword\">private</span> ValueAnimator valueAnimator;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> direction;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEFT = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RIGHT = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ContactWindowListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDataCallBack</span><span class=\"params\">(String str)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDialogListener</span><span class=\"params\">(ContactWindowListener listener)</span> </span>&#123;</div><div class=\"line\">        mListener = listener;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//私有化构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ContactWindowUtil</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\"><span class=\"comment\">//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showContactView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideContactView();</div><div class=\"line\">        contactView = <span class=\"keyword\">new</span> ContactView(mContext);</div><div class=\"line\">        <span class=\"keyword\">if</span> (layoutParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            layoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">            layoutParams.width = contactView.width;</div><div class=\"line\">            layoutParams.height = contactView.height;</div><div class=\"line\">            layoutParams.x += ScreenSizeUtil.getScreenWidth();</div><div class=\"line\">            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(<span class=\"number\">150</span>);</div><div class=\"line\">            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;</div><div class=\"line\">            &#125;</div><div class=\"line\">            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;</div><div class=\"line\">            layoutParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        contactView.setOnTouchListener(touchListener);</div><div class=\"line\">        contactView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                showContactDialog();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        windowManager.addView(contactView, layoutParams);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 显示联系弹框</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showContactDialog</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideDialogView();</div><div class=\"line\">        <span class=\"keyword\">if</span> (dialogParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            dialogParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">            dialogParams.width = WindowManager.LayoutParams.MATCH_PARENT;</div><div class=\"line\">            dialogParams.height = WindowManager.LayoutParams.MATCH_PARENT;</div><div class=\"line\">            dialogParams.gravity = Gravity.CENTER;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">25</span>)&#123;</div><div class=\"line\">                dialogParams.type = WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                dialogParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialogParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN</div><div class=\"line\">                    | WindowManager.LayoutParams.FLAG_FULLSCREEN;</div><div class=\"line\">            dialogParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        dialogView = layoutInflater.inflate(R.layout.window_contact, <span class=\"keyword\">null</span>);</div><div class=\"line\">        TextView okTv = dialogView.findViewById(R.id.mOkTv);</div><div class=\"line\">        TextView cancleTv = dialogView.findViewById(R.id.mCancleTv);</div><div class=\"line\">        <span class=\"keyword\">final</span> TextView contentTv = dialogView.findViewById(R.id.mContentTv);</div><div class=\"line\">        contentTv.setText(String.format(<span class=\"string\">\"您确认拨打%s客服电话吗\"</span>, <span class=\"string\">\"4008-111-222\"</span>));</div><div class=\"line\">        cancleTv.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        okTv.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">                mListener.onDataCallBack(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        dialogView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        windowManager.addView(dialogView, dialogParams);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideAllView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideContactView();</div><div class=\"line\">        hideDialogView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideContactView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (contactView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            windowManager.removeView(contactView);</div><div class=\"line\">            contactView = <span class=\"keyword\">null</span>;</div><div class=\"line\">            stopAnim();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideDialogView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dialogView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            windowManager.removeView(dialogView);</div><div class=\"line\">            dialogView = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    View.OnTouchListener touchListener = <span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> startX;</div><div class=\"line\">        <span class=\"keyword\">float</span> startY;</div><div class=\"line\">        <span class=\"keyword\">float</span> moveX;</div><div class=\"line\">        <span class=\"keyword\">float</span> moveY;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                    startX = event.getRawX();</div><div class=\"line\">                    startY = event.getRawY();</div><div class=\"line\"></div><div class=\"line\">                    moveX = event.getRawX();</div><div class=\"line\">                    moveY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = event.getRawX() - moveX;</div><div class=\"line\">                    <span class=\"keyword\">float</span> y = event.getRawY() - moveY;</div><div class=\"line\">                    <span class=\"comment\">//计算偏移量，刷新视图</span></div><div class=\"line\">                    layoutParams.x += x;</div><div class=\"line\">                    layoutParams.y += y;</div><div class=\"line\">                    windowManager.updateViewLayout(contactView, layoutParams);</div><div class=\"line\">                    moveX = event.getRawX();</div><div class=\"line\">                    moveY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"comment\">//判断松手时View的横坐标是靠近屏幕哪一侧，将View移动到依靠屏幕</span></div><div class=\"line\">                    <span class=\"keyword\">float</span> endX = event.getRawX();</div><div class=\"line\">                    <span class=\"keyword\">float</span> endY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (endX &lt; ScreenSizeUtil.getScreenWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        direction = LEFT;</div><div class=\"line\">                        endX = <span class=\"number\">0</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        direction = RIGHT;</div><div class=\"line\">                        endX = ScreenSizeUtil.getScreenWidth() - contactView.width;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(moveX != startX)&#123;</div><div class=\"line\">                        starAnim((<span class=\"keyword\">int</span>) moveX, (<span class=\"keyword\">int</span>) endX,direction);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//如果初始落点与松手落点的坐标差值超过5个像素，则拦截该点击事件</span></div><div class=\"line\">                    <span class=\"comment\">//否则继续传递，将事件交给OnClickListener函数处理</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (Math.abs(startX - moveX) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">starAnim</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> endX,<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (valueAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            valueAnimator.cancel();</div><div class=\"line\">            valueAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        valueAnimator = ValueAnimator.ofInt(startX, endX);</div><div class=\"line\">        valueAnimator.setDuration(<span class=\"number\">500</span>);</div><div class=\"line\">        valueAnimator.setRepeatCount(<span class=\"number\">0</span>);</div><div class=\"line\">        valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(direction == LEFT)&#123;</div><div class=\"line\">                    layoutParams.x = (<span class=\"keyword\">int</span>) animation.getAnimatedValue()-contactView.width/<span class=\"number\">2</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    layoutParams.x = (<span class=\"keyword\">int</span>) animation.getAnimatedValue();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (contactView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    windowManager.updateViewLayout(contactView, layoutParams);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        valueAnimator.setInterpolator(<span class=\"keyword\">new</span> LinearInterpolator());</div><div class=\"line\">        valueAnimator.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopAnim</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (valueAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            valueAnimator.cancel();</div><div class=\"line\">            valueAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>悬浮窗源码:</strong><a href=\"https://github.com/awenzeng/FloatWindowDemo\" target=\"_blank\" rel=\"external\">https://github.com/awenzeng/FloatWindowDemo</a></p>\n<h1 id=\"四、注意\"><a href=\"#四、注意\" class=\"headerlink\" title=\"四、注意\"></a>四、注意</h1><p>1.应用悬浮窗WindowManager的获取环境必须是Activity环境，系统悬浮窗可以Activity环境，也可以是全局的环境。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\"><span class=\"comment\">//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);</span></div></pre></td></tr></table></figure>\n<p>2.应用级别悬浮窗也可以通过系统级别的方式实现，主要控制一下显示与隐藏就好。<strong>但如果只在应用中展示悬浮窗，建议使用应用级别，那样会省去许多不必要的麻烦。</strong></p>\n<p>3.系统级别Type为TYPE_PHONE、TYPE_SYSTEM_ALERT是权限判断及设置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\">    * 请求用户给予悬浮窗的权限 </div><div class=\"line\">    */  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">askForPermission</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;  </div><div class=\"line\">           Toast.makeText(TestFloatWinActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"当前无权限，请授权！\"</span>, Toast.LENGTH_SHORT).show();  </div><div class=\"line\">           Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,  </div><div class=\"line\">                   Uri.parse(<span class=\"string\">\"package:\"</span> + getPackageName()));  </div><div class=\"line\">           startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);  </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">           startService(floatWinIntent);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、参考文献\"><a href=\"#五、参考文献\" class=\"headerlink\" title=\"五、参考文献\"></a>五、参考文献</h1><p><a href=\"http://www.jianshu.com/p/c5c3ef2b1b03\" target=\"_blank\" rel=\"external\">Android源码解析Window系列第（一）篇—Window的基本认识和Activity的加载流程</a></p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/android-windows-manager/\" target=\"_blank\" rel=\"external\">Android 悬浮窗的小结</a></p>\n<p><a href=\"http://www.jianshu.com/p/634cd056b90c\" target=\"_blank\" rel=\"external\">Android悬浮窗TYPE_TOAST小结: 源码分析</a></p>\n<p><a href=\"http://www.jianshu.com/p/167fd5f47d5c\" target=\"_blank\" rel=\"external\">Android无需权限显示悬浮窗, 兼谈逆向分析app</a></p>\n<p><a href=\"http://blog.csdn.net/self_study/article/details/52859790\" target=\"_blank\" rel=\"external\">Android 悬浮窗权限各机型各系统适配大全</a></p>\n","excerpt":"<hr>\n<p>悬浮窗，在大多数应用中还是很少见的，目前我们接触到的悬浮窗，差不多都是一些系统级的应用软件，例如：360安全卫士，腾讯手机管家等；在某些服务行业如金融，餐饮等，也会在应用中添加悬浮窗，例如：美团的偷红包，博闻金融快捷联系等。但两种悬浮窗还是有区别的：</p>\n<ul>\n<li><strong>系统悬浮窗：所有界面都会展示，包括主屏、锁屏</strong></li>\n<li><strong>应用悬浮窗：只在应用Activity中展示。</strong></li>\n</ul>\n<h1 id=\"一、窗口Window\"><a href=\"#一、窗口Window\" class=\"headerlink\" title=\"一、窗口Window\"></a>一、窗口Window</h1><p>在了解悬浮窗之前，首先我们需要认识一下Android窗口Window。Android Framework将窗口分为三个类型：</p>\n<ol>\n<li>应用窗口：所谓应用窗口指的就是该窗口对应一个Activity，因此，要创建应用窗口就必须在Activity中完成了。</li>\n<li>子窗口：所谓子窗口指的是必须依附在某个父窗口之上，比如PopWindow，Dialog。</li>\n<li>系统窗口：所谓系统窗口指的是由系统进程创建，不依赖于任何应用或者不依附在任何父窗口之上，如：Toast,来电窗口等。</li>\n</ol>\n<p>Framework定义了三种窗口类型，这三种类型定义在WindowManager的内部类LayoutParams中，WindowManager将这三种类型 进行了细化，把每一种类型都用一个int常量来表示，这些常量代表窗口所在的层，WindowManagerService在进行窗口叠加的时候，会按照常量的大小分配不同的层，常量值越大，代表位置越靠上面，所以我们可以猜想一下，应用程序Window的层值常量要小于子Window的层值常量，子Window的层值常量要小于系统Window的层值常量。Window的层级关系如下所示。</p>\n<p><img src=\"/assets/img/tech_android_window.png\" alt=\"\"><br>","more":"</p>\n<ul>\n<li>应用窗口：层级范围是1~99</li>\n<li>子窗口：层级范围是1000~1999</li>\n<li>系统窗口：层级范围是2000~2999</li>\n</ul>\n<p><strong>1.各级别type值在WindowManager中的定义分别为：</strong></p>\n<p>i.应用窗口（1~99）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一个应用窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_APPLICATION_WINDOW = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//所有程序窗口的base窗口，其他应用程序窗口都显示在它上面</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_BASE_APPLICATION   = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//所有Activity的窗口，只能配合Activity在当前APP使用</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION        = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">//目标应用窗口未启动之前的那个窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_STARTING = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">//最后一个应用窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_APPLICATION_WINDOW = <span class=\"number\">99</span>;</div></pre></td></tr></table></figure>\n<p>ii.子窗口（1000~1999）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//第一个子窗口</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_SUB_WINDOW        = <span class=\"number\">1000</span>;</div><div class=\"line\"> <span class=\"comment\">// 面板窗口，显示于宿主窗口的上层,只能配合Activity在当前APP使用</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_PANEL  = FIRST_SUB_WINDOW;</div><div class=\"line\"> <span class=\"comment\">// 媒体窗口（例如视频），显示于宿主窗口下层</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_MEDIA  = FIRST_SUB_WINDOW+<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"comment\">// 应用程序窗口的子面板，只能配合Activity在当前APP使用(PopupWindow默认就是这个Type)</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW+<span class=\"number\">2</span>;</div><div class=\"line\"> <span class=\"comment\">//对话框窗口,只能配合Activity在当前APP使用</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW+<span class=\"number\">3</span>;</div><div class=\"line\"> <span class=\"comment\">//</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"> <span class=\"comment\">//最后一个子窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_SUB_WINDOW         = <span class=\"number\">1999</span>;</div></pre></td></tr></table></figure>\n<p>iii.系统窗口（2000~2999）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//系统窗口，非应用程序创建</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_SYSTEM_WINDOW     = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"comment\">//状态栏，只能有一个状态栏，位于屏幕顶端，其他窗口都位于它下方</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW;</div><div class=\"line\"><span class=\"comment\">//搜索栏，只能有一个搜索栏，位于屏幕上方</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+<span class=\"number\">1</span>; </div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//电话窗口，它用于电话交互（特别是呼入），置于所有应用程序之上，状态栏之下,属于悬浮窗(并且给一个Activity的话按下HOME键会出现看不到桌面上的图标异常情况)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_PHONE              = FIRST_SYSTEM_WINDOW+<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//系统警告提示窗口，出现在应用程序窗口之上,属于悬浮窗, 但是会被禁止</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_ALERT       = FIRST_SYSTEM_WINDOW+<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//信息窗口，用于显示Toast, 不属于悬浮窗, 但有悬浮窗的功能, 缺点是在Android2.3上无法接收点击事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_TOAST              = FIRST_SYSTEM_WINDOW+<span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"comment\">//系统顶层窗口，显示在其他一切内容之上，此窗口不能获得输入焦点，否则影响锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_OVERLAY     = FIRST_SYSTEM_WINDOW+<span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"comment\">//电话优先，当锁屏时显示，此窗口不能获得输入焦点，否则影响锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_PRIORITY_PHONE     = FIRST_SYSTEM_WINDOW+<span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"comment\">//系统对话框窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_DIALOG      = FIRST_SYSTEM_WINDOW+<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏时显示的对话框</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_KEYGUARD_DIALOG    = FIRST_SYSTEM_WINDOW+<span class=\"number\">9</span>;</div><div class=\"line\"><span class=\"comment\">//系统内部错误提示，显示在任何窗口之上</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SYSTEM_ERROR       = FIRST_SYSTEM_WINDOW+<span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"comment\">//内部输入法窗口，显示于普通UI之上，应用程序可重新布局以免被此窗口覆盖</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INPUT_METHOD       = FIRST_SYSTEM_WINDOW+<span class=\"number\">11</span>;</div><div class=\"line\"><span class=\"comment\">//内部输入法对话框，显示于当前输入法窗口之上</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_INPUT_METHOD_DIALOG= FIRST_SYSTEM_WINDOW+<span class=\"number\">12</span>;</div><div class=\"line\"><span class=\"comment\">//墙纸窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_WALLPAPER          = FIRST_SYSTEM_WINDOW+<span class=\"number\">13</span>;</div><div class=\"line\"><span class=\"comment\">//状态栏的滑动面板</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_STATUS_BAR_PANEL   = FIRST_SYSTEM_WINDOW+<span class=\"number\">14</span>;</div><div class=\"line\"><span class=\"comment\">//安全系统覆盖窗口，这些窗户必须不带输入焦点，否则会干扰键盘</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SECURE_SYSTEM_OVERLAY = FIRST_SYSTEM_WINDOW+<span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"comment\">//最后一个系统窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAST_SYSTEM_WINDOW      = <span class=\"number\">2999</span>;</div></pre></td></tr></table></figure>\n<p><strong>2.窗口flags显示属性在WindowManager中也有定义：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//窗口特征标记</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> flags;</div><div class=\"line\"><span class=\"comment\">//当该window对用户可见的时候，允许锁屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_ALLOW_LOCK_WHILE_SCREEN_ON     = <span class=\"number\">0x00000001</span>;</div><div class=\"line\"><span class=\"comment\">//窗口后面的所有内容都变暗</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DIM_BEHIND        = <span class=\"number\">0x00000002</span>;</div><div class=\"line\"><span class=\"comment\">//Flag：窗口后面的所有内容都变模糊</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_BLUR_BEHIND        = <span class=\"number\">0x00000004</span>;</div><div class=\"line\"><span class=\"comment\">//窗口不能获得焦点</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_FOCUSABLE      = <span class=\"number\">0x00000008</span>;</div><div class=\"line\"><span class=\"comment\">//窗口不接受触摸屏事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_TOUCHABLE      = <span class=\"number\">0x00000010</span>;</div><div class=\"line\"><span class=\"comment\">//即使在该window在可获得焦点情况下，允许该窗口之外的点击事件传递到当前窗口后面的的窗口去</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_NOT_TOUCH_MODAL    = <span class=\"number\">0x00000020</span>;</div><div class=\"line\"><span class=\"comment\">//当手机处于睡眠状态时，如果屏幕被按下，那么该window将第一个收到触摸事件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TOUCHABLE_WHEN_WAKING = <span class=\"number\">0x00000040</span>;</div><div class=\"line\"><span class=\"comment\">//当该window对用户可见时，屏幕出于常亮状态</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_KEEP_SCREEN_ON     = <span class=\"number\">0x00000080</span>;</div><div class=\"line\"><span class=\"comment\">//：让window占满整个手机屏幕，不留任何边界</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_IN_SCREEN   = <span class=\"number\">0x00000100</span>;</div><div class=\"line\"><span class=\"comment\">//允许窗口超出整个手机屏幕</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_NO_LIMITS   = <span class=\"number\">0x00000200</span>;</div><div class=\"line\"><span class=\"comment\">//window全屏显示</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_FULLSCREEN      = <span class=\"number\">0x00000400</span>;</div><div class=\"line\"><span class=\"comment\">//恢复window非全屏显示</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_FORCE_NOT_FULLSCREEN   = <span class=\"number\">0x00000800</span>;</div><div class=\"line\"><span class=\"comment\">//开启窗口抖动</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DITHER             = <span class=\"number\">0x00001000</span>;</div><div class=\"line\"><span class=\"comment\">//安全内容窗口，该窗口显示时不允许截屏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SECURE             = <span class=\"number\">0x00002000</span>;</div><div class=\"line\"><span class=\"comment\">//锁屏时显示该窗口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SHOW_WHEN_LOCKED = <span class=\"number\">0x00080000</span>;</div><div class=\"line\"><span class=\"comment\">//系统的墙纸显示在该窗口之后</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SHOW_WALLPAPER = <span class=\"number\">0x00100000</span>;</div><div class=\"line\"><span class=\"comment\">//当window被显示的时候，系统将把它当做一个用户活动事件，以点亮手机屏幕</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TURN_SCREEN_ON = <span class=\"number\">0x00200000</span>;</div><div class=\"line\"><span class=\"comment\">//该窗口显示，消失键盘</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_DISMISS_KEYGUARD = <span class=\"number\">0x00400000</span>;</div><div class=\"line\"><span class=\"comment\">//当该window在可以接受触摸屏情况下，让因在该window之外，而发送到后面的window的触摸屏可以支持split touch</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_SPLIT_TOUCH = <span class=\"number\">0x00800000</span>;</div><div class=\"line\"><span class=\"comment\">//对该window进行硬件加速，该flag必须在Activity或Dialog的Content View之前进行设置</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_HARDWARE_ACCELERATED = <span class=\"number\">0x01000000</span>;</div><div class=\"line\"><span class=\"comment\">//让window占满整个手机屏幕，不留任何边界</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_LAYOUT_IN_OVERSCAN = <span class=\"number\">0x02000000</span>;</div><div class=\"line\"><span class=\"comment\">//透明状态栏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TRANSLUCENT_STATUS = <span class=\"number\">0x04000000</span>;</div><div class=\"line\"><span class=\"comment\">//透明导航栏</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FLAG_TRANSLUCENT_NAVIGATION = <span class=\"number\">0x08000000</span>;</div></pre></td></tr></table></figure>\n<p><strong>3.添加View到Window的流程代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">contactView = <span class=\"keyword\">new</span> ContactView(mContext);</div><div class=\"line\">  <span class=\"keyword\">if</span> (layoutParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      layoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">      layoutParams.width = contactView.width;</div><div class=\"line\">      layoutParams.height = contactView.height;</div><div class=\"line\">      layoutParams.x += ScreenSizeUtil.getScreenWidth();</div><div class=\"line\">      layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(<span class=\"number\">150</span>);</div><div class=\"line\">      layoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">          layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;<span class=\"comment\">//Type设置</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;</div><div class=\"line\">      &#125;</div><div class=\"line\">      layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;<span class=\"comment\">//Flags设置,窗口属性</span></div><div class=\"line\">      layoutParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">  &#125;</div><div class=\"line\">  windowManager.addView(contactView, layoutParams);<span class=\"comment\">//向窗口中添加View</span></div></pre></td></tr></table></figure>\n<p>悬浮窗添加原理：<a href=\"http://www.jianshu.com/p/634cd056b90c\">View添加到Window源码解析</a></p>\n<p>Window在Android系统中十分重要，其Activity，Dialog的创建都离不开Window.具体Activity，Dialog是怎么添加到Window上的，详情如：<br><a href=\"http://www.jianshu.com/p/c5c3ef2b1b03\">Activity的加载流程</a>;<br><a href=\"http://www.jianshu.com/p/f9303d30eb2b\">Dialog加载绘制流程</a></p>\n<h1 id=\"二、两种悬浮窗\"><a href=\"#二、两种悬浮窗\" class=\"headerlink\" title=\"二、两种悬浮窗\"></a>二、两种悬浮窗</h1><p>在前言中已说到，悬浮窗在app中，分为两种：系统级别和应用级别。其中系统级别可以在任何界面展示，包括主屏、锁屏（看需要），应用级别只在应用中展示。通过上面对Window的认识，我们可以知道实现方式：</p>\n<ul>\n<li><strong>系统级别可以通过type设置为：TYPE_TOAST、TYPE_PHONE、TYPE_SYSTEM_ALERT；</strong></li>\n<li><strong>应用级别可以通过type设置为：TYPE_APPLICATION、TYPE_APPLICATION_ATTACHED_DIALOG；</strong></li>\n</ul>\n<p><strong>悬浮窗添加流程：</strong></p>\n<p>WindowManager.addView -&gt; ViewRootImpl.setView -&gt; WindowSession.addToDisplay(AIDL进行IPC) -&gt; WindowManagerService.addWindow() -&gt; ViewRootImpl.setView</p>\n<p><strong>1.系统悬浮窗</strong></p>\n<p>对于系统级别的悬浮窗来说，不同的设置，不同的Android版本，需要权限和交互都不同。通过阅读源码android4.4知：</p>\n<p>android 7.1.1的addWindow方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addWindow</span><span class=\"params\">(Session session, IWindow client, <span class=\"keyword\">int</span> seq,</div><div class=\"line\">         WindowManager.LayoutParams attrs, <span class=\"keyword\">int</span> viewVisibility, <span class=\"keyword\">int</span> displayId,</div><div class=\"line\">         Rect outContentInsets, InputChannel outInputChannel)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">int</span>[] appOp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</div><div class=\"line\">     <span class=\"keyword\">int</span> res = mPolicy.checkAddPermission(attrs, appOp);</div><div class=\"line\">     <span class=\"keyword\">if</span> (res != WindowManagerGlobal.ADD_OKAY) &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> res;</div><div class=\"line\">     &#125;</div><div class=\"line\">     ......</div><div class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type = attrs.type;</div><div class=\"line\">     ......</div><div class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == TYPE_TOAST) &#123;<span class=\"comment\">//android 7.1.1 添加代码（其他版本无）</span></div><div class=\"line\">             <span class=\"comment\">// Apps targeting SDK above N MR1 cannot arbitrary add toast windows.</span></div><div class=\"line\">             addToastWindowRequiresToken = doesAddToastWindowRequireToken(attrs.packageName,</div><div class=\"line\">                     callingUid, attachedWindow);</div><div class=\"line\">             <span class=\"keyword\">if</span> (addToastWindowRequiresToken &amp;&amp; token.windowType != TYPE_TOAST) &#123;</div><div class=\"line\">                 Slog.w(TAG_WM, <span class=\"string\">\"Attempted to add a toast window with bad token \"</span></div><div class=\"line\">                         + attrs.token + <span class=\"string\">\".  Aborting.\"</span>);</div><div class=\"line\">                 <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_BAD_APP_TOKEN;</div><div class=\"line\">             &#125;</div><div class=\"line\">     &#125;....</div><div class=\"line\">     <span class=\"keyword\">synchronized</span>(mWindowMap) &#123;</div><div class=\"line\">         ......</div><div class=\"line\"></div><div class=\"line\">         mPolicy.adjustWindowParamsLw(win.mAttrs);</div><div class=\"line\">         ......</div><div class=\"line\">     &#125;</div><div class=\"line\">     ......</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">return</span> res;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>权限检查checkAddPermission()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//权限检查</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">checkAddPermission</span><span class=\"params\">(WindowManager.LayoutParams attrs, <span class=\"keyword\">int</span>[] outAppOp)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> type = attrs.type;</div><div class=\"line\"></div><div class=\"line\">    outAppOp[<span class=\"number\">0</span>] = AppOpsManager.OP_NONE;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (type &lt; WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW</div><div class=\"line\">            || type &gt; WindowManager.LayoutParams.LAST_SYSTEM_WINDOW) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_OKAY;</div><div class=\"line\">    &#125;</div><div class=\"line\">    String permission = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">            <span class=\"comment\">// XXX right now the app process has complete control over</span></div><div class=\"line\">            <span class=\"comment\">// this...  should introduce a token to let the system</span></div><div class=\"line\">            <span class=\"comment\">// monitor/control what they are doing.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_DREAM:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_INPUT_METHOD:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_WALLPAPER:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PRIVATE_PRESENTATION:</div><div class=\"line\">            <span class=\"comment\">// The window manager will check these.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PHONE:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_PRIORITY_PHONE:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_ALERT:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_ERROR:</div><div class=\"line\">        <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            permission = android.Manifest.permission.SYSTEM_ALERT_WINDOW;</div><div class=\"line\">            outAppOp[<span class=\"number\">0</span>] = AppOpsManager.OP_SYSTEM_ALERT_WINDOW;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            permission = android.Manifest.permission.INTERNAL_SYSTEM_WINDOW;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (permission != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mContext.checkCallingOrSelfPermission(permission)</div><div class=\"line\">                != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_PERMISSION_DENIED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> WindowManagerGlobal.ADD_OKAY;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>window的flags属性添加adjustWindowParamsLw()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//window的flags属性添加</span></div><div class=\"line\"><span class=\"comment\">//Android 2.0 - 2.3.7 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//Android 4.0.1 - 4.3.1 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_TOAST:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                attrs.flags &amp;= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//Android 4.4 PhoneWindowManager</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustWindowParamsLw</span><span class=\"params\">(WindowManager.LayoutParams attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (attrs.type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SYSTEM_OVERLAY:</div><div class=\"line\">            <span class=\"keyword\">case</span> TYPE_SECURE_SYSTEM_OVERLAY:</div><div class=\"line\">                <span class=\"comment\">// These types of windows can't receive input events.</span></div><div class=\"line\">                attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</div><div class=\"line\">                attrs.flags &amp;= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>由上可知：</p>\n<ul>\n<li><strong>Type为TYPE_TOAST：版本低于android4.4的，不能接受触摸事件，无法操作；版本高于Android 7.1.1的无法添加悬浮窗</strong></li>\n<li><strong>Type为TYPE_PHONE：所有android版本都需要权限，版本低于android6.0的manifest中添加权限android.Manifest.permission.SYSTEM_ALERT_WINDOW即可，高于andorid6.0的需要判断权限且手动添加。</strong></li>\n<li><strong>Type为TYPE_SYSTEM_ALERT：同TYPE_PHONE</strong></li>\n</ul>\n<p>所以系统级别的悬浮窗，android不同版本需要特别处理。</p>\n<p><strong>2.应用悬浮窗</strong></p>\n<p>对于应用悬浮窗来说，android版本对其影响不大。</p>\n<ul>\n<li><strong>Type为TYPE_APPLICATION：只要Activity建立了，就可以添加。</strong></li>\n<li><strong>Type为TYPE_APPLICATION_ATTACHED_DIALOG：需要在Activity获取焦点，并且用户可操作时才可添加。</strong></li>\n</ul>\n<h1 id=\"三、悬浮窗的实现\"><a href=\"#三、悬浮窗的实现\" class=\"headerlink\" title=\"三、悬浮窗的实现\"></a>三、悬浮窗的实现</h1><p>悬浮窗添加比较简单,主要是由WindowManager接口的实现类WindowManagerImpl进行操作，WindowManager接口又继承至ViewManager,其中主要方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;<span class=\"comment\">//添加View到Window</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateViewLayout</span><span class=\"params\">(View view, ViewGroup.LayoutParams params)</span></span>;<span class=\"comment\">//更新View在Window中的位置</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span></span>;<span class=\"comment\">//删除View</span></div></pre></td></tr></table></figure>\n<p>主要实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactWindowUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ContactView contactView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View dialogView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager windowManager;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams layoutParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams dialogParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> ContactWindowListener mListener;</div><div class=\"line\">    <span class=\"keyword\">private</span> ValueAnimator valueAnimator;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> direction;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEFT = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RIGHT = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ContactWindowListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDataCallBack</span><span class=\"params\">(String str)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDialogListener</span><span class=\"params\">(ContactWindowListener listener)</span> </span>&#123;</div><div class=\"line\">        mListener = listener;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//私有化构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ContactWindowUtil</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mContext = context;</div><div class=\"line\">        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\"><span class=\"comment\">//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showContactView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideContactView();</div><div class=\"line\">        contactView = <span class=\"keyword\">new</span> ContactView(mContext);</div><div class=\"line\">        <span class=\"keyword\">if</span> (layoutParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            layoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">            layoutParams.width = contactView.width;</div><div class=\"line\">            layoutParams.height = contactView.height;</div><div class=\"line\">            layoutParams.x += ScreenSizeUtil.getScreenWidth();</div><div class=\"line\">            layoutParams.y += ScreenSizeUtil.getScreenHeight() - ScreenSizeUtil.dp2px(<span class=\"number\">150</span>);</div><div class=\"line\">            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">                layoutParams.type = WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                layoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION;</div><div class=\"line\">            &#125;</div><div class=\"line\">            layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;</div><div class=\"line\">            layoutParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        contactView.setOnTouchListener(touchListener);</div><div class=\"line\">        contactView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                showContactDialog();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        windowManager.addView(contactView, layoutParams);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 显示联系弹框</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showContactDialog</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideDialogView();</div><div class=\"line\">        <span class=\"keyword\">if</span> (dialogParams == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            dialogParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</div><div class=\"line\">            dialogParams.width = WindowManager.LayoutParams.MATCH_PARENT;</div><div class=\"line\">            dialogParams.height = WindowManager.LayoutParams.MATCH_PARENT;</div><div class=\"line\">            dialogParams.gravity = Gravity.CENTER;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; <span class=\"number\">18</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class=\"number\">25</span>)&#123;</div><div class=\"line\">                dialogParams.type = WindowManager.LayoutParams.TYPE_TOAST;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                dialogParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialogParams.flags = WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN</div><div class=\"line\">                    | WindowManager.LayoutParams.FLAG_FULLSCREEN;</div><div class=\"line\">            dialogParams.format = PixelFormat.RGBA_8888;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class=\"line\">        dialogView = layoutInflater.inflate(R.layout.window_contact, <span class=\"keyword\">null</span>);</div><div class=\"line\">        TextView okTv = dialogView.findViewById(R.id.mOkTv);</div><div class=\"line\">        TextView cancleTv = dialogView.findViewById(R.id.mCancleTv);</div><div class=\"line\">        <span class=\"keyword\">final</span> TextView contentTv = dialogView.findViewById(R.id.mContentTv);</div><div class=\"line\">        contentTv.setText(String.format(<span class=\"string\">\"您确认拨打%s客服电话吗\"</span>, <span class=\"string\">\"4008-111-222\"</span>));</div><div class=\"line\">        cancleTv.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        okTv.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">                mListener.onDataCallBack(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        dialogView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                hideDialogView();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        windowManager.addView(dialogView, dialogParams);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideAllView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        hideContactView();</div><div class=\"line\">        hideDialogView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideContactView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (contactView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            windowManager.removeView(contactView);</div><div class=\"line\">            contactView = <span class=\"keyword\">null</span>;</div><div class=\"line\">            stopAnim();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hideDialogView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dialogView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            windowManager.removeView(dialogView);</div><div class=\"line\">            dialogView = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    View.OnTouchListener touchListener = <span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> startX;</div><div class=\"line\">        <span class=\"keyword\">float</span> startY;</div><div class=\"line\">        <span class=\"keyword\">float</span> moveX;</div><div class=\"line\">        <span class=\"keyword\">float</span> moveY;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                    startX = event.getRawX();</div><div class=\"line\">                    startY = event.getRawY();</div><div class=\"line\"></div><div class=\"line\">                    moveX = event.getRawX();</div><div class=\"line\">                    moveY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = event.getRawX() - moveX;</div><div class=\"line\">                    <span class=\"keyword\">float</span> y = event.getRawY() - moveY;</div><div class=\"line\">                    <span class=\"comment\">//计算偏移量，刷新视图</span></div><div class=\"line\">                    layoutParams.x += x;</div><div class=\"line\">                    layoutParams.y += y;</div><div class=\"line\">                    windowManager.updateViewLayout(contactView, layoutParams);</div><div class=\"line\">                    moveX = event.getRawX();</div><div class=\"line\">                    moveY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"comment\">//判断松手时View的横坐标是靠近屏幕哪一侧，将View移动到依靠屏幕</span></div><div class=\"line\">                    <span class=\"keyword\">float</span> endX = event.getRawX();</div><div class=\"line\">                    <span class=\"keyword\">float</span> endY = event.getRawY();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (endX &lt; ScreenSizeUtil.getScreenWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                        direction = LEFT;</div><div class=\"line\">                        endX = <span class=\"number\">0</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        direction = RIGHT;</div><div class=\"line\">                        endX = ScreenSizeUtil.getScreenWidth() - contactView.width;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(moveX != startX)&#123;</div><div class=\"line\">                        starAnim((<span class=\"keyword\">int</span>) moveX, (<span class=\"keyword\">int</span>) endX,direction);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//如果初始落点与松手落点的坐标差值超过5个像素，则拦截该点击事件</span></div><div class=\"line\">                    <span class=\"comment\">//否则继续传递，将事件交给OnClickListener函数处理</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (Math.abs(startX - moveX) &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">starAnim</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> endX,<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (valueAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            valueAnimator.cancel();</div><div class=\"line\">            valueAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        valueAnimator = ValueAnimator.ofInt(startX, endX);</div><div class=\"line\">        valueAnimator.setDuration(<span class=\"number\">500</span>);</div><div class=\"line\">        valueAnimator.setRepeatCount(<span class=\"number\">0</span>);</div><div class=\"line\">        valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(direction == LEFT)&#123;</div><div class=\"line\">                    layoutParams.x = (<span class=\"keyword\">int</span>) animation.getAnimatedValue()-contactView.width/<span class=\"number\">2</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    layoutParams.x = (<span class=\"keyword\">int</span>) animation.getAnimatedValue();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (contactView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    windowManager.updateViewLayout(contactView, layoutParams);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        valueAnimator.setInterpolator(<span class=\"keyword\">new</span> LinearInterpolator());</div><div class=\"line\">        valueAnimator.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopAnim</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (valueAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            valueAnimator.cancel();</div><div class=\"line\">            valueAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>悬浮窗源码:</strong><a href=\"https://github.com/awenzeng/FloatWindowDemo\">https://github.com/awenzeng/FloatWindowDemo</a></p>\n<h1 id=\"四、注意\"><a href=\"#四、注意\" class=\"headerlink\" title=\"四、注意\"></a>四、注意</h1><p>1.应用悬浮窗WindowManager的获取环境必须是Activity环境，系统悬浮窗可以Activity环境，也可以是全局的环境。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">        windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\"><span class=\"comment\">//      windowManager = (WindowManager) FloatWindowApp.getAppContext().getSystemService(Context.WINDOW_SERVICE);</span></div></pre></td></tr></table></figure>\n<p>2.应用级别悬浮窗也可以通过系统级别的方式实现，主要控制一下显示与隐藏就好。<strong>但如果只在应用中展示悬浮窗，建议使用应用级别，那样会省去许多不必要的麻烦。</strong></p>\n<p>3.系统级别Type为TYPE_PHONE、TYPE_SYSTEM_ALERT是权限判断及设置代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\">    * 请求用户给予悬浮窗的权限 </div><div class=\"line\">    */</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">askForPermission</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;  </div><div class=\"line\">           Toast.makeText(TestFloatWinActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"当前无权限，请授权！\"</span>, Toast.LENGTH_SHORT).show();  </div><div class=\"line\">           Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,  </div><div class=\"line\">                   Uri.parse(<span class=\"string\">\"package:\"</span> + getPackageName()));  </div><div class=\"line\">           startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);  </div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">           startService(floatWinIntent);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"五、参考文献\"><a href=\"#五、参考文献\" class=\"headerlink\" title=\"五、参考文献\"></a>五、参考文献</h1><p><a href=\"http://www.jianshu.com/p/c5c3ef2b1b03\">Android源码解析Window系列第（一）篇—Window的基本认识和Activity的加载流程</a></p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/android-windows-manager/\">Android 悬浮窗的小结</a></p>\n<p><a href=\"http://www.jianshu.com/p/634cd056b90c\">Android悬浮窗TYPE_TOAST小结: 源码分析</a></p>\n<p><a href=\"http://www.jianshu.com/p/167fd5f47d5c\">Android无需权限显示悬浮窗, 兼谈逆向分析app</a></p>\n<p><a href=\"http://blog.csdn.net/self_study/article/details/52859790\">Android 悬浮窗权限各机型各系统适配大全</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxfjaeqg0000ystgozx6o1hi","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaeqt000bystgsdyyp13w"},{"post_id":"cjxfjaeqg0000ystgozx6o1hi","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaequ000dystgbzmz608m"},{"post_id":"cjxfjaeqk0001ystgia9lnfcs","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaeqz000mystgihkqjz0o"},{"post_id":"cjxfjaeqk0001ystgia9lnfcs","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaer0000oystgt4kxkmvi"},{"post_id":"cjxfjaeqk0001ystgia9lnfcs","tag_id":"cjxfjaeqw000hystgakzt4gwv","_id":"cjxfjaer1000rystg11vim9q1"},{"post_id":"cjxfjaeqy000jystgathcoyjx","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaer2000tystg2upppznf"},{"post_id":"cjxfjaeqm0003ystg8dtwso64","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaer4000zystgm9hjibar"},{"post_id":"cjxfjaeqm0003ystg8dtwso64","tag_id":"cjxfjaer0000pystg8get2v64","_id":"cjxfjaer50010ystgg4vbmpm8"},{"post_id":"cjxfjaeqm0003ystg8dtwso64","tag_id":"cjxfjaer2000uystg708w7yfr","_id":"cjxfjaer50012ystgxari37yl"},{"post_id":"cjxfjaeqm0003ystg8dtwso64","tag_id":"cjxfjaer4000xystgddckbqjv","_id":"cjxfjaer50013ystgq8pdpzfu"},{"post_id":"cjxfjaeqn0004ystgnhbnmtew","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaer60016ystgya6q6bg7"},{"post_id":"cjxfjaeqn0004ystgnhbnmtew","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaer60017ystgsgb12etg"},{"post_id":"cjxfjaeqn0004ystgnhbnmtew","tag_id":"cjxfjaer50011ystgyeydxnds","_id":"cjxfjaer70019ystgkacn4ms3"},{"post_id":"cjxfjaeqn0004ystgnhbnmtew","tag_id":"cjxfjaer60014ystgu5uaywht","_id":"cjxfjaer7001aystgc25z4o5j"},{"post_id":"cjxfjaeqo0005ystgyt04ls5l","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaer8001dystgbxtl7b07"},{"post_id":"cjxfjaeqo0005ystgyt04ls5l","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaer8001eystgms3dbrva"},{"post_id":"cjxfjaeqo0005ystgyt04ls5l","tag_id":"cjxfjaer70018ystgz8bieocs","_id":"cjxfjaer9001gystgpcw848pz"},{"post_id":"cjxfjaeqo0005ystgyt04ls5l","tag_id":"cjxfjaer7001bystg149p8gqk","_id":"cjxfjaer9001hystg43yt7ojx"},{"post_id":"cjxfjaeqp0007ystgqqrllrwf","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaer9001jystgks9o5thz"},{"post_id":"cjxfjaeqp0007ystgqqrllrwf","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaer9001kystg86o90vls"},{"post_id":"cjxfjaeqp0007ystgqqrllrwf","tag_id":"cjxfjaer8001cystg15i1yzdb","_id":"cjxfjaera001mystg0koae8n4"},{"post_id":"cjxfjaeqr0008ystg5dt71djy","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaera001nystg3ywkzcxl"},{"post_id":"cjxfjaeqr0008ystg5dt71djy","tag_id":"cjxfjaer8001fystgvj1rhtz6","_id":"cjxfjaera001oystgui3k1ylo"},{"post_id":"cjxfjaeqs000aystg9gt5vgdv","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaerb001qystgs1usfaxi"},{"post_id":"cjxfjaeqs000aystg9gt5vgdv","tag_id":"cjxfjaer9001iystggmlowh2b","_id":"cjxfjaerb001rystgy00r39h5"},{"post_id":"cjxfjaeqt000cystghvdlejvu","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaerc001tystgfkejml5n"},{"post_id":"cjxfjaeqt000cystghvdlejvu","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaerc001uystg63s2ojyk"},{"post_id":"cjxfjaeqt000cystghvdlejvu","tag_id":"cjxfjaera001lystgdnma26om","_id":"cjxfjaerc001wystgis2ltiw0"},{"post_id":"cjxfjaeqv000fystg4wr84zlr","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaerc001xystgie1o1uil"},{"post_id":"cjxfjaeqv000fystg4wr84zlr","tag_id":"cjxfjaerb001pystg9tchlzu2","_id":"cjxfjaerd001zystgyvolrqku"},{"post_id":"cjxfjaeqw000gystgd2wt5qfu","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaerd0020ystgckgkztkm"},{"post_id":"cjxfjaeqw000gystgd2wt5qfu","tag_id":"cjxfjaerb001systgx4nysyqj","_id":"cjxfjaerd0021ystghltn8b6d"},{"post_id":"cjxfjaeqw000gystgd2wt5qfu","tag_id":"cjxfjaerc001vystgrw8hvugr","_id":"cjxfjaere0023ystgl4kbb6lc"},{"post_id":"cjxfjaeqx000iystgfrtajzny","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaerf0026ystgctr1le0a"},{"post_id":"cjxfjaeqx000iystgfrtajzny","tag_id":"cjxfjaerd001yystg3r8bfiw2","_id":"cjxfjaerf0027ystg1g44n09u"},{"post_id":"cjxfjaeqx000iystgfrtajzny","tag_id":"cjxfjaere0022ystgo9ofwpv4","_id":"cjxfjaerf0029ystgosyubqs4"},{"post_id":"cjxfjaeqx000iystgfrtajzny","tag_id":"cjxfjaere0024ystgbafiprw0","_id":"cjxfjaerg002aystgv43z5i6c"},{"post_id":"cjxfjaeqz000lystg4xlpt1wy","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaerh002eystg8xff7fqj"},{"post_id":"cjxfjaeqz000lystg4xlpt1wy","tag_id":"cjxfjaerf0028ystgxi52ftz3","_id":"cjxfjaerh002fystg6lb7311v"},{"post_id":"cjxfjaeqz000lystg4xlpt1wy","tag_id":"cjxfjaerg002bystg5qzhrhpm","_id":"cjxfjaeri002hystggmhwk12o"},{"post_id":"cjxfjaeqz000lystg4xlpt1wy","tag_id":"cjxfjaerg002cystgn50phias","_id":"cjxfjaeri002iystgce3wzbmg"},{"post_id":"cjxfjaeqz000nystgc44sh3e8","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaerj002mystgwdedklyh"},{"post_id":"cjxfjaeqz000nystgc44sh3e8","tag_id":"cjxfjaerf0028ystgxi52ftz3","_id":"cjxfjaerk002nystg8b241sme"},{"post_id":"cjxfjaeqz000nystgc44sh3e8","tag_id":"cjxfjaerg002bystg5qzhrhpm","_id":"cjxfjaerk002pystgq9j36gz2"},{"post_id":"cjxfjaeqz000nystgc44sh3e8","tag_id":"cjxfjaerj002kystgb3yj1txj","_id":"cjxfjaerk002qystgqlzl4wio"},{"post_id":"cjxfjaer0000qystge9egc2v9","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaerm002uystggddl4jom"},{"post_id":"cjxfjaer0000qystge9egc2v9","tag_id":"cjxfjaerf0028ystgxi52ftz3","_id":"cjxfjaerm002vystg1sdwm91n"},{"post_id":"cjxfjaer0000qystge9egc2v9","tag_id":"cjxfjaerg002bystg5qzhrhpm","_id":"cjxfjaern002xystgvbiahryr"},{"post_id":"cjxfjaer0000qystge9egc2v9","tag_id":"cjxfjaerg002cystgn50phias","_id":"cjxfjaern002yystghq8t88i8"},{"post_id":"cjxfjaer1000systgyyhsn7bi","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaero0030ystg4qw4shwp"},{"post_id":"cjxfjaer1000systgyyhsn7bi","tag_id":"cjxfjaern002wystgu8wbis65","_id":"cjxfjaero0031ystgu5r9vo08"},{"post_id":"cjxfjaer2000vystghmueey40","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaerq0036ystg1qf3g703"},{"post_id":"cjxfjaer2000vystghmueey40","tag_id":"cjxfjaero0032ystg8ceqy5dm","_id":"cjxfjaerq0037ystg2gu2rjm7"},{"post_id":"cjxfjaer2000vystghmueey40","tag_id":"cjxfjaero0033ystgai6mt3gh","_id":"cjxfjaerq0039ystgv7onsneq"},{"post_id":"cjxfjaer2000vystghmueey40","tag_id":"cjxfjaerp0034ystgotbcv2tb","_id":"cjxfjaerq003aystg3z8trlci"},{"post_id":"cjxfjaer3000wystg4eohcr0q","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaers003dystgcmtdm55k"},{"post_id":"cjxfjaer3000wystg4eohcr0q","tag_id":"cjxfjaerq0038ystg0ppcfk4z","_id":"cjxfjaers003eystgz7jjqbqp"},{"post_id":"cjxfjaer3000wystg4eohcr0q","tag_id":"cjxfjaerg002bystg5qzhrhpm","_id":"cjxfjaers003fystgbg7bzdyd"},{"post_id":"cjxfjaer3000wystg4eohcr0q","tag_id":"cjxfjaerg002cystgn50phias","_id":"cjxfjaers003gystgklfwbiaw"},{"post_id":"cjxfjaerw003hystgjpzbsevg","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaes2003oystgvx1k77jt"},{"post_id":"cjxfjaerw003hystgjpzbsevg","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaes3003qystguau2m9v7"},{"post_id":"cjxfjaerw003hystgjpzbsevg","tag_id":"cjxfjaerx003jystg7peaz0ey","_id":"cjxfjaes5003tystgq6ugd8ad"},{"post_id":"cjxfjaerx003iystg0w36bjuu","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaes6003vystgew18u3p2"},{"post_id":"cjxfjaerx003iystg0w36bjuu","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaes7003xystgcma2cuq2"},{"post_id":"cjxfjaerx003iystg0w36bjuu","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaes8003yystgt5rtqqae"},{"post_id":"cjxfjaes5003uystgzeoy7r7z","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaes90040ystg7rjho3ei"},{"post_id":"cjxfjaes5003uystgzeoy7r7z","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaes90041ystgd099hlmk"},{"post_id":"cjxfjaes5003uystgzeoy7r7z","tag_id":"cjxfjaerf0028ystgxi52ftz3","_id":"cjxfjaesa0043ystgt1bjuspc"},{"post_id":"cjxfjaery003kystgxf6xzcd3","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesa0044ystgd6m9n8yz"},{"post_id":"cjxfjaery003kystgxf6xzcd3","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaesa0045ystgbu5c236u"},{"post_id":"cjxfjaery003kystgxf6xzcd3","tag_id":"cjxfjaes4003systgkn7j1k9k","_id":"cjxfjaesb0047ystg3tksl752"},{"post_id":"cjxfjaery003kystgxf6xzcd3","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaesb0048ystgrobtliv2"},{"post_id":"cjxfjaerz003lystgbsbrdw42","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesc004aystgldht6zfz"},{"post_id":"cjxfjaerz003lystgbsbrdw42","tag_id":"cjxfjaes8003zystgj2v3hs2v","_id":"cjxfjaesc004bystg7rync4di"},{"post_id":"cjxfjaerz003lystgbsbrdw42","tag_id":"cjxfjaes90042ystgeue72n1b","_id":"cjxfjaesd004dystgsylgt2wk"},{"post_id":"cjxfjaerz003mystgypd3vqgu","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesd004eystg3icwp7zc"},{"post_id":"cjxfjaerz003mystgypd3vqgu","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaesd004gystg569fahao"},{"post_id":"cjxfjaerz003mystgypd3vqgu","tag_id":"cjxfjaesb0046ystgnpycecui","_id":"cjxfjaese004hystg9epn1hp9"},{"post_id":"cjxfjaes2003pystgfsxlsztc","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaese004jystg3e6rkt20"},{"post_id":"cjxfjaes2003pystgfsxlsztc","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaesf004kystg3ojxigtw"},{"post_id":"cjxfjaes2003pystgfsxlsztc","tag_id":"cjxfjaesc0049ystgshi5dzu5","_id":"cjxfjaesf004lystgh0ofav5f"},{"post_id":"cjxfjaes2003pystgfsxlsztc","tag_id":"cjxfjaesc004cystg8365y4mr","_id":"cjxfjaesf004mystgwr4xkuu3"},{"post_id":"cjxfjaes4003rystgs6wd77e8","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesf004nystgobwqasmd"},{"post_id":"cjxfjaes4003rystgs6wd77e8","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaesf004oystgbuirqxob"},{"post_id":"cjxfjaes4003rystgs6wd77e8","tag_id":"cjxfjaesc0049ystgshi5dzu5","_id":"cjxfjaesg004pystghzff6nh9"},{"post_id":"cjxfjaes4003rystgs6wd77e8","tag_id":"cjxfjaese004iystg5a81v5tg","_id":"cjxfjaesg004qystgm7mtlt1b"},{"post_id":"cjxfjaest004systg003w9n31","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesv004vystg63gdeec2"},{"post_id":"cjxfjaest004systg003w9n31","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaesw004xystgqv3sgiku"},{"post_id":"cjxfjaest004systg003w9n31","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaesx0050ystgcf300afm"},{"post_id":"cjxfjaesv004wystgtt46e62h","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaesy0052ystgyvrardnf"},{"post_id":"cjxfjaesv004wystgtt46e62h","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet00055ystgtgjn3fqo"},{"post_id":"cjxfjaesv004wystgtt46e62h","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet10057ystgbr3etu2j"},{"post_id":"cjxfjaest004rystgllq2cjqg","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet10059ystg1n8faxxl"},{"post_id":"cjxfjaest004rystgllq2cjqg","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet3005cystgokf3gt33"},{"post_id":"cjxfjaest004rystgllq2cjqg","tag_id":"cjxfjaesu004tystg6kegxkgl","_id":"cjxfjaet4005eystg7abl8r88"},{"post_id":"cjxfjaest004rystgllq2cjqg","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet5005gystgkguao9bu"},{"post_id":"cjxfjaesw004yystghygc5idl","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet5005hystg1pmmouta"},{"post_id":"cjxfjaesw004yystghygc5idl","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet6005jystgzv93h42f"},{"post_id":"cjxfjaesw004yystghygc5idl","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet6005kystgmoh7njwd"},{"post_id":"cjxfjaesu004uystgogfpkh29","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet6005mystgq6uh0ddb"},{"post_id":"cjxfjaesu004uystgogfpkh29","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet7005nystg4qiukir8"},{"post_id":"cjxfjaesu004uystgogfpkh29","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet7005oystgiy16u0fs"},{"post_id":"cjxfjaesu004uystgogfpkh29","tag_id":"cjxfjaesx004zystg8c6y4po2","_id":"cjxfjaet7005pystgbk0p5nza"},{"post_id":"cjxfjaet00056ystg33enq974","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet7005qystgmbknjnhi"},{"post_id":"cjxfjaet00056ystg33enq974","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet7005rystgg4vs3cq9"},{"post_id":"cjxfjaet00056ystg33enq974","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet8005systg69d8a6vr"},{"post_id":"cjxfjaet10058ystgjhzwfkzc","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet8005tystgbufrglv6"},{"post_id":"cjxfjaet10058ystgjhzwfkzc","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet8005uystgp8b0k41x"},{"post_id":"cjxfjaet10058ystgjhzwfkzc","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet8005vystgexa6iahs"},{"post_id":"cjxfjaesy0051ystgzpaswn6k","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet8005wystgwq4zzdp2"},{"post_id":"cjxfjaesy0051ystgzpaswn6k","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet9005xystg7skgcoaj"},{"post_id":"cjxfjaesy0051ystgzpaswn6k","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaet9005yystghcx5gx4f"},{"post_id":"cjxfjaesy0051ystgzpaswn6k","tag_id":"cjxfjaesz0054ystgzd9qacoq","_id":"cjxfjaet9005zystgqwejyixi"},{"post_id":"cjxfjaesz0053ystg8iadixco","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaet90060ystg88hnbnds"},{"post_id":"cjxfjaesz0053ystg8iadixco","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaet90061ystgujvnk6am"},{"post_id":"cjxfjaesz0053ystg8iadixco","tag_id":"cjxfjaet2005bystg2vix96lp","_id":"cjxfjaet90062ystge9463l5s"},{"post_id":"cjxfjaesz0053ystg8iadixco","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaeta0063ystgr61k08mh"},{"post_id":"cjxfjaet2005aystgm6pi1nnb","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaeta0064ystg6esxnhj0"},{"post_id":"cjxfjaet2005aystgm6pi1nnb","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaeta0065ystgd988efyg"},{"post_id":"cjxfjaet2005aystgm6pi1nnb","tag_id":"cjxfjaesc0049ystgshi5dzu5","_id":"cjxfjaeta0066ystggfntsad6"},{"post_id":"cjxfjaet2005aystgm6pi1nnb","tag_id":"cjxfjaet4005fystga3hcmz20","_id":"cjxfjaeta0067ystgfiiu57d8"},{"post_id":"cjxfjaet3005dystgl68k5ocu","tag_id":"cjxfjaere0025ystgm275ga9h","_id":"cjxfjaeta0068ystgt334qqub"},{"post_id":"cjxfjaet3005dystgl68k5ocu","tag_id":"cjxfjaero0032ystg8ceqy5dm","_id":"cjxfjaetb0069ystgrew5qcfp"},{"post_id":"cjxfjaet3005dystgl68k5ocu","tag_id":"cjxfjaet5005iystgha0j4jus","_id":"cjxfjaetb006aystggxl9687i"},{"post_id":"cjxfjaet3005dystgl68k5ocu","tag_id":"cjxfjaet6005lystgdhcb8s3e","_id":"cjxfjaetb006bystge3gn1imf"},{"post_id":"cjxfjaete006dystg2xo1d2zr","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaetg006gystg72e22noa"},{"post_id":"cjxfjaete006dystg2xo1d2zr","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaeth006iystgc0tsutu6"},{"post_id":"cjxfjaete006dystg2xo1d2zr","tag_id":"cjxfjaet2005bystg2vix96lp","_id":"cjxfjaeti006kystgbjn6vl2y"},{"post_id":"cjxfjaete006dystg2xo1d2zr","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaeti006lystgsxqovyut"},{"post_id":"cjxfjaetf006fystg9xusg2sk","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaeti006nystg32385wjv"},{"post_id":"cjxfjaetf006fystg9xusg2sk","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaetj006oystgihs70bwz"},{"post_id":"cjxfjaetf006fystg9xusg2sk","tag_id":"cjxfjaes1003nystgqyxky8s5","_id":"cjxfjaetj006qystglr1jq6f3"},{"post_id":"cjxfjaetd006cystg20tsmy5a","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaetj006rystgqb1o6unm"},{"post_id":"cjxfjaetd006cystg20tsmy5a","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaetj006systgcsse5g20"},{"post_id":"cjxfjaetd006cystg20tsmy5a","tag_id":"cjxfjaetf006eystgl7551x3v","_id":"cjxfjaetk006tystgl7vsgbr0"},{"post_id":"cjxfjaetd006cystg20tsmy5a","tag_id":"cjxfjaeth006jystghlf3iuwy","_id":"cjxfjaetk006uystgz6o3c4uo"},{"post_id":"cjxfjaetg006hystgg4v9ssy4","tag_id":"cjxfjaeql0002ystg3o63sj8d","_id":"cjxfjaetk006vystgvhy7kzea"},{"post_id":"cjxfjaetg006hystgg4v9ssy4","tag_id":"cjxfjaeqp0006ystgjcc8gvss","_id":"cjxfjaetk006wystgrysot1u5"},{"post_id":"cjxfjaetg006hystgg4v9ssy4","tag_id":"cjxfjaeti006mystgbaa1pm41","_id":"cjxfjaetk006xystggyl8qzpz"},{"post_id":"cjxfjaetg006hystgg4v9ssy4","tag_id":"cjxfjaetj006pystgryy9soij","_id":"cjxfjaetl006yystgg3e54kf2"}],"Tag":[{"name":"技术","_id":"cjxfjaeql0002ystg3o63sj8d"},{"name":"Android","_id":"cjxfjaeqp0006ystgjcc8gvss"},{"name":"Activity的启动模式","_id":"cjxfjaeqw000hystgakzt4gwv"},{"name":"Android注解","_id":"cjxfjaer0000pystg8get2v64"},{"name":"Java反射机制","_id":"cjxfjaer2000uystg708w7yfr"},{"name":"Java动态代理","_id":"cjxfjaer4000xystgddckbqjv"},{"name":"NDK","_id":"cjxfjaer50011ystgyeydxnds"},{"name":"JNI C/C++","_id":"cjxfjaer60014ystgu5uaywht"},{"name":"Android基础","_id":"cjxfjaer70018ystgz8bieocs"},{"name":"MVP","_id":"cjxfjaer7001bystg149p8gqk"},{"name":"开源框架","_id":"cjxfjaer8001cystg15i1yzdb"},{"name":"AS Gradle优化","_id":"cjxfjaer8001fystgvj1rhtz6"},{"name":"设计模式","_id":"cjxfjaer9001iystggmlowh2b"},{"name":"Fragment","_id":"cjxfjaera001lystgdnma26om"},{"name":"博客搭建","_id":"cjxfjaerb001pystg9tchlzu2"},{"name":"Java","_id":"cjxfjaerb001systgx4nysyqj"},{"name":"Java基础","_id":"cjxfjaerc001vystgrw8hvugr"},{"name":"Rxjava","_id":"cjxfjaerd001yystg3r8bfiw2"},{"name":"Rxandroid","_id":"cjxfjaere0022ystgo9ofwpv4"},{"name":"响应式编程","_id":"cjxfjaere0024ystgbafiprw0"},{"name":"随想","_id":"cjxfjaere0025ystgm275ga9h"},{"name":"你本是一个肉体，是什么驱使你前行","_id":"cjxfjaerf0028ystgxi52ftz3"},{"name":"原创","_id":"cjxfjaerg002bystg5qzhrhpm"},{"name":"笔沫拾光","_id":"cjxfjaerg002cystgn50phias"},{"name":"王阳明心学","_id":"cjxfjaerj002kystgb3yj1txj"},{"name":"中国历史","_id":"cjxfjaern002wystgu8wbis65"},{"name":"演讲","_id":"cjxfjaero0032ystg8ceqy5dm"},{"name":"执着的人是幸福的","_id":"cjxfjaero0033ystgai6mt3gh"},{"name":"郭川","_id":"cjxfjaerp0034ystgotbcv2tb"},{"name":"人生的意义","_id":"cjxfjaerq0038ystg0ppcfk4z"},{"name":"加解密算法","_id":"cjxfjaerx003jystg7peaz0ey"},{"name":"Android框架源码解析","_id":"cjxfjaes1003nystgqyxky8s5"},{"name":"Binder通信机制","_id":"cjxfjaes4003systgkn7j1k9k"},{"name":"Java集合类","_id":"cjxfjaes8003zystgj2v3hs2v"},{"name":"转载","_id":"cjxfjaes90042ystgeue72n1b"},{"name":"Http文件断点续传","_id":"cjxfjaesb0046ystgnpycecui"},{"name":"开源框架源码解析","_id":"cjxfjaesc0049ystgshi5dzu5"},{"name":"Logger框架源码解析","_id":"cjxfjaesc004cystg8365y4mr"},{"name":"LeakCanary框架源码分析","_id":"cjxfjaese004iystg5a81v5tg"},{"name":"DecorView绘制流程","_id":"cjxfjaesu004tystg6kegxkgl"},{"name":"Android应用程序入口源码解析","_id":"cjxfjaesx004zystg8c6y4po2"},{"name":"Android消息机制源码解析","_id":"cjxfjaesz0054ystgzd9qacoq"},{"name":"Activity启动流程","_id":"cjxfjaet2005bystg2vix96lp"},{"name":"Butterknife框架源码解析","_id":"cjxfjaet4005fystga3hcmz20"},{"name":"我之存在，因为有你","_id":"cjxfjaet5005iystgha0j4jus"},{"name":"霍华德*舒尔茨","_id":"cjxfjaet6005lystgdhcb8s3e"},{"name":"Android相机","_id":"cjxfjaetf006eystgl7551x3v"},{"name":"Camera","_id":"cjxfjaeth006jystghlf3iuwy"},{"name":"悬浮窗","_id":"cjxfjaeti006mystgbaa1pm41"},{"name":"WindowManager","_id":"cjxfjaetj006pystgryy9soij"}]}}