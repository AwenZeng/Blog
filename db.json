{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"source/assets/img/avatar.ico","path":"assets/img/avatar.ico","modified":0,"renderable":0},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/wechat_pay.jpg","path":"assets/img/wechat_pay.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1484569640000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1484569640000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1484569640000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1484569640000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1484569640000},{"_id":"themes/yilia/_config.yml","hash":"988797059c2d21f05a00c103c455df45e382e26a","modified":1490854900722},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1484569640000},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1484569640000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1484569640000},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1484569640000},{"_id":"source/_posts/tech_android_basic_point.md","hash":"d2750d5217385722c7b6c82da20febfa505a3300","modified":1491569929997},{"_id":"source/_posts/tech_rxjava_basic.md","hash":"35c120c971a09c5d1c2332e2e7d72845d6f25437","modified":1490439065366},{"_id":"source/_posts/tech-android-act-start-mode.md","hash":"4b53bb9cbb6a7b134c7af2c543a75b0bd27a5909","modified":1490437092249},{"_id":"source/_posts/tech_study_website.md","hash":"4fc36848b88ec98b1d35633ff827274ca52bfae5","modified":1490854726433},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1484569640000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1484569640000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1484569640000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1484569640000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1484569640000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1484569640000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1484569640000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1484569640000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1484569640000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1484569640000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1484569640000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484569640000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484569640000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1484569640000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1484569640000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1484569640000},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1484569640000},{"_id":"source/_posts/think_ship_poem.md","hash":"6e4d8042468144f32a6314db0a1eb421aa8db5b3","modified":1489758984691},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1484569640000},{"_id":"source/_posts/travel_korea_jeju.md","hash":"a6b3d23dc7015dfa3cc44192b4d31e0e73adf5a3","modified":1489758921435},{"_id":"source/assets/img/avatar.ico","hash":"424b445f3d6099d55ff185558c606fb829c64d17","modified":1488970438397},{"_id":"source/assets/img/avatar.jpg","hash":"758951c8dc8b33fa2153970effaf45d70621c7a1","modified":1488970081761},{"_id":"themes/yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1484569640000},{"_id":"source/assets/img/alipay.jpg","hash":"57969619aef137f74f304132efbff53fd76520f9","modified":1488968533033},{"_id":"source/assets/img/wechat_pay.jpg","hash":"68db0b45cc128145776978d7da942b33c492c0c1","modified":1490082740099},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1484569640000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1484569640000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1484569640000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1484569640000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1484569640000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"aadab85a35042afdcbce768a32bb9121b0ad1831","modified":1484569640000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1484569640000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1484569640000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1484569640000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1484569640000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1484569640000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1484569640000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1484569640000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1484569640000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1484569640000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1484569640000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1484569640000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1484569640000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1484569640000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1484569640000},{"_id":"themes/yilia/source/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1484569640000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1484569640000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1484569640000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1484569640000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1484569640000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1484569640000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1484569640000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1484569640000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1484569640000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1484569640000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1484569640000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1484569640000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1484569640000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1484569640000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1484569640000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1484569640000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1484569640000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1484569640000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1484569640000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1484569640000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1484569640000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1484569640000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1484569640000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1484569640000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1484569640000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1484569640000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1484569640000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1484569640000},{"_id":"themes/yilia/source/img/alipay.png","hash":"a23dada0d2eec60b4c11d241b8502d265f69e26a","modified":1488885999500},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1484569640000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1484569640000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1484569640000},{"_id":"themes/yilia/source/img/wechat_pay.png","hash":"347f8ba7dc637c69a39b9801537540c4a836990c","modified":1488885908172},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1484569640000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1484569640000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1484569640000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1484569640000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1484569640000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1484569640000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1484569640000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1484569640000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1484569640000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1484569640000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1484569640000},{"_id":"public/content.json","hash":"89ee92dbd05dde5e6e375d994d4296e05c246b09","modified":1491569946157},{"_id":"public/2017/04/05/tech_android_basic_point/index.html","hash":"c55a2d98fd7d33a3dcfa53b8c901b7dbe862b3b7","modified":1491569946305},{"_id":"public/2017/03/25/tech-android-act-start-mode/index.html","hash":"1b50949be73226e46fc0da434a85f0744990dbde","modified":1491569831177},{"_id":"public/2017/03/17/tech_study_website/index.html","hash":"3e1fa519215b2568874c6ed7ef9178e46f3a979b","modified":1491569831191},{"_id":"public/archives/index.html","hash":"b5257716177532964c1d9cf775e0ffc90cc468e9","modified":1491569831191},{"_id":"public/archives/2017/index.html","hash":"b43c26e1214671eed28d119e7222ecf65269ddc5","modified":1491569831191},{"_id":"public/archives/2017/03/index.html","hash":"762a33b434915dc9c8849bbd7c2f39fb0a5d49dc","modified":1491569831191},{"_id":"public/archives/2017/04/index.html","hash":"14bde61ce2b53282ddca2ade879f136957525292","modified":1491569831191},{"_id":"public/2017/03/16/think_ship_poem/index.html","hash":"59278d3c950b6ca91fe0b27bdc646635c5eb63b6","modified":1491569831192},{"_id":"public/2017/03/16/travel_korea_jeju/index.html","hash":"1635fba5ca2817552afc41dcf04bb1c38a46d385","modified":1491569831192},{"_id":"public/2017/03/16/tech_rxjava_basic/index.html","hash":"7e6b827026826a6aa664880091d8494b690aba8b","modified":1491569831192},{"_id":"public/index.html","hash":"cab5050042de34848d4ce019deba922bca124ea8","modified":1491569946305},{"_id":"public/tags/技术/index.html","hash":"245741217eab19e6bf6ddec36a217e7ae5db0a4b","modified":1491569831192},{"_id":"public/tags/Rxjava/index.html","hash":"ca0f54172825bdefc8eda37bfec78e1aeb22124d","modified":1491569831192},{"_id":"public/tags/Android/index.html","hash":"f67b9388a969bafcb563dbe39903a3fcde112ade","modified":1491569831192},{"_id":"public/tags/Rxandroid/index.html","hash":"ac9788d1e914fdd864405ca62d61326672b01bfc","modified":1491569831192},{"_id":"public/tags/摄影/index.html","hash":"72a86185c729e327a81ec7789d6ab76228829bce","modified":1491569831192},{"_id":"public/tags/随想/index.html","hash":"8256577734e49c9c3d3fcce8af4d9fc822511a5b","modified":1491569831192},{"_id":"public/tags/旅行/index.html","hash":"432e59a4c1d95b5cfe83a725fe846afca994b41c","modified":1491569831192},{"_id":"public/assets/img/avatar.jpg","hash":"758951c8dc8b33fa2153970effaf45d70621c7a1","modified":1491569831196},{"_id":"public/assets/img/avatar.ico","hash":"424b445f3d6099d55ff185558c606fb829c64d17","modified":1491569831196},{"_id":"public/assets/img/alipay.jpg","hash":"57969619aef137f74f304132efbff53fd76520f9","modified":1491569831196},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1491569831196},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1491569831196},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1491569831196},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1491569831197},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1491569831197},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1491569831197},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1491569831197},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1491569831197},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1491569831197},{"_id":"public/assets/img/wechat_pay.jpg","hash":"68db0b45cc128145776978d7da942b33c492c0c1","modified":1491569831200},{"_id":"public/img/wechat_pay.png","hash":"347f8ba7dc637c69a39b9801537540c4a836990c","modified":1491569831201},{"_id":"public/img/alipay.png","hash":"a23dada0d2eec60b4c11d241b8502d265f69e26a","modified":1491569831202},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1491569831205},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1491569831205},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1491569831205},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1491569831205}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Android技术知识要点","date":"2017-04-05T10:57:14.000Z","comments":1,"_content":"---\n# 一、项目中使用库工程问题要点\n##### 1.库工程与主工程资源冲突问题\n\n  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。\n\n##### 2.库工程之间以及主工程的资源使用上的优先级问题\n\n上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。\n\n##### 3.库工程和主工程使用不同的android platform version问题\n\n主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。\n<!-- more -->\n# 二、自定义ViewGroup或Canvas获取绘制内容Bitmap\n* 可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。\n* 从Canvas获取Bitmap(自定义View类似),例子：\n\n```java\npublic Bitmap getBitmap() {  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = new Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, 0, 0, null);  \n        return whiteBgBitmap;  \n    }  \n``` ","source":"_posts/tech_android_basic_point.md","raw":"---\nlayout: post\ntitle: \"Android技术知识要点\"\ndate: 4/5/2017 6:57:14 PM \ncomments: true\ntags: \n\t- 技术 \n---\n---\n# 一、项目中使用库工程问题要点\n##### 1.库工程与主工程资源冲突问题\n\n  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。\n\n##### 2.库工程之间以及主工程的资源使用上的优先级问题\n\n上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。\n\n##### 3.库工程和主工程使用不同的android platform version问题\n\n主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。\n<!-- more -->\n# 二、自定义ViewGroup或Canvas获取绘制内容Bitmap\n* 可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。\n* 从Canvas获取Bitmap(自定义View类似),例子：\n\n```java\npublic Bitmap getBitmap() {  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = new Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, 0, 0, null);  \n        return whiteBgBitmap;  \n    }  \n``` ","slug":"tech_android_basic_point","published":1,"updated":"2017-04-07T12:58:49.997Z","_id":"cj17u5yrp0000yolkc24p2yde","photos":[],"link":"","content":"<hr>\n<h1 id=\"一、项目中使用库工程问题要点\"><a href=\"#一、项目中使用库工程问题要点\" class=\"headerlink\" title=\"一、项目中使用库工程问题要点\"></a>一、项目中使用库工程问题要点</h1><h5 id=\"1-库工程与主工程资源冲突问题\"><a href=\"#1-库工程与主工程资源冲突问题\" class=\"headerlink\" title=\"1.库工程与主工程资源冲突问题\"></a>1.库工程与主工程资源冲突问题</h5><p>  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。</p>\n<h5 id=\"2-库工程之间以及主工程的资源使用上的优先级问题\"><a href=\"#2-库工程之间以及主工程的资源使用上的优先级问题\" class=\"headerlink\" title=\"2.库工程之间以及主工程的资源使用上的优先级问题\"></a>2.库工程之间以及主工程的资源使用上的优先级问题</h5><p>上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。</p>\n<h5 id=\"3-库工程和主工程使用不同的android-platform-version问题\"><a href=\"#3-库工程和主工程使用不同的android-platform-version问题\" class=\"headerlink\" title=\"3.库工程和主工程使用不同的android platform version问题\"></a>3.库工程和主工程使用不同的android platform version问题</h5><p>主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。<br><a id=\"more\"></a></p>\n<h1 id=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"><a href=\"#二、自定义ViewGroup或Canvas获取绘制内容Bitmap\" class=\"headerlink\" title=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"></a>二、自定义ViewGroup或Canvas获取绘制内容Bitmap</h1><ul>\n<li>可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。</li>\n<li>从Canvas获取Bitmap(自定义View类似),例子：</li>\n</ul>\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">()</span> </span>{  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = <span class=\"keyword\">new</span> Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  \n        <span class=\"keyword\">return</span> whiteBgBitmap;  \n    }\n</code></pre>\n","excerpt":"<hr>\n<h1 id=\"一、项目中使用库工程问题要点\"><a href=\"#一、项目中使用库工程问题要点\" class=\"headerlink\" title=\"一、项目中使用库工程问题要点\"></a>一、项目中使用库工程问题要点</h1><h5 id=\"1-库工程与主工程资源冲突问题\"><a href=\"#1-库工程与主工程资源冲突问题\" class=\"headerlink\" title=\"1.库工程与主工程资源冲突问题\"></a>1.库工程与主工程资源冲突问题</h5><p>  当运行有引用library工程的android工程时，android工具将会合并library工程与主工程的所有资源。如果一个资源ID将有可能在library工程之间或library工程、主工程之间都有定义，这时候优先级别高的资源ID将覆盖优先级别低的，使用资源时将使用有线级别最高的工程的资源。工程之间优先级别如何判定，请看下一条。</p>\n<h5 id=\"2-库工程之间以及主工程的资源使用上的优先级问题\"><a href=\"#2-库工程之间以及主工程的资源使用上的优先级问题\" class=\"headerlink\" title=\"2.库工程之间以及主工程的资源使用上的优先级问题\"></a>2.库工程之间以及主工程的资源使用上的优先级问题</h5><p>上图显示一个android工程引用了四个library工程，这四个library工程和主工程之间是有优先级之分的。android主工程的优先级别最高，四个library工程科举上图排序有上到下优先级别依次降低。library工程之间也可以手动排序，选择其中一个，点击up(提高优先级)或者down（降低优先级）。</p>\n<h5 id=\"3-库工程和主工程使用不同的android-platform-version问题\"><a href=\"#3-库工程和主工程使用不同的android-platform-version问题\" class=\"headerlink\" title=\"3.库工程和主工程使用不同的android platform version问题\"></a>3.库工程和主工程使用不同的android platform version问题</h5><p>主工程打包时，android sdk版本使用的是主工程。所以library工程使用的android sdk版本要不高于主工程的sdk版本。如果library工程sdk版本高于主工程，将不能通过编译。<br>","more":"</p>\n<h1 id=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"><a href=\"#二、自定义ViewGroup或Canvas获取绘制内容Bitmap\" class=\"headerlink\" title=\"二、自定义ViewGroup或Canvas获取绘制内容Bitmap\"></a>二、自定义ViewGroup或Canvas获取绘制内容Bitmap</h1><ul>\n<li>可以通过setDrawingCacheEnabled，然后再getDrawingCache(),但这个你得保证onDraw被调用。</li>\n<li>从Canvas获取Bitmap(自定义View类似),例子：</li>\n</ul>\n<pre><code class=\"java\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">()</span> </span>{  \n        Bitmap whiteBgBitmap = Bitmap.createBitmap(mBackgroundBitmap.getWidth(), mBackgroundBitmap.getHeight(),  \n                Bitmap.Config.ARGB_8888);  \n        Canvas canvas = <span class=\"keyword\">new</span> Canvas(whiteBgBitmap);  \n        canvas.drawColor(Color.WHITE);  \n        canvas.drawBitmap(mBackgroundBitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  \n        <span class=\"keyword\">return</span> whiteBgBitmap;  \n    }\n</code></pre>"},{"layout":"post","title":"【响应式编程】Rxjava学习总结","date":"2017-03-16T13:06:13.000Z","comments":1,"_content":"---\n# 1.[RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083) #\n# 2.RxJava常用方法总结 #\nRxJava 的观察者模式\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg)\n\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg)\n\n\nObservable.just(T...)方法\n>![](http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg)\n>Observable.just()动画显示\n>![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif)\n\nObservable.from(T[])分发集合方法(图类似just())\n\n<!-- more -->\nObservable.map()直接变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg)\n\nObservable.flatMap()平铺变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg)\n\n# 3.RxJava线程调度 #\n1.RxJava线程控制\n>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)\n>\nObservable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程\n>\nObservable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用\n\n2.Schedulers介绍\n\n > Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。\n > \n > Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n > \n > Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n > \n >Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n >\n >AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   \n\n# 4.结尾 #\n以上图片资源皆来至于 [RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083)\n\n\n","source":"_posts/tech_rxjava_basic.md","raw":"---\nlayout: post\ntitle: \"【响应式编程】Rxjava学习总结\"\ndate: 3/16/2017 9:06:13 PM \ncomments: true\ntags: \n\t- 技术 \n\t- Rxjava\n\t- Rxandroid\n---\n---\n# 1.[RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083) #\n# 2.RxJava常用方法总结 #\nRxJava 的观察者模式\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg)\n\n\n![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg)\n\n\nObservable.just(T...)方法\n>![](http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg)\n>Observable.just()动画显示\n>![](http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif)\n\nObservable.from(T[])分发集合方法(图类似just())\n\n<!-- more -->\nObservable.map()直接变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg)\n\nObservable.flatMap()平铺变换\n>![](http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg)\n\n# 3.RxJava线程调度 #\n1.RxJava线程控制\n>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)\n>\nObservable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程\n>\nObservable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用\n\n2.Schedulers介绍\n\n > Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。\n > \n > Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。\n > \n > Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n > \n >Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。\n >\n >AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   \n\n# 4.结尾 #\n以上图片资源皆来至于 [RxJava基础详解-扔物线](http://gank.io/post/560e15be2dca930e00da1083)\n\n\n","slug":"tech_rxjava_basic","published":1,"updated":"2017-03-25T10:51:05.366Z","photos":[],"link":"","_id":"cj17u5yry0003yolkqxlp5y3n","content":"<hr>\n<h1 id=\"1-RxJava基础详解-扔物线\"><a href=\"#1-RxJava基础详解-扔物线\" class=\"headerlink\" title=\"1.RxJava基础详解-扔物线\"></a>1.<a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava基础详解-扔物线</a></h1><h1 id=\"2-RxJava常用方法总结\"><a href=\"#2-RxJava常用方法总结\" class=\"headerlink\" title=\"2.RxJava常用方法总结\"></a>2.RxJava常用方法总结</h1><p>RxJava 的观察者模式</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg\" alt=\"\"></p>\n<p>Observable.just(T…)方法</p>\n<blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg\" alt=\"\"><br>Observable.just()动画显示<br><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif\" alt=\"\"></p>\n</blockquote>\n<p>Observable.from(T[])分发集合方法(图类似just())</p>\n<a id=\"more\"></a>\n<p>Observable.map()直接变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg\" alt=\"\"></p>\n</blockquote>\n<p>Observable.flatMap()平铺变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-RxJava线程调度\"><a href=\"#3-RxJava线程调度\" class=\"headerlink\" title=\"3.RxJava线程调度\"></a>3.RxJava线程调度</h1><p>1.RxJava线程控制</p>\n<blockquote>\n<p>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)</p>\n<p>Observable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程</p>\n<p>Observable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用</p>\n</blockquote>\n<p>2.Schedulers介绍</p>\n<blockquote>\n<p>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。</p>\n<p>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</p>\n<p>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</p>\n<p>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>\n<p>AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   </p>\n</blockquote>\n<h1 id=\"4-结尾\"><a href=\"#4-结尾\" class=\"headerlink\" title=\"4.结尾\"></a>4.结尾</h1><p>以上图片资源皆来至于 <a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava基础详解-扔物线</a></p>\n","excerpt":"<hr>\n<h1 id=\"1-RxJava基础详解-扔物线\"><a href=\"#1-RxJava基础详解-扔物线\" class=\"headerlink\" title=\"1.RxJava基础详解-扔物线\"></a>1.<a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava基础详解-扔物线</a></h1><h1 id=\"2-RxJava常用方法总结\"><a href=\"#2-RxJava常用方法总结\" class=\"headerlink\" title=\"2.RxJava常用方法总结\"></a>2.RxJava常用方法总结</h1><p>RxJava 的观察者模式</p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg\" alt=\"\"></p>\n<p>Observable.just(T…)方法</p>\n<blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx489robj20lk0a8my2.jpg\" alt=\"\"><br>Observable.just()动画显示<br><img src=\"http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ay0hrg20ig08wk4q.gif\" alt=\"\"></p>\n</blockquote>\n<p>Observable.from(T[])分发集合方法(图类似just())</p>","more":"<p>Observable.map()直接变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg\" alt=\"\"></p>\n</blockquote>\n<p>Observable.flatMap()平铺变换</p>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-RxJava线程调度\"><a href=\"#3-RxJava线程调度\" class=\"headerlink\" title=\"3.RxJava线程调度\"></a>3.RxJava线程调度</h1><p>1.RxJava线程控制</p>\n<blockquote>\n<p>Observable.subscribeOn(Schedulers.io())指定被观察运行线程(订阅线程)</p>\n<p>Observable.observeOn(AndroidSchedulers.mainThread)指定观察者运行线程</p>\n<p>Observable.doOnSubscribe(Schedulers.io())被观察者开始执行前调用</p>\n</blockquote>\n<p>2.Schedulers介绍</p>\n<blockquote>\n<p>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程（这是默认的）。</p>\n<p>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</p>\n<p>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</p>\n<p>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>\n<p>AndroidSchedulers.mainThread()，是RxAndroid 中一个对 RxJava 的轻量级扩展为了Android 的主线程提供 Scheduler，它指定的操作将在 Android 主线程运行。   </p>\n</blockquote>\n<h1 id=\"4-结尾\"><a href=\"#4-结尾\" class=\"headerlink\" title=\"4.结尾\"></a>4.结尾</h1><p>以上图片资源皆来至于 <a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava基础详解-扔物线</a></p>"},{"layout":"post","title":"【Android基础】Activity的启动模式","date":"2017-03-25T04:02:11.000Z","comments":1,"_content":"---\n 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。\n> 四种启动模式分别为：\n> \n- standard\n- singleTop\n- singleTask\n- singleInstance\n \n   \n>启动模式配置\n```xml\n<activity android:name=\".Activity\" android:launchMode=\"启动模式\">\n```\n\n# Activity的四种启动模式\n\n----------\n\n**1.Standard-默认模式**\n\n默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。\n<!-- more -->\n**2.SingleTop-栈顶复用模式** \n\n可以有多个实例，但是不允许多个相同Activity叠加。三种情况：\n> 1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法\n> \n> 2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例\n> \n> 3.当前栈中不存在该Activity的实例时，其行为同standard启动模式\n\n\n>应用场景:\n>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。\n\n\n**3.SingleTask-栈内复用模式**\n\n只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。\n\n如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。\n\n>应用场景:\n>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。\n\n**4.SingleInstance-全局唯一模式**\n\n只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。\n\n>应用场景:\n>\n>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。\n\n\n### Note：Activity的标签属性（taskAffinity)\ntaskAffinity属性\n>   每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：\n```xml\nactivity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/>\n```","source":"_posts/tech-android-act-start-mode.md","raw":"---\nlayout: post\ntitle: \"【Android基础】Activity的启动模式\"\ndate: 3/25/2017 12:02:11 PM \ncomments: true\ntags: \n\t- 技术\n\t- Android \n---\n---\n 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。\n> 四种启动模式分别为：\n> \n- standard\n- singleTop\n- singleTask\n- singleInstance\n \n   \n>启动模式配置\n```xml\n<activity android:name=\".Activity\" android:launchMode=\"启动模式\">\n```\n\n# Activity的四种启动模式\n\n----------\n\n**1.Standard-默认模式**\n\n默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。\n<!-- more -->\n**2.SingleTop-栈顶复用模式** \n\n可以有多个实例，但是不允许多个相同Activity叠加。三种情况：\n> 1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法\n> \n> 2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例\n> \n> 3.当前栈中不存在该Activity的实例时，其行为同standard启动模式\n\n\n>应用场景:\n>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。\n\n\n**3.SingleTask-栈内复用模式**\n\n只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。\n\n如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。\n\n>应用场景:\n>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。\n\n**4.SingleInstance-全局唯一模式**\n\n只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。\n\n>应用场景:\n>\n>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。\n\n\n### Note：Activity的标签属性（taskAffinity)\ntaskAffinity属性\n>   每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：\n```xml\nactivity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/>\n```","slug":"tech-android-act-start-mode","published":1,"updated":"2017-03-25T10:18:12.249Z","photos":[],"link":"","_id":"cj17u5yrz0004yolklhqjx5g7","content":"<hr>\n<p> 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。</p>\n<blockquote>\n<p>四种启动模式分别为：</p>\n<ul>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ul>\n<p>启动模式配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".Activity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"启动模式\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><hr>\n<p><strong>1.Standard-默认模式</strong></p>\n<p>默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。<br><a id=\"more\"></a><br><strong>2.SingleTop-栈顶复用模式</strong> </p>\n<p>可以有多个实例，但是不允许多个相同Activity叠加。三种情况：</p>\n<blockquote>\n<p>1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法</p>\n<p>2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例</p>\n<p>3.当前栈中不存在该Activity的实例时，其行为同standard启动模式</p>\n<p>应用场景:<br>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。</p>\n</blockquote>\n<p><strong>3.SingleTask-栈内复用模式</strong></p>\n<p>只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。</p>\n<p>如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。</p>\n<blockquote>\n<p>应用场景:<br>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p>\n</blockquote>\n<p><strong>4.SingleInstance-全局唯一模式</strong></p>\n<p>只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。</p>\n<blockquote>\n<p>应用场景:</p>\n<p>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。</p>\n</blockquote>\n<h3 id=\"Note：Activity的标签属性（taskAffinity\"><a href=\"#Note：Activity的标签属性（taskAffinity\" class=\"headerlink\" title=\"Note：Activity的标签属性（taskAffinity)\"></a>Note：Activity的标签属性（taskAffinity)</h3><p>taskAffinity属性</p>\n<blockquote>\n<p>  每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">activity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<hr>\n<p> 在Android中，当我们多次启动同一个Activity时，系统会创建多个实例，并把它们按照先进后出的原则一一放入任务栈中，当我们按back键时，就会有一个activity从任务栈顶移除，重复下去，直到任务栈为空，系统就会回收这个任务栈。但是这样以来，系统多次启动同一个Activity时就会重复创建多个实例，这种做法显然不合理，为了能够优化这个问题，Android提供四种启动模式来修改系统这一默认行为。</p>\n<blockquote>\n<p>四种启动模式分别为：</p>\n<ul>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ul>\n<p>启动模式配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".Activity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"启动模式\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"Activity的四种启动模式\"><a href=\"#Activity的四种启动模式\" class=\"headerlink\" title=\"Activity的四种启动模式\"></a>Activity的四种启动模式</h1><hr>\n<p><strong>1.Standard-默认模式</strong></p>\n<p>默认模式，可以不用写配置。在这个模式下，都会默认创建一个新的实例。因此，在这种模式下，可以有多个相同的实例，也允许多个相同Activity叠加。<br>","more":"<br><strong>2.SingleTop-栈顶复用模式</strong> </p>\n<p>可以有多个实例，但是不允许多个相同Activity叠加。三种情况：</p>\n<blockquote>\n<p>1.如果当前栈中已有该Activity的实例并且该实例位于栈顶时，不会新建实例，而是复用栈顶的实例，并且会将Intent对象传入，回调onNewIntent方法</p>\n<p>2.当前栈中已有该Activity的实例但是该实例不在栈顶时，其行为和standard启动模式一样，依然会创建一个新的实例</p>\n<p>3.当前栈中不存在该Activity的实例时，其行为同standard启动模式</p>\n<p>应用场景:<br>适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。</p>\n</blockquote>\n<p><strong>3.SingleTask-栈内复用模式</strong></p>\n<p>只有一个实例。在同一个应用程序中启动他的时候，若Activity不存在，则会在当前task创建一个新的实例，若存在，则会把task中在其之上的其它Activity destory掉并调用它的onNewIntent方法。</p>\n<p>如果是在别的应用程序中启动它，则会新建一个task，并在该task中启动这个Activity，singleTask允许别的Activity与其在一个task中共存，也就是说，如果我在这个singleTask的实例中再打开新的Activity，这个新的Activity还是会在singleTask的实例的task中。</p>\n<blockquote>\n<p>应用场景:<br>适合作为程序入口点。例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p>\n</blockquote>\n<p><strong>4.SingleInstance-全局唯一模式</strong></p>\n<p>只有一个实例，并且这个实例独立运行在一个task中，这个task只有这个实例，不允许有别的Activity存在。</p>\n<blockquote>\n<p>应用场景:</p>\n<p>适合需要与程序分离开的页面。例如闹铃提醒，将闹铃提醒与闹铃设置分离。</p>\n</blockquote>\n<h3 id=\"Note：Activity的标签属性（taskAffinity\"><a href=\"#Note：Activity的标签属性（taskAffinity\" class=\"headerlink\" title=\"Note：Activity的标签属性（taskAffinity)\"></a>Note：Activity的标签属性（taskAffinity)</h3><p>taskAffinity属性</p>\n<blockquote>\n<p>  每个Activity都有taskAffinity属性，这个属性指出了它希望进入的任务栈。如果一个Activity没有显式的指明该 Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果 Application也没有指明，那么该taskAffinity的值就等于包名。而任务栈也有自己的affinity属性，它的值等于它的根 Activity的taskAffinity的值。taskAffinity代码配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">activity android:name=\".Activity\" android:launchMode=\"启动模式\" android:taskAffinity=\"任务栈名（如：包名）\"/&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"layout":"post","title":"常见技术学习网址","date":"2017-03-17T13:59:30.000Z","comments":1,"_content":"---\n|      |  |    |      |  |    |\n| :---: | :---: | :---: | :---: | :---: | :---: |\n| [Markdown学习](https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html)  | [Markdown语法学习](http://www.jianshu.com/p/0b257de21eb5)  |[RxJava学习](http://gank.io/post/560e15be2dca930e00da1083)|[Android组件化](http://www.jianshu.com/p/2af3795957a8)     | [Airbnb的Lottie动画开源框架](http://www.jianshu.com/p/9a2136ecbc7b)   | [Lottie官网](http://www.lottiefiles.com/?page=2)  |\n| [MaterialDesign安卓开源库](https://github.com/lightSky/Awesome-MaterialDesign) | [常用框架源码解析](http://a.codekk.com/)   |   |","source":"_posts/tech_study_website.md","raw":"---\nlayout: post\ntitle: \"常见技术学习网址\"\ndate: 3/17/2017 9:59:30 PM \ncomments: true\ntags: \n\t- 技术 \n---\n---\n|      |  |    |      |  |    |\n| :---: | :---: | :---: | :---: | :---: | :---: |\n| [Markdown学习](https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html)  | [Markdown语法学习](http://www.jianshu.com/p/0b257de21eb5)  |[RxJava学习](http://gank.io/post/560e15be2dca930e00da1083)|[Android组件化](http://www.jianshu.com/p/2af3795957a8)     | [Airbnb的Lottie动画开源框架](http://www.jianshu.com/p/9a2136ecbc7b)   | [Lottie官网](http://www.lottiefiles.com/?page=2)  |\n| [MaterialDesign安卓开源库](https://github.com/lightSky/Awesome-MaterialDesign) | [常用框架源码解析](http://a.codekk.com/)   |   |","slug":"tech_study_website","published":1,"updated":"2017-03-30T06:18:46.433Z","photos":[],"link":"","_id":"cj17u5ysb000dyolkz69scpju","content":"<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html\" target=\"_blank\" rel=\"external\">Markdown学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/0b257de21eb5\" target=\"_blank\" rel=\"external\">Markdown语法学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">RxJava学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/2af3795957a8\" target=\"_blank\" rel=\"external\">Android组件化</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/9a2136ecbc7b\" target=\"_blank\" rel=\"external\">Airbnb的Lottie动画开源框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.lottiefiles.com/?page=2\" target=\"_blank\" rel=\"external\">Lottie官网</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\" target=\"_blank\" rel=\"external\">MaterialDesign安卓开源库</a></td>\n<td style=\"text-align:center\"><a href=\"http://a.codekk.com/\" target=\"_blank\" rel=\"external\">常用框架源码解析</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/2.html\">Markdown学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/0b257de21eb5\">Markdown语法学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://gank.io/post/560e15be2dca930e00da1083\">RxJava学习</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/2af3795957a8\">Android组件化</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jianshu.com/p/9a2136ecbc7b\">Airbnb的Lottie动画开源框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.lottiefiles.com/?page=2\">Lottie官网</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\">MaterialDesign安卓开源库</a></td>\n<td style=\"text-align:center\"><a href=\"http://a.codekk.com/\">常用框架源码解析</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"post","title":"船 白桦","date":"2017-03-16T13:50:37.000Z","comments":1,"_content":"---\n我有过多次这样的奇遇\n从天堂到地狱只在瞬息之间\n每一朵可爱、温柔的浪花\n都成了突然崛起、随即倾倒的高山\n \n每一滴海水都变脸变色\n刚刚还是那样美丽、蔚蓝\n旋涡纠缠着旋涡\n我被抛向高空又投进深渊……\n\n当时我甚至想到过轻生\n眼前一片苦海无边；\n放弃了希望就象放弃了舵柄，\n在暴力之下只能沉默和哀叹。\n<!-- more -->\n\n今天我才有资格嘲笑昨天的自己，\n为昨天落叶似的惶恐感到羞惭；\n虚度了多少年华，\n船身多次被礁石撞穿……\n \n千万次在大洋里撒网，\n才捕获到一点点生活的经验，\n才恍然大悟，\n啊！道理原是如此浅显：\n\n你要航行吗？\n必然会有千妖百怪出来阻拦；\n暴虐的欺凌是它们的游戏，\n制造灭亡是它们唯一的才干。\n \n命中注定我要常常和它们相逢，\n因为我的名字叫做船；\n面对强大于自身千万倍的对手，\n能援救自己的只有清醒和勇敢。\n \n恐惧只能使自己盲目，\n盲目只能夸大魔鬼的狰狞嘴脸；\n也许我的样子比它们更可怕，\n当我以生命相拼，一往无前！\n\n只要我还有一根完整的龙骨，\n绝不驶进避风的港湾；\n把生命放在征途上，\n让勇敢来决定道路的宽窄、长短。\n \n我完完全全的自由了，\n船头成为埋葬它们的铁铲；\n我在波浪中有节奏地跳跃，\n就象荡着一个巨大的秋千。\n\n即使它们终于把我撕碎，\n变成一些残破的木片；\n我不会沉沦，决不！\n我还会在浪尖上飞旋。\n \n后来者还会在残片上认出我，\n未来的诗人会喟然长叹：\n“这里有一个幸福的灵魂，\n它曾经是一艘前进着的航船……”\n\n","source":"_posts/think_ship_poem.md","raw":"---\nlayout: post\ntitle: \"船 白桦\"\ndate: 3/16/2017 9:50:37 PM \ncomments: true\ntags: \n\t- 随想 \n---\n---\n我有过多次这样的奇遇\n从天堂到地狱只在瞬息之间\n每一朵可爱、温柔的浪花\n都成了突然崛起、随即倾倒的高山\n \n每一滴海水都变脸变色\n刚刚还是那样美丽、蔚蓝\n旋涡纠缠着旋涡\n我被抛向高空又投进深渊……\n\n当时我甚至想到过轻生\n眼前一片苦海无边；\n放弃了希望就象放弃了舵柄，\n在暴力之下只能沉默和哀叹。\n<!-- more -->\n\n今天我才有资格嘲笑昨天的自己，\n为昨天落叶似的惶恐感到羞惭；\n虚度了多少年华，\n船身多次被礁石撞穿……\n \n千万次在大洋里撒网，\n才捕获到一点点生活的经验，\n才恍然大悟，\n啊！道理原是如此浅显：\n\n你要航行吗？\n必然会有千妖百怪出来阻拦；\n暴虐的欺凌是它们的游戏，\n制造灭亡是它们唯一的才干。\n \n命中注定我要常常和它们相逢，\n因为我的名字叫做船；\n面对强大于自身千万倍的对手，\n能援救自己的只有清醒和勇敢。\n \n恐惧只能使自己盲目，\n盲目只能夸大魔鬼的狰狞嘴脸；\n也许我的样子比它们更可怕，\n当我以生命相拼，一往无前！\n\n只要我还有一根完整的龙骨，\n绝不驶进避风的港湾；\n把生命放在征途上，\n让勇敢来决定道路的宽窄、长短。\n \n我完完全全的自由了，\n船头成为埋葬它们的铁铲；\n我在波浪中有节奏地跳跃，\n就象荡着一个巨大的秋千。\n\n即使它们终于把我撕碎，\n变成一些残破的木片；\n我不会沉沦，决不！\n我还会在浪尖上飞旋。\n \n后来者还会在残片上认出我，\n未来的诗人会喟然长叹：\n“这里有一个幸福的灵魂，\n它曾经是一艘前进着的航船……”\n\n","slug":"think_ship_poem","published":1,"updated":"2017-03-17T13:56:24.691Z","photos":[],"link":"","_id":"cj17u5yst000fyolktjwdw46z","content":"<hr>\n<p>我有过多次这样的奇遇<br>从天堂到地狱只在瞬息之间<br>每一朵可爱、温柔的浪花<br>都成了突然崛起、随即倾倒的高山</p>\n<p>每一滴海水都变脸变色<br>刚刚还是那样美丽、蔚蓝<br>旋涡纠缠着旋涡<br>我被抛向高空又投进深渊……</p>\n<p>当时我甚至想到过轻生<br>眼前一片苦海无边；<br>放弃了希望就象放弃了舵柄，<br>在暴力之下只能沉默和哀叹。<br><a id=\"more\"></a></p>\n<p>今天我才有资格嘲笑昨天的自己，<br>为昨天落叶似的惶恐感到羞惭；<br>虚度了多少年华，<br>船身多次被礁石撞穿……</p>\n<p>千万次在大洋里撒网，<br>才捕获到一点点生活的经验，<br>才恍然大悟，<br>啊！道理原是如此浅显：</p>\n<p>你要航行吗？<br>必然会有千妖百怪出来阻拦；<br>暴虐的欺凌是它们的游戏，<br>制造灭亡是它们唯一的才干。</p>\n<p>命中注定我要常常和它们相逢，<br>因为我的名字叫做船；<br>面对强大于自身千万倍的对手，<br>能援救自己的只有清醒和勇敢。</p>\n<p>恐惧只能使自己盲目，<br>盲目只能夸大魔鬼的狰狞嘴脸；<br>也许我的样子比它们更可怕，<br>当我以生命相拼，一往无前！</p>\n<p>只要我还有一根完整的龙骨，<br>绝不驶进避风的港湾；<br>把生命放在征途上，<br>让勇敢来决定道路的宽窄、长短。</p>\n<p>我完完全全的自由了，<br>船头成为埋葬它们的铁铲；<br>我在波浪中有节奏地跳跃，<br>就象荡着一个巨大的秋千。</p>\n<p>即使它们终于把我撕碎，<br>变成一些残破的木片；<br>我不会沉沦，决不！<br>我还会在浪尖上飞旋。</p>\n<p>后来者还会在残片上认出我，<br>未来的诗人会喟然长叹：<br>“这里有一个幸福的灵魂，<br>它曾经是一艘前进着的航船……”</p>\n","excerpt":"<hr>\n<p>我有过多次这样的奇遇<br>从天堂到地狱只在瞬息之间<br>每一朵可爱、温柔的浪花<br>都成了突然崛起、随即倾倒的高山</p>\n<p>每一滴海水都变脸变色<br>刚刚还是那样美丽、蔚蓝<br>旋涡纠缠着旋涡<br>我被抛向高空又投进深渊……</p>\n<p>当时我甚至想到过轻生<br>眼前一片苦海无边；<br>放弃了希望就象放弃了舵柄，<br>在暴力之下只能沉默和哀叹。<br>","more":"</p>\n<p>今天我才有资格嘲笑昨天的自己，<br>为昨天落叶似的惶恐感到羞惭；<br>虚度了多少年华，<br>船身多次被礁石撞穿……</p>\n<p>千万次在大洋里撒网，<br>才捕获到一点点生活的经验，<br>才恍然大悟，<br>啊！道理原是如此浅显：</p>\n<p>你要航行吗？<br>必然会有千妖百怪出来阻拦；<br>暴虐的欺凌是它们的游戏，<br>制造灭亡是它们唯一的才干。</p>\n<p>命中注定我要常常和它们相逢，<br>因为我的名字叫做船；<br>面对强大于自身千万倍的对手，<br>能援救自己的只有清醒和勇敢。</p>\n<p>恐惧只能使自己盲目，<br>盲目只能夸大魔鬼的狰狞嘴脸；<br>也许我的样子比它们更可怕，<br>当我以生命相拼，一往无前！</p>\n<p>只要我还有一根完整的龙骨，<br>绝不驶进避风的港湾；<br>把生命放在征途上，<br>让勇敢来决定道路的宽窄、长短。</p>\n<p>我完完全全的自由了，<br>船头成为埋葬它们的铁铲；<br>我在波浪中有节奏地跳跃，<br>就象荡着一个巨大的秋千。</p>\n<p>即使它们终于把我撕碎，<br>变成一些残破的木片；<br>我不会沉沦，决不！<br>我还会在浪尖上飞旋。</p>\n<p>后来者还会在残片上认出我，<br>未来的诗人会喟然长叹：<br>“这里有一个幸福的灵魂，<br>它曾经是一艘前进着的航船……”</p>"},{"layout":"post","title":"[韩国*济州岛]旅行摄影","date":"2017-03-16T13:45:45.000Z","comments":1,"_content":"---\n# 海中的孤岛 #\n![](http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBN3dmYUVXT2NyNXdpV2NleHhQeFNkWkwyTE4xVlF1MHB3PT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n在我们心中，都有属于我们自己的一座孤岛。\n<!-- more -->\n\n# 城山日出峰 #\n![](http://imglf.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBOVdCY09zSXNiTmVPTlRub05sUHNnZU5qQXZ0c2s5cy9BPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n\n# 城山日出峰 #\n![](http://imglf0.nosdn.127.net/img/MUgydEdvOEdHeHVvelcvQVV0d09xcHpaZmczQ1hNQ0dNbkIvTmpsK3F1RDdzTzJYZmRVdk9RPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n\n# 济州美景 #\n![](http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHVhVk1sZEllRGhUdTZwSTlsSWlMa0lFYjVvSWQ3aTlGVXZOb1c4ZjZQeHJnPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)","source":"_posts/travel_korea_jeju.md","raw":"---\nlayout: post\ntitle: \"[韩国*济州岛]旅行摄影\"\ndate: 3/16/2017 9:45:45 PM \ncomments: true\ntags: \n\t- 摄影 \n\t- 旅行\n---\n---\n# 海中的孤岛 #\n![](http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBN3dmYUVXT2NyNXdpV2NleHhQeFNkWkwyTE4xVlF1MHB3PT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n在我们心中，都有属于我们自己的一座孤岛。\n<!-- more -->\n\n# 城山日出峰 #\n![](http://imglf.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBOVdCY09zSXNiTmVPTlRub05sUHNnZU5qQXZ0c2s5cy9BPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n\n# 城山日出峰 #\n![](http://imglf0.nosdn.127.net/img/MUgydEdvOEdHeHVvelcvQVV0d09xcHpaZmczQ1hNQ0dNbkIvTmpsK3F1RDdzTzJYZmRVdk9RPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)\n\n# 济州美景 #\n![](http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHVhVk1sZEllRGhUdTZwSTlsSWlMa0lFYjVvSWQ3aTlGVXZOb1c4ZjZQeHJnPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg)","slug":"travel_korea_jeju","published":1,"updated":"2017-03-17T13:55:21.435Z","photos":[],"link":"","_id":"cj17u5ysu000gyolkfdfhazlu","content":"<hr>\n<h1 id=\"海中的孤岛\"><a href=\"#海中的孤岛\" class=\"headerlink\" title=\"海中的孤岛\"></a>海中的孤岛</h1><p><img src=\"http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBN3dmYUVXT2NyNXdpV2NleHhQeFNkWkwyTE4xVlF1MHB3PT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"><br>在我们心中，都有属于我们自己的一座孤岛。<br><a id=\"more\"></a></p>\n<h1 id=\"城山日出峰\"><a href=\"#城山日出峰\" class=\"headerlink\" title=\"城山日出峰\"></a>城山日出峰</h1><p><img src=\"http://imglf.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBOVdCY09zSXNiTmVPTlRub05sUHNnZU5qQXZ0c2s5cy9BPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>\n<h1 id=\"城山日出峰-1\"><a href=\"#城山日出峰-1\" class=\"headerlink\" title=\"城山日出峰\"></a>城山日出峰</h1><p><img src=\"http://imglf0.nosdn.127.net/img/MUgydEdvOEdHeHVvelcvQVV0d09xcHpaZmczQ1hNQ0dNbkIvTmpsK3F1RDdzTzJYZmRVdk9RPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>\n<h1 id=\"济州美景\"><a href=\"#济州美景\" class=\"headerlink\" title=\"济州美景\"></a>济州美景</h1><p><img src=\"http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHVhVk1sZEllRGhUdTZwSTlsSWlMa0lFYjVvSWQ3aTlGVXZOb1c4ZjZQeHJnPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>\n","excerpt":"<hr>\n<h1 id=\"海中的孤岛\"><a href=\"#海中的孤岛\" class=\"headerlink\" title=\"海中的孤岛\"></a>海中的孤岛</h1><p><img src=\"http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBN3dmYUVXT2NyNXdpV2NleHhQeFNkWkwyTE4xVlF1MHB3PT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"><br>在我们心中，都有属于我们自己的一座孤岛。<br>","more":"</p>\n<h1 id=\"城山日出峰\"><a href=\"#城山日出峰\" class=\"headerlink\" title=\"城山日出峰\"></a>城山日出峰</h1><p><img src=\"http://imglf.nosdn.127.net/img/MUgydEdvOEdHeHZ4NjYwRjB5NDZBOVdCY09zSXNiTmVPTlRub05sUHNnZU5qQXZ0c2s5cy9BPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>\n<h1 id=\"城山日出峰-1\"><a href=\"#城山日出峰-1\" class=\"headerlink\" title=\"城山日出峰\"></a>城山日出峰</h1><p><img src=\"http://imglf0.nosdn.127.net/img/MUgydEdvOEdHeHVvelcvQVV0d09xcHpaZmczQ1hNQ0dNbkIvTmpsK3F1RDdzTzJYZmRVdk9RPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>\n<h1 id=\"济州美景\"><a href=\"#济州美景\" class=\"headerlink\" title=\"济州美景\"></a>济州美景</h1><p><img src=\"http://imglf2.nosdn.127.net/img/MUgydEdvOEdHeHVhVk1sZEllRGhUdTZwSTlsSWlMa0lFYjVvSWQ3aTlGVXZOb1c4ZjZQeHJnPT0.jpg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg\" alt=\"\"></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj17u5yrp0000yolkc24p2yde","tag_id":"cj17u5yru0001yolk1dlxm09u","_id":"cj17u5yrx0002yolkpyw4ftew"},{"post_id":"cj17u5yry0003yolkqxlp5y3n","tag_id":"cj17u5yru0001yolk1dlxm09u","_id":"cj17u5ys40008yolkzrj2yrkv"},{"post_id":"cj17u5yry0003yolkqxlp5y3n","tag_id":"cj17u5ys00005yolkkmr6clbn","_id":"cj17u5ys40009yolkbmazhh10"},{"post_id":"cj17u5yry0003yolkqxlp5y3n","tag_id":"cj17u5ys10006yolk6hl9kvo4","_id":"cj17u5ys4000ayolkphwv1z68"},{"post_id":"cj17u5yrz0004yolklhqjx5g7","tag_id":"cj17u5yru0001yolk1dlxm09u","_id":"cj17u5ys4000byolkz3nb4tmk"},{"post_id":"cj17u5yrz0004yolklhqjx5g7","tag_id":"cj17u5ys30007yolkyqfwrnli","_id":"cj17u5ys5000cyolks0nnzbpg"},{"post_id":"cj17u5ysb000dyolkz69scpju","tag_id":"cj17u5yru0001yolk1dlxm09u","_id":"cj17u5yse000eyolkp5zs113q"},{"post_id":"cj17u5yst000fyolktjwdw46z","tag_id":"cj17u5ysw000hyolkdu806cr0","_id":"cj17u5ysy000jyolkqn061u0x"},{"post_id":"cj17u5ysu000gyolkfdfhazlu","tag_id":"cj17u5ysx000iyolkxzm8se52","_id":"cj17u5yt0000lyolk8piw28e0"},{"post_id":"cj17u5ysu000gyolkfdfhazlu","tag_id":"cj17u5ysz000kyolkw2t1xz3b","_id":"cj17u5yt0000myolkwhmzydsy"}],"Tag":[{"name":"技术","_id":"cj17u5yru0001yolk1dlxm09u"},{"name":"Rxjava","_id":"cj17u5ys00005yolkkmr6clbn"},{"name":"Rxandroid","_id":"cj17u5ys10006yolk6hl9kvo4"},{"name":"Android","_id":"cj17u5ys30007yolkyqfwrnli"},{"name":"随想","_id":"cj17u5ysw000hyolkdu806cr0"},{"name":"摄影","_id":"cj17u5ysx000iyolkxzm8se52"},{"name":"旅行","_id":"cj17u5ysz000kyolkw2t1xz3b"}]}}